# MBPP/241
### Completion
def array_3d(x, y, z):
    return [[['*' for _ in range(y)] for _ in range(x)] for _ in range(z)]

# Test the function with the provided assertion
assert array_3d(6, 4, 3) == [[['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*']], 
                               [['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*']], 
                               [['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*'], 
                                ['*', '*', '*', '*', '*', '*']]]

print("Function works correctly!")
### Test


METADATA = {
    'author': 'mbpp',
    'dataset': 'mbpp'
}

def check(candidate):
    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
    assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]
    assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]
