{"date": "2025-09-15 17:53", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is non-prime.\n    \n    A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n    Non-prime numbers are either less than 2 or can be divided by numbers other than 1 and themselves.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is non-prime, False if it is prime.\n    \"\"\"\n    if n < 2:\n        return True  # Numbers less than 2 are non-prime\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True  # Found a divisor, hence n is non-prime\n    return False  # No divisors found, hence n is prime", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements between two lists.\n\n    Parameters:\n    list1 (iterable): The first list of elements.\n    list2 (iterable): The second list of elements.\n\n    Returns:\n    set: A set containing the shared elements from both lists.\n    \"\"\"\n    # Convert both lists to sets and find the intersection\n    return set(list1) & set(list2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at exactly one bit position.\n\n    Args:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position, False otherwise.\n    \"\"\"\n    # Perform XOR operation to find differing bits\n    xor_result = num1 ^ num2\n    \n    # Check if xor_result is a power of two\n    # A number is a power of two if it has exactly one bit set\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers and return them in descending order.\n\n    Parameters:\n    numbers (list): A list of integers from which to find the largest numbers.\n    n (int): The number of largest integers to return.\n\n    Returns:\n    list: A list of the n largest integers in descending order.\n    \"\"\"\n    # Use heapq to find the n largest elements\n    largest_numbers = heapq.nlargest(n, numbers)\n    # Return the largest numbers sorted in descending order\n    return sorted(largest_numbers, reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(input_string):\n    \"\"\"\n    This function takes a string as input and returns a set of words\n    that are at least 4 characters long.\n\n    Parameters:\n    input_string (str): The input string from which to find long words.\n\n    Returns:\n    set: A set of words that are at least 4 characters long.\n    \"\"\"\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Use a set comprehension to filter words with length >= 4\n    long_words = {word for word in words if len(word) >= 4}\n    \n    return long_words", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing\n    the squares of each number.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list containing the squares of the input integers.\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_rotations(s: str) -> int:\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) <= 1:\n        return 0  # No rotations needed for empty or single character strings\n\n    # Create a doubled version of the string\n    doubled_s = s + s\n    \n    # Find the first occurrence of the original string in the doubled string\n    index = doubled_s.find(s, 1)  # Start searching from index 1 to avoid the trivial match at index 0\n\n    # If the string is found, return the index as the number of rotations\n    if index != -1:\n        return index\n    else:\n        return len(s)  # If not found, it means we need a full rotation\n\n# Test the function with the provided assertion\nassert find_rotations(\"aaaa\") == 1\n\n# You can add more test cases to validate the function\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(s: str, char: str) -> str:\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): The input string from which to remove characters.\n    char (str): The character to remove from the string.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n\n    # If the character is not found or only one occurrence exists, return the original string\n    if first_index == -1 or first_index == last_index:\n        return s\n\n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index + 1:]\n    # Adjust the last index after the first removal\n    last_index -= 1  # Adjust for the removed character\n\n    # Remove the last occurrence\n    s = s[:last_index] + s[last_index + 1:]\n\n    return s", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["a", "a"]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list (matrix) where each inner list represents a row.\n\n    Returns:\n    list of list of int: The sorted matrix based on the sum of its rows.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base: float, height: float, length: float) -> float:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The height of the triangle.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    base_area = 0.5 * base * height\n    \n    # Calculate the volume of the prism\n    volume = base_area * length\n    \n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if the string contains valid sequences, False otherwise.\n    \"\"\"\n    # Split the string by underscores\n    parts = s.split('_')\n    \n    # Check if all parts are non-empty and consist only of lowercase letters\n    return all(part.isalpha() and part.islower() for part in parts)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    \"\"\"\n    Remove characters from the first string (s1) that are present in the second string (s2).\n    \n    Parameters:\n    s1 (str): The original string from which characters will be removed.\n    s2 (str): The string containing characters to be removed from s1.\n    \n    Returns:\n    str: A new string with the characters from s2 removed from s1.\n    \"\"\"\n    # Create a set of characters to remove for efficient lookup\n    chars_to_remove = set(s2)\n    \n    # Use a list comprehension to build the new string\n    result = ''.join([char for char in s1 if char not in chars_to_remove])\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if there are any duplicate elements in the given array.\n    \n    Parameters:\n    arr (list): A list of integers to check for duplicates.\n    \n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    seen = set()  # Create a set to store seen elements\n    for num in arr:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)  # Add the number to the set\n    return False  # No duplicates found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def reverse_number(n):\n    \"\"\"Return the reverse of the given number.\"\"\"\n    return int(str(n)[::-1])\ndef check(n):\n    \"\"\"\n    Check if the given number is one less than twice its reverse.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n    \n    A Woodall number is defined as n * 2^n - 1 for non-negative integers n.\n    \n    Parameters:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if num is a Woodall number, False otherwise.\n    \"\"\"\n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits and returns the largest number\n    that can be formed by rearranging those digits.\n\n    :param digits: List of integers (digits)\n    :return: Integer representing the largest number formed\n    \"\"\"\n    # Convert each digit to a string for sorting\n    str_digits = map(str, digits)\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    \n    # Join the sorted digits and convert back to an integer\n    largest_number = int(''.join(sorted_digits))\n    \n    return largest_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a < 0) != (b < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number using the formula:\n    O(n) = n(3n - 2)\n\n    Parameters:\n    n (int): The position of the octagonal number to calculate.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s: str) -> int:\n    \"\"\"\n    Count the number of substrings where the sum of digits equals the length of the substring.\n\n    Parameters:\n    s (str): The input string consisting of digits.\n\n    Returns:\n    int: The count of valid substrings.\n    \"\"\"\n    count = 0\n    n = len(s)\n\n    # Iterate over all possible starting points for substrings\n    for start in range(n):\n        sum_digits = 0\n        \n        # Iterate over all possible ending points for substrings\n        for end in range(start, n):\n            # Convert the current character to an integer and add to sum_digits\n            sum_digits += int(s[end])\n            # Calculate the length of the current substring\n            length = end - start + 1\n            \n            # Check if the sum of digits equals the length of the substring\n            if sum_digits == length:\n                count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Function to find the smallest number in a list.\n    \n    Parameters:\n    numbers (list): A list of numerical values.\n    \n    Returns:\n    int/float: The smallest number in the list.\n    \n    Raises:\n    ValueError: If the list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Initialize the smallest number with the first element of the list\n    smallest = numbers[0]\n    \n    # Iterate through the list to find the smallest number\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n            \n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    \"\"\"\n    Calculate the maximum difference between pairs in a list of tuples.\n\n    Args:\n    pairs (list of tuple): A list where each element is a tuple containing two integers.\n\n    Returns:\n    int: The maximum difference found between the pairs.\n    \"\"\"\n    # Initialize the maximum difference to a very small number\n    max_diff = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in pairs:\n        # Calculate the difference for the current pair\n        diff = abs(a - b)\n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Parameters:\n    marks (list of tuple): A list where each tuple contains a subject and its corresponding mark.\n\n    Returns:\n    list of tuple: A sorted list of tuples based on the marks in ascending order.\n    \"\"\"\n    # Sort the list of tuples using the second element of each tuple\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(nested_list):\n    \"\"\"\n    Flattens a nested list and sums all of its elements.\n\n    Args:\n    nested_list (list): A list that may contain integers or other lists.\n\n    Returns:\n    int: The sum of all integers in the flattened list.\n    \"\"\"\n    total = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function for nested lists\n            total += recursive_list_sum(element)\n        else:\n            # Add the integer to the total\n            total += element\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The count of positive integers in the list.\n    \"\"\"\n    # Using a generator expression to count positive numbers\n    return sum(1 for num in numbers if num > 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number using dynamic programming.\n    \n    The Bell number B(n) is the number of ways to partition a set of n elements.\n    \n    Parameters:\n    n (int): The index of the Bell number to compute.\n    \n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    # Create a 2D list to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: B(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly set the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is in bell[n][0]\n    return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(array):\n    \"\"\"\n    Check if the given array is monotonic.\n    \n    An array is monotonic if it is either entirely non-increasing or \n    entirely non-decreasing.\n    \n    Parameters:\n    array (list): A list of integers to check.\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if not array:  # An empty array is considered monotonic\n        return True\n\n    increasing = decreasing = True  # Assume both conditions are true initially\n\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False  # Found an increase, not decreasing\n        elif array[i] < array[i - 1]:\n            increasing = False  # Found a decrease, not increasing\n\n    return increasing or decreasing  # Return True if either condition holds", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is contained within main_list.\n\n    Parameters:\n    main_list (list): The list in which to search for the sublist.\n    sub_list (list): The sublist to search for.\n\n    Returns:\n    bool: True if sub_list is found in main_list, False otherwise.\n    \"\"\"\n    # Convert both lists to strings for easier comparison\n    main_str = str(main_list)\n    sub_str = str(sub_list)\n\n    # Check if the string representation of sub_list is in that of main_list\n    return sub_str in main_str", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 4, 3, 5, 7], [4, 3]]], "plus_fail_tests": [[["r"], []]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in the given list have the same length.\n\n    Parameters:\n    tuples (list of tuple): A list containing tuples to be checked.\n\n    Returns:\n    bool: True if all tuples have the same length, False otherwise.\n    \"\"\"\n    if not tuples:  # Check if the list is empty\n        return True  # An empty list is considered to have equal lengths\n\n    # Get the length of the first tuple\n    first_length = len(tuples[0])\n\n    # Check if all tuples have the same length as the first one\n    for tup in tuples:\n        if len(tup) != first_length:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    \"\"\"\n    Sorts a list using the Comb Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    # Initialize the gap and the sorted flag\n    gap = len(arr)\n    shrink = 1.3  # Shrink factor\n    sorted_flag = False\n\n    while not sorted_flag:\n        # Update the gap for the next comb\n        gap = max(1, int(gap / shrink))\n        sorted_flag = True\n\n        # Compare elements at the current gap\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                # Swap if elements are in the wrong order\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted_flag = False\n\n    return arr", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check if the given number n can be represented as the difference of two squares.\n    \n    A number can be expressed as the difference of two squares if:\n    - n is odd, or\n    - n is a multiple of 4.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be expressed as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if n is odd or a multiple of 4\n    return n % 2 != 0 or n % 4 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, values):\n    \"\"\"\n    Check if the patterns in the first list correspond to the values in the second list.\n\n    Args:\n    patterns (list): A list of strings representing the patterns.\n    values (list): A list of strings representing the values.\n\n    Returns:\n    bool: True if the patterns correspond to the values, False otherwise.\n    \"\"\"\n    if len(patterns) != len(values):\n        return False\n\n    pattern_to_value = {}\n    value_to_pattern = {}\n\n    for pattern, value in zip(patterns, values):\n        # Check if the pattern is already mapped to a value\n        if pattern in pattern_to_value:\n            if pattern_to_value[pattern] != value:\n                return False\n        else:\n            pattern_to_value[pattern] = value\n\n        # Check if the value is already mapped to a pattern\n        if value in value_to_pattern:\n            if value_to_pattern[value] != pattern:\n                return False\n        else:\n            value_to_pattern[value] = pattern\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples in the given list where all elements are divisible by k.\n\n    Parameters:\n    tuples_list (list of tuples): A list of tuples to check.\n    k (int): The divisor.\n\n    Returns:\n    list of tuples: A list of tuples where all elements are divisible by k.\n    \"\"\"\n    # Use a list comprehension to filter tuples\n    result = [tup for tup in tuples_list if all(element % k == 0 for element in tup)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return number % 11 == 0\n\n# Test the function with the provided assertion\nassert is_divisible_by_11(12345) == False\n\n# Additional test cases\nprint(is_divisible_by_11(11))      # True\nprint(is_divisible_by_11(22))      # True\nprint(is_divisible_by_11(123456))  # False\nprint(is_divisible_by_11(0))       # True\nprint(is_divisible_by_11(-11))     # True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False if it is even.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T_n = n * (n + 1) * (n + 2) / 6\n\n    Parameters:\n    n (int): The index of the tetrahedral number to compute.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Calculate the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position in the sequence to retrieve.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize the sequence with the first two values\n    sequence = [0, 1, 1]  # sequence[0] is unused, sequence[1] = P(1), sequence[2] = P(2)\n\n    # Calculate the sequence up to n\n    for i in range(3, n + 1):\n        # P(n) = P(P(n-1)) + P(n - P(n-1))\n        next_value = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        sequence.append(next_value)\n\n    return sequence[n]\n\n# Test the function with the provided assertion\nassert newman_conway(10) == 6\n\n# If you want to see the output for other values, you can uncomment the following lines:\n# print(newman_conway(1))  # Output: 1\n# print(newman_conway(2))  # Output: 1\n# print(newman_conway(3))  # Output: 2\n# print(newman_conway(4))  # Output: 3\n# print(newman_conway(5))  # Output: 3\n# print(newman_conway(6))  # Output: 4\n# print(newman_conway(7))  # Output: 5\n# print(newman_conway(8))  # Output: 5\n# print(newman_conway(9))  # Output: 6\n# print(newman_conway(10)) # Output: 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # Surface area formula for a sphere: 4 * \u03c0 * r^2\n    return 4 * math.pi * radius ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    The formula for the nth centered hexagonal number is:\n    H(n) = 3n(n - 1) + 1\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to calculate.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    return 3 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    If there are overlapping keys, the value from the last dictionary will be used.\n    \n    Parameters:\n    dict1 (dict): The first dictionary to merge.\n    dict2 (dict): The second dictionary to merge.\n    dict3 (dict): The third dictionary to merge.\n    \n    Returns:\n    dict: A single dictionary containing all key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = {}\n    # Update the merged_dict with the contents of each dictionary\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Calculate the frequency of each element in the list.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \n    Parameters:\n    n (int): The number to find the closest smaller number for.\n    \n    Returns:\n    int: The closest smaller number than n.\n    \"\"\"\n    # The closest smaller number than n is simply n - 1\n    return n - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Function to find the length of the longest word in a list.\n    \n    Parameters:\n    words (list): A list of words (strings).\n    \n    Returns:\n    int: The length of the longest word.\n    \"\"\"\n    if not words:  # Check if the list is empty\n        return 0\n    \n    # Use the built-in max function with the key set to the length of the words\n    longest_length = max(len(word) for word in words)\n    return longest_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    \"\"\"\n    Check if the given substring is present in any of the strings in the list.\n\n    Parameters:\n    string_list (list of str): A list of strings to search through.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any string in the list, False otherwise.\n    \"\"\"\n    # Iterate through each string in the list\n    for string in string_list:\n        # Check if the substring is in the current string\n        if substring in string:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    \"\"\"\n    Check if the given number is undulating.\n    \n    An undulating number is defined as a number where the digits alternate\n    between two different values.\n    \n    Args:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # Check if the number has less than 2 digits\n    if len(num_str) < 2:\n        return False\n    \n    # Initialize the first two digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # If the first two digits are the same, it cannot be undulating\n    if first_digit == second_digit:\n        return False\n    \n    # Iterate through the number and check the undulating condition\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:  # Even index\n            if num_str[i] != first_digit:\n                return False\n        else:  # Odd index\n            if num_str[i] != second_digit:\n                return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent (should be a non-negative integer).\n\n    Returns:\n    int or float: The result of 'a' raised to the power of 'b'.\n    \"\"\"\n    if not isinstance(a, (int, float)):\n        raise ValueError(\"Base 'a' must be an integer or float.\")\n    if not isinstance(b, int) or b < 0:\n        raise ValueError(\"Exponent 'b' must be a non-negative integer.\")\n\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[4, -2]]}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n    \n    Parameters:\n    tuples_list (list of tuples): A list where each tuple contains two elements.\n    \n    Returns:\n    str: The first element of the tuple with the smallest second element.\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the minimum value and corresponding first value\n    min_value = float('inf')\n    result = None\n    \n    for first, second in tuples_list:\n        if second < min_value:\n            min_value = second\n            result = first\n            \n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def find_min_length(lists):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Parameters:\n    lists (list of list): A list containing multiple lists.\n\n    Returns:\n    int: The length of the smallest list.\n    \"\"\"\n    if not lists:\n        return 0  # Return 0 if the input list is empty\n\n    # Use a generator expression to find the minimum length\n    min_length = min(len(lst) for lst in lists)\n    return min_length\n\n# Test the function with the provided assertion\nassert find_min_length([[1], [1, 2]]) == 1\n\n# Additional test cases\nassert find_min_length([[1, 2, 3], [4, 5], [6]]) == 1\nassert find_min_length([[], [1, 2, 3], [4]]) == 0  # Edge case with an empty list\nassert find_min_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 2\nassert find_min_length([[], [], []]) == 0  # All lists are empty\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Function to find the number of divisors of a given integer n.\n    \n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n    \n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # Count the divisor\n            if i != n // i:  # Count the complementary divisor if it's different\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(nested_list):\n    \"\"\"\n    Calculate the frequency of each element in a flattened list of lists.\n\n    Parameters:\n    nested_list (list of list): A list containing sublists of elements.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    frequency = {}\n    \n    # Flatten the list of lists and count frequencies\n    for sublist in nested_list:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n                \n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\nfrom functools import reduce\ndef multiply_num(numbers):\n    \"\"\"\n    Multiplies all the numbers in the input list and divides the result by the length of the list.\n    \n    Parameters:\n    numbers (iterable): A list or tuple of numbers to be multiplied.\n    \n    Returns:\n    float: The product of the numbers divided by the length of the list.\n    \"\"\"\n    # Calculate the product of all numbers\n    product = reduce(lambda x, y: x * y, numbers)\n    \n    # Get the length of the list\n    length = len(numbers)\n    \n    # Return the product divided by the length\n    return product / length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent as a string.\n    \n    Parameters:\n    n (int): The decimal number to convert. Must be a non-negative integer.\n    \n    Returns:\n    str: The binary representation of the decimal number without leading zeros.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Special case for zero\n    if n == 0:\n        return '0'\n    \n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str  # Prepend the remainder (0 or 1)\n        n //= 2  # Divide n by 2\n    \n    return binary_str", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n: int) -> int:\n    \"\"\"\n    Find the next smallest palindrome greater than the given integer n.\n\n    Parameters:\n    n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n    int: The next smallest palindrome greater than n.\n    \"\"\"\n    # Increment n to find the next palindrome\n    n += 1\n    \n    while True:\n        # Convert the number to string to check for palindrome\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array from which to find the kth element.\n    k (int): The 1-based index of the element to find.\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    IndexError: If k is out of bounds of the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds of the array.\")\n    \n    # Return the (k-1)th element for 0-based indexing\n    return arr[k - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The input string in snake case.\n\n    Returns:\n    str: The converted string in camel case.\n    \"\"\"\n    # Split the input string by underscores\n    components = snake_str.split('_')\n    \n    # Capitalize the first letter of each component and join them\n    camel_case_str = ''.join(word.capitalize() for word in components)\n    \n    return camel_case_str", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number A(n, m) using dynamic programming.\n    \n    Parameters:\n    n (int): The number of elements.\n    m (int): The number of descents.\n    \n    Returns:\n    int: The Eulerian number A(n, m).\n    \"\"\"\n    # Create a 2D list to store the Eulerian numbers\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case: A(0, 0) = 1\n    A[0][0] = 1\n    \n    # Fill the table using the recursive relation\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1] if j > 0 else (i - j) * A[i - 1][j]\n    \n    return A[n][m]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lists):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists.\n\n    Parameters:\n    lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n    list of list of str: A new list with each sublist sorted.\n    \"\"\"\n    # Sort each sublist and return the new list of sorted sublists\n    return [sorted(sublist) for sublist in lists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n\n    Parameters:\n    boolean_list (list): A list containing boolean values (True or False).\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    return sum(1 for value in boolean_list if value is True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    \"\"\"\n    Appends the elements of the given list to the given tuple.\n\n    Parameters:\n    lst (list): The list of elements to append.\n    tup (tuple): The tuple to which the list elements will be appended.\n\n    Returns:\n    tuple: A new tuple containing the original tuple elements followed by the list elements.\n    \"\"\"\n    # Convert the list to a tuple and concatenate it with the original tuple\n    return tup + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merges three lists into a single sorted list.\n\n    Parameters:\n    list1 (list): The first list to merge.\n    list2 (list): The second list to merge.\n    list3 (list): The third list to merge.\n\n    Returns:\n    list: A sorted list containing all elements from the three input lists.\n    \"\"\"\n    # Combine all three lists into one\n    combined_list = list1 + list2 + list3\n    # Return the sorted version of the combined list\n    return sorted(combined_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    This function calculates the number of unique odd values obtained by rotating\n    a binary string a specified number of times.\n\n    Parameters:\n    binary_string (str): A string representing a binary number (e.g., \"011001\").\n    rotations (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The count of unique odd values from the rotations.\n    \"\"\"\n    # Set to store unique odd values\n    odd_values = set()\n\n    # Length of the binary string\n    n = len(binary_string)\n\n    # Generate all rotations\n    for i in range(rotations):\n        # Rotate the binary string\n        rotated_string = binary_string[i % n:] + binary_string[:i % n]\n        \n        # Convert the rotated binary string to an integer\n        value = int(rotated_string, 2)\n        \n        # Check if the value is odd\n        if value % 2 == 1:\n            odd_values.add(value)\n\n    # Return the count of unique odd values\n    return len(odd_values)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1010", 4]], "plus_fail_tests": [["10000100110011", 5]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find common elements in a list of nested lists.\n\n    Parameters:\n    nested_lists (list of list): A list containing multiple lists of integers.\n\n    Returns:\n    set: A set containing the common elements found in all nested lists.\n    \"\"\"\n    if not nested_lists:\n        return set()  # Return an empty set if the input is empty\n\n    # Start with the first list's elements as a set\n    common_elements = set(nested_lists[0])\n\n    # Intersect with the sets of the remaining lists\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Check if the input string represents an integer.\n\n    Args:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    # Check for empty string\n    if not s:\n        return False\n    \n    # Check for negative integers\n    if s[0] == '-':\n        return s[1:].isdigit() if len(s) > 1 else False\n    \n    # Check for non-negative integers\n    return s.isdigit()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): A tuple containing positive integers.\n\n    Returns:\n    int: The integer formed by concatenating the integers in the tuple.\n    \"\"\"\n    # Join the string representation of each integer in the tuple and convert to int\n    return int(''.join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    input_string (str): The string to be split.\n\n    Returns:\n    list: A list of strings obtained by splitting the input string.\n    \"\"\"\n    # Split the input string by spaces and return the resulting list\n    return input_string.split(' ')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \n    :param arr: List[int] - A sorted list of integers where every element appears twice except for one.\n    :return: int - The element that appears only once.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            # If mid is even, the unique element must be on the right side if arr[mid] == arr[mid + 1]\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            # If mid is odd, the unique element must be on the right side if arr[mid] == arr[mid - 1]\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    # When left == right, we have found the unique element\n    return arr[left]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    \"\"\"\n    This function calculates the maximum absolute product of numbers in pairs of tuples.\n    \n    Parameters:\n    tuples_list (list of tuples): A list containing tuples of two integers.\n    \n    Returns:\n    int: The maximum absolute product found among the tuples.\n    \"\"\"\n    max_product = float('-inf')  # Initialize to negative infinity to find the maximum\n\n    for a, b in tuples_list:\n        # Calculate the product of the current tuple\n        product = a * b\n        # Update max_product if the current product is greater\n        if product > max_product:\n            max_product = product\n\n    return max_product", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle (argument) of a complex number.\n\n    Parameters:\n    z (complex): A complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return cmath.phase(z)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    # Initialize variables to track the maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n    \n    # Iterate through each character in the binary string\n    for char in binary_string:\n        # Increment current_diff for '0' and decrement for '1'\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        \n        # Update max_diff if current_diff is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n        \n        # Reset current_diff if it becomes negative\n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def common_divisors_sum(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n    # Find the minimum of the two numbers to limit the range for divisors\n    min_num = min(a, b)\n    \n    # Initialize the sum of common divisors\n    common_divisor_sum = 0\n    \n    # Iterate through all possible divisors\n    for i in range(1, min_num + 1):\n        if a % i == 0 and b % i == 0:  # Check if i is a divisor of both a and b\n            common_divisor_sum += i  # Add to the sum if it is a common divisor\n            \n    return common_divisor_sum\n\n# Test the function with the provided assertion\nassert common_divisors_sum(10, 15) == 6\n\n# If the assertion passes, print a success message\nprint(\"The function works correctly, and the sum of common divisors is:\", common_divisors_sum(10, 15))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a: int, b: int) -> int:\n    \"\"\"\n    Multiplies two integers and returns the result.\n\n    Parameters:\n    a (int): The first integer to multiply.\n    b (int): The second integer to multiply.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words longer than n characters from the given sentence.\n\n    Parameters:\n    n (int): The minimum length of words to be included in the result.\n    sentence (str): A string containing words separated by spaces.\n\n    Returns:\n    list: A list of words longer than n characters.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Use a list comprehension to filter words longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the magic sum (sum of the first row)\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with the maximum frequency in the given list.\n\n    Parameters:\n    lst (list): A list of items (can be of any type).\n\n    Returns:\n    item: The item with the highest frequency. If there are multiple items\n          with the same frequency, the first one encountered is returned.\n    \"\"\"\n    from collections import Counter\n\n    # Count the frequency of each item in the list\n    frequency = Counter(lst)\n\n    # Find the item with the maximum frequency\n    max_item = max(frequency, key=frequency.get)\n\n    return max_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s: str) -> str:\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"  # Define the vowels\n    vowel_indices = []      # List to store indices of vowels\n    vowel_chars = []        # List to store the vowels found in the string\n\n    # Collect the indices and characters of the vowels in the string\n    for index, char in enumerate(s):\n        if char in vowels:\n            vowel_indices.append(index)\n            vowel_chars.append(char)\n\n    # Reverse the list of vowels\n    vowel_chars.reverse()\n\n    # Convert the string to a list to modify it\n    s_list = list(s)\n\n    # Place the reversed vowels back into their original positions\n    for index, char in zip(vowel_indices, vowel_chars):\n        s_list[index] = char\n\n    # Join the list back into a string and return\n    return ''.join(s_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple of characters to a string.\n\n    Parameters:\n    tup (tuple): A tuple containing characters.\n\n    Returns:\n    str: A string formed by concatenating the characters in the tuple.\n    \"\"\"\n    # Join the characters in the tuple into a single string\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Using a generator expression to sum only the negative numbers\n    return sum(num for num in numbers if num < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    A hexagonal number is given by the formula:\n    H(n) = n * (2n - 1)\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in the given array of integers.\n\n    Parameters:\n    arr (list of int): The input array of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes.\n    \"\"\"\n    zeroes = sum(1 for x in arr if x == 0)  # Count the number of zeroes\n    non_zeroes = sum(1 for x in arr if x != 0)  # Count the number of non-zeroes\n\n    # To avoid division by zero, we check if there are any non-zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Return infinity if there are no non-zeroes\n\n    return zeroes / non_zeroes  # Calculate and return the ratio", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number can be represented as the sum of non-zero powers of 2.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # A number can be represented as the sum of non-zero powers of 2 if it is greater than 0\n    # and can be expressed in binary form without any digits other than 1s.\n    return n > 0 and (n & (n - 1)) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[123456788]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    \"\"\"Return the sum of proper divisors of n.\"\"\"\n    divisors_sum = 1  # Start with 1, as it's a proper divisor for all n > 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:  # Add the complementary divisor if it's different\n                divisors_sum += n // i\n    return divisors_sum\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers from 1 to limit.\"\"\"\n    amicable_numbers = set()  # Use a set to avoid duplicates\n\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:  # Check if already found\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                # If they are amicable, add both to the set\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    # Circumference formula: C = 2 * \u03c0 * r\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(nested_list):\n    \"\"\"\n    Flattens a list of lists (or tuples) into a single set of numbers.\n\n    Args:\n    nested_list (list of list or tuple): A list containing lists or tuples of numbers.\n\n    Returns:\n    set: A set containing all unique numbers from the nested list.\n    \"\"\"\n    # Use a set comprehension to flatten the nested list and ensure uniqueness\n    return {num for sublist in nested_list for num in sublist}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def flip(arr, k):\n    \"\"\"Reverse the order of the first k elements in the array.\"\"\"\n    return arr[:k][::-1] + arr[k:]\ndef pancake_sort(arr):\n    \"\"\"Sort the array using the pancake sorting algorithm.\"\"\"\n    n = len(arr)\n    \n    # Start from the complete array and reduce the size one by one\n    for curr_size in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0..curr_size-1]\n        max_index = arr.index(max(arr[:curr_size]))\n        \n        # Move the maximum element to the end of the current array\n        if max_index != curr_size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            # Now flip it to the end\n            arr = flip(arr, curr_size)\n    \n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position\n    of three given lists.\n\n    Parameters:\n    list1 (list): The first list of items.\n    list2 (list): The second list of items.\n    list3 (list): The third list of items.\n\n    Returns:\n    int: The count of identical items in the same position across the three lists.\n    \"\"\"\n    # Initialize a counter for identical items\n    count = 0\n    \n    # Iterate through the lists using the zip function to pair elements\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:  # Check if all three items are identical\n            count += 1\n            \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Function to find the maximum difference between any two elements in the given array.\n    \n    Parameters:\n    arr (tuple): A tuple of integers.\n    \n    Returns:\n    int: The maximum absolute difference between any two elements.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input array must not be empty.\")\n    \n    # Find the maximum and minimum values in the array\n    max_value = max(arr)\n    min_value = min(arr)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def extended_gcd(a, b):\n    \"\"\"Helper function to perform the Extended Euclidean Algorithm.\n    \n    Returns a tuple (g, x, y) such that g = gcd(a, b) and\n    ax + by = g for some integers x and y.\n    \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return (g, x, y)\ndef find_solution(a, b, n):\n    \"\"\"Find integers x and y such that ax + by = n.\n    \n    Returns a tuple (x, y) if a solution exists, otherwise returns None.\n    \"\"\"\n    g, x0, y0 = extended_gcd(a, b)\n    \n    # Check if n is a multiple of gcd(a, b)\n    if n % g != 0:\n        return None  # No solution exists\n    \n    # Scale the solution to find x and y\n    x = x0 * (n // g)\n    y = y0 * (n // g)\n    \n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[25, 10, 500]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(original_list, elements_to_remove):\n    \"\"\"\n    Remove all elements from original_list that are present in elements_to_remove.\n\n    Parameters:\n    original_list (list): The list from which elements will be removed.\n    elements_to_remove (list): The list of elements to be removed from original_list.\n\n    Returns:\n    list: A new list with the specified elements removed.\n    \"\"\"\n    # Use a list comprehension to filter out the elements to remove\n    return [item for item in original_list if item not in elements_to_remove]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(s: str) -> int:\n    \"\"\"\n    Count the number of characters in the string `s` that occur at the same\n    position in the string as in the English alphabet (case insensitive).\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    int: The count of characters that match their position in the alphabet.\n    \"\"\"\n    # Normalize the string to lowercase for case insensitive comparison\n    s = s.lower()\n    \n    # Initialize a counter for matching characters\n    count = 0\n    \n    # Iterate through the string and check each character's position\n    for index, char in enumerate(s):\n        # Calculate the expected position in the alphabet (1-based)\n        expected_position = ord(char) - ord('a') + 1\n        \n        # Check if the character's position matches its expected position\n        if expected_position == index + 1:\n            count += 1\n            \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    \"\"\"\n    Count the number of pairs of integers in the list that XOR to an even number.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The count of pairs whose XOR is even.\n    \"\"\"\n    count = 0\n    n = len(nums)\n\n    # Iterate through all unique pairs (i, j) where i < j\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (nums[i] ^ nums[j]) % 2 == 0:  # Check if XOR is even\n                count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1  # The smallest power of 2 for non-positive n is 1 (2^0)\n\n    power = 1\n    while power < n:\n        power *= 2  # Keep doubling until we find the power of 2 that is >= n\n\n    return power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Parameters:\n    lst (list): The list in which to count occurrences.\n    num (int): The number to count in the list.\n\n    Returns:\n    int: The count of occurrences of num in lst.\n    \"\"\"\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of numbers in a list from start_index to end_index (inclusive).\n\n    Parameters:\n    numbers (list): A list of numbers.\n    start_index (int): The starting index of the range (inclusive).\n    end_index (int): The ending index of the range (inclusive).\n\n    Returns:\n    int: The sum of the numbers in the specified range.\n    \"\"\"\n    # Validate indices\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid indices: start_index must be >= 0, end_index must be < len(numbers), and start_index must be <= end_index.\")\n\n    # Calculate the sum of the specified range\n    return sum(numbers[start_index:end_index + 1])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    return 5 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurrence(input_string: str) -> int:\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string.\n\n    Parameters:\n    input_string (str): The string in which to count occurrences of 'std'.\n\n    Returns:\n    int: The count of occurrences of 'std'.\n    \"\"\"\n    # Use the str.count() method to count occurrences of 'std'\n    return input_string.count('std')\n\n# Test the function with the provided assertion\nif __name__ == \"__main__\":\n    assert count_occurrence(\"letstdlenstdporstd\") == 3\n    print(\"Test passed! The function works correctly.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(input_tuple):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n\n    Parameters:\n    input_tuple (tuple): The tuple to check.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if not input_tuple:  # Check if the tuple is empty\n        return True  # An empty tuple is considered to have the same type\n\n    first_type = type(input_tuple[0])  # Get the type of the first element\n    for element in input_tuple:\n        if type(element) is not first_type:  # Compare types\n            return False  # Return False if a different type is found\n    return True  # All elements have the same type", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if the given element is the majority element in the sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    n (int): The length of the array.\n    element (int): The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority element, False otherwise.\n    \"\"\"\n    # Calculate the required count for majority\n    majority_count = n // 2\n\n    # Count occurrences of the element in the array\n    count = 0\n    for num in arr:\n        if num == element:\n            count += 1\n\n    # Check if the count exceeds majority_count\n    return count > majority_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a given number.\n\n    Parameters:\n    n (int): The number to count set bits in.\n\n    Returns:\n    int: The count of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1  # Increment count if the last bit is 1\n        n >>= 1         # Right shift n to check the next bit\n    return count\n\n# Test the function with the provided assertion\nassert count_set_bits(2) == 1, \"Test case failed!\"\nprint(\"Test case passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i from 0 to n // 2,\n    where the series continues until (n - 2*i) is less than or equal to 0.\n\n    Parameters:\n    n (int): The upper limit for the series calculation.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term <= 0:\n            break\n        total_sum += term\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(s: str) -> str:\n    \"\"\"\n    Remove characters from the string that have odd index values.\n\n    Parameters:\n    s (str): The input string from which to remove characters.\n\n    Returns:\n    str: A new string with characters at odd indices removed.\n    \"\"\"\n    # Use a list comprehension to include only characters at even indices\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n    \n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(input_string: str, replacement_char: str) -> str:\n    \"\"\"\n    Replaces blank spaces in the input string with the specified character.\n\n    Parameters:\n    input_string (str): The string in which to replace blank spaces.\n    replacement_char (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    # Replace spaces with the specified character\n    return input_string.replace(' ', replacement_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "import heapq\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n    \n    Parameters:\n    lst (list): The input list from which to find the largest items.\n    n (int): The number of largest items to return.\n    \n    Returns:\n    list: A list containing the n largest items from the input list.\n    \"\"\"\n    # Use heapq to find the n largest elements efficiently\n    return heapq.nlargest(n, lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Lateral surface area formula: 2 * \u03c0 * radius * height\n    return 2 * math.pi * radius * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    # Create a mask with all even bits set to 1\n    mask = 0xAAAAAAAA  # This is a hexadecimal representation where even bits are set\n\n    # Use bitwise OR to set the even bits of n\n    result = n | mask\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurrences(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary\n    mapping each unique tuple to the number of times it occurs in the list.\n    \n    Parameters:\n    tuples_list (list of tuples): A list containing tuples to be counted.\n    \n    Returns:\n    dict: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    occurrences = {}\n    \n    for tup in tuples_list:\n        # Sort the tuple to ensure (a, b) and (b, a) are treated as the same\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n            \n    return occurrences\n\n# Example usage and assertion\nresult = check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\nassert result == {(1, 3): 2, (2, 5): 2, (3, 6): 1}, f\"Test failed: {result}\"\n\nprint(\"Test passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s: str) -> int:\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    int: The total number of non-empty substrings.\n    \"\"\"\n    n = len(s)\n    # The number of non-empty substrings of a string of length n is given by the formula n * (n + 1) / 2\n    return n * (n + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of list1 with the elements of list2.\n\n    Parameters:\n    list1 (list): The first list whose last element will be replaced.\n    list2 (list): The second list whose elements will replace the last element of list1.\n\n    Returns:\n    list: A new list with the last element of list1 replaced by the elements of list2.\n    \"\"\"\n    # Check if list1 is empty\n    if not list1:\n        return list2  # If list1 is empty, return list2 as the result\n\n    # Create a new list that includes all elements of list1 except the last one\n    new_list = list1[:-1]\n    \n    # Append all elements of list2 to the new list\n    new_list.extend(list2)\n    \n    return new_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(input_string):\n    \"\"\"\n    Count the total number of characters in the input string.\n\n    Parameters:\n    input_string (str): The string for which to count characters.\n\n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    return len(input_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_perfect_square(n):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    n (int): The number to find the next perfect square for.\n\n    Returns:\n    int: The next perfect square greater than n.\n    \"\"\"\n    # Calculate the integer square root of n\n    root = int(n**0.5)\n    \n    # Increment the root to find the next perfect square\n    next_square = (root + 1) ** 2\n    \n    return next_square\n\n# Test the function with the provided assertion\nassert next_perfect_square(35) == 36\n\n# You can add more test cases to validate the function\nassert next_perfect_square(0) == 1\nassert next_perfect_square(1) == 4\nassert next_perfect_square(15) == 16\nassert next_perfect_square(24) == 25\nassert next_perfect_square(49) == 64\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculate the number of possible sequences of length n,\n    where each element is a positive integer that is at least\n    twice the previous element and at most m.\n\n    Parameters:\n    m (int): The upper limit for the elements in the sequence.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of valid sequences.\n    \"\"\"\n    # Memoization dictionary to store results of subproblems\n    memo = {}\n\n    def count_sequences(last_element, length):\n        # Base case: if the sequence length is 0, there's one valid sequence (the empty sequence)\n        if length == 0:\n            return 1\n        \n        # Check if the result is already computed\n        if (last_element, length) in memo:\n            return memo[(last_element, length)]\n        \n        total_count = 0\n        # The next element must be at least twice the last element\n        next_element = last_element * 2\n        \n        # Count valid sequences starting from the next element\n        while next_element <= m:\n            total_count += count_sequences(next_element, length - 1)\n            next_element += 1  # Increment to check the next possible value\n        \n        # Store the result in the memoization dictionary\n        memo[(last_element, length)] = total_count\n        return total_count\n\n    total_sequences = 0\n    # Start with the first element being any positive integer from 1 to m\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n - 1)\n\n    return total_sequences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    \n    # Edge case: if the array is empty\n    if n == 0:\n        return 0\n\n    # Create two arrays to store the maximum sum of increasing subsequence\n    # and maximum sum of decreasing subsequence\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize the inc array with the original array values\n    for i in range(n):\n        inc[i] = arr[i]\n\n    # Fill the inc array\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Initialize the dec array with the original array values\n    for i in range(n):\n        dec[i] = arr[i]\n\n    # Fill the dec array\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bitonic_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def longest_palindromic_subsequence(s: str) -> int:\n    # Normalize the string by removing spaces and converting to lowercase\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n    \n    # Create a 2D array to store lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the dp array\n    for length in range(2, n + 1):  # length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1  # end index of the substring\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]  # characters match\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])  # characters do not match\n    \n    # The length of the longest palindromic subsequence is in dp[0][n-1]\n    return dp[0][n - 1]\n\n# Test the function with the provided assertion\nassert longest_palindromic_subsequence(\"TENS FOR TENS\") == 5\n\n# You can add more test cases to validate the function\nif __name__ == \"__main__\":\n    print(\"Test passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of a specified element in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the specified element before each element in the given list.\n\n    Parameters:\n    lst (list): The list of elements.\n    element: The element to insert.\n\n    Returns:\n    list: A new list with the element inserted before each original element.\n    \"\"\"\n    # Create a new list to hold the result\n    result = []\n    \n    # Iterate through each item in the original list\n    for item in lst:\n        # Append the element and the current item to the result list\n        result.append(element)\n        result.append(item)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to convert.\n\n    Returns:\n    tuple: A tuple containing the magnitude (radius) and angle (theta) in radians.\n    \"\"\"\n    # Calculate the magnitude and angle using cmath\n    magnitude = abs(complex_number)\n    angle = cmath.phase(complex_number)\n    \n    return (magnitude, angle)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(input_list):\n    \"\"\"\n    Count the number of integer elements in the given list.\n\n    Parameters:\n    input_list (list): The list to be checked for integer elements.\n\n    Returns:\n    int: The count of integer elements in the list.\n    \"\"\"\n    # Using a generator expression to count integers\n    return sum(1 for item in input_list if isinstance(item, int))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_Primes_nums(n):\n    \"\"\"Return the number of prime numbers less than the given non-negative number.\"\"\"\n    count = 0\n    for num in range(n):\n        if is_prime(num):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the two input numbers and returns them as a tuple.\n    \n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    \n    Returns:\n    tuple: A tuple containing the second number followed by the first number.\n    \"\"\"\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Maximizes the elements of two tuples of tuples.\n    \n    Args:\n    tuple1 (tuple): The first tuple containing tuples of integers.\n    tuple2 (tuple): The second tuple containing tuples of integers.\n    \n    Returns:\n    tuple: A new tuple containing the maximum elements from the input tuples.\n    \"\"\"\n    # Use a list comprehension to iterate through the pairs of tuples\n    # and take the maximum of each corresponding pair.\n    return tuple(tuple(max(a, b) for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef newman_prime(n):\n    \"\"\"Return the nth Newman\u2013Shanks\u2013Williams prime number.\"\"\"\n    # The first few Newman\u2013Shanks\u2013Williams primes are known\n    known_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    \n    # If n is within the range of known primes, return it directly\n    if n <= len(known_primes):\n        return known_primes[n - 1]\n    \n    # Start searching for new primes beyond the known list\n    count = len(known_primes)\n    candidate = known_primes[-1] + 2  # Start checking from the next odd number after the last known prime\n    \n    while count < n:\n        if is_prime(candidate):\n            # Check if the candidate is a Newman\u2013Shanks\u2013Williams prime\n            if (candidate - 1) % 6 == 0 or (candidate - 1) % 12 == 0:\n                count += 1\n                known_primes.append(candidate)\n        candidate += 2  # Check only odd numbers\n    \n    return known_primes[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division of two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple containing numbers.\n    tuple2 (tuple): The second tuple containing numbers.\n\n    Returns:\n    tuple: A new tuple containing the results of the division.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    result = []\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered.\")\n        result.append(a // b)  # Use floor division for integer results\n\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 2, 3, 3], [5, 2, 3, 4]]]}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts.\n    \n    Parameters:\n    lst (list): The list to be split.\n    L (int): The length of the first part of the list.\n    \n    Returns:\n    tuple: A tuple containing the first part of the list of length L and the second part.\n    \"\"\"\n    # Ensure L is not greater than the length of the list\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the list.\")\n    \n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    return first_part, second_part", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \n    The first two years of a dog's life count as 10.5 human years each.\n    Each additional year counts as 4 human years.\n    \n    Parameters:\n    human_years (int): The age of the dog in human years.\n    \n    Returns:\n    int: The equivalent age in dog's years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    \"\"\"\n    Splits the input list into sublists for every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of lists containing the split elements.\n    \"\"\"\n    # Initialize a list to hold the resulting sublists\n    result = [[] for _ in range(n)]\n    \n    # Iterate over the input list and distribute elements into the sublists\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    The lateral surface area of a cube is given by the formula:\n    Lateral Surface Area = 4 * (side_length ** 2)\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a non-negative value.\")\n    \n    return 4 * (side_length ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(n):\n        odd_number = 2 * i + 1  # Generate the i-th odd number\n        total_sum += odd_number ** 2  # Add the square of the odd number to the total sum\n    \n    return total_sum\n\n# Test the function with the provided assertion\nassert square_sum(2) == 10\n\n# You can add more test cases to validate the function\nassert square_sum(1) == 1  # 1^2 = 1\nassert square_sum(3) == 1 + 9 + 25  # 1^2 + 3^2 + 5^2 = 35\nassert square_sum(4) == 1 + 9 + 25 + 49  # 1^2 + 3^2 + 5^2 + 7^2 = 84\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Calculate the n-th star number using the formula:\n    S(n) = 6n(n - 1) + 1\n\n    Parameters:\n    n (int): The index of the star number to find.\n\n    Returns:\n    int: The n-th star number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    star_number = 6 * n * (n - 1) + 1\n    return star_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of the given character.\n\n    Parameters:\n    char (str): A single character string.\n\n    Returns:\n    int: The ASCII value of the character.\n    \n    Raises:\n    ValueError: If the input is not a single character.\n    \"\"\"\n    if len(char) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    \n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    \"\"\"\n    Calculate the sum of even numbers located at even indices in the list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even indices.\n    \"\"\"\n    total_sum = 0\n    # Iterate through the list using index\n    for index in range(len(numbers)):\n        # Check if the index is even and the number at that index is even\n        if index % 2 == 0 and numbers[index] % 2 == 0:\n            total_sum += numbers[index]\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list.\n\n    Parameters:\n    colors (list): A list of colors.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list of tuples, each containing a combination of colors.\n    \"\"\"\n    # Generate combinations with replacement\n    return list(combinations_with_replacement(colors, n))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Dog", "Cat", "CatBird", "Bird", "Fish"], 77]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the i-th even natural number\n        total_sum += even_number ** 5  # Raise it to the fifth power and add to the sum\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the last element from each tuple in the provided list of tuples.\n\n    Parameters:\n    tuples_list (list of tuples): A list containing tuples from which the last element will be extracted.\n\n    Returns:\n    list: A list containing the last elements of each tuple.\n    \"\"\"\n    # Using a list comprehension to extract the last element of each tuple\n    return [t[-1] for t in tuples_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple containing numeric elements.\n    tuple2 (tuple): The second tuple containing numeric elements.\n\n    Returns:\n    tuple: A new tuple containing the results of the subtraction.\n    \"\"\"\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Subtract elements at the same index and return a new tuple\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n# Test the function with the provided assertion\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\n# If the assertion passes, print a success message\nprint(\"Assertion passed: The function works correctly.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(input_dict, n):\n    \"\"\"\n    Filters the input dictionary to include only entries with values greater than or equal to n.\n\n    Parameters:\n    input_dict (dict): The dictionary to filter.\n    n (int): The threshold value for filtering.\n\n    Returns:\n    dict: A new dictionary containing only the entries with values >= n.\n    \"\"\"\n    # Using dictionary comprehension to filter the dictionary\n    filtered_dict = {key: value for key, value in input_dict.items() if value >= n}\n    return filtered_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # Volume of a cylinder formula: V = \u03c0 * r^2 * h\n    volume = math.pi * (radius ** 2) * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(input_tuple):\n    \"\"\"\n    Count the number of elements that occur before the first tuple element in the given tuple.\n\n    Parameters:\n    input_tuple (tuple): The input tuple containing various elements.\n\n    Returns:\n    int: The count of elements before the first tuple element.\n    \"\"\"\n    # Iterate through the elements of the tuple\n    for index, element in enumerate(input_tuple):\n        # Check if the current element is a tuple\n        if isinstance(element, tuple):\n            # Return the index of the first tuple element\n            return index\n    # If no tuple is found, return 0\n    return 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(array, element):\n    \"\"\"\n    Perform a sequential search for an element in an array.\n\n    Parameters:\n    array (list): The list in which to search for the element.\n    element: The element to search for in the array.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is found\n           and the index of the element or -1 if not found.\n    \"\"\"\n    for index, current in enumerate(array):\n        if current == element:\n            return (True, index)  # Element found, return True and index\n    return (False, -1)  # Element not found, return False and -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number using the formula:\n    D(n) = (5n^2 - 5n) / 2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the nth decagonal number\n    decagonal_number = (5 * n**2 - 5 * n) // 2\n    return decagonal_number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n\n    Parameters:\n    lst (list): The list to check for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Convert the list to a set and compare its length to the original list\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(n: int) -> bool:\n    \"\"\"\n    Check if the frequency of each digit in the integer n is less than or equal to the digit itself.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the condition is met for all digits, False otherwise.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Create a dictionary to count the frequency of each digit\n    digit_count = {}\n    \n    for digit in str_n:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check the frequency of each digit against the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the results of the subtraction.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    # Subtract the elements of the two lists\n    result = [a - b for a, b in zip(list1, list2)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of items to check.\n    element: The element to compare against.\n\n    Returns:\n    bool: True if all items in the list are equal to the element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k):\n    \"\"\"\n    Find the largest sum of a contiguous subarray in the modified array\n    formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array of integers.\n    k (int): The number of times to repeat the array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n    \"\"\"\n    # Helper function to calculate the maximum subarray sum using Kadane's algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # If k is 1, simply apply Kadane's algorithm on the original array\n    if k == 1:\n        return kadane(arr)\n\n    # Calculate the maximum subarray sum for the original array\n    max_kadane = kadane(arr)\n\n    # Calculate the total sum of the original array\n    total_sum = sum(arr)\n\n    # If k is 2, we can consider the maximum subarray sum that crosses the boundary\n    if k == 2:\n        # We need to consider the maximum subarray that can cross the boundary\n        max_crossing_sum = max(arr[0] + arr[-1], arr[0])  # Start with the first element\n        current_sum = arr[-1]\n        for i in range(len(arr) - 2, -1, -1):\n            current_sum += arr[i]\n            max_crossing_sum = max(max_crossing_sum, current_sum)\n        return max(max_kadane, max_crossing_sum)\n\n    # For k > 2, we can consider:\n    # 1. The maximum subarray sum in the original array\n    # 2. The maximum subarray sum that crosses the boundary in two copies of the array\n    # 3. The case where we take the entire array sum and add it to the maximum subarray sum\n    max_crossing_sum = max(arr[0] + arr[-1], arr[0])  # Start with the first element\n    current_sum = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        current_sum += arr[i]\n        max_crossing_sum = max(max_crossing_sum, current_sum)\n\n    # If total_sum is positive, we can add it (k-2) times to the max_kadane\n    if total_sum > 0:\n        return max(max_kadane, max_crossing_sum, max_kadane + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_crossing_sum)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, -30, -1], 4, 3]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(s):\n    \"\"\"\n    Check if the string contains 'a' followed by two or three 'b' characters.\n\n    Args:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if the string contains 'a' followed by two or three 'b' characters, False otherwise.\n    \"\"\"\n    # Use a regular expression to match the pattern\n    import re\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, s))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    # The sum of squares of the first n even natural numbers can be calculated\n    # using the formula: sum = 4 * (1^2 + 2^2 + ... + n^2)\n    # which simplifies to: sum = 4 * (n * (n + 1) * (2n + 1)) / 6\n    # This is derived from the formula for the sum of squares of the first n natural numbers.\n\n    return 4 * sum(i**2 for i in range(1, n + 1))\n\n# Test the function with the provided assertion\nassert square_sum(2) == 20\n\n# You can add more test cases to validate the function\nprint(\"Test passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    Calculate the quotient of two numbers rounded down to the nearest integer.\n\n    Parameters:\n    a (int): The dividend.\n    b (int): The divisor.\n\n    Returns:\n    int: The quotient of a divided by b, rounded down.\n    \n    Raises:\n    ValueError: If the divisor is zero.\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"The divisor cannot be zero.\")\n    \n    # Use integer division to get the quotient rounded down\n    return a // b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Parameters:\n    lists (list of list): A list containing multiple lists.\n\n    Returns:\n    tuple: A tuple containing the length of the longest list and the longest list itself.\n    \"\"\"\n    if not lists:\n        return (0, [])  # Return (0, []) if the input list is empty\n\n    # Initialize variables to track the maximum length and the corresponding list\n    max_len = 0\n    max_list = []\n\n    # Iterate through each list in the input\n    for lst in lists:\n        current_len = len(lst)\n        # Update max_len and max_list if the current list is longer\n        if current_len > max_len:\n            max_len = current_len\n            max_list = lst\n\n    return (max_len, max_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle\n    given the lengths of the other two sides using the Pythagorean theorem.\n\n    Parameters:\n    side1 (float): Length of the first side.\n    side2 (float): Length of the second side.\n\n    Returns:\n    float: Length of the third side.\n    \"\"\"\n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def merge_and_count(arr, temp_arr, left, mid, right):\n    \"\"\"Merge two halves of the array and count inversions.\"\"\"\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all elements left to i in the left subarray\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    \"\"\"Sort the array and count inversions using merge sort.\"\"\"\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\ndef get_Inv_Count(arr):\n    \"\"\"Count inversions in the array.\"\"\"\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(heterogeneous_list):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n    \n    Parameters:\n    heterogeneous_list (list): A list containing elements of various data types.\n    \n    Returns:\n    max_value: The maximum value found in the list among comparable types.\n    \"\"\"\n    # Initialize max_value to None\n    max_value = None\n    \n    for item in heterogeneous_list:\n        # Check if the item is a number (int or float)\n        if isinstance(item, (int, float)):\n            # Update max_value if it's None or if the current item is greater\n            if max_value is None or item > max_value:\n                max_value = item\n    \n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a nested list structure into a single list.\n\n    Args:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    list: A flattened list containing all the elements from the nested structure.\n    \"\"\"\n    flat_list = []\n    \n    for item in nested_list:\n        if isinstance(item, list):\n            # If the item is a list, recursively flatten it\n            flat_list.extend(flatten_list(item))\n        else:\n            # If the item is not a list, append it to the flat list\n            flat_list.append(item)\n    \n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    \"\"\"\n    Calculate the maximum aggregate score from a list of tuples.\n\n    Args:\n    scores (list of tuples): A list where each tuple contains a name (str) and a score (int).\n\n    Returns:\n    tuple: A tuple containing the name with the highest aggregate score and the score itself.\n    \"\"\"\n    aggregate_scores = {}\n\n    # Sum the scores for each individual\n    for name, score in scores:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n\n    # Find the individual with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n\n    return (max_name, max_score)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\nfrom math import comb\ndef count_binary_seq(n):\n    \"\"\"\n    Count the number of binary sequences of length 2n where the sum of the first n bits\n    is equal to the sum of the last n bits.\n\n    Parameters:\n    n (int): The half-length of the binary sequence.\n\n    Returns:\n    float: The count of valid binary sequences.\n    \"\"\"\n    # Total number of valid sequences\n    total_count = 0\n    \n    # Iterate over all possible sums for the first half\n    for k in range(n + 1):\n        # Calculate the number of ways to choose k bits to be 1 in the first half\n        # and (n - k) bits to be 0\n        first_half_ways = comb(n, k)\n        \n        # The same number of ways applies to the second half\n        second_half_ways = comb(n, k)\n        \n        # The total combinations for this specific sum k\n        total_count += first_half_ways * second_half_ways\n    \n    return total_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[50]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words and returns the first two words\n    that start with the letter 'p'. If there are fewer than two such words,\n    it returns None for the missing words.\n\n    :param words: List of strings\n    :return: Tuple containing two words starting with 'p' or None\n    \"\"\"\n    # Initialize a list to hold words starting with 'p'\n    p_words = []\n\n    # Iterate through each word in the input list\n    for word in words:\n        # Split the word into individual words and check each one\n        for w in word.split():\n            if w.startswith('p') or w.startswith('P'):\n                p_words.append(w)\n                # Stop if we have found two words\n                if len(p_words) == 2:\n                    return tuple(p_words)\n\n    # If fewer than two words were found, return None for missing words\n    return tuple(p_words) + (None,) * (2 - len(p_words))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Calculate the depth of a nested dictionary.\n\n    Parameters:\n    d (dict): The dictionary whose depth is to be calculated.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(d, dict) or not d:  # Check if d is a dictionary and not empty\n        return 0\n    \n    # Recursively find the depth of each value in the dictionary\n    return 1 + max(dict_depth(value) for value in d.values())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{}]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Function to find the maximum sum of increasing subsequence from the prefix\n    until ith index and also including a given kth element which is after i (k > i).\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n    i (int): The index until which we consider the prefix.\n    k (int): The index of the element to include in the sum.\n\n    Returns:\n    int: The maximum sum of the increasing subsequence.\n    \"\"\"\n    # Check if indices are valid\n    if i < 0 or i >= n or k <= i or k >= n:\n        raise ValueError(\"Invalid indices: ensure 0 <= i < k < n\")\n\n    # Initialize a list to store the maximum sum of increasing subsequences\n    max_sum = [0] * n\n\n    # Calculate maximum sum of increasing subsequences for the prefix\n    for j in range(i + 1):\n        max_sum[j] = arr[j]\n\n    for j in range(i + 1):\n        for m in range(j):\n            if arr[j] > arr[m]:\n                max_sum[j] = max(max_sum[j], max_sum[m] + arr[j])\n\n    # Include the kth element in the sum\n    max_sum_with_k = max_sum[i] + arr[k]\n\n    return max_sum_with_k", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    \"\"\"\n    Find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n\n    Parameters:\n    list1 (list): The first list of integers.\n    list2 (list): The second list of integers.\n    n (int): The number of largest products to return.\n\n    Returns:\n    list: A list of the n largest products.\n    \"\"\"\n    # Generate all possible products from the two lists\n    products = [a * b for a in list1 for b in list2]\n    \n    # Sort the products in descending order and get the top n products\n    largest_products = sorted(products, reverse=True)[:n]\n    \n    return largest_products", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    tuple: A tuple containing each character of the input string.\n    \"\"\"\n    return tuple(input_string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the leftmost unset bit of the given integer n.\n\n    Parameters:\n    n (int): The integer whose leftmost unset bit is to be set.\n\n    Returns:\n    int: The integer with the leftmost unset bit set to 1.\n    \"\"\"\n    # Find the position of the leftmost unset bit\n    # We do this by finding the highest bit position of n and checking for unset bits\n    bit_position = 0\n    temp = n\n\n    # Shift right until we find a zero bit\n    while temp > 0:\n        if temp & 1 == 0:\n            break\n        temp >>= 1\n        bit_position += 1\n\n    # If all bits are set, we need to set the next higher bit\n    if temp == 0:\n        return n | (1 << bit_position)\n\n    # Set the leftmost unset bit\n    return n | (1 << bit_position)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[255]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    power = 1\n    while power <= n:\n        power *= 2\n    \n    # The last power is greater than n, so we return the previous one\n    return power // 2\n\n# Test the function with the provided assertion\nassert highest_power_of_2(10) == 8\n\n# Additional test cases\nprint(highest_power_of_2(1))   # Output: 1\nprint(highest_power_of_2(15))  # Output: 8\nprint(highest_power_of_2(32))  # Output: 32\nprint(highest_power_of_2(0))   # This will raise a ValueError", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(elements, format_string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Parameters:\n    elements (list): A list of elements to format.\n    format_string (str): A format string that includes placeholders.\n\n    Returns:\n    list: A new list with formatted strings.\n    \"\"\"\n    # Use a list comprehension to apply the format string to each element\n    return [format_string.format(element) for element in elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Calculate the n-th Lucas number.\n\n    The Lucas sequence is defined as:\n    L(0) = 2\n    L(1) = 1\n    L(n) = L(n-1) + L(n-2) for n > 1\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n-th Lucas number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1  # L(0) and L(1)\n        for _ in range(2, n + 1):\n            a, b = b, a + b  # Update to the next Lucas number\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    \"\"\"\n    Convert multiple lists into a nested dictionary format.\n\n    Args:\n    ids (list): A list of student IDs.\n    names (list): A list of student names.\n    scores (list): A list of student scores.\n\n    Returns:\n    list: A list of dictionaries, each containing a student ID as the key,\n          and another dictionary as the value with the student's name and score.\n    \"\"\"\n    # Check if all lists are of the same length\n    if not (len(ids) == len(names) == len(scores)):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    # Create the nested dictionary structure\n    result = []\n    for id_, name, score in zip(ids, names, scores):\n        result.append({id_: {name: score}})\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(input_tuple):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n\n    Parameters:\n    input_tuple (tuple): The tuple to check for duplicates.\n\n    Returns:\n    bool: True if all elements are distinct, False otherwise.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates\n    unique_elements = set(input_tuple)\n    \n    # Compare the length of the set with the length of the tuple\n    return len(unique_elements) == len(input_tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n, memo=None):\n    \"\"\"\n    Calculate the maximum sum possible using the equation:\n    f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n    Parameters:\n    n (int): The input number to calculate the maximum sum for.\n    memo (dict): A dictionary to store previously computed results for optimization.\n\n    Returns:\n    int: The maximum sum possible for the given n.\n    \"\"\"\n    if n <= 0:\n        return 0  # Base case: if n is 0 or negative, the maximum sum is 0\n\n    if memo is None:\n        memo = {}  # Initialize memoization dictionary\n\n    if n in memo:\n        return memo[n]  # Return the cached result if it exists\n\n    # Calculate the maximum sum using the recursive formula\n    max_sum = max(get_max_sum(n // 2, memo) + \n                   get_max_sum(n // 3, memo) + \n                   get_max_sum(n // 4, memo) + \n                   get_max_sum(n // 5, memo), n)\n\n    memo[n] = max_sum  # Store the result in the memoization dictionary\n    return max_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s: str) -> str:\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The first non-repeated character, or None if all characters are repeated.\n    \"\"\"\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n\n    # Count each character in the string\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers and return the middle one\n    return sorted([a, b, c])[1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Computes the sum of digits for each number in the given list.\n\n    Parameters:\n    numbers (list of int): A list of integers.\n\n    Returns:\n    int: The total sum of all digits from all numbers in the list.\n    \"\"\"\n    total_sum = 0\n    \n    for number in numbers:\n        # Convert the number to string to iterate over each digit\n        for digit in str(abs(number)):  # Use abs to handle negative numbers\n            total_sum += int(digit)  # Convert digit back to int and add to total_sum\n            \n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[10, -5, "abc", 0, 3.14]]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search within.\n    element: The element to search for.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The minimum of the two numbers.\n    \"\"\"\n    return a if a < b else b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(number):\n    \"\"\"\n    Determine whether the parity of a given number is odd.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is odd, False if it is even.\n    \"\"\"\n    return number % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(heterogeneous_list):\n    \"\"\"\n    Find the minimum numeric value in a heterogeneous list.\n    \n    Parameters:\n    heterogeneous_list (list): A list containing elements of various types.\n    \n    Returns:\n    int or float: The minimum numeric value in the list. If no numeric values are found, returns None.\n    \"\"\"\n    # Initialize a variable to hold the minimum value, starting with None\n    min_value = None\n    \n    for item in heterogeneous_list:\n        # Check if the item is a number (int or float)\n        if isinstance(item, (int, float)):\n            # If min_value is None or the current item is less than min_value, update min_value\n            if min_value is None or item < min_value:\n                min_value = item\n    \n    return min_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains two integers.\n    It calculates the product of the integers in each tuple and returns the minimum product found.\n\n    :param tuples_list: List of tuples, where each tuple contains two integers\n    :return: Minimum product of the integers from the tuples\n    \"\"\"\n    # Initialize the minimum product to a large number\n    min_product = float('inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in tuples_list:\n        # Calculate the product of the current tuple\n        product = a * b\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            \n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Remove odd numbers from the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the even numbers.\n    \"\"\"\n    # Use list comprehension to filter out odd numbers\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if there is any common value between two sequences.\n\n    Parameters:\n    seq1 (iterable): The first sequence to check.\n    seq2 (iterable): The second sequence to check.\n\n    Returns:\n    bool: True if there is at least one common value, False otherwise.\n    \"\"\"\n    # Convert the second sequence to a set for O(1) average time complexity on lookups\n    set_seq2 = set(seq2)\n    \n    # Check for any common elements\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(tuples_list, n):\n    \"\"\"\n    Extracts the nth element from each tuple in the given list of tuples.\n\n    Parameters:\n    tuples_list (list of tuples): A list containing tuples from which to extract elements.\n    n (int): The index of the element to extract from each tuple.\n\n    Returns:\n    list: A list containing the nth elements from each tuple.\n    \"\"\"\n    # Using a list comprehension to extract the nth element from each tuple\n    return [t[n] for t in tuples_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Function to find a pair of integers in the array that has the highest product.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    tuple: A tuple containing the pair of integers with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    # Initialize variables to store the two largest numbers\n    first_max = second_max = float('-inf')\n    \n    # Iterate through the array to find the two largest numbers\n    for number in arr:\n        if number > first_max:\n            second_max = first_max\n            first_max = number\n        elif number > second_max:\n            second_max = number\n    \n    return (second_max, first_max)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, -1, -2, -4, 5, 0, -6]]], "plus_fail_tests": [[[10, -20, 30, -40, 50, -60, 70, -80, 90, -100]]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds each number in the given list and returns the total sum\n    multiplied by the length of the list.\n\n    Parameters:\n    numbers (list): A list of float numbers.\n\n    Returns:\n    int: The total sum of rounded numbers multiplied by the length of the list.\n    \"\"\"\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(numbers)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the element of a list having maximum length.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The sublist with the maximum length.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return None  # Return None if the input list is empty\n\n    max_length_element = max(lst, key=len)  # Find the element with the maximum length\n    return max_length_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the sum of the cubes of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Calculate the i-th even natural number\n        total_sum += even_number ** 3  # Add the cube of the even number to the total sum\n    \n    return total_sum\n\n# Test the function with the provided assertion\nassert cube_sum(2) == 72\n\n# If you want to see the output for other values, you can uncomment the following lines:\n# print(cube_sum(3))  # Should return 216 (2^3 + 4^3 + 6^3)\n# print(cube_sum(4))  # Should return 576 (2^3 + 4^3 + 6^3 + 8^3)\n\nprint(\"Function works correctly and passed the test case.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculate the average of the cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i ** 3 for i in range(1, n + 1))\n    \n    # Calculate the average\n    average = sum_of_cubes / n\n    \n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(elements, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple into a single string, separated by the specified delimiter.\n\n    Parameters:\n    elements (tuple): A tuple containing elements to concatenate.\n    delimiter (str): The delimiter to use for concatenation. Default is '-'.\n\n    Returns:\n    str: A single string with all elements concatenated by the delimiter.\n    \"\"\"\n    # Convert all elements to string and join them with the delimiter\n    return delimiter.join(str(element) for element in elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    \"\"\"\n    Extracts the last character of each string in the given tuple.\n\n    Parameters:\n    strings (tuple): A tuple containing strings.\n\n    Returns:\n    list: A list containing the last character of each string.\n    \"\"\"\n    # Using a list comprehension to extract the last character of each string\n    return [s[-1] for s in strings]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(sublists, element):\n    \"\"\"\n    Count the number of sublists that contain a specific element.\n\n    Parameters:\n    sublists (list of list): A list of sublists to search through.\n    element: The element to count in the sublists.\n\n    Returns:\n    int: The count of sublists containing the specified element.\n    \"\"\"\n    count = 0\n    for sublist in sublists:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters out odd numbers from the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the odd integers from the input list.\n    \"\"\"\n    # Using list comprehension to filter odd numbers\n    return [num for num in numbers if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts an array using the Shell Sort algorithm.\n\n    Parameters:\n    arr (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(arr)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    # Do a gapped insertion sort for this gap size.\n    while gap > 0:\n        for i in range(gap, n):\n            # Save the current element to be compared\n            temp = arr[i]\n            j = i\n\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n\n        gap //= 2  # Reduce the gap for the next iteration\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date_str (str): A date string in the format yyyy-mm-dd.\n\n    Returns:\n    str: A date string in the format dd-mm-yyyy.\n    \"\"\"\n    # Split the input date string into components\n    year, month, day = date_str.split('-')\n    \n    # Rearrange the components to the desired format\n    return f\"{day}-{month}-{year}\"", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise minimum from two tuples.\n\n    Args:\n    tuple1 (tuple): The first tuple of integers.\n    tuple2 (tuple): The second tuple of integers.\n\n    Returns:\n    tuple: A tuple containing the elementwise minimum of the two input tuples.\n    \"\"\"\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Use a generator expression to compute the elementwise minimum\n    return tuple(min(a, b) for a, b in zip(tuple1, tuple2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 4, 6, 9], [5, 2, 3, 3]]], "plus_fail_tests": [[[123, 456, 789, 10], [987, 654, 321, 10]]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium given the lengths of its bases.\n    \n    Parameters:\n    a (float): Length of the first base.\n    b (float): Length of the second base.\n    c (float): Length of the non-parallel side (not used in median calculation).\n    \n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the median using the average of the two bases\n    median_length = (a + b) / 2\n    return median_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, h, k):\n    \"\"\"\n    Calculate the directrix of a parabola given its parameters.\n    \n    Parameters:\n    a (float): The coefficient of the parabola (determines the width and direction).\n    h (float): The x-coordinate of the vertex of the parabola.\n    k (float): The y-coordinate of the vertex of the parabola.\n    \n    Returns:\n    float: The y-coordinate of the directrix of the parabola.\n    \"\"\"\n    # Calculate the directrix using the formula derived above\n    directrix = k - a\n    return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[3, 3, 3]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the array.\n\n    Parameters:\n    arr (list): A list of numbers.\n    num (int or float): The number to compare against the elements of the array.\n\n    Returns:\n    bool: True if num is greater than all elements in arr, False otherwise.\n    \"\"\"\n    # Check if the number is greater than all elements in the array\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    Returns a list of negative numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list containing only the negative integers from the input list.\n    \"\"\"\n    # Using list comprehension to filter out negative numbers\n    return [num for num in numbers if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    Returns the last digit of the given number.\n    \n    Parameters:\n    number (int): The number from which to extract the last digit.\n    \n    Returns:\n    int: The last digit of the number.\n    \"\"\"\n    # Ensure the number is non-negative for simplicity\n    number = abs(number)\n    \n    # The last digit can be found using the modulus operator\n    return number % 10\n\n# Test the function with an assertion\nassert last_digit(123) == 3\n\n# You can add more test cases if needed\nassert last_digit(-456) == 6  # Testing with a negative number\nassert last_digit(0) == 0      # Testing with zero\nassert last_digit(789) == 9     # Testing with another positive number\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(s: str) -> str:\n    \"\"\"\n    Remove characters at odd indices from the input string.\n\n    Parameters:\n    s (str): The input string from which to remove odd-indexed characters.\n\n    Returns:\n    str: A new string with characters at odd indices removed.\n    \"\"\"\n    # Use a list comprehension to select characters at even indices\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "import re\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb in the given sentence and return its position and the word itself.\n    \n    Parameters:\n    sentence (str): The input sentence to search for adverbs.\n    \n    Returns:\n    tuple: A tuple containing the start index, end index, and the adverb found.\n           Returns None if no adverb is found.\n    \"\"\"\n    # Define a simple regex pattern to match potential adverbs\n    adverb_pattern = r'\\b\\w+(ly|ward|wise|fully|ingly|lessly|ably)\\b'\n    \n    # Search for the first match of the adverb pattern\n    match = re.search(adverb_pattern, sentence)\n    \n    if match:\n        # Get the start and end positions of the found adverb\n        start_index = match.start()\n        end_index = match.end()\n        adverb = match.group()\n        return (start_index, end_index, adverb)\n    \n    return None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["awaquicklyy"]]}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(int_list):\n    \"\"\"\n    Joins a list of integers into a single integer.\n\n    Parameters:\n    int_list (list): A list of integers to be joined.\n\n    Returns:\n    int: A single integer formed by concatenating the integers in the list.\n    \"\"\"\n    # Convert each integer to a string and join them together\n    joined_string = ''.join(map(str, int_list))\n    # Convert the joined string back to an integer\n    return int(joined_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube given its size.\n\n    Parameters:\n    size (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    # The surface area of a cube is given by the formula: 6 * (side_length ** 2)\n    return 6 * (size ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_occurrence(tup, lst):\n    \"\"\"\n    Count the occurrences of all elements in the list within the tuple.\n\n    Parameters:\n    tup (tuple): A tuple containing elements to be counted.\n    lst (list): A list of elements whose occurrences in the tuple are to be counted.\n\n    Returns:\n    int: The total count of occurrences of the elements in the list within the tuple.\n    \"\"\"\n    count = 0\n    for element in lst:\n        count += tup.count(element)  # Count occurrences of each element in the tuple\n    return count\n\n# Test the function with the provided assertion\nassert count_occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\n\n# If the assertion passes, print a success message\nprint(\"The function works correctly and the assertion passed.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    \"\"\"\n    Perform index-wise multiplication of elements in two tuples.\n\n    Parameters:\n    tup1 (tuple): The first tuple containing tuples of integers.\n    tup2 (tuple): The second tuple containing tuples of integers.\n\n    Returns:\n    tuple: A new tuple containing the results of index-wise multiplication.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tup1) != len(tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Perform index-wise multiplication\n    result = tuple((a * b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(tup1, tup2))\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5], [6, 6], [7, 7], [8, 8]]]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list containing the cubes of those numbers.\n    \n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of cubes of the input integers.\n    \"\"\"\n    return [x ** 3 for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to the nth index.\n\n    Parameters:\n    n (int): The index up to which the sum of Perrin numbers is calculated.\n\n    Returns:\n    int: The sum of Perrin numbers from P(0) to P(n).\n    \"\"\"\n    # Base cases for the Perrin sequence\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 3\n    elif n == 1:\n        return 3 + 0\n    elif n == 2:\n        return 3 + 0 + 2\n\n    # Initialize the first three Perrin numbers\n    p0, p1, p2 = 3, 0, 2\n    total_sum = p0 + p1 + p2  # Start with the sum of the first three numbers\n\n    # Calculate Perrin numbers and their sum up to n\n    for i in range(3, n + 1):\n        p_next = p1 + p0  # P(n) = P(n-2) + P(n-3)\n        total_sum += p_next  # Add the new Perrin number to the total sum\n        # Update the previous Perrin numbers\n        p0, p1 = p1, p2\n        p2 = p_next\n\n    return total_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Parameters:\n    string_list (list): A list of strings to be filtered.\n    size (int): The length of strings to extract.\n\n    Returns:\n    list: A list of strings that match the specified size.\n    \"\"\"\n    # Using list comprehension to filter strings by the specified size\n    return [s for s in string_list if len(s) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number n.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of n.\n    \"\"\"\n    even_sum = 0\n    # Iterate through all possible factors of n\n    for i in range(1, n + 1):\n        if n % i == 0:  # Check if i is a factor of n\n            if i % 2 == 0:  # Check if the factor is even\n                even_sum += i  # Add to the sum if it's even\n    return even_sum\n\n# Test the function with the provided assertion\nassert sum_of_even_factors(18) == 26\n\n# If the assertion passes, print a success message\nprint(\"The function works correctly, and the sum of even factors of 18 is 26.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(word):\n    \"\"\"\n    Check if the given word contains the letter 'z'.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if 'z' is in the word, False otherwise.\n    \"\"\"\n    return 'z' in word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string: str) -> str:\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Parameters:\n    input_string (str): The string from which to remove whitespaces.\n\n    Returns:\n    str: The input string without any whitespaces.\n    \"\"\"\n    # Use the str.replace method to remove all whitespace characters\n    return input_string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_month_number(month):\n    \"\"\"\n    Check if the given month number has 31 days.\n\n    Parameters:\n    month (int): The month number (1 for January, 2 for February, ..., 12 for December)\n\n    Returns:\n    bool: True if the month has 31 days, False otherwise\n    \"\"\"\n    # List of months that have 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    # Check if the month number is valid\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n    \n    return month in months_with_31_days\n\n# Test the function with an assertion\nassert check_month_number(5) == True  # May has 31 days\nassert check_month_number(2) == False  # February does not have 31 days\nassert check_month_number(1) == True   # January has 31 days\nassert check_month_number(4) == False  # April does not have 31 days\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverses each string in the provided list of strings.\n\n    Parameters:\n    string_list (list): A list of strings to be reversed.\n\n    Returns:\n    list: A new list containing the reversed strings.\n    \"\"\"\n    # Using list comprehension to reverse each string in the list\n    return [s[::-1] for s in string_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lists):\n    \"\"\"\n    Find the sublist having minimum length from a list of lists.\n\n    Parameters:\n    lists (list of list): A list containing sublists.\n\n    Returns:\n    list: The sublist with the minimum length.\n    \"\"\"\n    if not lists:\n        return []  # Return an empty list if the input is empty\n\n    # Initialize the minimum length and the corresponding sublist\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lists:\n        # Check if the current sublist is shorter than the minimum found so far\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s: str) -> str:\n    \"\"\"\n    Remove all uppercase substrings from the given string.\n\n    Args:\n    s (str): The input string from which uppercase substrings will be removed.\n\n    Returns:\n    str: A new string with all uppercase substrings removed.\n    \"\"\"\n    # Initialize an empty result string\n    result = ''\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is lowercase\n        if char.islower():\n            result += char  # Append lowercase characters to the result\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element from each sublist.\n\n    Parameters:\n    sublists (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    # Using a list comprehension to get the first element of each sublist\n    return [sublist[0] for sublist in sublists if sublist]  # Check if sublist is not empty", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Function to find the maximum product of a contiguous subarray.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum product of a contiguous subarray.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            # Swap max_product and min_product when a negative number is encountered\n            max_product, min_product = min_product, max_product\n        \n        # Calculate the maximum and minimum products up to the current number\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "from itertools import combinations\ndef combinations_list(elements):\n    \"\"\"\n    Generate all possible combinations of the elements in the given list.\n\n    Args:\n    elements (list): A list of elements to generate combinations from.\n\n    Returns:\n    list: A list of all possible combinations, including the empty combination.\n    \"\"\"\n    result = []\n    n = len(elements)\n    \n    # Generate combinations for all lengths from 0 to n\n    for r in range(n + 1):\n        # Use itertools.combinations to get combinations of length r\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(input_dict):\n    \"\"\"\n    Remove empty items from the given dictionary.\n\n    Parameters:\n    input_dict (dict): The dictionary from which to remove empty items.\n\n    Returns:\n    dict: A new dictionary with empty items removed.\n    \"\"\"\n    # Using dictionary comprehension to filter out empty values\n    return {k: v for k, v in input_dict.items() if v}", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[{"a": {"b": null, "c": "Yellow"}, "d": {}, "e": {"f": null, "g": "Blue"}}]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(input_tuple):\n    \"\"\"\n    This function takes a tuple of numbers and returns a new tuple\n    containing the pairwise addition of neighboring elements.\n    \n    Parameters:\n    input_tuple (tuple): A tuple of numbers.\n    \n    Returns:\n    tuple: A tuple containing the pairwise sums of neighboring elements.\n    \"\"\"\n    # Using a list comprehension to calculate the pairwise sums\n    return tuple(input_tuple[i] + input_tuple[i + 1] for i in range(len(input_tuple) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Function to find the maximum product of an increasing subsequence in the given array.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum product of an increasing subsequence.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize a list to store the maximum product for each element\n    max_prod = arr[:]  # Start with the value of the elements themselves\n    \n    # Compute the maximum product for each element\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:  # Check for increasing subsequence\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    \n    # The result is the maximum value in max_prod\n    return max(max_prod)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[2, 3, 3, 4, 5, 3, 6]]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculate the product of the elements in the array modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulus.\n\n    Returns:\n    int: The product of the array elements modulo n.\n    \"\"\"\n    product = 1\n    for number in arr:\n        product = (product * number) % n  # Update product and take modulo n at each step\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of tuples in two lists, irrespective of their order.\n\n    Parameters:\n    list1 (list of tuples): The first list of tuples.\n    list2 (list of tuples): The second list of tuples.\n\n    Returns:\n    set: A set containing the tuples that are present in both lists.\n    \"\"\"\n    # Convert both lists of tuples to sets for efficient intersection\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    return intersection", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_consecutive(numbers):\n    \"\"\"\n    Check if the given list contains consecutive numbers.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if not numbers:  # Check for empty list\n        return False\n\n    # Sort the list to check for consecutive numbers\n    sorted_numbers = sorted(numbers)\n\n    # Check if each number is exactly one more than the previous number\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] != sorted_numbers[i - 1] + 1:\n            return False\n\n    return True\n\n# Test cases\nassert check_consecutive([1, 2, 3, 4, 5]) == True\nassert check_consecutive([3, 2, 1, 5, 4]) == True  # Same numbers, different order\nassert check_consecutive([1, 2, 4, 5]) == False  # Missing 3\nassert check_consecutive([]) == False  # Empty list\nassert check_consecutive([10, 11, 12, 13]) == True  # Consecutive numbers\nassert check_consecutive([1, 3, 2, 5]) == False  # Not consecutive\n\nprint(\"All test cases passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(input_string, old_char, new_char):\n    \"\"\"\n    Replace all occurrences of old_char in input_string with new_char.\n\n    Parameters:\n    input_string (str): The original string where characters will be replaced.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace with.\n\n    Returns:\n    str: A new string with the specified characters replaced.\n    \"\"\"\n    # Using the str.replace() method to replace old_char with new_char\n    return input_string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(subject_scores):\n    \"\"\"\n    Sorts a dictionary by its values in descending order.\n\n    Parameters:\n    subject_scores (dict): A dictionary where keys are subjects and values are scores.\n\n    Returns:\n    list: A list of tuples sorted by scores in descending order.\n    \"\"\"\n    # Sort the dictionary items by value in descending order\n    sorted_items = sorted(subject_scores.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Calculate the sum of the largest and smallest values in the given array.\n\n    Parameters:\n    arr (list): A list of numerical values.\n\n    Returns:\n    int/float: The sum of the largest and smallest values in the array.\n    \"\"\"\n    if not arr:  # Check if the array is empty\n        raise ValueError(\"The array should not be empty.\")\n\n    smallest = min(arr)  # Find the smallest value\n    largest = max(arr)   # Find the largest value\n    return smallest + largest  # Return the sum of smallest and largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s: str) -> str:\n    \"\"\"\n    Remove all lowercase substrings from the given string.\n\n    Parameters:\n    s (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: A new string with all lowercase substrings removed.\n    \"\"\"\n    # Use a list comprehension to filter out lowercase characters\n    result = ''.join([char for char in s if not char.islower()])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(input_string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    input_string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return input_string.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Returns the first digit of a given number.\n    \n    Parameters:\n    number (int): The number from which to extract the first digit.\n    \n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string and remove any negative sign\n    str_number = str(abs(number))\n    \n    # The first character of the string representation is the first digit\n    first_digit = int(str_number[0])\n    \n    return first_digit\n\n# Test the function with an assertion\nassert first_digit(123) == 1\n\n# Additional test cases\nassert first_digit(-456) == 4  # Testing with a negative number\nassert first_digit(0) == 0      # Testing with zero\nassert first_digit(7890) == 7    # Testing with a larger number\nassert first_digit(-1001) == 1   # Testing with a negative number with leading zeros\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = (sum_n ** 2)  # The sum of cubes can be calculated as (sum_n)^2\n\n    # Calculate the difference\n    return sum_cubes - sum_n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def Split(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd integers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers from the input list.\n    \"\"\"\n    # Using list comprehension to filter out odd numbers\n    return [num for num in numbers if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    \"\"\"\n    Count the number of pairs in the array whose XOR value is odd.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The count of pairs with an odd XOR value.\n    \"\"\"\n    count = 0\n    \n    # Iterate through each pair of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate the XOR of the pair\n            if (arr[i] ^ arr[j]) % 2 == 1:  # Check if XOR is odd\n                count += 1\n                \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    \"\"\"\n    Toggle the case of all characters in the input string.\n\n    Parameters:\n    s (str): The input string whose characters' case will be toggled.\n\n    Returns:\n    str: A new string with the case of each character toggled.\n    \"\"\"\n    return s.swapcase()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit differences.\n    \"\"\"\n    # Convert both numbers to strings to iterate over their digits\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n\n    # Calculate the sum of the absolute differences of each digit\n    total_difference = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n\n    return total_difference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and return them in sorted order.\n\n    Parameters:\n    tuple1 (tuple): The first tuple of elements.\n    tuple2 (tuple): The second tuple of elements.\n\n    Returns:\n    tuple: A sorted tuple containing the union of the elements from both input tuples.\n    \"\"\"\n    # Convert tuples to sets to find the union\n    set_union = set(tuple1) | set(tuple2)\n    \n    # Sort the resulting set and convert it back to a tuple\n    sorted_union = tuple(sorted(set_union))\n    \n    return sorted_union", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Function to find the sum of the largest contiguous sublist in the given list.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The number of elements in the list.\n    \n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')  # Start with the smallest possible value\n    current_sum = 0  # This will store the current subarray sum\n\n    for i in range(n):\n        current_sum += arr[i]  # Add the current element to the current sum\n        \n        # Update max_sum if current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If current_sum drops below 0, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    \"\"\"\n    This function finds the length of the longest sublist in a list of lists.\n    \n    Parameters:\n    sublists (list of list): A list containing sublists.\n    \n    Returns:\n    int: The length of the longest sublist.\n    \"\"\"\n    # Initialize the maximum length to 0\n    max_length = 0\n    \n    # Iterate through each sublist\n    for sublist in sublists:\n        # Update max_length if the current sublist is longer\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(input_string):\n    \"\"\"\n    Extracts values between double quotation marks from the input string.\n\n    Args:\n    input_string (str): The string containing values in double quotes.\n\n    Returns:\n    list: A list of strings extracted from between the quotation marks.\n    \"\"\"\n    # Use regular expression to find all occurrences of text within double quotes\n    matches = re.findall(r'\"(.*?)\"', input_string)\n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(nums, n):\n    \"\"\"\n    Count the number of possible unordered pairs of unequal elements in the list.\n\n    Parameters:\n    nums (list): A list of integers.\n    n (int): The number of elements in the list (not used in the function but included for signature).\n\n    Returns:\n    int: The count of unordered pairs of unequal elements.\n    \"\"\"\n    # Use a set to find unique elements\n    unique_nums = set(nums)\n    \n    # Count the number of unique elements\n    unique_count = len(unique_nums)\n    \n    # Calculate the number of unordered pairs of unequal elements\n    # The formula for combinations of 2 from unique_count is unique_count choose 2\n    if unique_count < 2:\n        return 0  # Not enough unique elements to form a pair\n    else:\n        return unique_count * (unique_count - 1) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 1], 3]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 10]]}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the integer to a string, iterate over each character,\n    # convert it back to an integer, and sum them up.\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Splits a string into a list of its characters.\n\n    Parameters:\n    string (str): The string to be split.\n\n    Returns:\n    list: A list containing the characters of the string.\n    \"\"\"\n    return list(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False  # If any element is greater than the next, the list is not sorted\n    return True  # If no elements were out of order, the list is sorted", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists.\n\n    Parameters:\n    list_of_lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n    list of list of str: A new list with each sublist sorted.\n    \"\"\"\n    # Sort each sublist and return the new list of sorted sublists\n    return [sorted(sublist) for sublist in list_of_lists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    N (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list containing N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(N)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing\n    only the numbers that appear exactly once in the input list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A list of integers that are unique in the input list.\n    \"\"\"\n    # Create a dictionary to count occurrences of each number\n    count = {}\n    \n    # Count each number's occurrences\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Extract numbers that appear exactly once\n    unique_nums = [num for num, cnt in count.items() if cnt == 1]\n    \n    return unique_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_sub_array(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is a sublist of main_list.\n\n    Parameters:\n    main_list (list): The list in which to check for the sublist.\n    sub_list (list): The list to check as a potential sublist.\n\n    Returns:\n    bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    # Get the lengths of both lists\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    # If sub_list is longer than main_list, it cannot be a sublist\n    if len_sub > len_main:\n        return False\n\n    # Iterate through main_list to find a match for sub_list\n    for i in range(len_main - len_sub + 1):\n        # Check if the slice of main_list matches sub_list\n        if main_list[i:i + len_sub] == sub_list:\n            return True\n\n    return False\n\n# Test the function with the provided assertion\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\n\n# Additional test cases\nassert is_sub_array([1, 2, 3, 4, 5], [2, 3]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], []) == True  # An empty list is a sublist of any list\nassert is_sub_array([], [1]) == False  # A non-empty list cannot be a sublist of an empty list\n\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The product of unique integers in the list.\n    \"\"\"\n    # Use a set to store unique numbers\n    unique_numbers = set(numbers)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for number in unique_numbers:\n        product *= number\n    \n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit of the factorial of a given number n.\n\n    Parameters:\n    n (int): The number to calculate the factorial for.\n\n    Returns:\n    int: The last digit of the factorial of n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    \n    # Factorial of 0 and 1 is 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Calculate factorial and keep track of the last digit\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10  # Only keep the last digit\n    \n    return last_digit\n\n# Test the function with the provided assertion\nassert last_digit_factorial(4) == 4\n\n# Additional test cases\nprint(last_digit_factorial(0))  # Output: 1\nprint(last_digit_factorial(1))  # Output: 1\nprint(last_digit_factorial(5))  # Output: 0 (5! = 120)\nprint(last_digit_factorial(10)) # Output: 0 (10! = 3628800)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find dissimilar elements in two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A tuple containing elements that are unique to each input tuple.\n    \"\"\"\n    # Convert tuples to sets to find unique elements\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find elements that are in set1 but not in set2 and vice versa\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Return the result as a sorted tuple\n    return tuple(sorted(dissimilar_elements))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, "a", "b", "c", "d", "e"], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): The first list to interleave.\n    list2 (list): The second list to interleave.\n    list3 (list): The third list to interleave.\n\n    Returns:\n    list: A new list containing elements from list1, list2, and list3 interleaved.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n\n    # Create an empty list to hold the interleaved result\n    interleaved = []\n\n    # Interleave the lists\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    return interleaved", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Recursively extracts even numbers from a nested tuple.\n    \n    Args:\n    nested_tuple (tuple): A tuple that may contain integers and nested tuples.\n    \n    Returns:\n    tuple: A new tuple containing only the even integers and nested tuples of even integers.\n    \"\"\"\n    result = []\n    \n    for element in nested_tuple:\n        if isinstance(element, int):  # Check if the element is an integer\n            if element % 2 == 0:  # Check if the integer is even\n                result.append(element)\n        elif isinstance(element, tuple):  # Check if the element is a tuple\n            # Recursively extract even numbers from the nested tuple\n            even_tuple = extract_even(element)\n            if even_tuple:  # Only add non-empty tuples\n                result.append(even_tuple)\n    \n    return tuple(result)  # Convert the result list back to a tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n    C(n) = (2n)! / ((n + 1)! * n!)\n    \n    Args:\n    n (int): The index of the Catalan number to compute.\n    \n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    from math import factorial\n\n    # Calculate the nth Catalan number using the formula\n    return factorial(2 * n) // (factorial(n + 1) * factorial(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the pyramid.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n    # Area of the base (square)\n    base_area = base_edge ** 2\n    \n    # Slant height calculation using Pythagorean theorem\n    slant_height = (height**2 + (base_edge / 2)**2) ** 0.5\n    \n    # Area of the four triangular faces\n    lateral_area = 2 * base_edge * slant_height\n    \n    # Total surface area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area\n\n# Test the function with the provided test case\nassert surface_area(3, 4) == 33, \"Test case failed!\"\n\nprint(\"Test case passed! The surface area of the pyramid is:\", surface_area(3, 4))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list of dict): A list of dictionaries where each dictionary contains 'name' and 'price' keys.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list of dict: A list of the n most expensive items sorted by price in descending order.\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits the list at the nth element and appends the first part to the end.\n\n    Parameters:\n    arr (list): The list to be split.\n    n (int): The index at which to split the list.\n\n    Returns:\n    list: A new list with the first part moved to the end.\n    \"\"\"\n    # Ensure n is within the bounds of the list\n    if n < 0 or n >= len(arr):\n        raise ValueError(\"n must be between 0 and the length of the list - 1\")\n\n    # Split the list into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n\n    # Combine the second part with the first part\n    return second_part + first_part", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    input_list (list): The list to be converted.\n\n    Returns:\n    tuple: A tuple containing the elements of the input list.\n    \"\"\"\n    return tuple(input_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find all perfect squares between two given numbers (inclusive).\n    \n    Parameters:\n    start (int): The starting number of the range.\n    end (int): The ending number of the range.\n    \n    Returns:\n    list: A list of perfect squares between start and end.\n    \"\"\"\n    # List to hold the perfect squares\n    squares = []\n    \n    # Calculate the lower and upper bounds for perfect squares\n    lower_bound = int(start**0.5)  # Square root of the start\n    upper_bound = int(end**0.5)    # Square root of the end\n    \n    # Generate perfect squares in the range\n    for i in range(lower_bound, upper_bound + 1):\n        square = i * i\n        if start <= square <= end:\n            squares.append(square)\n    \n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, -1]]}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(numbers):\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numerical values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        raise ValueError(\"The list cannot be empty.\")\n    \n    largest = max(numbers)  # Find the largest value\n    smallest = min(numbers)  # Find the smallest value\n    return largest - smallest  # Return the difference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\nimport math\ndef polar_rect(radius, angle):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    radius (float): The radius in polar coordinates.\n    angle (float): The angle in radians in polar coordinates.\n    \n    Returns:\n    tuple: A tuple containing the rectangular coordinates as a tuple of (x, y) and a complex number.\n    \"\"\"\n    # Calculate rectangular coordinates\n    x = radius * math.cos(angle)\n    y = radius * math.sin(angle)\n    \n    # Create a complex number from the rectangular coordinates\n    complex_number = complex(x, y)\n    \n    return (x, y), complex_number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "from math import comb", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(input_list):\n    \"\"\"\n    Swap the first and last elements of the input list.\n\n    Parameters:\n    input_list (list): The list whose first and last elements are to be swapped.\n\n    Returns:\n    list: The list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(input_list) < 2:\n        return input_list  # No swap needed for empty or single-element lists\n\n    # Swap the first and last elements\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from each octet of the given IP address.\n\n    Parameters:\n    ip_address (str): The IP address as a string.\n\n    Returns:\n    str: The IP address with leading zeroes removed from each octet.\n    \"\"\"\n    # Split the IP address into its octets\n    octets = ip_address.split('.')\n    \n    # Remove leading zeroes from each octet and convert to int to avoid leading zeroes\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Join the cleaned octets back into a string\n    return '.'.join(cleaned_octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(tup):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n\n    Parameters:\n    tup (tuple): The tuple whose size is to be calculated.\n\n    Returns:\n    int: The size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference between the first even and first odd number in the list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The difference between the first even and first odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and first odd numbers\n    for number in numbers:\n        if number % 2 == 0 and first_even is None:\n            first_even = number\n        elif number % 2 != 0 and first_odd is None:\n            first_odd = number\n        \n        # Break early if both numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n\n    # If either even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n\n    # Return the difference\n    return first_even - first_odd", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the k-th element in the union of two sorted arrays.\n\n    Parameters:\n    arr1 (list): First sorted array.\n    arr2 (list): Second sorted array.\n    k (int): The k-th position to find (1-based index).\n\n    Returns:\n    int: The k-th element in the combined sorted array.\n    \"\"\"\n    len1, len2 = len(arr1), len(arr2)\n\n    # Ensure arr1 is the smaller array\n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n\n    if len1 == 0:\n        return arr2[k - 1]  # If the first array is empty, return the k-th element from the second array\n\n    if k == 1:\n        return min(arr1[0], arr2[0])  # If k is 1, return the minimum of the two arrays\n\n    # Binary search\n    low, high = 0, min(k, len1)\n\n    while low < high:\n        mid1 = (low + high) // 2\n        mid2 = k - mid1\n\n        # Adjust the search range based on the values at mid1 and mid2\n        if mid2 > 0 and mid1 < len1 and arr1[mid1] < arr2[mid2 - 1]:\n            low = mid1 + 1  # Increase mid1\n        else:\n            high = mid1  # Decrease mid1\n\n    mid1 = low\n    mid2 = k - mid1\n\n    # Determine the k-th element based on the boundaries\n    left1 = arr1[mid1 - 1] if mid1 > 0 else float('-inf')\n    left2 = arr2[mid2 - 1] if mid2 > 0 else float('-inf')\n\n    return max(left1, left2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and the average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum using the formula for the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2\n    # Calculate the average\n    average = total_sum / n if n > 0 else 0  # Avoid division by zero for n = 0\n\n    return total_sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits\n    each raised to the power of the number of digits.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if num is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to string to easily iterate over digits\n    digits = str(num)\n    num_digits = len(digits)\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in digits)\n    \n    # Check if the calculated sum is equal to the original number\n    return armstrong_sum == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    \"\"\"\n    Check if the given number is even.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers less than or equal to n.\n    \n    A lucid number is defined as a positive integer that is not the sum of any \n    two or more consecutive positive integers.\n    \n    Parameters:\n    n (int): The upper limit to find lucid numbers.\n    \n    Returns:\n    List[int]: A list of lucid numbers less than or equal to n.\n    \"\"\"\n    # Initialize a list to hold lucid numbers\n    lucid_numbers = []\n    \n    # A set to keep track of non-lucid numbers\n    non_lucid = set()\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # If the number is not in the non-lucid set, it is a lucid number\n        if i not in non_lucid:\n            lucid_numbers.append(i)\n            # Mark all sums of consecutive integers starting from this number\n            for j in range(i + 1, n + 1):\n                sum_consecutive = i\n                for k in range(i + 1, j + 1):\n                    sum_consecutive += k\n                    if sum_consecutive <= n:\n                        non_lucid.add(sum_consecutive)\n                    else:\n                        break\n    \n    return lucid_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s: str) -> str:\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Parameters:\n    s (str): The input string to search for repeated characters.\n\n    Returns:\n    str: The first repeated character, or None if no character is repeated.\n    \"\"\"\n    seen = set()  # A set to keep track of seen characters\n    for char in s:\n        if char in seen:\n            return char  # Return the first character that is repeated\n        seen.add(char)  # Add the character to the set if not seen\n    return None  # Return None if no repeated character is found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(input_string):\n    \"\"\"\n    Reverses the words in the given string that are separated by spaces.\n\n    Parameters:\n    input_string (str): The string containing words to be reversed.\n\n    Returns:\n    str: A string with the words in reverse order.\n    \"\"\"\n    # Split the input string into words using space as the delimiter\n    words = input_string.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a single string\n    return ' '.join(reversed_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Convert degrees to radians using the formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer n is a prime number.\n\n    A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n    \n    Parameters:\n    n (int): The integer to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False  # 0 and 1 are not prime numbers\n    if n <= 3:\n        return True   # 2 and 3 are prime numbers\n\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False  # n is divisible by i, hence not prime\n\n    return True  # n is prime if no divisors were found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(text, pattern):\n    \"\"\"\n    Search for a regex pattern in a given string and return the matching substring,\n    along with its start and end indices.\n\n    Parameters:\n    text (str): The string to search within.\n    pattern (str): The regex pattern to search for.\n\n    Returns:\n    tuple: A tuple containing the matching substring, start index, and end index.\n           Returns None if no match is found.\n    \"\"\"\n    # Use re.search to find the first occurrence of the pattern\n    match = re.search(pattern, text)\n    \n    if match:\n        # Extract the matching substring and its indices\n        matched_substring = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return (matched_substring, start_index, end_index)\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the list lst.\n    \n    Parameters:\n    lst (list): The input list from which the element will be removed.\n    k (int): The index of the element to remove (0-based index).\n    \n    Returns:\n    list: A new list with the k'th element removed.\n    \n    Raises:\n    IndexError: If k is out of bounds of the list.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index k is out of bounds.\")\n    \n    # Create a new list excluding the k'th element\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the nth Bell number.\n    \n    The Bell number B(n) is the number of ways to partition a set of n elements.\n    \n    Parameters:\n    n (int): The index of the Bell number to compute.\n    \n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    # Create a 2D list to store Bell numbers\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: B(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # Explicitly set the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    \n    # The nth Bell number is found at bell[n][0]\n    return bell[n][0]\n\n# Test the function with the provided assertion\nassert bell_number(2) == 2\n\n# You can add more test cases if needed\nif __name__ == \"__main__\":\n    print(\"Bell number for n=2:\", bell_number(2))  # Output: 2\n    print(\"Bell number for n=3:\", bell_number(3))  # Output: 5\n    print(\"Bell number for n=4:\", bell_number(4))  # Output: 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of the given matrix.\n\n    Parameters:\n    matrix (list of lists): A 2D list representing the matrix.\n    n (int): The index of the column to find the maximum value from.\n\n    Returns:\n    int: The maximum value in the nth column.\n    \n    Raises:\n    IndexError: If the column index n is out of bounds for the matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        raise ValueError(\"The matrix is empty.\")\n    \n    # Check if the column index is valid\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column index out of bounds.\")\n    \n    # Extract the nth column and find the maximum value\n    max_value = max(row[n] for row in matrix)\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    \"\"\"\n    Calculate the cumulative sum of all values in a list of tuples.\n\n    Parameters:\n    tuple_list (list of tuples): A list where each element is a tuple containing numeric values.\n\n    Returns:\n    int: The cumulative sum of all the values in the tuples.\n    \"\"\"\n    total_sum = 0  # Initialize the cumulative sum to zero\n    \n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Add the sum of the current tuple to the total_sum\n        total_sum += sum(tup)\n    \n    return total_sum\n\n# Test the function with the provided assertion\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\n# If the assertion passes, print a success message\nprint(\"Cumulative sum function works correctly!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    \"\"\"\n    Merges a list of lists into two separate lists.\n    \n    Args:\n    list_of_lists (list of list): A list where each sublist contains two elements.\n    \n    Returns:\n    list: A list containing two lists; the first list has the first elements of each sublist,\n          and the second list has the second elements of each sublist.\n    \"\"\"\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in list_of_lists:\n        # Append the first element to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Return the two lists as a list of lists\n    return [first_elements, second_elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average value for each tuple in a tuple of tuples.\n\n    Args:\n    tuples (tuple of tuples): A tuple containing multiple tuples of numbers.\n\n    Returns:\n    list: A list containing the average of each tuple.\n    \"\"\"\n    # Calculate the average for each tuple\n    averages = [sum(t) / len(t) for t in tuples]\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Parameters:\n    list1 (list of float): The numerator list.\n    list2 (list of float): The denominator list.\n\n    Returns:\n    list of float: A new list containing the results of the division.\n    \n    Raises:\n    ValueError: If the input lists are of different lengths.\n    ZeroDivisionError: If any element in list2 is zero.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in list2.\")\n        result.append(a / b)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Parameters:\n    tuple1 (tuple): The first tuple containing integers.\n    tuple2 (tuple): The second tuple containing integers.\n\n    Returns:\n    tuple: A new tuple containing the result of the modulo operation.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Perform element-wise modulo and return the result as a new tuple\n    return tuple(a % b for a, b in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s: str) -> str:\n    \"\"\"\n    Move all numbers in the given string to the end while preserving the order of characters.\n    \n    Parameters:\n    s (str): The input string containing both letters and numbers.\n    \n    Returns:\n    str: A new string with all letters followed by all numbers.\n    \"\"\"\n    letters = []\n    numbers = []\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)  # Collect numbers\n        else:\n            letters.append(char)  # Collect letters\n    \n    # Join letters and numbers to form the final string\n    return ''.join(letters) + ''.join(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    \"\"\"\n    Find the median of two sorted lists of the same size.\n\n    Parameters:\n    list1 (list): The first sorted list.\n    list2 (list): The second sorted list.\n    size (int): The size of the lists.\n\n    Returns:\n    float: The median of the two lists.\n    \"\"\"\n    # Combine the two lists\n    combined = sorted(list1 + list2)\n    \n    # Calculate the median\n    mid_index = size\n    median = (combined[mid_index - 1] + combined[mid_index]) / 2.0\n    \n    return median", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1], [2], 0]]}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers such that every pair is divisible.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The size of the largest divisible subset.\n    \"\"\"\n    # Sort the numbers to facilitate the subset search\n    numbers.sort()\n    \n    # Initialize an array to store the size of the largest divisible subset ending with each number\n    n = len(numbers)\n    dp = [1] * n  # Each number is a subset of size 1 by itself\n\n    # Build the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:  # Check if numbers[i] is divisible by numbers[j]\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # The size of the largest divisible subset will be the maximum value in dp\n    return max(dp)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    \"\"\"\n    Compute the n-th power of each number in the given list.\n\n    Parameters:\n    numbers (list): A list of numbers to be raised to the n-th power.\n    n (int): The power to which each number will be raised.\n\n    Returns:\n    list: A list containing each number raised to the n-th power.\n    \"\"\"\n    return [x ** n for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    Parameters:\n    radius (float): The radius of the semicircle. Must be non-negative.\n    \n    Returns:\n    float: The area of the largest inscribed triangle, or None if the radius is negative.\n    \"\"\"\n    if radius < 0:\n        return None\n    return radius ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(input_string):\n    \"\"\"\n    Convert the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return input_string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(input_string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Parameters:\n    input_string (str): The string in which spaces will be replaced.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    # Using the str.replace() method to replace spaces with '%20'\n    return input_string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A list containing only the even integers from the input list.\n    \"\"\"\n    # Using list comprehension to filter out even numbers\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(input_string):\n    \"\"\"\n    Replace whitespaces with underscores and underscores with whitespaces in the given string.\n\n    Parameters:\n    input_string (str): The string to be processed.\n\n    Returns:\n    str: The modified string with whitespaces and underscores swapped.\n    \"\"\"\n    # Create a new string to hold the modified characters\n    modified_string = []\n\n    for char in input_string:\n        if char == ' ':\n            modified_string.append('_')  # Replace whitespace with underscore\n        elif char == '_':\n            modified_string.append(' ')  # Replace underscore with whitespace\n        else:\n            modified_string.append(char)  # Keep other characters unchanged\n\n    # Join the list into a single string and return it\n    return ''.join(modified_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes in the list to the end while maintaining the order of non-zero elements.\n\n    Parameters:\n    lst (list): The input list containing integers.\n\n    Returns:\n    list: A new list with all zeroes moved to the end.\n    \"\"\"\n    # Create a new list to hold non-zero elements\n    non_zero_elements = [x for x in lst if x != 0]\n    # Count the number of zeroes\n    zero_count = lst.count(0)\n    # Extend the non-zero list with the zeroes\n    return non_zero_elements + [0] * zero_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_sum(arr, n):\n    \"\"\"\n    Calculate the sum of XOR of all pairs in the given list.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The sum of XOR of all pairs.\n    \"\"\"\n    total_xor_sum = 0\n    \n    # Iterate through all pairs (i, j) where i < j\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]  # Calculate XOR and add to total\n\n    return total_xor_sum\n\n# Test the function with the provided assertion\nassert pair_xor_sum([5, 9, 7, 6], 4) == 47\n\n# If the assertion passes, print a success message\nprint(\"The function works correctly and the assertion passed.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Function to perform heap sort on a list.\n    :param arr: The list to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    n = len(arr)\n\n    # Build a maxheap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements from heap\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)  # Heapify the root element\n\n    return arr", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    \"\"\"\n    Extracts all adjacent coordinates of the given coordinate tuple.\n\n    Args:\n    coord (tuple): A tuple representing the coordinate (x, y).\n\n    Returns:\n    list: A list of lists containing adjacent coordinates.\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n\n    # Generate all adjacent coordinates\n    for dx in range(-1, 2):  # -1, 0, 1 for x\n        for dy in range(-1, 2):  # -1, 0, 1 for y\n            if dx == 0 and dy == 0:\n                continue  # Skip the original coordinate\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "import math\ndef wind_chill(velocity_kmh, temperature_celsius):\n    \"\"\"\n    Calculate the wind chill index based on wind velocity and temperature.\n    \n    Parameters:\n    velocity_kmh (float): Wind velocity in kilometers per hour.\n    temperature_celsius (float): Temperature in degrees Celsius.\n    \n    Returns:\n    int: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Calculate the wind chill index using the formula\n    wci = (13.12 + \n            0.6215 * temperature_celsius - \n            11.37 * (velocity_kmh ** 0.16) + \n            0.3965 * temperature_celsius * (velocity_kmh ** 0.16))\n    \n    # Round up to the next integer\n    return math.ceil(wci)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(selling_price, cost_price):\n    \"\"\"\n    Check if there is no profit and no loss.\n    \n    Parameters:\n    selling_price (float): The price at which the item is sold.\n    cost_price (float): The price at which the item was purchased.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return selling_price == cost_price", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Sums the lengths of names in the provided list that do not start with a lowercase letter.\n\n    Parameters:\n    names (list of str): A list of names to be processed.\n\n    Returns:\n    int: The total length of the names that start with an uppercase letter.\n    \"\"\"\n    # Filter names that start with an uppercase letter and sum their lengths\n    total_length = sum(len(name) for name in names if name and name[0].isupper())\n    return total_length\n\n# Test the function with the provided sample\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n\n# If the assertion passes, print a success message\nprint(\"The function works correctly!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(s):\n    \"\"\"\n    Check if the string contains 'z' except at the start and end of the word.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if 'z' is found in the middle of the string, False otherwise.\n    \"\"\"\n    # Check if the string is long enough to have a middle section\n    if len(s) < 3:\n        return False\n    \n    # Check for 'z' in the substring excluding the first and last character\n    return 'z' in s[1:-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number using the formula:\n    P(n) = n * (7n - 5) / 2\n\n    Parameters:\n    n (int): The term number of the nonagonal number to calculate.\n\n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2  # Use integer division for exact result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the k-th position (1-based index).\n    \n    Parameters:\n    arr (list): The list of elements to be reversed.\n    k (int): The position up to which the array should be reversed (1-based index).\n    \n    Returns:\n    list: The array with elements reversed up to the k-th position.\n    \"\"\"\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array.\")\n    \n    # Reverse the subarray from the start to the k-th position\n    reversed_part = arr[:k][::-1]\n    \n    # Combine the reversed part with the rest of the array\n    return reversed_part + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to a tuple and returns the new tuple.\n\n    Parameters:\n    tup (tuple): The original tuple.\n    dictionary (dict): The dictionary to be added to the tuple.\n\n    Returns:\n    tuple: A new tuple containing the original elements and the dictionary.\n    \"\"\"\n    # Create a new tuple by adding the dictionary to the existing tuple\n    return tup + (dictionary,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0.0\n\n    n = len(matrix)\n    # Create a DP table to store the maximum total cost and the number of cells visited\n    dp_cost = [[0] * n for _ in range(n)]\n    dp_count = [[0] * n for _ in range(n)]\n\n    # Initialize the starting point\n    dp_cost[0][0] = matrix[0][0]\n    dp_count[0][0] = 1\n\n    # Fill the first row\n    for j in range(1, n):\n        dp_cost[0][j] = dp_cost[0][j - 1] + matrix[0][j]\n        dp_count[0][j] = dp_count[0][j - 1] + 1\n\n    # Fill the first column\n    for i in range(1, n):\n        dp_cost[i][0] = dp_cost[i - 1][0] + matrix[i][0]\n        dp_count[i][0] = dp_count[i - 1][0] + 1\n\n    # Fill the rest of the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            if dp_cost[i - 1][j] > dp_cost[i][j - 1]:\n                dp_cost[i][j] = dp_cost[i - 1][j] + matrix[i][j]\n                dp_count[i][j] = dp_count[i - 1][j] + 1\n            else:\n                dp_cost[i][j] = dp_cost[i][j - 1] + matrix[i][j]\n                dp_count[i][j] = dp_count[i][j - 1] + 1\n\n    # Calculate the maximum average\n    total_cost = dp_cost[n - 1][n - 1]\n    total_cells = dp_count[n - 1][n - 1]\n    max_average = total_cost / total_cells\n\n    return max_average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the two lists have the same values.\n\n    Parameters:\n    list1 (list): The first list of values.\n    list2 (list): The second list of values.\n\n    Returns:\n    int: The count of indices where the values in both lists are the same.\n    \"\"\"\n    # Ensure both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    # Initialize a counter for matching indices\n    count = 0\n\n    # Iterate through both lists and compare values at each index\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on minimum height and weight.\n\n    Parameters:\n    students (dict): A dictionary where keys are student names and values are tuples of (height, weight).\n    min_height (float): The minimum height a student must have to be included in the result.\n    min_weight (float): The minimum weight a student must have to be included in the result.\n\n    Returns:\n    dict: A dictionary of students who meet the height and weight criteria.\n    \"\"\"\n    filtered_students = {\n        name: (height, weight)\n        for name, (height, weight) in students.items()\n        if height > min_height and weight > min_weight\n    }\n    return filtered_students", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70]], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base raised to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The exponent to which the base is raised.\n\n    Returns:\n    int: The sum of the digits of the result of base raised to power.\n    \"\"\"\n    # Calculate base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    Multiplies adjacent elements of the input tuple.\n\n    Args:\n    t (tuple): A tuple of numbers (t_1, t_2, ..., t_{N+1}).\n\n    Returns:\n    tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Calculate the length of the input tuple\n    n = len(t)\n    \n    # Ensure the input tuple has at least two elements\n    if n < 2:\n        raise ValueError(\"Input tuple must contain at least two elements.\")\n    \n    # Create a new tuple with the products of adjacent elements\n    result = tuple(t[i] * t[i + 1] for i in range(n - 1))\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12]]], "plus_fail_tests": [[[]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(input_string):\n    \"\"\"\n    Extracts values between quotation marks from the given string.\n\n    Args:\n    input_string (str): The string from which to extract quoted values.\n\n    Returns:\n    list: A list of strings found between quotation marks.\n    \"\"\"\n    import re\n    \n    # Use regular expression to find all occurrences of text within double quotes\n    quoted_values = re.findall(r'\"(.*?)\"', input_string)\n    \n    return quoted_values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    \"\"\"\n    Takes two lists a and b, and returns a new list containing the element-wise sums of a and b.\n    \n    Parameters:\n    a (list): The first list of numbers.\n    b (list): The second list of numbers.\n    \n    Returns:\n    list: A new list where each element is the sum of the corresponding elements in a and b.\n    \n    Raises:\n    ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    return [a_i + b_i for a_i, b_i in zip(a, b)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(input_list):\n    \"\"\"\n    Remove consecutive duplicates from the input list.\n\n    Parameters:\n    input_list (list): The list from which to remove consecutive duplicates.\n\n    Returns:\n    list: A new list with consecutive duplicates removed.\n    \"\"\"\n    if not input_list:  # Check if the list is empty\n        return []\n\n    # Initialize the result list with the first element\n    result = [input_list[0]]\n\n    # Iterate through the input list starting from the second element\n    for current in input_list[1:]:\n        # Only add the current element if it's different from the last added element\n        if current != result[-1]:\n            result.append(current)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(input_string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots in the input string with a colon.\n\n    Parameters:\n    input_string (str): The string in which to replace special characters.\n\n    Returns:\n    str: The modified string with special characters replaced by colons.\n    \"\"\"\n    # Define the characters to be replaced\n    special_chars = [' ', ',', '.']\n    \n    # Replace each special character with a colon\n    for char in special_chars:\n        input_string = input_string.replace(char, ':')\n    \n    return input_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The number to find in the array.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1  # Initialize result to -1 (not found)\n\n    while left <= right:\n        mid = left + (right - left) // 2  # Calculate mid index\n\n        if arr[mid] == target:\n            result = mid  # Update result if target is found\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(arr):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of the given list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    # Iterate through all possible sublists\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]  # Calculate the product of the current sublist\n            total_sum += product  # Add the product to the total sum\n\n    return total_sum\n\n# Test the function with the provided assertion\nassert sum_of_subarray_prod([1, 2, 3]) == 20\n\n# You can add more test cases to validate the function\nprint(\"All tests passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A list of sorted integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index at which the value should be inserted.\n    \"\"\"\n    low, high = 0, len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggle the bits of the number except the first and the last bit.\n\n    Parameters:\n    n (int): The input number to toggle bits.\n\n    Returns:\n    int: The number with middle bits toggled.\n    \"\"\"\n    # Convert the number to its binary representation\n    binary_str = bin(n)[2:]  # Get binary string without '0b' prefix\n    length = len(binary_str)\n\n    # If the number has less than 3 bits, return it as is\n    if length <= 2:\n        return n\n\n    # Toggle the middle bits\n    # Keep the first and last bits the same, toggle the rest\n    toggled_bits = binary_str[0]  # Keep the first bit\n    for bit in binary_str[1:-1]:  # Iterate over middle bits\n        toggled_bits += '1' if bit == '0' else '0'  # Toggle the bit\n    toggled_bits += binary_str[-1]  # Keep the last bit\n\n    # Convert the toggled binary string back to an integer\n    return int(toggled_bits, 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(s):\n    \"\"\"\n    Check if the given string starts with a vowel (a, e, i, o, u).\n    \n    Args:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    # Use regex to check if the string starts with a vowel\n    return bool(re.match(r'^[aeiouAEIOU]', s))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements as key-value pairs.\n    \n    Args:\n    tup (tuple): A tuple containing elements to be converted into a dictionary.\n    \n    Returns:\n    dict: A dictionary with keys and values from adjacent elements of the tuple.\n    \"\"\"\n    # Check if the tuple has an even number of elements\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements.\")\n    \n    # Create a dictionary using a dictionary comprehension\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    \"\"\"\n    Check if all characters in the string are the same.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    # If the string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare each character with the first character\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of an edge.\n\n    Parameters:\n    a (float): The length of an edge of the tetrahedron.\n\n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * a**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate the list 'lst' to the right by 'k' positions.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    k (int): The number of positions to rotate the list.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return lst\n    \n    k = k % len(lst)  # Handle cases where k is greater than the list length\n    return lst[-k:] + lst[:-k]  # Rotate the list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(input_tuple):\n    \"\"\"\n    Check if the given tuple contains any None values.\n\n    Parameters:\n    input_tuple (tuple): The tuple to check for None values.\n\n    Returns:\n    bool: True if there is at least one None value, False otherwise.\n    \"\"\"\n    # Iterate through each element in the tuple\n    for item in input_tuple:\n        # Check if the current item is None\n        if item is None:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list: A list of numbers that are divisible by all their digits.\n    \"\"\"\n    result = []\n    \n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        divisible = True\n        \n        for digit in str_num:\n            digit_int = int(digit)\n            # Check if the digit is not zero and if the number is divisible by the digit\n            if digit_int == 0 or num % digit_int != 0:\n                divisible = False\n                break\n        \n        if divisible:\n            result.append(num)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s: str) -> str:\n    \"\"\"\n    Insert spaces before capital letters in the given string, except for the first character.\n    \n    Args:\n    s (str): The input string to process.\n    \n    Returns:\n    str: The modified string with spaces inserted before capital letters.\n    \"\"\"\n    # Use a list comprehension to iterate through the string and add spaces before capital letters\n    result = ''.join([' ' + char if char.isupper() and i != 0 else char for i, char in enumerate(s)])\n    return result.strip()  # Remove leading space if it exists", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(string_list):\n    \"\"\"\n    Sorts a list of strings representing numbers numerically.\n\n    Args:\n    string_list (list of str): A list of strings, each representing a number.\n\n    Returns:\n    list: A list of integers sorted in ascending order.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    int_list = [int(num) for num in string_list]\n    \n    # Sort the list of integers\n    sorted_list = sorted(int_list)\n    \n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    \"\"\"\n    Adds the elements of the given tuple to the end of the given list.\n\n    Parameters:\n    lst (list): The list to which the tuple elements will be added.\n    tpl (tuple): The tuple containing elements to be added to the list.\n\n    Returns:\n    list: The updated list with the elements of the tuple added.\n    \"\"\"\n    # Extend the list with the elements of the tuple\n    lst.extend(tpl)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n    \n    A min heap is a complete binary tree where the value of each node \n    is less than or equal to the values of its children. In an array \n    representation of a heap, for any element at index i:\n    - The left child is at index 2*i + 1\n    - The right child is at index 2*i + 2\n    \n    Args:\n    arr (list): The array to check.\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    \n    # Check each parent node to ensure it is less than or equal to its children\n    for i in range((n // 2) - 1, -1, -1):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check left child\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        \n        # Check right child\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n            \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number using a recursive approach with memoization.\n    \n    Parameters:\n    n (int): The index of the Jacobsthal number to compute.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    # Dictionary to store previously computed Jacobsthal numbers\n    memo = {0: 0, 1: 1}\n\n    def jacobsthal_recursive(k):\n        # Check if the value is already computed\n        if k in memo:\n            return memo[k]\n        \n        # Compute the Jacobsthal number using the recurrence relation\n        memo[k] = jacobsthal_recursive(k - 2) + 2 * jacobsthal_recursive(k - 1)\n        return memo[k]\n\n    return jacobsthal_recursive(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples based on the second element of each tuple.\n\n    Parameters:\n    records (list of tuple): A list of tuples where each tuple contains a name and a score.\n    k (int): The number of minimum records to return.\n\n    Returns:\n    list of tuple: A list containing the k tuples with the smallest second element.\n    \"\"\"\n    # Sort the records based on the second element of the tuple (the score)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return sorted_records[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of elements\n    that are common to all three lists at the same indices.\n\n    Parameters:\n    l1 (list): The first list.\n    l2 (list): The second list.\n    l3 (list): The third list.\n\n    Returns:\n    list: A list of common elements at the same indices.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the indices of the shortest list to avoid IndexError\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The second smallest number in the list.\n    \n    Raises:\n    ValueError: If there are fewer than two unique numbers in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # Check if there are at least two unique numbers\n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must contain at least two unique numbers.\")\n    \n    # Sort the unique numbers\n    sorted_numbers = sorted(unique_numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list.\n\n    Args:\n    string_list (list of str): A list of strings to check for reverse pairs.\n\n    Returns:\n    int: The count of reverse string pairs.\n    \"\"\"\n    # Create a set to store the strings for O(1) average time complexity lookups\n    string_set = set(string_list)\n    count = 0\n\n    # Iterate through each string in the list\n    for s in string_list:\n        # Check if the reverse of the string exists in the set\n        if s[::-1] in string_set:\n            count += 1\n\n    # Each pair is counted twice (e.g., \"julia\" and \"ailuj\"), so divide by 2\n    return count // 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Count occurrences of lists within a list and return a dictionary\n    where each list is converted to a tuple and the value is the count\n    of occurrences.\n\n    Parameters:\n    lst (list): A list of lists to be counted.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    count_dict = {}\n    \n    for sublist in lst:\n        # Convert the list to a tuple to use it as a dictionary key\n        tuple_key = tuple(sublist)\n        \n        # Increment the count for this tuple in the dictionary\n        if tuple_key in count_dict:\n            count_dict[tuple_key] += 1\n        else:\n            count_dict[tuple_key] = 1\n            \n    return count_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "import re\ndef is_decimal(s):\n    \"\"\"\n    Check if the given string is a decimal number with a precision of 2.\n    \n    A valid decimal number in this context is defined as:\n    - It may start with an optional '+' or '-' sign.\n    - It must contain digits before the decimal point.\n    - It must contain exactly two digits after the decimal point.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a valid decimal number with precision of 2, False otherwise.\n    \"\"\"\n    # Regular expression to match a decimal number with exactly two decimal places\n    pattern = r'^[+-]?(\\d+)(\\.\\d{2})?$'\n    \n    # Use re.match to check if the string matches the pattern\n    return bool(re.match(pattern, s))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_element(numbers):\n    \"\"\"\n    Check if the list contains only one distinct element.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if there is only one distinct element, False otherwise.\n    \"\"\"\n    # Use a set to find distinct elements\n    distinct_elements = set(numbers)\n    \n    # If the length of the set is 1, it means all elements are the same\n    return len(distinct_elements) == 1\n\n# Test cases\nassert unique_element([1, 1, 1]) == True\nassert unique_element([2, 2, 2, 2]) == True\nassert unique_element([1, 2, 1]) == False\nassert unique_element([3]) == True\nassert unique_element([]) == False  # An empty list does not have a distinct element\n\nprint(\"All test cases passed!\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    \"\"\"\n    Check if the given month number (1-12) has 30 days.\n\n    Parameters:\n    month (int): The month number (1 for January, 2 for February, ..., 12 for December)\n\n    Returns:\n    bool: True if the month has 30 days, False otherwise\n    \"\"\"\n    # List of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}  # April, June, September, November\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n\n    # Return True if the month is in the set of months with 30 days\n    return month in months_with_30_days", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Function to find the minimum difference between any two elements in the given array.\n    \n    Parameters:\n    arr (tuple): A tuple of integers.\n    n (int): The number of elements in the array.\n    \n    Returns:\n    int: The minimum difference between any two elements.\n    \"\"\"\n    # Convert the tuple to a list for easier manipulation\n    arr = list(arr)\n    \n    # Sort the array to make it easier to find the minimum difference\n    arr.sort()\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array and find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(input_string):\n    \"\"\"\n    Count the number of digits in the given string.\n\n    Parameters:\n    input_string (str): The string to be analyzed.\n\n    Returns:\n    int: The count of digits in the input string.\n    \"\"\"\n    # Initialize a counter for digits\n    digit_count = 0\n    \n    # Iterate through each character in the string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            digit_count += 1\n            \n    return digit_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Check if a number is polite.\n    A number is polite if it is not a power of two.\n    \"\"\"\n    # A number is a power of two if it has only one bit set in its binary representation\n    return (n & (n - 1)) != 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n\n    Args:\n    lst (list): A list of items.\n\n    Returns:\n    list: A list of tuples, where each tuple contains a pair of consecutive items.\n    \"\"\"\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate through the list, stopping one item before the end\n    for i in range(len(lst) - 1):\n        # Create a tuple of the current item and the next item\n        pairs.append((lst[i], lst[i + 1]))\n    \n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs in the list 'numbers' whose sum is equal to 'target_sum'.\n\n    Parameters:\n    numbers (list): A list of integers.\n    target_sum (int): The target sum for which pairs are to be counted.\n\n    Returns:\n    int: The count of pairs whose sum equals 'target_sum'.\n    \"\"\"\n    count = 0\n    num_count = {}\n\n    # Count occurrences of each number in the list\n    for num in numbers:\n        num_count[num] = num_count.get(num, 0) + 1\n\n    # Iterate through the list to find pairs\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_count:\n            count += num_count[complement]\n\n            # If num and complement are the same, we need to adjust the count\n            if complement == num:\n                count -= 1\n\n    # Each pair is counted twice, so divide by 2\n    return count // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n    \n    The difference is defined as the elements that are in list1 but not in list2.\n    \n    Parameters:\n    list1 (list): The first list from which to find the difference.\n    list2 (list): The second list to compare against.\n    \n    Returns:\n    list: A list containing the elements from list1 that are not in list2.\n    \"\"\"\n    # Use a list comprehension to filter out elements in list1 that are in list2\n    return [item for item in list1 if item not in list2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(n):\n        # Calculate the odd number (2*i + 1)\n        odd_number = 2 * i + 1\n        # Add the fourth power of the odd number to the total sum\n        total_sum += odd_number ** 4\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced.\n    \n    Parameters:\n    expression (str): The expression to check for balance.\n    \n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    # Dictionary to hold matching pairs of brackets\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    # Stack to keep track of opening brackets\n    stack = []\n\n    for char in expression:\n        # If the character is one of the closing brackets\n        if char in matching_brackets:\n            # Pop the top element from the stack if it's not empty, else assign a dummy value\n            top_element = stack.pop() if stack else None\n            \n            # Check if the popped element matches the corresponding opening bracket\n            if matching_brackets[char] != top_element:\n                return False\n        # If it's an opening bracket, push it onto the stack\n        elif char in matching_brackets.values():\n            stack.append(char)\n\n    # If the stack is empty, all opening brackets were matched\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(input_string, k):\n    \"\"\"\n    Remove all words with length k from the input string.\n\n    Parameters:\n    input_string (str): The string from which to remove words.\n    k (int): The length of words to remove.\n\n    Returns:\n    str: A string with words of length k removed.\n    \"\"\"\n    # Split the input string into words\n    words = input_string.split()\n    \n    # Filter out words that have length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a string\n    return ' '.join(filtered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(main_string, substring):\n    \"\"\"\n    Find the occurrence and position of the substring within the main string.\n    \n    Parameters:\n    main_string (str): The string to search within.\n    substring (str): The substring to find.\n    \n    Returns:\n    tuple or None: A tuple containing the substring and its start and end positions\n                   if found, otherwise None.\n    \"\"\"\n    start_index = main_string.find(substring)\n    \n    if start_index == -1:\n        return None  # Return None if the substring is not found\n    \n    end_index = start_index + len(substring)  # Calculate the end index\n    return (substring, start_index, end_index)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index in the list contains odd numbers.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for index in range(1, len(lst), 2):  # Start from index 1 and step by 2\n        if lst[index] % 2 == 0:  # Check if the number at the odd index is even\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Calculate the sum of non-repeated elements in the given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements.\n    \"\"\"\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Count each element in the list\n    for num in lst:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of elements that appear only once\n    non_repeated_sum = sum(num for num, count in element_count.items() if count == 1)\n    \n    return non_repeated_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 1, 1, 4, 5, 6]]], "plus_fail_tests": [[[-1, -2, -3, -1, -1, -4, -5, -6]]]}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(input_list):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n    input_list (list): The list of elements to be processed.\n\n    Returns:\n    list: A list of sublists, each containing consecutive duplicates.\n    \"\"\"\n    if not input_list:  # Check for an empty list\n        return []\n\n    packed_list = []  # Initialize the list to hold packed sublists\n    current_sublist = [input_list[0]]  # Start with the first element\n\n    for element in input_list[1:]:  # Iterate through the input list starting from the second element\n        if element == current_sublist[-1]:  # Check if the current element is the same as the last in the sublist\n            current_sublist.append(element)  # Add to the current sublist\n        else:\n            packed_list.append(current_sublist)  # Append the current sublist to the packed list\n            current_sublist = [element]  # Start a new sublist with the current element\n\n    packed_list.append(current_sublist)  # Append the last sublist after the loop ends\n    return packed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n\n    Args:\n    tuple_list (list of tuples): A list containing tuples of integers.\n\n    Returns:\n    list of tuples: A list of tuples containing the sums of each combination.\n    \"\"\"\n    result = set()  # Use a set to avoid duplicate sums\n\n    # Iterate through each pair of tuples in the list\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            # Calculate the sum of the corresponding elements of the tuples\n            sum_tuple = (tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1])\n            result.add(sum_tuple)  # Add the sum tuple to the set\n\n    return sorted(result)  # Return the sorted list of unique sums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[100, 200], [300, 400], [500, 600], [700, 800]]]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    A triangular number is defined as T_k = k * (k + 1) / 2 for k = 1, 2, 3, ...\n    \n    Parameters:\n    n (int): The number of digits the triangular number should have.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Number of digits must be a positive integer.\")\n\n    index = 1  # Start with the first triangular number\n    while True:\n        # Calculate the triangular number T_k\n        triangular_number = index * (index + 1) // 2\n        \n        # Check if the number of digits in the triangular number is equal to n\n        if len(str(triangular_number)) >= n:\n            return index\n        \n        index += 1  # Move to the next triangular number", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd-length subarrays of the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd-length subarrays.\n    \"\"\"\n    total_sum = 0\n    n = len(arr)\n\n    # Iterate over all possible starting points of subarrays\n    for start in range(n):\n        # Iterate over all possible ending points of subarrays\n        for end in range(start, n):\n            # Calculate the length of the current subarray\n            length = end - start + 1\n            # Check if the length is odd\n            if length % 2 == 1:\n                # Add the sum of the current subarray to the total sum\n                total_sum += sum(arr[start:end + 1])\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    This function finds the product of the first even and first odd number\n    in the given list of numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The product of the first even and first odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    # Iterate through the list to find the first even and odd numbers\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break early if both numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n\n    # If either even or odd number is not found, return 0\n    if first_even is None or first_odd is None:\n        return 0\n\n    # Return the product of the first even and first odd number\n    return first_even * first_odd", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple, e.g., \"(7, 8, 9)\"\n\n    Returns:\n    tuple: A tuple of integers.\n    \"\"\"\n    # Remove the parentheses and split the string by comma\n    # Then convert each element to an integer and return as a tuple\n    return tuple(int(num) for num in tuple_str.strip(\"()\").split(\", \"))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(sorted_list, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    sorted_list (list): A list of sorted integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index at which the value should be inserted.\n    \"\"\"\n    left, right = 0, len(sorted_list)\n\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(s):\n    \"\"\"\n    Check if the input string matches the pattern 'a' followed by exactly three 'b's.\n    \n    Args:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Define the regex pattern for 'a' followed by exactly three 'b's\n    pattern = r'^ab{3}$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    return bool(re.match(pattern, s))", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given list and string.\n\n    Parameters:\n    lst (list): A list of strings.\n    string (str): A string to be added to the tuple.\n\n    Returns:\n    tuple: A tuple containing elements from the list followed by the string.\n    \"\"\"\n    # Create a tuple from the list and add the string at the end\n    return tuple(lst) + (string,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index in the list contains an even number.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for index in range(0, len(lst), 2):  # Iterate over even indices\n        if lst[index] % 2 != 0:  # Check if the number at the even index is odd\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    \"\"\"\n    Remove nested tuples from the given tuple.\n\n    Parameters:\n    input_tuple (tuple): The tuple from which nested tuples will be removed.\n\n    Returns:\n    tuple: A new tuple containing only the non-tuple elements from the input.\n    \"\"\"\n    # Use a generator expression to filter out nested tuples\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given list of lists.\n\n    Parameters:\n    lists (list): A list containing multiple lists.\n\n    Returns:\n    int: The count of lists in the input list.\n    \"\"\"\n    # Return the length of the input list, which represents the number of lists it contains\n    return len(lists)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The element to find the last position of.\n\n    Returns:\n    int: The last index of the target in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            last_index = mid  # Update last_index when target is found\n            left = mid + 1    # Move to the right half to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1    # Move to the right half\n        else:\n            right = mid - 1   # Move to the left half\n\n    return last_index", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(s):\n    \"\"\"\n    Check if the string starts with 'a' and ends with 'b'.\n    \n    Args:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the string starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    # Use a regular expression to match the pattern\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, s))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(input_dict):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    input_dict (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    # Use the built-in sum function to calculate the total of the dictionary values\n    total_sum = sum(input_dict.values())\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers in the range [l, r].\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers in the range.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the range from l to r\n    for number in range(l, r + 1):\n        # Check if the number is odd\n        if number % 2 != 0:\n            total_sum += number  # Add to the sum if it's odd\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(array):\n    \"\"\"\n    Calculate the sum of the elements in the given array.\n\n    Parameters:\n    array (list): A list of numbers to sum.\n\n    Returns:\n    int or float: The sum of the elements in the array.\n    \"\"\"\n    total = 0  # Initialize total to 0\n    for number in array:  # Iterate through each number in the array\n        total += number  # Add the number to the total\n    return total  # Return the final sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of a 32-bit integer n to the left by d positions.\n\n    Parameters:\n    n (int): The number to rotate (assumed to be a 32-bit integer).\n    d (int): The number of positions to rotate left.\n\n    Returns:\n    int: The result of rotating n left by d positions.\n    \"\"\"\n    # Ensure d is within the range of 0 to 31\n    d = d % 32\n    \n    # Perform the left rotation\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string: str) -> str:\n    \"\"\"\n    Remove all whitespaces from the input string.\n\n    Parameters:\n    input_string (str): The string from which to remove whitespaces.\n\n    Returns:\n    str: The input string without any whitespaces.\n    \"\"\"\n    # Use the replace method to remove spaces\n    return input_string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we return 2\n    if count == 2:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Function to check whether the count of divisors of a number is even.\n    \n    Parameters:\n    n (int): The number to check for divisors.\n    \n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    # Loop through all numbers from 1 to n to count divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n            \n    # Check if the count of divisors is even\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number n is a perfect square.\n\n    A perfect square is an integer that is the square of an integer.\n    \n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False  # Negative numbers cannot be perfect squares\n    root = int(n**0.5)  # Calculate the integer square root\n    return root * root == n  # Check if the square of the root equals n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in the list is even.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s: str) -> int:\n    \"\"\"\n    Function to find the maximum run of consecutive uppercase characters in a given string.\n\n    Parameters:\n    s (str): The input string to be analyzed.\n\n    Returns:\n    int: The length of the longest run of consecutive uppercase characters.\n    \"\"\"\n    max_run = 0  # Variable to keep track of the maximum run found\n    current_run = 0  # Variable to count the current run of uppercase characters\n\n    for char in s:\n        if char.isupper():  # Check if the character is uppercase\n            current_run += 1  # Increment the current run count\n            max_run = max(max_run, current_run)  # Update max_run if current_run is greater\n        else:\n            current_run = 0  # Reset current run if a lowercase character is found\n\n    return max_run  # Return the maximum run found", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lists (list of list of int): A list containing sublists of integers.\n\n    Returns:\n    list: The sublist with the highest sum of its elements.\n    \"\"\"\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')  # Start with the lowest possible value\n    max_list = []\n\n    # Iterate through each sublist in the provided list of lists\n    for sublist in lists:\n        current_sum = sum(sublist)  # Calculate the sum of the current sublist\n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum  # Update the maximum sum\n            max_list = sublist      # Update the list with the highest sum\n\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    This function returns the first odd number from a given list of numbers.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The first odd number found in the list, or None if no odd number exists.\n    \"\"\"\n    for number in numbers:\n        if number % 2 != 0:  # Check if the number is odd\n            return number\n    return None  # Return None if no odd number is found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Parameters:\n    tuple1 (tuple): The first tuple containing elements to compare against.\n    tuple2 (tuple): The second tuple containing elements to check.\n\n    Returns:\n    bool: True if all elements in tuple2 are smaller than those in tuple1, False otherwise.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Compare each element of the tuples\n    for a, b in zip(tuple1, tuple2):\n        if not (b < a):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuple contains the specified value k.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n    k (any): The value to search for in the tuple.\n\n    Returns:\n    bool: True if k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}, "pass_at_k": {"base": {"pass@1": 0.8042328042328042}, "plus": {"pass@1": 0.6851851851851852}}}