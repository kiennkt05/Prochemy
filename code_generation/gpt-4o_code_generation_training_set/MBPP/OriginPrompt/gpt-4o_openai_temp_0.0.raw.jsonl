{"task_id": "Mbpp/2", "solution": "```python\ndef similar_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a list of shared elements.\n    \"\"\"\n    # Convert both lists to sets to find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of both sets\n    shared_elements = set1.intersection(set2)\n    \n    # Return the result as a list\n    return list(shared_elements)\n\n# Test the function with the provided assertion\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))\n\n# Additional test cases\nprint(similar_elements([1, 2, 3], [3, 4, 5]))  # Output: [3]\nprint(similar_elements(['a', 'b', 'c'], ['c', 'd', 'e']))  # Output: ['c']\nprint(similar_elements([10, 20, 30], [40, 50, 60]))  # Output: []\nprint(similar_elements([], [1, 2, 3]))  # Output: []\nprint(similar_elements([1, 2, 3], []))  # Output: []\n```\nThis script defines a function `similar_elements` that takes two lists as input and returns a list of elements that are present in both lists. The function uses set operations to find the intersection of the two lists, which represents the shared elements. The script also includes a test case to verify the function's correctness, as well as additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/3", "solution": "```python\ndef is_not_prime(n):\n    \"\"\"\n    Function to determine if a number is not prime.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is not prime, False if it is prime.\n    \"\"\"\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n\n# Test cases\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(9) == True\nassert is_not_prime(11) == False\nassert is_not_prime(15) == True\nassert is_not_prime(17) == False\nassert is_not_prime(1) == True\nassert is_not_prime(0) == True\nassert is_not_prime(-5) == True\n\nprint(\"All test cases passed!\")\n```\n\nThis script defines a function `is_not_prime` that checks if a given number is not a prime number. It includes test cases to verify the correctness of the function. The function uses a basic algorithm to check for primality, which is efficient for small numbers."}
{"task_id": "Mbpp/4", "solution": "```python\nimport heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    :param numbers: List of integers\n    :param n: Number of largest integers to find\n    :return: List of n largest integers in descending order\n    \"\"\"\n    # Use heapq.nlargest to find the n largest numbers\n    largest_numbers = heapq.nlargest(n, numbers)\n    return largest_numbers\n\n# Test the function with the provided assertion\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n\n# Additional test cases\nprint(heap_queue_largest([1, 2, 3, 4, 5], 2))  # Output: [5, 4]\nprint(heap_queue_largest([10, 20, 30, 40, 50], 1))  # Output: [50]\nprint(heap_queue_largest([5, 5, 5, 5, 5], 3))  # Output: [5, 5, 5]\nprint(heap_queue_largest([100, 90, 80, 70, 60], 5))  # Output: [100, 90, 80, 70, 60]\n```\n\nThis script defines a function `heap_queue_largest` that uses the `heapq.nlargest` method to find the `n` largest integers from a list and returns them in descending order. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/6", "solution": "```python\ndef differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at exactly one bit position.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at exactly one bit position, False otherwise.\n    \"\"\"\n    # XOR the two numbers. The result will have bits set to 1 where num1 and num2 differ.\n    xor_result = num1 ^ num2\n    \n    # Check if xor_result is a power of two, which means it has exactly one bit set.\n    # A number is a power of two if it is greater than 0 and its binary representation has only one '1'.\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n\n# Test the function with the provided assertion\nassert differ_At_One_Bit_Pos(13, 9) == True\n\n# Additional test cases\nassert differ_At_One_Bit_Pos(13, 12) == True  # 1101 and 1100 differ at one bit\nassert differ_At_One_Bit_Pos(13, 15) == True  # 1101 and 1111 differ at one bit\nassert differ_At_One_Bit_Pos(13, 14) == False # 1101 and 1110 differ at two bits\nassert differ_At_One_Bit_Pos(13, 13) == False # 1101 and 1101 differ at zero bits\n```"}
{"task_id": "Mbpp/7", "solution": "```python\ndef find_char_long(s):\n    # Split the string into words\n    words = s.split()\n    # Filter words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\n# Test the function with the provided example\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\n# Additional test cases\nprint(find_char_long('This is a test sentence'))  # ['This', 'test', 'sentence']\nprint(find_char_long('Short words are not included'))  # ['Short', 'words', 'included']\nprint(find_char_long('1234 5678 90'))  # ['1234', '5678']\nprint(find_char_long(''))  # []\nprint(find_char_long('word'))  # ['word']\n```"}
{"task_id": "Mbpp/8", "solution": "```python\ndef square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with the squares of each number.\n\n    :param nums: List of integers\n    :return: List of integers where each element is the square of the corresponding element in the input list\n    \"\"\"\n    return [x ** 2 for x in nums]\n\n# Test the function with the provided assertion\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# Additional test cases\nprint(square_nums([0, -1, -2, 3]))  # Output should be [0, 1, 4, 9]\nprint(square_nums([]))  # Output should be []\nprint(square_nums([10, 20, 30]))  # Output should be [100, 400, 900]\n```\n"}
{"task_id": "Mbpp/9", "solution": "```python\ndef find_Rotations(s):\n    \"\"\"\n    This function finds the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Parameters:\n    s (str): The input string to be rotated.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(s)\n    # Concatenate the string with itself\n    doubled_s = s + s\n    \n    # Iterate over possible rotation lengths\n    for i in range(1, n + 1):\n        # Check if the substring of length n starting from i is equal to the original string\n        if doubled_s[i:i + n] == s:\n            return i\n    \n    # If no rotation is found, return the length of the string\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abcabc\") == 3\nassert find_Rotations(\"abab\") == 2\nassert find_Rotations(\"abcd\") == 4\nassert find_Rotations(\"a\") == 1\n```"}
{"task_id": "Mbpp/11", "solution": "```python\ndef remove_Occ(s, char):\n    \"\"\"\n    Remove the first and last occurrence of the given character from the string.\n\n    Parameters:\n    s (str): The input string.\n    char (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_occurrence = s.find(char)\n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(char)\n\n    # If the character is not found or only found once, return the original string\n    if first_occurrence == -1 or first_occurrence == last_occurrence:\n        return s\n\n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    # Adjust the last occurrence index since the string has been modified\n    last_occurrence -= 1\n    # Remove the last occurrence\n    s = s[:last_occurrence] + s[last_occurrence + 1:]\n\n    return s\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nprint(\"Test passed!\")\n```\n\nThis script defines a function `remove_Occ` that removes the first and last occurrence of a specified character from a given string. It includes an assertion to test the function with the example provided."}
{"task_id": "Mbpp/12", "solution": "```python\ndef sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: The matrix sorted by the sum of its rows.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Test the function with the provided example\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\n# Additional test cases\nprint(sort_matrix([[3, 3, 3], [1, 1, 1], [2, 2, 2]]))  # Expected: [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\nprint(sort_matrix([[5, 5], [1, 2], [3, 4]]))          # Expected: [[1, 2], [3, 4], [5, 5]]\nprint(sort_matrix([[0, 0, 0], [0, 0, 1], [0, 0, 2]]))  # Expected: [[0, 0, 0], [0, 0, 1], [0, 0, 2]]\n```\n"}
{"task_id": "Mbpp/14", "solution": "```python\ndef find_Volume(base_length, height_of_triangle, length_of_prism):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): The base length of the triangular face.\n    height_of_triangle (float): The height of the triangular face.\n    length_of_prism (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    area_of_triangle = 0.5 * base_length * height_of_triangle\n    \n    # Calculate the volume of the prism\n    volume = area_of_triangle * length_of_prism\n    \n    return volume\n\n# Test the function with the given assertion\nassert find_Volume(10, 8, 6) == 240\n\n# Example usage\nif __name__ == \"__main__\":\n    base_length = 10\n    height_of_triangle = 8\n    length_of_prism = 6\n    volume = find_Volume(base_length, height_of_triangle, length_of_prism)\n    print(f\"The volume of the triangular prism is: {volume}\")\n```\nThis script defines a function `find_Volume` that calculates the volume of a triangular prism using the formula:\n\n\\[ \\text{Volume} = \\frac{1}{2} \\times \\text{base\\_length} \\times \\text{height\\_of\\_triangle} \\times \\text{length\\_of\\_prism} \\]\n\nThe function is tested with an assertion to ensure it returns the correct volume for the given dimensions."}
{"task_id": "Mbpp/16", "solution": "```python\nimport re\n\ndef text_lowercase_underscore(s):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore,\n    and False otherwise.\n    \"\"\"\n    # Use regular expression to match the pattern\n    pattern = r'^[a-z]+(_[a-z]+)+$'\n    return bool(re.match(pattern, s))\n\n# Test cases\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d1\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e\") == True\nassert text_lowercase_underscore(\"Aab_cbbbc\") == False\nassert text_lowercase_underscore(\"aabC_cbbbc\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_dE\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f\") == True\n\nprint(\"All test cases passed.\")\n```\n\nThis script defines a function `text_lowercase_underscore` that uses a regular expression to check if the input string matches the pattern of sequences of lowercase letters joined by underscores. The function returns `True` if the pattern matches and `False` otherwise. The script also includes several test cases to verify the correctness of the function."}
{"task_id": "Mbpp/17", "solution": "```python\ndef square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Test the function with the provided assertion\nassert square_perimeter(10) == 40\n\n# Additional test cases\nprint(square_perimeter(5))  # Expected output: 20\nprint(square_perimeter(0))  # Expected output: 0\nprint(square_perimeter(2.5))  # Expected output: 10.0\n```\nThis script defines a function `square_perimeter` that calculates the perimeter of a square given its side length. It includes an assertion to verify the function works as expected for the test case provided in the problem statement. Additional test cases are also included to demonstrate the function's usage."}
{"task_id": "Mbpp/18", "solution": "```python\ndef remove_dirty_chars(first_string, second_string):\n    # Create a set of characters from the second string for quick lookup\n    chars_to_remove = set(second_string)\n    \n    # Use a list comprehension to filter out characters present in the second string\n    result = [char for char in first_string if char not in chars_to_remove]\n    \n    # Join the list back into a string and return\n    return ''.join(result)\n\n# Test the function with the provided assertion\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\n# Additional test cases\nprint(remove_dirty_chars(\"hello world\", \"ld\"))  # Expected output: \"heo wor\"\nprint(remove_dirty_chars(\"abcdef\", \"xyz\"))      # Expected output: \"abcdef\"\nprint(remove_dirty_chars(\"abcdef\", \"abc\"))      # Expected output: \"def\"\nprint(remove_dirty_chars(\"\", \"abc\"))            # Expected output: \"\"\nprint(remove_dirty_chars(\"abcdef\", \"\"))         # Expected output: \"abcdef\"\n```\nThis script defines a function `remove_dirty_chars` that removes characters from the first string that are present in the second string. It uses a set for efficient lookup and a list comprehension to filter out unwanted characters. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/19", "solution": "```python\ndef test_duplicate(arr):\n    \"\"\"\n    This function checks if there are any duplicate elements in the given array of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    bool: True if there are duplicates, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and compare lengths\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 5, 5]) == True\nassert test_duplicate([1, 1, 1, 1, 1]) == True\nassert test_duplicate([]) == False\nassert test_duplicate([1]) == False\n\nprint(\"All test cases passed!\")\n```\n\nThis script defines a function `test_duplicate` that checks for duplicate elements in a list of integers. It uses a set to remove duplicates and compares the length of the set with the original list to determine if any duplicates were present. The script includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/20", "solution": "```python\ndef is_woodall(n):\n    \"\"\"\n    A Woodall number is a number of the form W_n = n * 2^n - 1.\n    This function checks if the given number is a Woodall number.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a Woodall number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        k += 1\n\n# Test the function with the given assertion\nassert is_woodall(383) == True\n\n# Additional tests\nprint(is_woodall(1))    # False, as 1 is not a Woodall number\nprint(is_woodall(7))    # True, as 7 = 1 * 2^3 - 1\nprint(is_woodall(23))   # True, as 23 = 2 * 2^3 - 1\nprint(is_woodall(383))  # True, as 383 = 3 * 2^7 - 1\nprint(is_woodall(1023)) # True, as 1023 = 5 * 2^9 - 1\nprint(is_woodall(1024)) # False, as 1024 is not a Woodall number\n```\n\nThis script defines a function `is_woodall` that checks if a given number is a Woodall number. A Woodall number is defined as `W_n = n * 2^n - 1`. The function iterates over possible values of `k` to compute Woodall numbers and checks if any of them match the input number `n`. If a match is found, it returns `True`; otherwise, it returns `False` once the computed Woodall number exceeds `n`. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/56", "solution": "```python\ndef check(number):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to reverse it\n    reverse_number = int(str(number)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return number == 2 * reverse_number - 1\n\n# Test cases\nassert check(70) == False\nassert check(21) == True  # 21 is one less than twice its reverse (12 * 2 = 24, 24 - 1 = 23)\nassert check(0) == True   # 0 is one less than twice its reverse (0 * 2 = 0, 0 - 1 = -1)\nassert check(1) == False  # 1 is not one less than twice its reverse (1 * 2 = 2, 2 - 1 = 1)\nassert check(10) == False # 10 is not one less than twice its reverse (1 * 2 = 2, 2 - 1 = 1)\n\nprint(\"All test cases passed.\")\n```\nThis script defines a function `check` that determines if a given number is one less than twice its reverse. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/57", "solution": "```python\ndef find_Max_Num(digits):\n    # Convert each digit to a string\n    str_digits = map(str, digits)\n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    # Join the sorted digits to form the largest number\n    max_num_str = ''.join(sorted_digits)\n    # Convert the result back to an integer\n    return int(max_num_str)\n\n# Test the function with the provided example\nassert find_Max_Num([1, 2, 3]) == 321\n\n# Additional test cases\nassert find_Max_Num([3, 1, 4, 1, 5, 9]) == 954311\nassert find_Max_Num([0, 0, 1]) == 100\nassert find_Max_Num([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 9876543210\nassert find_Max_Num([5, 5, 5, 5]) == 5555\n```"}
{"task_id": "Mbpp/58", "solution": "```python\ndef opposite_Signs(a, b):\n    \"\"\"\n    This function checks if two integers have opposite signs.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    bool: True if the integers have opposite signs, False otherwise\n    \"\"\"\n    # XOR operation between a and b will have its sign bit set if a and b have opposite signs\n    return (a ^ b) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(-1, 2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, -2) == False\nassert opposite_Signs(0, -2) == True\nassert opposite_Signs(0, 2) == False\n\n# Example usage\nprint(opposite_Signs(1, -2))  # Output: True\nprint(opposite_Signs(1, 2))   # Output: False\n```\nThis script defines a function `opposite_Signs` that checks if two integers have opposite signs using the XOR bitwise operation. The function returns `True` if the integers have opposite signs and `False` otherwise. The script also includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/59", "solution": "```python\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    The formula for the nth octagonal number is:\n    O_n = n * (3n - 2)\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function with the provided assertion\nassert is_octagonal(5) == 65\n\n# Additional test cases\nprint(is_octagonal(1))  # Output: 1\nprint(is_octagonal(2))  # Output: 8\nprint(is_octagonal(3))  # Output: 21\nprint(is_octagonal(4))  # Output: 40\nprint(is_octagonal(5))  # Output: 65\nprint(is_octagonal(6))  # Output: 96\n```\n\nThis script defines a function `is_octagonal` that calculates the nth octagonal number using the formula \\( O_n = n \\times (3n - 2) \\). It includes an assertion to verify the function works correctly for the given example, and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/61", "solution": "```python\ndef count_Substrings(s):\n    def sum_of_digits(sub):\n        return sum(int(char) for char in sub)\n\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible substrings\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            substring = s[start:end]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n\n    return count\n\n# Test the function with the provided test case\nassert count_Substrings('112112') == 6\n\n# Additional test cases\nprint(count_Substrings('111'))  # Expected output: 3 (substrings: '1', '1', '1')\nprint(count_Substrings('123'))  # Expected output: 2 (substrings: '1', '2')\nprint(count_Substrings('000'))  # Expected output: 0 (no valid substrings)\nprint(count_Substrings('222'))  # Expected output: 0 (no valid substrings)\n```\n\nThis script defines a function `count_Substrings` that takes a string `s` as input and returns the number of substrings where the sum of the digits is equal to the length of the substring. The function iterates over all possible substrings, calculates the sum of the digits for each substring, and checks if it matches the length of the substring. If it does, it increments the count. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/62", "solution": "```python\ndef smallest_num(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the smallest number in the list.\n    \n    :param numbers: List of numbers\n    :return: The smallest number in the list\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    \n    # Initialize the smallest number with the first element of the list\n    smallest = numbers[0]\n    \n    # Iterate through the list to find the smallest number\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n\n# Test the function with the provided test case\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\n# Additional test cases\nassert smallest_num([5, 3, 8, 2, 4]) == 2\nassert smallest_num([-1, -5, -3, -4]) == -5\nassert smallest_num([100]) == 100\nassert smallest_num([0, 0, 0, 0]) == 0\n\nprint(\"All test cases passed!\")\n```\n"}
{"task_id": "Mbpp/63", "solution": "```python\ndef max_difference(tuple_list):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum difference\n    between the elements of the tuples.\n    \n    :param tuple_list: List of tuples, where each tuple contains two integers\n    :return: The maximum difference between the elements of the tuples\n    \"\"\"\n    max_diff = 0\n    for a, b in tuple_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Test the function with the provided assertion\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\n# Additional test cases\nprint(max_difference([(8, 2), (4, 9), (5, 5), (10, 1)]))  # Should return 9\nprint(max_difference([(0, 0), (1, 1), (2, 2)]))           # Should return 0\nprint(max_difference([(100, 50), (20, 80), (30, 10)]))    # Should return 60\n```\nThis script defines a function `max_difference` that calculates the maximum difference between the elements of each tuple in a list of tuples. It iterates through each tuple, calculates the absolute difference between the two elements, and updates the maximum difference found. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/64", "solution": "```python\ndef subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject and its corresponding mark.\n\n    Returns:\n    list of tuples: The list sorted by the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second element of each tuple\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function with the provided example\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\n# Additional test cases\nprint(subject_marks([('History', 75), ('Geography', 85), ('Biology', 80), ('Chemistry', 95)]))\n# Expected output: [('History', 75), ('Biology', 80), ('Geography', 85), ('Chemistry', 95)]\n\nprint(subject_marks([('Art', 60), ('Music', 70), ('Dance', 65), ('Drama', 90)]))\n# Expected output: [('Art', 60), ('Dance', 65), ('Music', 70), ('Drama', 90)]\n```\nThis script defines a function `subject_marks` that sorts a list of tuples based on the second value of each tuple. It includes an assertion to test the function with the provided example and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/65", "solution": "```python\ndef recursive_list_sum(lst):\n    \"\"\"\n    This function takes a nested list and returns the sum of all its elements.\n    It flattens the list recursively and sums up the elements.\n    \"\"\"\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n# Test the function with the provided assertion\nassert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21\n\n# Additional test cases\nprint(recursive_list_sum([1, [2, [3, 4]], 5]))  # Output should be 15\nprint(recursive_list_sum([[1, 2], [3, [4, 5]], 6]))  # Output should be 21\nprint(recursive_list_sum([1, 2, 3, 4, 5]))  # Output should be 15\nprint(recursive_list_sum([]))  # Output should be 0\n```\nThis script defines a function `recursive_list_sum` that takes a nested list as input and returns the sum of all its elements. The function uses recursion to handle nested lists, summing up each element or recursively summing up sublists. The script also includes a test case to verify the function's correctness, as well as additional test cases for further validation."}
{"task_id": "Mbpp/66", "solution": "```python\ndef pos_count(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the count of positive numbers in the list.\n\n    :param numbers: List of integers\n    :return: Integer count of positive numbers\n    \"\"\"\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count\n\n# Test the function with the provided assertion\nassert pos_count([1, -2, 3, -4]) == 2\n\n# Additional test cases\nprint(pos_count([0, 1, 2, 3, 4]))  # Output should be 4\nprint(pos_count([-1, -2, -3, -4]))  # Output should be 0\nprint(pos_count([10, -10, 20, -20, 30]))  # Output should be 3\nprint(pos_count([]))  # Output should be 0\n```\n"}
{"task_id": "Mbpp/67", "solution": "To solve the problem of finding the number of ways to partition a set of Bell numbers, we need to understand what Bell numbers are. Bell numbers count the number of ways to partition a set of `n` elements. The task is to write a function that computes the Bell number for a given `n`.\n\nHere's a Python script that implements a function to calculate the Bell number for a given integer `n`:\n\n```python\ndef bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: Bell(0) is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last value of the previous row as the first value of this row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The Bell number for n is the first entry in the nth row\n    return bell[n][0]\n\n# Test the function with the given assertion\nassert bell_number(2) == 2\n\n# Additional test cases\nprint(bell_number(0))  # Output: 1\nprint(bell_number(1))  # Output: 1\nprint(bell_number(3))  # Output: 5\nprint(bell_number(4))  # Output: 15\n```\n\n### Explanation:\n\n- **Bell Triangle Construction**: The Bell numbers can be generated using a triangular array known as the Bell triangle. The first element of each row is the last element of the previous row. Each subsequent element in the row is the sum of the element above it and the element to the left of it.\n\n- **Base Case**: The Bell number for `n = 0` is `1`, which is the base case for our triangle.\n\n- **Filling the Triangle**: We fill the triangle row by row, using the relationship described above. The Bell number for `n` is found at the first position of the `n`-th row.\n\n- **Complexity**: The time complexity of this approach is `O(n^2)`, which is efficient for moderate values of `n`.\n\nThis script includes a test case to verify that the function works as expected for `n = 2`, and additional test cases to demonstrate its correctness for other values."}
{"task_id": "Mbpp/68", "solution": "```python\ndef is_Monotonic(array):\n    \"\"\"\n    Function to check if the given array is monotonic.\n    An array is monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Parameters:\n    array (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if not array:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False\n        if array[i] < array[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n# Test cases\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\nassert is_Monotonic([1, 1, 1]) == True\nassert is_Monotonic([]) == True\nassert is_Monotonic([10]) == True\n```"}
{"task_id": "Mbpp/69", "solution": "```python\ndef is_sublist(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is a sublist of main_list.\n\n    Parameters:\n    main_list (list): The list to be searched.\n    sub_list (list): The list to search for.\n\n    Returns:\n    bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    # Get the lengths of the main list and the sublist\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if len_sub > len_main:\n        return False\n\n    # Iterate over the main list to find the sublist\n    for i in range(len_main - len_sub + 1):\n        # Check if the slice of main_list matches the sub_list\n        if main_list[i:i + len_sub] == sub_list:\n            return True\n\n    return False\n\n# Test the function with the provided assertion\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\n\n# Additional test cases\nassert is_sublist([2, 4, 3, 5, 7], [4, 3, 5]) == True\nassert is_sublist([2, 4, 3, 5, 7], [2, 4]) == True\nassert is_sublist([2, 4, 3, 5, 7], [5, 7]) == True\nassert is_sublist([2, 4, 3, 5, 7], [7, 8]) == False\nassert is_sublist([2, 4, 3, 5, 7], []) == True  # An empty list is a sublist of any list\nassert is_sublist([], [1, 2]) == False  # A non-empty list cannot be a sublist of an empty list\n```"}
{"task_id": "Mbpp/70", "solution": "```python\ndef get_equal(tuples_list):\n    \"\"\"\n    This function checks if all tuples in the given list have the same length.\n\n    :param tuples_list: List of tuples\n    :return: True if all tuples have the same length, False otherwise\n    \"\"\"\n    if not tuples_list:\n        return True  # If the list is empty, we consider all tuples to have equal length\n\n    # Get the length of the first tuple\n    first_length = len(tuples_list[0])\n\n    # Check if all other tuples have the same length\n    for t in tuples_list:\n        if len(t) != first_length:\n            return False\n\n    return True\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22), (33, 44, 55)]) == False\nassert get_equal([(1,), (2,), (3,)]) == True\nassert get_equal([]) == True  # Edge case: empty list\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\n```"}
{"task_id": "Mbpp/71", "solution": "```python\ndef comb_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    arr (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def get_next_gap(gap):\n        # Shrink gap by the shrink factor\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        # Find the next gap\n        gap = get_next_gap(gap)\n        swapped = False\n\n        # Compare all elements with current gap\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                # Swap arr[i] and arr[i + gap]\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```"}
{"task_id": "Mbpp/72", "solution": "```python\ndef dif_Square(n):\n    \"\"\"\n    Check if a number can be represented as the difference of two squares.\n    \n    A number n can be expressed as the difference of two squares if and only if n is not of the form 4k + 2.\n    This is because:\n    n = a^2 - b^2 = (a-b)(a+b)\n    If n = 4k + 2, then (a-b) and (a+b) must both be even, but their product cannot be 4k + 2.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if n is of the form 4k + 2\n    return n % 4 != 2\n\n# Test cases\nassert dif_Square(5) == True  # 5 = 3^2 - 2^2\nassert dif_Square(9) == True  # 9 = 5^2 - 4^2\nassert dif_Square(2) == False # 2 cannot be expressed as the difference of two squares\nassert dif_Square(0) == True  # 0 = 1^2 - 1^2\nassert dif_Square(1) == True  # 1 = 1^2 - 0^2\nassert dif_Square(4) == True  # 4 = 2^2 - 0^2\nassert dif_Square(6) == False # 6 cannot be expressed as the difference of two squares\nassert dif_Square(8) == True  # 8 = 3^2 - 1^2\n\nprint(\"All test cases passed.\")\n```\n\nThis script defines a function `dif_Square` that checks if a given integer can be represented as the difference of two squares. The function uses the mathematical property that a number can be expressed as the difference of two squares if and only if it is not of the form `4k + 2`. The script includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/74", "solution": "```python\ndef is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n\n    # Create two dictionaries to map strings to patterns and vice versa\n    str_to_pat = {}\n    pat_to_str = {}\n\n    for s, p in zip(strings, patterns):\n        if s in str_to_pat:\n            if str_to_pat[s] != p:\n                return False\n        else:\n            str_to_pat[s] = p\n\n        if p in pat_to_str:\n            if pat_to_str[p] != s:\n                return False\n        else:\n            pat_to_str[p] = s\n\n    return True\n\n# Test the function with the given assertion\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True\n\n# Additional test cases\nassert is_samepatterns([\"red\", \"green\", \"blue\"], [\"a\", \"b\", \"c\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"]) == False\nassert is_samepatterns([\"red\", \"red\", \"red\"], [\"a\", \"a\", \"a\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"red\"], [\"a\", \"b\", \"a\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"red\"], [\"a\", \"b\", \"b\"]) == False\n```"}
{"task_id": "Mbpp/75", "solution": "```python\ndef find_tuples(tuples_list, k):\n    \"\"\"\n    This function takes a list of tuples and an integer k, and returns a list of tuples\n    where all elements in each tuple are divisible by k.\n\n    :param tuples_list: List of tuples containing integers\n    :param k: Integer by which divisibility is checked\n    :return: List of tuples where all elements are divisible by k\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each tuple in the list\n    for t in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(element % k == 0 for element in t):\n            # If true, append the tuple to the result list\n            result.append(t)\n\n    return result\n\n# Test the function with the provided assertion\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\n# Additional test cases\nprint(find_tuples([(10, 20, 30), (15, 25, 35), (40, 50, 60)], 10))  # [(10, 20, 30), (40, 50, 60)]\nprint(find_tuples([(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5))   # [(5, 10, 15), (20, 25, 30), (35, 40, 45)]\nprint(find_tuples([(2, 4, 6), (8, 10, 12), (14, 16, 18)], 2))      # [(2, 4, 6), (8, 10, 12), (14, 16, 18)]\nprint(find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3))           # [(3, 6, 9)]\n```"}
{"task_id": "Mbpp/77", "solution": "```python\ndef is_Diff(number):\n    \"\"\"\n    This function checks if a given number is divisible by 11.\n    \n    Parameters:\n    number (int): The number to check for divisibility by 11.\n    \n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Calculate the alternating sum of the digits\n    str_num = str(number)\n    alternating_sum = 0\n    for i, digit in enumerate(str_num):\n        if i % 2 == 0:\n            alternating_sum += int(digit)\n        else:\n            alternating_sum -= int(digit)\n    \n    # Check if the alternating sum is divisible by 11\n    return alternating_sum % 11 == 0\n\n# Test the function with the provided assertion\nassert is_Diff(12345) == False\n\n# Additional test cases\nprint(is_Diff(121))  # True, because 121 is divisible by 11\nprint(is_Diff(123456789))  # False, because 123456789 is not divisible by 11\nprint(is_Diff(0))  # True, because 0 is divisible by 11\nprint(is_Diff(11))  # True, because 11 is divisible by 11\n```\nThis script defines a function `is_Diff` that checks if a number is divisible by 11 using the alternating sum method. It includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/79", "solution": "```python\ndef word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test the function with the provided assertion\nassert word_len(\"Hadoop\") == False\n\n# Additional test cases\nassert word_len(\"Python\") == False  # Length is 6, which is even\nassert word_len(\"Data\") == False    # Length is 4, which is even\nassert word_len(\"Science\") == True  # Length is 7, which is odd\nassert word_len(\"AI\") == False      # Length is 2, which is even\nassert word_len(\"ML\") == False      # Length is 2, which is even\nassert word_len(\"Deep\") == False    # Length is 4, which is even\nassert word_len(\"Learning\") == True # Length is 8, which is even\n```"}
{"task_id": "Mbpp/80", "solution": "```python\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    A tetrahedral number, T_n, is a figurate number that represents a pyramid with a triangular base and three sides (a tetrahedron).\n    The nth tetrahedral number is the sum of the first n triangular numbers.\n\n    The formula for the nth tetrahedral number is:\n    T_n = n * (n + 1) * (n + 2) / 6\n\n    :param n: The term of the tetrahedral number sequence to calculate.\n    :return: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Test the function with the provided assertion\nassert tetrahedral_number(5) == 35\n\n# Additional test cases\nprint(tetrahedral_number(1))  # Output: 1\nprint(tetrahedral_number(2))  # Output: 4\nprint(tetrahedral_number(3))  # Output: 10\nprint(tetrahedral_number(4))  # Output: 20\nprint(tetrahedral_number(6))  # Output: 56\nprint(tetrahedral_number(7))  # Output: 84\n```\n\nThis script defines a function `tetrahedral_number` that calculates the nth tetrahedral number using the formula \\( T_n = \\frac{n(n+1)(n+2)}{6} \\). The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/82", "solution": "```python\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    # Volume of a sphere formula: V = (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * radius**3\n    return volume\n\n# Test the function with the given assertion\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 10\n    print(f\"The volume of a sphere with radius {radius} is {volume_sphere(radius)}\")\n```\nThis script defines a function `volume_sphere` that calculates the volume of a sphere using the formula \\( V = \\frac{4}{3} \\pi r^3 \\). It includes an assertion to test the function with a specific example and prints the result when executed."}
{"task_id": "Mbpp/84", "solution": "```python\ndef newman_conway_sequence(n):\n    \"\"\"\n    Calculate the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is defined as follows:\n    P(1) = 1\n    P(2) = 1\n    For all n > 2, P(n) = P(P(n - 1)) + P(n - P(n - 1))\n\n    :param n: The position in the sequence to calculate.\n    :return: The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize the sequence with the first two known values\n    sequence = [0, 1, 1]  # sequence[0] is a placeholder for convenience\n\n    # Calculate the sequence up to the nth number\n    for i in range(3, n + 1):\n        next_value = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        sequence.append(next_value)\n\n    return sequence[n]\n\n# Test the function with the provided assertion\nassert newman_conway_sequence(10) == 6\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 10\n    result = newman_conway_sequence(n)\n    print(f\"The {n}th number in the Newman-Conway sequence is {result}.\")\n```\nThis script defines a function `newman_conway_sequence` that calculates the nth number in the Newman-Conway sequence using a list to store previously computed values for efficiency. The function is tested with an assertion to ensure it returns the correct result for the 10th number in the sequence."}
{"task_id": "Mbpp/85", "solution": "```python\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # Surface area of a sphere formula: 4 * \u03c0 * r^2\n    return 4 * math.pi * radius ** 2\n\n# Test the function with the given assertion\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 10\n    surface_area = surfacearea_sphere(radius)\n    print(f\"The surface area of a sphere with radius {radius} is {surface_area:.10f}\")\n```\nThis script defines a function `surfacearea_sphere` that calculates the surface area of a sphere given its radius using the formula \\(4 \\pi r^2\\). It includes an assertion to test the function with a specific example and prints the result for demonstration."}
{"task_id": "Mbpp/86", "solution": "```python\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    A centered hexagonal number is a centered figurate number that represents a hexagon with a dot in the center\n    and all other dots surrounding the center dot in a hexagonal lattice.\n\n    The formula for the nth centered hexagonal number is:\n    C_n = 3n(n - 1) + 1\n\n    :param n: The term of the centered hexagonal number to calculate.\n    :return: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n * (n - 1) + 1\n\n# Test the function with the provided assertion\nassert centered_hexagonal_number(10) == 271\n\n# Additional test cases\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(2))  # Output: 7\nprint(centered_hexagonal_number(3))  # Output: 19\nprint(centered_hexagonal_number(4))  # Output: 37\nprint(centered_hexagonal_number(5))  # Output: 61\n```\n\nThis script defines a function `centered_hexagonal_number` that calculates the nth centered hexagonal number using the formula \\( C_n = 3n(n - 1) + 1 \\). It includes an assertion to verify the function works correctly for the 10th centered hexagonal number, and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/87", "solution": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    If there are duplicate keys, the value from the last dictionary is used.\n    \"\"\"\n    # Start with an empty dictionary\n    merged_dict = {}\n    \n    # Update the merged dictionary with each of the input dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict\n\n# Test the function with the provided example\nassert merge_dictionaries_three(\n    { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },\n    { \"G\": \"Green\", \"W\": \"White\" },\n    { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\n# Print the result to verify\nprint(merge_dictionaries_three(\n    { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },\n    { \"G\": \"Green\", \"W\": \"White\" },\n    { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n))\n```\nThis script defines a function `merge_dictionaries_three` that takes three dictionaries as input and merges them into a single dictionary. The function uses the `update` method to combine the dictionaries, ensuring that if there are duplicate keys, the value from the last dictionary is used. The script also includes an assertion to test the function with a given example and prints the result for verification."}
{"task_id": "Mbpp/88", "solution": "```python\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the list.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    dict: A dictionary where keys are elements from the list and values are their frequencies.\n    \"\"\"\n    frequency_dict = {}\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n\n# Test the function with the provided example\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n\n# Additional test cases\nprint(freq_count([1, 2, 2, 3, 3, 3, 4]))  # Output: {1: 1, 2: 2, 3: 3, 4: 1}\nprint(freq_count(['a', 'b', 'a', 'c', 'b', 'a']))  # Output: {'a': 3, 'b': 2, 'c': 1}\nprint(freq_count([]))  # Output: {}\nprint(freq_count([5]))  # Output: {5: 1}\n```\n"}
{"task_id": "Mbpp/89", "solution": "```python\ndef closest_num(n):\n    \"\"\"\n    This function returns the closest smaller number than the given number n.\n    \"\"\"\n    # Since we need the closest smaller number, we simply subtract 1 from n\n    return n - 1\n\n# Test the function with the provided assertion\nassert closest_num(11) == 10\n\n# Additional test cases\nprint(closest_num(5))  # Expected output: 4\nprint(closest_num(100))  # Expected output: 99\nprint(closest_num(1))  # Expected output: 0\nprint(closest_num(0))  # Expected output: -1\n```\n\nThis script defines a function `closest_num` that takes an integer `n` and returns the closest smaller number by simply subtracting 1 from `n`. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/90", "solution": "```python\ndef len_log(words):\n    \"\"\"\n    This function takes a list of words and returns the length of the longest word.\n    \n    :param words: List of words (strings)\n    :return: Length of the longest word\n    \"\"\"\n    if not words:\n        return 0\n    \n    # Find the longest word by length\n    longest_word = max(words, key=len)\n    \n    # Return the length of the longest word\n    return len(longest_word)\n\n# Test the function with the provided test case\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\n\n# Additional test cases\nassert len_log([\"hello\", \"world\", \"python\"]) == 6\nassert len_log([\"a\", \"ab\", \"abc\", \"abcd\"]) == 4\nassert len_log([\"short\", \"longer\", \"longest\"]) == 7\nassert len_log([]) == 0  # Edge case: empty list\n```"}
{"task_id": "Mbpp/91", "solution": "```python\ndef find_substring(string_list, substring):\n    \"\"\"\n    Check if a substring is present in any of the strings in the given list.\n\n    Parameters:\n    string_list (list of str): The list of strings to search within.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any of the strings, False otherwise.\n    \"\"\"\n    for string in string_list:\n        if substring in string:\n            return True\n    return False\n\n# Test the function with the provided assertion\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\n\n# Additional test cases\nassert find_substring([\"apple\", \"banana\", \"cherry\"], \"nan\") == True\nassert find_substring([\"apple\", \"banana\", \"cherry\"], \"berry\") == False\nassert find_substring([\"hello\", \"world\", \"python\"], \"py\") == True\nassert find_substring([\"hello\", \"world\", \"python\"], \"java\") == False\n```"}
{"task_id": "Mbpp/92", "solution": "```python\ndef is_undulating(number):\n    \"\"\"\n    Check if a number is undulating. An undulating number is a number that has at least three digits\n    and consists of two different digits that alternate. For example, 1212121 is undulating.\n    \n    :param number: Integer, the number to check\n    :return: Boolean, True if the number is undulating, False otherwise\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    num_str = str(number)\n    \n    # An undulating number must have at least three digits\n    if len(num_str) < 3:\n        return False\n    \n    # Extract the first two digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # The first two digits must be different\n    if first_digit == second_digit:\n        return False\n    \n    # Check the alternating pattern\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            # Even index should match the first digit\n            if num_str[i] != first_digit:\n                return False\n        else:\n            # Odd index should match the second digit\n            if num_str[i] != second_digit:\n                return False\n    \n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(123123) == False\nassert is_undulating(101010) == True\nassert is_undulating(111) == False\nassert is_undulating(12) == False\nassert is_undulating(2121212) == True\nassert is_undulating(212) == True\n```"}
{"task_id": "Mbpp/93", "solution": "```python\ndef power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of a raised to the power of b.\n    \"\"\"\n    return a ** b\n\n# Test the function with the provided assertion\nassert power(3, 4) == 81\n\n# Additional test cases\nprint(power(2, 3))  # Output: 8\nprint(power(5, 0))  # Output: 1\nprint(power(7, 2))  # Output: 49\nprint(power(10, -1))  # Output: 0.1\nprint(power(2.5, 3))  # Output: 15.625\n```\nThis script defines a function `power` that calculates the value of `a` raised to the power of `b` using the exponentiation operator `**`. It includes a test case to verify the function works as expected, along with additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/94", "solution": "```python\ndef index_minimum(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns the first value of the tuple with the smallest second value.\n    \n    :param tuples_list: List of tuples, where each tuple contains a string and an integer.\n    :return: The first value of the tuple with the smallest second value.\n    \"\"\"\n    # Check if the list is empty\n    if not tuples_list:\n        return None\n    \n    # Initialize the minimum tuple with the first element\n    min_tuple = tuples_list[0]\n    \n    # Iterate over the list to find the tuple with the smallest second value\n    for current_tuple in tuples_list:\n        if current_tuple[1] < min_tuple[1]:\n            min_tuple = current_tuple\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_tuple[0]\n\n# Test the function with the provided example\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\n# Additional test cases\nassert index_minimum([('Alice', 50), ('Bob', 75), ('Charlie', 25)]) == 'Charlie'\nassert index_minimum([('X', 10), ('Y', 10), ('Z', 5)]) == 'Z'\nassert index_minimum([('A', 1)]) == 'A'\nassert index_minimum([]) == None\n```"}
{"task_id": "Mbpp/95", "solution": "```python\ndef Find_Min_Length(list_of_lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n    \n    Parameters:\n    list_of_lists (list): A list containing lists of varying lengths.\n    \n    Returns:\n    int: The length of the smallest list.\n    \"\"\"\n    if not list_of_lists:\n        return 0  # Return 0 if the input list is empty\n    \n    # Use min with a generator expression to find the minimum length\n    min_length = min(len(lst) for lst in list_of_lists)\n    return min_length\n\n# Test the function with the provided assertion\nassert Find_Min_Length([[1], [1, 2]]) == 1\n\n# Additional test cases\nassert Find_Min_Length([[1, 2, 3], [4, 5], [6]]) == 1\nassert Find_Min_Length([[1, 2], [3, 4], [5, 6, 7, 8]]) == 2\nassert Find_Min_Length([[], [1, 2, 3], [4, 5]]) == 0\nassert Find_Min_Length([]) == 0\n```"}
{"task_id": "Mbpp/96", "solution": "```python\ndef divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n    \n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\n# Test the function with the provided assertion\nassert divisor(15) == 4\n\n# Additional test cases\nprint(divisor(1))  # Output: 1 (1)\nprint(divisor(6))  # Output: 4 (1, 2, 3, 6)\nprint(divisor(28)) # Output: 6 (1, 2, 4, 7, 14, 28)\nprint(divisor(100))# Output: 9 (1, 2, 4, 5, 10, 20, 25, 50, 100)\n```"}
{"task_id": "Mbpp/97", "solution": "```python\ndef frequency_lists(list_of_lists):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Count the frequency of each element in the flattened list\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    \n    return frequency_dict\n\n# Test the function with the provided example\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\n# Example usage\nif __name__ == \"__main__\":\n    list_of_lists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]\n    print(frequency_lists(list_of_lists))\n```\n"}
{"task_id": "Mbpp/98", "solution": "```python\nimport math\nfrom functools import reduce\n\ndef multiply_num(numbers):\n    # Multiply all numbers in the list\n    product = reduce(lambda x, y: x * y, numbers)\n    # Divide the product by the length of the list\n    result = product / len(numbers)\n    return result\n\n# Test the function with the given assertion\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\n# Example usage\nnumbers = (8, 2, 3, -1, 7)\nprint(f\"The result of multiplying all numbers in {numbers} and dividing by the length is: {multiply_num(numbers)}\")\n```\nThis script defines a function `multiply_num` that takes a tuple of numbers, multiplies them together, and then divides the result by the length of the tuple. It uses the `reduce` function from the `functools` module to perform the multiplication. The function is tested with an assertion to ensure it meets the specified condition."}
{"task_id": "Mbpp/99", "solution": "```python\ndef decimal_to_binary(n):\n    # Handle the special case where the number is 0\n    if n == 0:\n        return '0'\n    \n    binary_str = ''\n    while n > 0:\n        # Get the remainder when n is divided by 2 (either 0 or 1)\n        remainder = n % 2\n        # Prepend the remainder to the binary string\n        binary_str = str(remainder) + binary_str\n        # Update n to be the quotient of n divided by 2\n        n = n // 2\n    \n    return binary_str\n\n# Test the function with the provided example\nassert decimal_to_binary(8) == '1000'\n\n# Additional test cases\nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(2) == '10'\nassert decimal_to_binary(3) == '11'\nassert decimal_to_binary(4) == '100'\nassert decimal_to_binary(15) == '1111'\nassert decimal_to_binary(16) == '10000'\nassert decimal_to_binary(255) == '11111111'\n\nprint(\"All tests passed.\")\n```"}
{"task_id": "Mbpp/100", "solution": "```python\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome greater than the specified integer n.\n    \n    Parameters:\n    n (int): The integer to find the next smallest palindrome for.\n    \n    Returns:\n    int: The next smallest palindrome greater than n.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"Check if a number is a palindrome.\"\"\"\n        return str(num) == str(num)[::-1]\n    \n    # Start checking from the next number\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\n# Test the function with the provided assertion\nassert next_smallest_palindrome(99) == 101\n\n# Additional test cases\nprint(next_smallest_palindrome(123))  # Output should be 131\nprint(next_smallest_palindrome(808))  # Output should be 818\nprint(next_smallest_palindrome(999))  # Output should be 1001\nprint(next_smallest_palindrome(10))   # Output should be 11\n```\n\nThis script defines a function `next_smallest_palindrome` that finds the next smallest palindrome greater than a given integer `n`. It includes a helper function `is_palindrome` to check if a number is a palindrome. The script also includes a test case to verify the function works as expected, along with additional test cases for further validation."}
{"task_id": "Mbpp/101", "solution": "```python\ndef kth_element(arr, k):\n    \"\"\"\n    Returns the k-th element of the array using 1-based indexing.\n    \n    Parameters:\n    arr (list): The list of elements.\n    k (int): The 1-based index of the element to retrieve.\n    \n    Returns:\n    The k-th element of the array.\n    \"\"\"\n    # Convert 1-based index to 0-based index\n    index = k - 1\n    \n    # Return the element at the 0-based index\n    return arr[index]\n\n# Test the function with the provided assertion\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\n\n# Additional test cases\nprint(kth_element([1, 2, 3, 4, 5], 1))  # Output: 1\nprint(kth_element([1, 2, 3, 4, 5], 5))  # Output: 5\nprint(kth_element(['a', 'b', 'c', 'd'], 3))  # Output: 'c'\nprint(kth_element([10, 20, 30, 40, 50], 4))  # Output: 40\n```\nThis script defines a function `kth_element` that retrieves the k-th element from a list using 1-based indexing. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/102", "solution": "```python\ndef snake_to_camel(snake_str):\n    # Split the snake case string by underscores\n    components = snake_str.split('_')\n    # Capitalize the first letter of each component and join them\n    camel_case_str = ''.join(x.capitalize() for x in components)\n    return camel_case_str\n\n# Test the function with the provided assertion\nassert snake_to_camel('python_program') == 'PythonProgram'\n\n# Additional test cases\nprint(snake_to_camel('this_is_a_test'))  # ThisIsATest\nprint(snake_to_camel('convert_this_string'))  # ConvertThisString\nprint(snake_to_camel('snake_case_to_camel_case'))  # SnakeCaseToCamelCase\nprint(snake_to_camel('example'))  # Example\n```\nThis script defines a function `snake_to_camel` that converts a snake case string to a camel case string. It splits the input string by underscores, capitalizes each component, and joins them together. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/103", "solution": "```python\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \n    Eulerian numbers are defined by the recurrence relation:\n    a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m)\n    with initial conditions:\n    a(0, 0) = 1\n    a(n, m) = 0 if m >= n or m < 0\n    \"\"\"\n    # Create a table to store results of subproblems\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Fill the table according to the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(0, min(i, m + 1)):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]\n\n# Test the function with the given assertion\nassert eulerian_num(3, 1) == 4\n\n# Additional test cases\nprint(eulerian_num(3, 0))  # Output: 1\nprint(eulerian_num(3, 2))  # Output: 1\nprint(eulerian_num(4, 1))  # Output: 11\nprint(eulerian_num(4, 2))  # Output: 11\n```\n\nThis script defines a function `eulerian_num` that calculates the Eulerian number using dynamic programming. The function uses a 2D list `dp` to store intermediate results and fills it according to the recurrence relation for Eulerian numbers. The base case is initialized, and the table is filled iteratively. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/104", "solution": "```python\ndef sort_sublists(list_of_lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list_of_lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n    list of list of str: A list with each sublist sorted.\n    \"\"\"\n    # Iterate over each sublist and sort it\n    sorted_list_of_lists = [sorted(sublist) for sublist in list_of_lists]\n    return sorted_list_of_lists\n\n# Test the function with the provided assertion\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [[\"banana\", \"apple\"], [\"dog\", \"cat\"], [\"zebra\", \"elephant\", \"ant\"]]\n    sorted_example = sort_sublists(example_list)\n    print(\"Original list of lists:\", example_list)\n    print(\"Sorted list of lists:\", sorted_example)\n```\n"}
{"task_id": "Mbpp/105", "solution": "```python\ndef count_true_booleans(boolean_list):\n    \"\"\"\n    Count the number of True values in the given list of booleans.\n\n    Parameters:\n    boolean_list (list): A list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    return sum(1 for item in boolean_list if item is True)\n\n# Test the function with the provided assertion\nassert count_true_booleans([True, False, True]) == 2\n\n# Additional test cases\nprint(count_true_booleans([True, True, True]))  # Output: 3\nprint(count_true_booleans([False, False, False]))  # Output: 0\nprint(count_true_booleans([True, False, False, True, True]))  # Output: 3\nprint(count_true_booleans([]))  # Output: 0\n```\nThis script defines a function `count_true_booleans` that takes a list of boolean values and returns the count of `True` values in the list. It uses a generator expression to iterate over the list and sum up the `True` values. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/106", "solution": "```python\ndef add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuple.\n\n    Parameters:\n    lst (list): The list to append.\n    tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n    tuple: A new tuple with the elements of the list appended to the tuple.\n    \"\"\"\n    # Convert the list to a tuple and concatenate it with the original tuple\n    return tpl + tuple(lst)\n\n# Test the function with the provided assertion\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\n# Additional test cases\nprint(add_lists([1, 2, 3], (4, 5)))  # Expected output: (4, 5, 1, 2, 3)\nprint(add_lists([], (1, 2, 3)))      # Expected output: (1, 2, 3)\nprint(add_lists([8, 9], ()))         # Expected output: (8, 9)\nprint(add_lists([], ()))             # Expected output: ()\n```\n"}
{"task_id": "Mbpp/108", "solution": "```python\ndef merge_sorted_list(list1, list2, list3):\n    # Combine all three lists into one\n    combined_list = list1 + list2 + list3\n    # Sort the combined list\n    combined_list.sort()\n    return combined_list\n\n# Test the function with the provided assertion\nassert merge_sorted_list(\n    [25, 24, 15, 4, 5, 29, 110],\n    [19, 20, 11, 56, 25, 233, 154],\n    [24, 26, 54, 48]\n) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\nprint(\"The function works correctly.\")\n```\nThis script defines a function `merge_sorted_list` that takes three lists as input, merges them into a single list, sorts the combined list, and returns the sorted list. The function is then tested with an assertion to ensure it produces the expected output."}
{"task_id": "Mbpp/109", "solution": "```python\ndef odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    This function takes a binary string and a number of rotations, and returns the number of times\n    the binary string, when rotated, represents an odd number.\n    \n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    rotations (int): The number of rotations to perform.\n    \n    Returns:\n    int: The number of rotations that result in an odd number.\n    \"\"\"\n    count_odd = 0\n    length = len(binary_string)\n    \n    # Perform the rotations\n    for i in range(rotations):\n        # Rotate the string\n        rotated_string = binary_string[i % length:] + binary_string[:i % length]\n        \n        # Check if the rotated binary string represents an odd number\n        if rotated_string[-1] == '1':  # Check the last bit\n            count_odd += 1\n    \n    return count_odd\n\n# Test the function with the provided example\nassert odd_Equivalent(\"011001\", 6) == 3\n\n# Additional test cases\nprint(odd_Equivalent(\"101\", 3))  # Should return 2\nprint(odd_Equivalent(\"111\", 3))  # Should return 3\nprint(odd_Equivalent(\"000\", 3))  # Should return 0\nprint(odd_Equivalent(\"1001\", 4)) # Should return 2\n```\n\nThis script defines a function `odd_Equivalent` that calculates how many times a binary string, when rotated, results in an odd number. The function checks the last bit of each rotated string to determine if it represents an odd number. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/111", "solution": "```python\ndef common_in_nested_lists(nested_lists):\n    \"\"\"\n    This function takes a list of lists and returns a list of elements that are common to all the nested lists.\n    \"\"\"\n    if not nested_lists:\n        return []\n\n    # Start with the first list's elements as the initial set of common elements\n    common_elements = set(nested_lists[0])\n\n    # Intersect with each subsequent list\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n\n# Test the function with the provided assertion\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\n\n# Additional test cases\nprint(common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))  # Output should be [3]\nprint(common_in_nested_lists([[10, 20, 30], [30, 40, 50], [30, 60, 70]]))  # Output should be [30]\nprint(common_in_nested_lists([[1, 2], [3, 4], [5, 6]]))  # Output should be []\nprint(common_in_nested_lists([[5, 10, 15], [10, 15, 20], [15, 25, 30]]))  # Output should be [15]\n```"}
{"task_id": "Mbpp/113", "solution": "```python\ndef check_integer(s):\n    \"\"\"\n    This function checks if the given string represents an integer.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    # Strip any leading or trailing whitespace\n    s = s.strip()\n    \n    # Check if the string is empty after stripping\n    if not s:\n        return False\n    \n    # Check if the string is a valid integer\n    if s[0] in ('-', '+'):  # Allow for a leading sign\n        return s[1:].isdigit()\n    return s.isdigit()\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"+123\") == True\nassert check_integer(\"  456  \") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123abc\") == False\nassert check_integer(\"\") == False\nassert check_integer(\"   \") == False\n\nprint(\"All test cases passed.\")\n```\nThis script defines a function `check_integer` that checks if a given string represents an integer. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/116", "solution": "```python\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): A tuple of positive integers.\n\n    Returns:\n    int: A single integer formed by concatenating the elements of the tuple.\n    \"\"\"\n    # Convert each integer in the tuple to a string and join them\n    # Then convert the resulting string back to an integer\n    return int(''.join(map(str, tup)))\n\n# Test the function with the provided example\nassert tuple_to_int((1, 2, 3)) == 123\n\n# Additional test cases\nassert tuple_to_int((4, 5, 6)) == 456\nassert tuple_to_int((9, 0, 1)) == 901\nassert tuple_to_int((7, 8)) == 78\nassert tuple_to_int((0, 0, 0)) == 0\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `tuple_to_int` that takes a tuple of positive integers and converts it into a single integer by concatenating the elements. The function is tested with several test cases to ensure its correctness."}
{"task_id": "Mbpp/118", "solution": "```python\ndef string_to_list(input_string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    input_string (str): The string to be split.\n\n    Returns:\n    list: A list of strings split on the space character.\n    \"\"\"\n    return input_string.split()\n\n# Test the function with an example\nassert string_to_list(\"python programming\") == ['python', 'programming']\n\n# Additional test cases\nassert string_to_list(\"hello world\") == ['hello', 'world']\nassert string_to_list(\"a b c\") == ['a', 'b', 'c']\nassert string_to_list(\"singleword\") == ['singleword']\nassert string_to_list(\"\") == []\n```"}
{"task_id": "Mbpp/119", "solution": "```python\ndef search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    :param arr: List[int] - A sorted list of integers where every element appears twice except for one.\n    :return: int - The element that appears only once.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over each element in the array\n    for num in arr:\n        # XOR the result with the current number\n        result ^= num\n    \n    # Return the result which is the single element\n    return result\n\n# Test the function with the provided test case\nassert search([1, 1, 2, 2, 3]) == 3\n\n# Additional test cases\nassert search([0, 0, 1, 1, 2, 2, 4]) == 4\nassert search([5, 5, 7, 7, 8, 8, 9]) == 9\nassert search([10, 10, 11, 12, 12]) == 11\nassert search([13]) == 13  # Single element in the array\n```"}
{"task_id": "Mbpp/120", "solution": "```python\ndef max_product_tuple(tuples_list):\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains two numbers.\n    It returns the maximum absolute product of the numbers in any tuple.\n    \"\"\"\n    max_product = float('-inf')  # Initialize with the smallest possible number\n\n    for a, b in tuples_list:\n        product = abs(a * b)  # Calculate the absolute product of the tuple\n        if product > max_product:\n            max_product = product  # Update max_product if the current product is greater\n\n    return max_product\n\n# Test the function with the provided example\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n\n# Additional test cases\nprint(max_product_tuple([(3, -5), (-2, -6), (0, 8), (4, -9)]))  # Should return 36\nprint(max_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4)]))      # Should return 16\nprint(max_product_tuple([(-1, -1), (-2, -2), (-3, -3), (-4, -4)]))  # Should return 16\nprint(max_product_tuple([(0, 0), (0, 1), (0, -1), (0, 2)]))     # Should return 0\n```\n\nThis script defines a function `max_product_tuple` that calculates the maximum absolute product of numbers in pairs of tuples from a given list. The function iterates through each tuple, calculates the absolute product, and keeps track of the maximum product found. The script also includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/123", "solution": "```python\ndef sum_of_divisors(n):\n    \"\"\"Return the sum of proper divisors of n.\"\"\"\n    total = 1  # 1 is a proper divisor of every number\n    sqrt_n = int(n**0.5)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef is_amicable(a):\n    \"\"\"Check if a number is amicable.\"\"\"\n    b = sum_of_divisors(a)\n    return a != b and sum_of_divisors(b) == a\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers up to a specified limit.\"\"\"\n    amicable_sum = 0\n    for number in range(2, limit + 1):\n        if is_amicable(number):\n            amicable_sum += number\n    return amicable_sum\n\n# Test the function with the given assertion\nassert amicable_numbers_sum(999) == 504\n\n# Example usage\nif __name__ == \"__main__\":\n    limit = 999\n    print(f\"The sum of all amicable numbers up to {limit} is {amicable_numbers_sum(limit)}\")\n```\n\nThis script defines a function `amicable_numbers_sum` that calculates the sum of all amicable numbers up to a specified limit. It uses helper functions `sum_of_divisors` to calculate the sum of proper divisors of a number and `is_amicable` to check if a number is part of an amicable pair. The script includes an assertion to verify the correctness of the function for the input 999."}
{"task_id": "Mbpp/124", "solution": "```python\nimport math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle (or argument) of a complex number.\n\n    Parameters:\n    z (complex): A complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0 + 1j), 1.5707963267948966, rel_tol=0.001)\n\n# Additional test cases\nassert math.isclose(angle_complex(1 + 0j), 0.0, rel_tol=0.001)\nassert math.isclose(angle_complex(-1 + 0j), math.pi, rel_tol=0.001)\nassert math.isclose(angle_complex(0 - 1j), -1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(1 + 1j), math.pi / 4, rel_tol=0.001)\n```\n\nThis script defines a function `angle_complex` that calculates the angle (or argument) of a complex number using the `math.atan2` function, which returns the angle in radians. The function is tested with an assertion to ensure it returns the expected result for the input `0 + 1j`. Additional test cases are provided to verify the function's correctness for other complex numbers."}
{"task_id": "Mbpp/125", "solution": "```python\ndef find_length(binary_string):\n    # Initialize variables to track the maximum difference and current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Iterate over each character in the binary string\n    for char in binary_string:\n        # If the character is '0', increase the current difference\n        if char == '0':\n            current_diff += 1\n        # If the character is '1', decrease the current difference\n        else:\n            current_diff -= 1\n\n        # If the current difference is greater than the maximum difference, update max_diff\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n        # If the current difference becomes negative, reset it to 0\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff\n\n# Test the function with the provided test case\nassert find_length(\"11000010001\") == 6\n\n# Additional test cases\nprint(find_length(\"0001\"))  # Output should be 3\nprint(find_length(\"1111\"))  # Output should be 0\nprint(find_length(\"0000\"))  # Output should be 4\nprint(find_length(\"101010\"))  # Output should be 1\n```\n\nThis script defines a function `find_length` that calculates the maximum difference between the number of 0s and 1s in any substring of a given binary string. The function uses a variation of Kadane's algorithm to find the maximum subarray sum, treating '0' as +1 and '1' as -1. This approach efficiently finds the maximum difference in linear time. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/126", "solution": "```python\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function returns the sum of all common divisors of two given numbers a and b.\n    \"\"\"\n    def gcd(x, y):\n        # Function to compute the greatest common divisor using Euclid's algorithm\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        # Function to find all divisors of a number n\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    # Find the greatest common divisor of a and b\n    greatest_common_divisor = gcd(a, b)\n    \n    # Find all divisors of the greatest common divisor\n    common_divisors = divisors(greatest_common_divisor)\n    \n    # Return the sum of all common divisors\n    return sum(common_divisors)\n\n# Test the function with the given assertion\nassert sum_of_common_divisors(10, 15) == 6\n\n# Example usage\nprint(sum_of_common_divisors(10, 15))  # Output: 6\nprint(sum_of_common_divisors(12, 18))  # Output: 12 (common divisors are 1, 2, 3, 6)\n```\n"}
{"task_id": "Mbpp/127", "solution": "```python\ndef multiply_int(a, b):\n    \"\"\"\n    Multiplies two integers and returns the result.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function with the provided assertion\nassert multiply_int(10, 20) == 200\n\n# Additional test cases\nprint(multiply_int(5, 5))  # Expected output: 25\nprint(multiply_int(-3, 7))  # Expected output: -21\nprint(multiply_int(0, 100))  # Expected output: 0\nprint(multiply_int(-4, -6))  # Expected output: 24\n```\nThis script defines a function `multiply_int` that takes two integers as input and returns their product. It includes an assertion to verify the function works as expected for the given test case, and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/128", "solution": "```python\ndef long_words(n, sentence):\n    \"\"\"\n    This function takes an integer n and a sentence (string) as input.\n    It returns a list of words from the sentence that are longer than n characters.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Use list comprehension to filter words longer than n characters\n    result = [word for word in words if len(word) > n]\n    \n    return result\n\n# Test the function with the provided assertion\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\n\n# Additional test cases\nprint(long_words(4, \"this is a test sentence\"))  # ['sentence']\nprint(long_words(2, \"hello world\"))  # ['hello', 'world']\nprint(long_words(5, \"short and sweet\"))  # ['short', 'sweet']\nprint(long_words(0, \"every word counts\"))  # ['every', 'word', 'counts']\n```"}
{"task_id": "Mbpp/129", "solution": "```python\ndef magic_square_test(matrix):\n    # Check if the matrix is empty or not square\n    if not matrix or any(len(row) != len(matrix) for row in matrix):\n        return False\n\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as the magic sum\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\n# Test the function with the provided example\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n```"}
{"task_id": "Mbpp/130", "solution": "```python\ndef max_occurrences(lst):\n    # Create a dictionary to count the frequency of each element\n    frequency = {}\n    \n    # Iterate over each element in the list\n    for item in lst:\n        # Increment the count for the item in the frequency dictionary\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item\n\n# Test the function with the provided test case\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\n\n# Additional test cases\nprint(max_occurrences([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9]))  # Output should be 5\nprint(max_occurrences([10, 20, 20, 30, 30, 30, 40, 50]))  # Output should be 30\nprint(max_occurrences([1, 1, 1, 1, 1]))  # Output should be 1\nprint(max_occurrences([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))  # Output should be 5\n```"}
{"task_id": "Mbpp/131", "solution": "```python\ndef reverse_vowels(s: str) -> str:\n    # Define a set of vowels\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the string to a list to allow modification\n    s_list = list(s)\n    \n    # Initialize two pointers\n    left, right = 0, len(s) - 1\n    \n    # Use two pointers to find vowels from both ends\n    while left < right:\n        # Move the left pointer until a vowel is found\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        # Move the right pointer until a vowel is found\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        \n        # Swap the vowels\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        \n        # Move both pointers towards the center\n        left += 1\n        right -= 1\n    \n    # Convert the list back to a string\n    return ''.join(s_list)\n\n# Test the function with the given assertion\nassert reverse_vowels(\"Python\") == \"Python\"\n```"}
{"task_id": "Mbpp/132", "solution": "```python\ndef tup_string(tup):\n    \"\"\"\n    Convert a tuple of characters to a string.\n\n    Parameters:\n    tup (tuple): A tuple containing characters.\n\n    Returns:\n    str: A string formed by concatenating the characters in the tuple.\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function with the provided assertion\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\n\n# Additional test cases\nprint(tup_string(('h', 'e', 'l', 'l', 'o')))  # Output: \"hello\"\nprint(tup_string(('P', 'y', 't', 'h', 'o', 'n')))  # Output: \"Python\"\nprint(tup_string(()))  # Output: \"\"\nprint(tup_string(('a',)))  # Output: \"a\"\n```\nThis script defines a function `tup_string` that takes a tuple of characters and returns a string by joining the characters together. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/133", "solution": "```python\ndef sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n    \"\"\"\n    # Initialize sum to 0\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            negative_sum += num\n    \n    return negative_sum\n\n# Test the function with the provided test case\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n\n# Additional test cases\nprint(sum_negativenum([1, -1, 2, -2, 3, -3]))  # Output should be -6\nprint(sum_negativenum([-1, -2, -3, -4]))       # Output should be -10\nprint(sum_negativenum([0, 1, 2, 3, 4]))        # Output should be 0\nprint(sum_negativenum([]))                     # Output should be 0\n```\nThis script defines a function `sum_negativenum` that calculates the sum of negative numbers in a given list. It includes a test case to verify the function's correctness and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/135", "solution": "```python\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    A hexagonal number is a figurate number that represents a hexagon with n dots on a side.\n    The formula to find the nth hexagonal number is: H(n) = n * (2n - 1)\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function with the provided assertion\nassert hexagonal_num(10) == 190\n\n# Additional test cases\nprint(hexagonal_num(1))  # Output: 1\nprint(hexagonal_num(2))  # Output: 6\nprint(hexagonal_num(3))  # Output: 15\nprint(hexagonal_num(4))  # Output: 28\nprint(hexagonal_num(5))  # Output: 45\nprint(hexagonal_num(6))  # Output: 66\nprint(hexagonal_num(7))  # Output: 91\nprint(hexagonal_num(8))  # Output: 120\nprint(hexagonal_num(9))  # Output: 153\nprint(hexagonal_num(10)) # Output: 190\n```\nThis script defines a function `hexagonal_num` that calculates the nth hexagonal number using the formula \\( H(n) = n \\times (2n - 1) \\). It includes a test case to verify the function works as expected."}
{"task_id": "Mbpp/137", "solution": "```python\nimport math\n\ndef zero_count(arr):\n    if not arr:  # Check if the array is empty\n        return 0.0\n    \n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    \n    if non_zeroes == 0:  # Avoid division by zero\n        return float('inf')  # or return 0.0 if you prefer\n    \n    return zeroes / non_zeroes\n\n# Test the function with the provided assertion\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n```\nThis script defines a function `zero_count` that calculates the ratio of zeroes to non-zeroes in a given list of integers. It includes a check to handle empty lists and avoids division by zero. The function is tested with an assertion to ensure it meets the specified requirements."}
{"task_id": "Mbpp/138", "solution": "```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if a given number can be represented as a sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as a sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # A number can be represented as a sum of non-zero powers of 2 if it is a positive integer\n    # and can be expressed in binary form with only 1s (e.g., 10 = 1010 in binary).\n    # This is equivalent to checking if the number is greater than 0.\n    return n > 0\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(0) == False\nassert is_Sum_Of_Powers_Of_Two(1) == True\nassert is_Sum_Of_Powers_Of_Two(2) == True\nassert is_Sum_Of_Powers_Of_Two(3) == True\nassert is_Sum_Of_Powers_Of_Two(4) == True\nassert is_Sum_Of_Powers_Of_Two(5) == True\nassert is_Sum_Of_Powers_Of_Two(6) == True\nassert is_Sum_Of_Powers_Of_Two(7) == True\nassert is_Sum_Of_Powers_Of_Two(8) == True\nassert is_Sum_Of_Powers_Of_Two(9) == True\nassert is_Sum_Of_Powers_Of_Two(11) == True\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(13) == True\nassert is_Sum_Of_Powers_Of_Two(14) == True\nassert is_Sum_Of_Powers_Of_Two(15) == True\nassert is_Sum_Of_Powers_Of_Two(16) == True\n```"}
{"task_id": "Mbpp/139", "solution": "```python\nimport math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 10\n    circumference = circle_circumference(radius)\n    print(f\"The circumference of a circle with radius {radius} is {circumference:.2f}\")\n```\nThis script defines a function `circle_circumference` that calculates the circumference of a circle given its radius. It uses the formula \\( C = 2 \\pi r \\), where \\( C \\) is the circumference and \\( r \\) is the radius. The script also includes a test case using `assert` to verify the function's correctness and an example usage that prints the result."}
{"task_id": "Mbpp/140", "solution": "```python\ndef extract_singly(list_of_lists):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Parameters:\n    list_of_lists (list of lists/tuples): A list containing lists or tuples of numbers.\n\n    Returns:\n    set: A set containing all unique numbers from the input list of lists.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    result_set = set()\n    \n    # Iterate over each sublist/tuple in the list_of_lists\n    for sublist in list_of_lists:\n        # Update the result_set with elements from the current sublist/tuple\n        result_set.update(sublist)\n    \n    return result_set\n\n# Test the function with the provided assertion\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example input\n    input_data = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    # Call the function and print the result\n    print(extract_singly(input_data))  # Output: {1, 3, 4, 5, 7}\n```\n"}
{"task_id": "Mbpp/141", "solution": "```python\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the order of the first k elements of the sublist.\"\"\"\n        sublist[:k] = sublist[:k][::-1]\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0:size]\n        max_index = max(range(size), key=arr.__getitem__)\n        \n        # Move the maximum element to the end of the current sublist\n        if max_index != size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                flip(arr, max_index + 1)\n            # Flip it to the end of the current sublist\n            flip(arr, size)\n    \n    return arr\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n```"}
{"task_id": "Mbpp/142", "solution": "```python\ndef count_samepair(list1, list2, list3):\n    # Initialize a counter for identical items\n    count = 0\n    \n    # Iterate over the lists using zip to pair elements at the same position\n    for item1, item2, item3 in zip(list1, list2, list3):\n        # Check if all three items are identical\n        if item1 == item2 == item3:\n            count += 1\n    \n    return count\n\n# Test the function with the provided assertion\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3\n\n# Additional test cases\nprint(count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]))  # Should return 3\nprint(count_samepair([1, 2, 3], [4, 5, 6], [7, 8, 9]))  # Should return 0\nprint(count_samepair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]))  # Should return 4\nprint(count_samepair([1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6]))  # Should return 3\n```\n\nThis script defines a function `count_samepair` that takes three lists as input and counts the number of items that are identical in the same position across all three lists. The function uses the `zip` function to iterate over the lists in parallel and checks if the elements at each position are the same. The provided test cases demonstrate the function's correctness."}
{"task_id": "Mbpp/145", "solution": "```python\ndef max_Abs_Diff(arr):\n    \"\"\"\n    This function takes a tuple of integers and returns the maximum difference\n    between any two elements in the array.\n    \"\"\"\n    if not arr or len(arr) < 2:\n        return 0  # If the array is empty or has less than 2 elements, return 0\n\n    # Find the minimum and maximum elements in the array\n    min_element = min(arr)\n    max_element = max(arr)\n\n    # The maximum difference will be between the maximum and minimum elements\n    max_difference = max_element - min_element\n\n    return max_difference\n\n# Test the function with the provided test case\nassert max_Abs_Diff((2, 1, 5, 3)) == 4\n\n# Additional test cases\nassert max_Abs_Diff((10, 20, 30, 40, 50)) == 40\nassert max_Abs_Diff((5, 5, 5, 5)) == 0\nassert max_Abs_Diff((1, 100)) == 99\nassert max_Abs_Diff((-10, -20, -30, -40)) == 30\nassert max_Abs_Diff((7,)) == 0  # Single element, no difference\nassert max_Abs_Diff(()) == 0  # Empty array, no difference\n```"}
{"task_id": "Mbpp/160", "solution": "```python\ndef find_solution(a, b, n):\n    \"\"\"\n    Find integers x and y such that ax + by = n.\n    \n    Parameters:\n    a (int): Coefficient of x.\n    b (int): Coefficient of y.\n    n (int): The target value.\n    \n    Returns:\n    tuple: A tuple (x, y) if a solution exists, otherwise None.\n    \"\"\"\n    def gcd_extended(a, b):\n        \"\"\"\n        Extended Euclidean Algorithm to find gcd of a and b.\n        It also finds x and y such that ax + by = gcd(a, b)\n        \n        Returns:\n        gcd, x, y\n        \"\"\"\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n\n    gcd, x, y = gcd_extended(a, b)\n    \n    # Check if n is a multiple of gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solution of ax + by = gcd(a, b) to ax + by = n\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)\n\n# Test the function with the provided assertion\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\nThis script defines a function `find_solution` that uses the Extended Euclidean Algorithm to find integers `x` and `y` such that `ax + by = n`. If no solution exists, it returns `None`. The function is tested with the provided assertion to ensure correctness."}
{"task_id": "Mbpp/161", "solution": "```python\ndef remove_elements(original_list, elements_to_remove):\n    \"\"\"\n    Remove all elements from original_list that are present in elements_to_remove.\n\n    :param original_list: List of elements from which some elements need to be removed.\n    :param elements_to_remove: List of elements that need to be removed from original_list.\n    :return: A new list with the elements removed.\n    \"\"\"\n    # Convert elements_to_remove to a set for faster lookup\n    elements_to_remove_set = set(elements_to_remove)\n    \n    # Use list comprehension to filter out elements\n    result_list = [element for element in original_list if element not in elements_to_remove_set]\n    \n    return result_list\n\n# Test the function with the provided assertion\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\n# Additional test cases\nprint(remove_elements([1, 2, 3, 4, 5], [1, 3, 5]))  # Expected output: [2, 4]\nprint(remove_elements([10, 20, 30, 40, 50], [20, 40]))  # Expected output: [10, 30, 50]\nprint(remove_elements([1, 2, 3], [4, 5, 6]))  # Expected output: [1, 2, 3] (no elements to remove)\nprint(remove_elements([], [1, 2, 3]))  # Expected output: [] (empty original list)\nprint(remove_elements([1, 2, 3], []))  # Expected output: [1, 2, 3] (nothing to remove)\n```\n"}
{"task_id": "Mbpp/162", "solution": "```python\ndef sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    \n    Parameters:\n    n (int): The starting integer of the series.\n    \n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    total_sum = 0\n    i = 0\n    while n - 2 * i >= 0:\n        total_sum += n - 2 * i\n        i += 1\n    return total_sum\n\n# Test the function with the provided example\nassert sum_series(6) == 12\n\n# Additional test cases\nprint(sum_series(6))  # Output: 12\nprint(sum_series(5))  # Output: 9 (5 + 3 + 1)\nprint(sum_series(4))  # Output: 6 (4 + 2 + 0)\nprint(sum_series(3))  # Output: 4 (3 + 1)\nprint(sum_series(2))  # Output: 2 (2 + 0)\nprint(sum_series(1))  # Output: 1 (1)\nprint(sum_series(0))  # Output: 0 (0)\n```\n\nThis script defines a function `sum_series` that calculates the sum of the series described in the problem statement. It uses a while loop to iterate over the series terms, adding each term to the total sum until the term becomes non-positive. The function is then tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/165", "solution": "```python\ndef count_char_position(s):\n    # Convert the string to lowercase to make the function case insensitive\n    s = s.lower()\n    count = 0\n    \n    # Iterate over the string and check if the character matches its position in the alphabet\n    for i, char in enumerate(s):\n        # Calculate the position in the alphabet (1-based index)\n        alphabet_position = ord(char) - ord('a') + 1\n        # Check if the position matches the index (1-based)\n        if alphabet_position == i + 1:\n            count += 1\n    \n    return count\n\n# Test the function with the provided test case\nassert count_char_position(\"xbcefg\") == 2\n\n# Additional test cases\nprint(count_char_position(\"a\"))  # 1, 'a' is at position 1\nprint(count_char_position(\"abc\"))  # 3, 'a', 'b', and 'c' are at positions 1, 2, and 3\nprint(count_char_position(\"xyz\"))  # 0, none of 'x', 'y', 'z' are at positions 24, 25, 26\nprint(count_char_position(\"AbCdEfG\"))  # 3, 'a', 'c', 'e' are at positions 1, 3, 5\nprint(count_char_position(\"\"))  # 0, empty string\n```\nThis script defines a function `count_char_position` that counts the number of characters in a string that occur at the same position as in the English alphabet, ignoring case. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/166", "solution": "```python\ndef find_even_pair(nums):\n    \"\"\"\n    This function counts the number of pairs of integers in a list that XOR to an even number.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    int: The number of pairs that XOR to an even number.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # Count the number of even and odd numbers in the list\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # A pair (a, b) XORs to an even number if both are even or both are odd\n    # So, we count pairs of even numbers and pairs of odd numbers\n    even_pairs = (even_count * (even_count - 1)) // 2\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs\n\n# Test the function with the provided test case\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\n# Additional test cases\nprint(find_even_pair([1, 2, 3, 4, 5, 6]))  # Output should be 4 (pairs: (1, 3), (1, 5), (3, 5), (2, 4))\nprint(find_even_pair([2, 4, 6, 8]))        # Output should be 6 (all pairs are even)\nprint(find_even_pair([1, 3, 5, 7]))        # Output should be 6 (all pairs are odd)\nprint(find_even_pair([1, 2, 3, 4]))        # Output should be 2 (pairs: (1, 3), (2, 4))\n```"}
{"task_id": "Mbpp/167", "solution": "```python\ndef next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n# Test cases\nassert next_power_of_2(0) == 1\nassert next_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(6) == 8\nassert next_power_of_2(7) == 8\nassert next_power_of_2(8) == 8\nassert next_power_of_2(9) == 16\nassert next_power_of_2(15) == 16\nassert next_power_of_2(16) == 16\nassert next_power_of_2(17) == 32\n```"}
{"task_id": "Mbpp/168", "solution": "```python\ndef frequency(lst, number):\n    \"\"\"\n    Count the number of occurrences of 'number' in the list 'lst'.\n\n    Parameters:\n    lst (list): The list in which to count occurrences.\n    number (int): The number to count in the list.\n\n    Returns:\n    int: The count of occurrences of 'number' in 'lst'.\n    \"\"\"\n    return lst.count(number)\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0\nassert frequency([1, 2, 3, 4, 4, 4], 4) == 3\nassert frequency([1, 2, 3, 2, 2, 2], 2) == 4\nassert frequency([], 1) == 0\nassert frequency([5, 5, 5, 5, 5], 5) == 5\nassert frequency([1, 2, 3, 4, 5], 6) == 0\n\nprint(\"All test cases passed!\")\n```\nThis script defines a function `frequency` that takes a list and a number as arguments and returns the count of occurrences of the number in the list. It uses the `count` method of the list to achieve this. The script also includes several test cases to verify the correctness of the function."}
{"task_id": "Mbpp/170", "solution": "```python\ndef sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of numbers in a list within a specified range of indices.\n\n    :param numbers: List of integers.\n    :param start_index: Starting index of the range (inclusive).\n    :param end_index: Ending index of the range (inclusive).\n    :return: Sum of the numbers within the specified range.\n    \"\"\"\n    # Ensure the indices are within the bounds of the list\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Invalid indices: start_index and end_index must be within the list bounds and start_index <= end_index.\")\n    \n    # Calculate the sum of the numbers within the specified range\n    return sum(numbers[start_index:end_index + 1])\n\n# Test the function with the provided assertion\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n\n# Additional test cases\nprint(sum_range_list([1, 2, 3, 4, 5], 0, 2))  # Output: 6 (1 + 2 + 3)\nprint(sum_range_list([10, 20, 30, 40, 50], 1, 3))  # Output: 90 (20 + 30 + 40)\nprint(sum_range_list([5, 5, 5, 5, 5], 0, 4))  # Output: 25 (5 + 5 + 5 + 5 + 5)\n```\n"}
{"task_id": "Mbpp/171", "solution": "```python\ndef perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its side.\n\n    Parameters:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    num_sides = 5\n    perimeter = num_sides * side_length\n    return perimeter\n\n# Test the function with the provided assertion\nassert perimeter_pentagon(5) == 25\n\n# Additional test cases\nprint(perimeter_pentagon(10))  # Expected output: 50\nprint(perimeter_pentagon(7.5)) # Expected output: 37.5\nprint(perimeter_pentagon(0))   # Expected output: 0\nprint(perimeter_pentagon(1.2)) # Expected output: 6.0\n```\nThis script defines a function `perimeter_pentagon` that calculates the perimeter of a regular pentagon given the length of one of its sides. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/172", "solution": "```python\ndef count_occurance(s):\n    \"\"\"\n    Count the number of occurrences of the substring 'std' in the given string s.\n\n    Parameters:\n    s (str): The string in which to count occurrences of 'std'.\n\n    Returns:\n    int: The number of times 'std' occurs in the string.\n    \"\"\"\n    return s.count('std')\n\n# Test the function with the provided assertion\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\n# Additional test cases\nprint(count_occurance(\"std\"))  # Output: 1\nprint(count_occurance(\"standard\"))  # Output: 1\nprint(count_occurance(\"stand\"))  # Output: 0\nprint(count_occurance(\"letstdlenstdporstdstd\"))  # Output: 4\nprint(count_occurance(\"\"))  # Output: 0\n```\nThis script defines a function `count_occurance` that uses the `str.count()` method to count the number of times the substring 'std' appears in the input string. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/222", "solution": "```python\ndef check_type(tup):\n    \"\"\"\n    This function checks if all elements in the tuple have the same data type.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if not tup:  # If the tuple is empty, return True\n        return True\n\n    # Get the type of the first element\n    first_type = type(tup[0])\n\n    # Check if all elements have the same type as the first element\n    for element in tup:\n        if type(element) != first_type:\n            return False\n\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 6, '7', 3, 5, 6)) == False\nassert check_type(()) == True  # An empty tuple should return True\nassert check_type((5.0, 6.0, 7.0)) == True\nassert check_type((5, 6.0, 7)) == False\n```"}
{"task_id": "Mbpp/223", "solution": "```python\ndef is_majority(arr, n, element):\n    \"\"\"\n    Determines if the given element is the majority element in the sorted array.\n    \n    Parameters:\n    arr (list): A sorted list of elements.\n    n (int): The length of the list.\n    element: The element to check for majority.\n    \n    Returns:\n    bool: True if the element is the majority element, False otherwise.\n    \"\"\"\n    # A majority element must appear at least n//2 + 1 times\n    majority_count = n // 2 + 1\n    \n    # Find the first occurrence of the element using binary search\n    def binary_search_first_occurrence(arr, n, element):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                if mid == 0 or arr[mid - 1] != element:\n                    return mid\n                else:\n                    high = mid - 1\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    \n    # Find the first occurrence of the element\n    first_occurrence = binary_search_first_occurrence(arr, n, element)\n    \n    # If the element is not found, it cannot be the majority element\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element appears at least majority_count times\n    if first_occurrence + majority_count - 1 < n and arr[first_occurrence + majority_count - 1] == element:\n        return True\n    \n    return False\n\n# Test the function with the provided assertion\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```"}
{"task_id": "Mbpp/224", "solution": "```python\ndef count_set_bits(n):\n    \"\"\"\n    Count the number of set bits (1s) in the binary representation of a given number.\n\n    Parameters:\n    n (int): The number to count set bits in.\n\n    Returns:\n    int: The count of set bits in the binary representation of n.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function with the provided assertion\nassert count_set_bits(2) == 1\n\n# Additional test cases\nassert count_set_bits(0) == 0  # No set bits in 0\nassert count_set_bits(1) == 1  # One set bit in 1\nassert count_set_bits(3) == 2  # Binary 11 has two set bits\nassert count_set_bits(4) == 1  # Binary 100 has one set bit\nassert count_set_bits(15) == 4 # Binary 1111 has four set bits\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `count_set_bits` that calculates the number of set bits (1s) in the binary representation of a given integer. It includes a test case to verify the function works as expected, along with additional test cases to ensure its correctness."}
{"task_id": "Mbpp/226", "solution": "```python\ndef odd_values_string(s):\n    \"\"\"\n    This function removes characters which have odd index values from the given string.\n    \n    Parameters:\n    s (str): The input string from which characters with odd index values will be removed.\n    \n    Returns:\n    str: A new string with characters at odd indices removed.\n    \"\"\"\n    # Use list comprehension to filter out characters at odd indices\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n# Test the function with the provided example\nassert odd_values_string('abcdef') == 'ace'\n\n# Additional test cases\nassert odd_values_string('123456789') == '13579'\nassert odd_values_string('hello world') == 'hlowrd'\nassert odd_values_string('') == ''\nassert odd_values_string('a') == 'a'\nassert odd_values_string('ab') == 'a'\n\n# Print results for manual verification\nprint(odd_values_string('abcdef'))  # Expected output: 'ace'\nprint(odd_values_string('123456789'))  # Expected output: '13579'\nprint(odd_values_string('hello world'))  # Expected output: 'hlowrd'\nprint(odd_values_string(''))  # Expected output: ''\nprint(odd_values_string('a'))  # Expected output: 'a'\nprint(odd_values_string('ab'))  # Expected output: 'a'\n```\n"}
{"task_id": "Mbpp/227", "solution": "```python\ndef min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function with the provided assertion\nassert min_of_three(10, 20, 0) == 0\n\n# Additional test cases\nassert min_of_three(5, 15, 10) == 5\nassert min_of_three(-1, -5, -3) == -5\nassert min_of_three(100, 50, 75) == 50\nassert min_of_three(0, 0, 0) == 0\nassert min_of_three(1.5, 2.5, 0.5) == 0.5\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `min_of_three` that takes three numbers as input and returns the minimum of the three using Python's built-in `min` function. It includes an assertion to test the function with the example provided, as well as additional test cases to ensure the function works correctly in various scenarios."}
{"task_id": "Mbpp/230", "solution": "```python\ndef replace_blank(input_string, char):\n    \"\"\"\n    Replaces blank spaces in the input_string with the specified character.\n\n    Parameters:\n    input_string (str): The string in which to replace spaces.\n    char (str): The character to replace spaces with.\n\n    Returns:\n    str: The modified string with spaces replaced by the specified character.\n    \"\"\"\n    return input_string.replace(' ', char)\n\n# Test the function with the provided assertion\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\n\n# Additional test cases\nprint(replace_blank(\"a b c\", '-'))  # Expected output: \"a-b-c\"\nprint(replace_blank(\"no spaces\", '*'))  # Expected output: \"no*spaces\"\nprint(replace_blank(\"   \", '#'))  # Expected output: \"###\"\nprint(replace_blank(\"singleword\", '!'))  # Expected output: \"singleword\"\n```\nThis script defines a function `replace_blank` that replaces all spaces in a given string with a specified character. It includes an assertion to test the function with the example provided, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/232", "solution": "```python\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n\n    Parameters:\n    lst (list): The list from which to find the largest items.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n    \"\"\"\n    # Sort the list in descending order and take the first n elements\n    return sorted(lst, reverse=True)[:n]\n\n# Test the function with the provided assertion\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\n\n# Additional test cases\nprint(larg_nnum([1, 3, 5, 7, 9], 3))  # Expected output: [9, 7, 5]\nprint(larg_nnum([4, 4, 4, 4, 4], 2))  # Expected output: [4, 4]\nprint(larg_nnum([10, 20, 30, 40, 50], 0))  # Expected output: []\nprint(larg_nnum([5], 1))  # Expected output: [5]\nprint(larg_nnum([], 1))  # Expected output: []\n```\n"}
{"task_id": "Mbpp/233", "solution": "```python\nimport math\n\ndef lateralsurface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Lateral surface area of a cylinder = 2 * \u03c0 * radius * height\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area\n\n# Test the function with the given assertion\nassert math.isclose(lateralsurface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 10\n    height = 5\n    print(f\"The lateral surface area of the cylinder with radius {radius} and height {height} is {lateralsurface_cylinder(radius, height)}\")\n```\n"}
{"task_id": "Mbpp/234", "solution": "```python\ndef volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3\n\n# Test the function with the provided assertion\nassert volume_cube(3) == 27\n\n# Additional test cases\nprint(volume_cube(1))  # Expected output: 1\nprint(volume_cube(2))  # Expected output: 8\nprint(volume_cube(4.5))  # Expected output: 91.125\nprint(volume_cube(0))  # Expected output: 0\n```\nThis script defines a function `volume_cube` that calculates the volume of a cube given its side length. It includes an assertion to verify the function works as expected for a side length of 3, and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/235", "solution": "```python\ndef even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n    An even bit is defined as a bit at an even position (0-indexed).\n    \"\"\"\n    # Initialize a mask with all even bits set\n    mask = 0\n    bit_position = 0\n    \n    # Create a mask with all even bits set\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Set all even bits of n using the mask\n    return n | mask\n\n# Test the function with the provided assertion\nassert even_bit_set_number(10) == 10\n\n# Additional test cases\nprint(even_bit_set_number(0))  # Should return 0 (no bits to set)\nprint(even_bit_set_number(1))  # Should return 1 (only bit 0 is set)\nprint(even_bit_set_number(2))  # Should return 3 (bit 0 is set)\nprint(even_bit_set_number(5))  # Should return 7 (bit 0 is set)\nprint(even_bit_set_number(15)) # Should return 15 (all bits already set)\n```"}
{"task_id": "Mbpp/237", "solution": "```python\ndef check_occurences(tuples_list):\n    # Create a dictionary to store the occurrences of each tuple\n    occurrences = {}\n    \n    for t in tuples_list:\n        # Sort the tuple to ensure (a, b) and (b, a) are considered the same\n        sorted_tuple = tuple(sorted(t))\n        \n        # Increment the count of the sorted tuple in the dictionary\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    \n    return occurrences\n\n# Test the function with the provided example\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\n# Additional test cases\nprint(check_occurences([(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]))  # Expected: {(1, 2): 2, (3, 4): 2, (5, 6): 1}\nprint(check_occurences([(1, 1), (1, 1), (2, 2), (2, 2), (2, 2)]))  # Expected: {(1, 1): 2, (2, 2): 3}\nprint(check_occurences([(0, 0), (0, 0), (0, 0)]))  # Expected: {(0, 0): 3}\nprint(check_occurences([]))  # Expected: {}\n```\n"}
{"task_id": "Mbpp/238", "solution": "```python\ndef number_of_substrings(s: str) -> int:\n    \"\"\"\n    Calculate the number of non-empty substrings of a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n    \"\"\"\n    # The number of non-empty substrings of a string of length n is given by the formula n * (n + 1) / 2\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test the function with the provided example\nassert number_of_substrings(\"abc\") == 6\n\n# Additional test cases\nprint(number_of_substrings(\"a\"))  # 1\nprint(number_of_substrings(\"ab\"))  # 3\nprint(number_of_substrings(\"abcd\"))  # 10\nprint(number_of_substrings(\"\"))  # 0\n```\n\nThis script defines a function `number_of_substrings` that calculates the number of non-empty substrings of a given string using the formula \\( n \\times (n + 1) / 2 \\), where \\( n \\) is the length of the string. The function is tested with the example provided in the task description, as well as additional test cases."}
{"task_id": "Mbpp/239", "solution": "```python\ndef get_total_number_of_sequences(m, n):\n    # Initialize a memoization table where dp[i][j] represents the number of sequences\n    # of length j that end with the number i.\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Base case: There is one sequence of length 1 for each number from 1 to m\n    for i in range(1, m + 1):\n        dp[i][1] = 1\n\n    # Fill the dp table\n    for length in range(2, n + 1):  # For each sequence length from 2 to n\n        for current in range(1, m + 1):  # For each possible current number\n            # Calculate the number of sequences of length `length` ending with `current`\n            for previous in range(1, current // 2 + 1):  # Previous must be at least half of current\n                dp[current][length] += dp[previous][length - 1]\n\n    # Sum up all sequences of length n\n    total_sequences = sum(dp[i][n] for i in range(1, m + 1))\n    return total_sequences\n\n# Test the function with the provided test case\nassert get_total_number_of_sequences(10, 4) == 4\n\n# Additional test cases\nprint(get_total_number_of_sequences(10, 1))  # Should return 10, as each number from 1 to 10 is a valid sequence\nprint(get_total_number_of_sequences(5, 2))   # Should return 4, sequences: [1,2], [1,3], [1,4], [1,5]\nprint(get_total_number_of_sequences(10, 3))  # Should return 8, sequences: [1,2,4], [1,2,5], [1,3,6], [1,3,7], [1,4,8], [1,4,9], [1,5,10], [2,4,8]\n```\n\nThis script defines a function `get_total_number_of_sequences` that calculates the number of valid sequences of length `n` where each element is a positive integer, greater than or equal to twice the previous element, and less than or equal to `m`. The function uses dynamic programming to efficiently compute the result. The script also includes a test case to verify the correctness of the function."}
{"task_id": "Mbpp/240", "solution": "```python\ndef replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of list1 with the elements of list2.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list whose elements will replace the last element of list1.\n\n    Returns:\n    list: A new list with the last element of list1 replaced by the elements of list2.\n    \"\"\"\n    # Remove the last element of list1 and extend it with list2\n    return list1[:-1] + list2\n\n# Test the function with the provided example\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n# Additional test cases\nprint(replace_list([1, 2, 3], [4, 5]))  # Expected output: [1, 2, 4, 5]\nprint(replace_list([10], [20, 30, 40]))  # Expected output: [20, 30, 40]\nprint(replace_list([1, 2, 3, 4], []))  # Expected output: [1, 2, 3]\nprint(replace_list([], [1, 2, 3]))  # Expected output: [1, 2, 3]\n```\nThis script defines a function `replace_list` that takes two lists as input and replaces the last element of the first list with the elements of the second list. It includes an assertion to test the function with the provided example and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/242", "solution": "```python\ndef count_charac(s):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n    \n    Parameters:\n    s (str): The input string whose characters are to be counted.\n    \n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    return len(s)\n\n# Test the function with the provided assertion\nassert count_charac(\"python programming\") == 18\n\n# Additional test cases\nprint(count_charac(\"\"))  # Output: 0, an empty string\nprint(count_charac(\"hello\"))  # Output: 5\nprint(count_charac(\" \"))  # Output: 1, a single space\nprint(count_charac(\"1234567890\"))  # Output: 10, numbers as characters\nprint(count_charac(\"!@#$%^&*()\"))  # Output: 10, special characters\n```\nThis script defines a function `count_charac` that calculates the total number of characters in a given string using Python's built-in `len()` function. It includes an assertion to verify the function's correctness with the example provided, and additional test cases to demonstrate its usage with different types of input strings."}
{"task_id": "Mbpp/244", "solution": "```python\nimport math\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    This function finds the next perfect square greater than a given number n.\n    \n    Parameters:\n    n (int): The number to find the next perfect square for.\n    \n    Returns:\n    int: The next perfect square greater than n.\n    \"\"\"\n    # Find the square root of the given number\n    root = math.sqrt(n)\n    \n    # Find the next whole number greater than the square root\n    next_root = math.ceil(root)\n    \n    # Calculate the next perfect square\n    next_perfect_square = next_root ** 2\n    \n    return next_perfect_square\n\n# Test the function with the given assertion\nassert next_Perfect_Square(35) == 36\n\n# Additional test cases\nprint(next_Perfect_Square(0))  # Should return 1\nprint(next_Perfect_Square(1))  # Should return 4\nprint(next_Perfect_Square(15)) # Should return 16\nprint(next_Perfect_Square(36)) # Should return 49\nprint(next_Perfect_Square(50)) # Should return 64\n```\n\nThis script defines a function `next_Perfect_Square` that calculates the next perfect square greater than a given number `n`. It uses the `math.sqrt` function to find the square root of `n`, then uses `math.ceil` to find the smallest integer greater than or equal to the square root. This integer is then squared to find the next perfect square. The function is tested with an assertion and additional test cases to ensure correctness."}
{"task_id": "Mbpp/245", "solution": "```python\ndef max_sum_bitonic_subsequence(arr):\n    n = len(arr)\n    \n    # Initialize the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing subsequence sums\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill the decreasing subsequence sums\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n\n# Test the function with the provided test case\nassert max_sum_bitonic_subsequence([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```"}
{"task_id": "Mbpp/247", "solution": "```python\ndef lps(s: str) -> int:\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    \n    # Create a 2D array to store the length of the longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. The outer loop is for substrings of increasing length\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # The length of the longest palindromic subseq is in dp[0][n-1]\n    return dp[0][n - 1]\n\n# Test the function with the given assertion\nassert lps(\"TENS FOR TENS\") == 5\n```\n\nThis script defines a function `lps` that calculates the length of the longest palindromic subsequence in a given string using dynamic programming. The function initializes a 2D list `dp` to store the lengths of palindromic subsequences for different substrings. It then iteratively fills this table based on the characters of the string, considering substrings of increasing lengths. Finally, it returns the length of the longest palindromic subsequence found, which is stored in `dp[0][n-1]`. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/250", "solution": "```python\ndef count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of the specified element in the given tuple.\n\n    Parameters:\n    tup (tuple): The tuple in which to count occurrences.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The number of times the element occurs in the tuple.\n    \"\"\"\n    return tup.count(element)\n\n# Test the function with the provided assertion\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\n\n# Additional test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 5) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 2) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 15) == 1\nassert count_X((), 1) == 0  # Test with an empty tuple\n```"}
{"task_id": "Mbpp/251", "solution": "```python\ndef insert_element(lst, element):\n    # Create a new list to store the result\n    result = []\n    # Iterate over each item in the original list\n    for item in lst:\n        # Append the element before each item\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function with the provided example\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n\n# Additional test cases\nprint(insert_element([1, 2, 3], 0))  # Expected: [0, 1, 0, 2, 0, 3]\nprint(insert_element([], 'a'))       # Expected: []\nprint(insert_element(['a'], 'b'))    # Expected: ['b', 'a']\nprint(insert_element(['x', 'y'], 'z'))  # Expected: ['z', 'x', 'z', 'y']\n```\n"}
{"task_id": "Mbpp/252", "solution": "```python\nimport cmath\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to its polar coordinates representation.\n\n    Parameters:\n    complex_number (complex): A complex number.\n\n    Returns:\n    tuple: A tuple containing the magnitude and phase angle (in radians) of the complex number.\n    \"\"\"\n    # Use cmath.polar to convert the complex number to polar coordinates\n    magnitude, angle = cmath.polar(complex_number)\n    return (magnitude, angle)\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(complex(0, 1)) == (1.0, cmath.pi / 2)\nassert convert(complex(1, 1)) == (cmath.sqrt(2), cmath.pi / 4)\nassert convert(complex(-1, -1)) == (cmath.sqrt(2), -3 * cmath.pi / 4)\nassert convert(complex(0, -1)) == (1.0, -cmath.pi / 2)\n\n# Example usage\nif __name__ == \"__main__\":\n    z = complex(3, 4)\n    polar_coords = convert(z)\n    print(f\"The polar coordinates of {z} are: magnitude = {polar_coords[0]}, angle = {polar_coords[1]} radians\")\n```\nThis script defines a function `convert` that takes a complex number as input and returns its polar coordinates using the `cmath.polar` function. The script includes test cases to verify the correctness of the function and an example usage that demonstrates how to use the function to convert a complex number to polar coordinates."}
{"task_id": "Mbpp/253", "solution": "```python\ndef count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The list to be checked for integer elements.\n\n    Returns:\n    int: The count of integer elements in the list.\n    \"\"\"\n    return sum(1 for item in lst if isinstance(item, int))\n\n# Test the function with the provided assertion\nassert count_integer([1, 2, 'abc', 1.2]) == 2\n\n# Additional test cases\nprint(count_integer([1, 2, 3, 4]))  # Output: 4\nprint(count_integer(['a', 'b', 'c']))  # Output: 0\nprint(count_integer([1, '2', 3.0, 4]))  # Output: 2\nprint(count_integer([]))  # Output: 0\nprint(count_integer([1, 2, 3.5, '4', 5]))  # Output: 3\n```\nThis script defines a function `count_integer` that counts the number of integer elements in a given list. It uses a generator expression to iterate over the list and checks if each element is an instance of `int`. The `sum` function is used to count the number of `True` results from the `isinstance` checks. The script also includes a test case to verify the function's correctness, along with additional test cases for further validation."}
{"task_id": "Mbpp/255", "solution": "```python\nfrom itertools import product\n\ndef combinations_colors(elements, n):\n    \"\"\"\n    Generate all combinations with repetition of the elements of the list.\n\n    :param elements: List of elements to combine\n    :param n: Length of each combination\n    :return: List of tuples, each representing a combination\n    \"\"\"\n    return list(product(elements, repeat=n))\n\n# Test the function with the provided example\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\n\n# Additional test cases\nprint(combinations_colors([\"Red\", \"Green\", \"Blue\"], 2))\n# Expected output: [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n\nprint(combinations_colors([\"Red\", \"Green\"], 3))\n# Expected output: [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green')]\n```\n\nThis script defines a function `combinations_colors` that uses the `product` function from the `itertools` module to generate all possible combinations with repetition of the elements in the input list, for a specified length `n`. The function returns these combinations as a list of tuples. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/256", "solution": "```python\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    if n <= 2:\n        return 0\n\n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n\n    # Implement the Sieve of Eratosthenes\n    for start in range(2, int(n**0.5) + 1):\n        if is_prime[start]:\n            for multiple in range(start*start, n, start):\n                is_prime[multiple] = False\n\n    # Count the number of primes\n    return sum(is_prime)\n\n# Test the function with the provided assertion\nassert count_Primes_nums(5) == 2\n```"}
{"task_id": "Mbpp/257", "solution": "```python\ndef swap_numbers(a, b):\n    \"\"\"\n    This function takes two numbers and returns a tuple with the second number first and the first number second.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    tuple: A tuple with the second number first and the first number second.\n    \"\"\"\n    return (b, a)\n\n# Test the function with an example\nassert swap_numbers(10, 20) == (20, 10)\n\n# Additional test cases\nprint(swap_numbers(5, 15))  # Expected output: (15, 5)\nprint(swap_numbers(-1, 1))  # Expected output: (1, -1)\nprint(swap_numbers(0, 0))   # Expected output: (0, 0)\nprint(swap_numbers(3.5, 7.2))  # Expected output: (7.2, 3.5)\n```"}
{"task_id": "Mbpp/259", "solution": "```python\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of tuples and returns a new tuple of tuples\n    where each element is the maximum of the corresponding elements from the input tuples.\n    \"\"\"\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Create a new tuple with maximized elements\n    maximized_tuple = tuple(\n        (max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(tuple1, tuple2)\n    )\n\n    return maximized_tuple\n\n# Test the function with the provided assertion\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\n# Example usage\nresult = maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\nprint(result)  # Output: ((6, 7), (4, 9), (2, 9), (7, 10))\n```\nThis script defines a function `maximize_elements` that takes two tuples of tuples and returns a new tuple of tuples where each element is the maximum of the corresponding elements from the input tuples. The function is tested with an assertion to ensure it works as expected."}
{"task_id": "Mbpp/260", "solution": "```python\ndef newman_prime(n):\n    \"\"\"\n    Function to find the nth Newman\u2013Shanks\u2013Williams prime number.\n    The sequence is defined as:\n    NS(n) = 1 if n == 0 or n == 1\n    NS(n) = 2 * NS(n-1) + NS(n-2) for n > 1\n    A number in this sequence is a prime number if it is only divisible by 1 and itself.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Generate NS(n) sequence and find the nth prime\n    ns_sequence = [1, 1]  # Starting values for NS(0) and NS(1)\n    prime_count = 0\n    current_index = 2\n\n    while prime_count < n:\n        # Calculate the next NS number\n        next_ns = 2 * ns_sequence[current_index - 1] + ns_sequence[current_index - 2]\n        ns_sequence.append(next_ns)\n\n        # Check if the current NS number is prime\n        if is_prime(next_ns):\n            prime_count += 1\n            if prime_count == n:\n                return next_ns\n\n        current_index += 1\n\n# Test the function with the given assertion\nassert newman_prime(3) == 7\n```"}
{"task_id": "Mbpp/261", "solution": "```python\ndef division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division of two tuples.\n\n    Args:\n    tuple1 (tuple): The first tuple containing dividend elements.\n    tuple2 (tuple): The second tuple containing divisor elements.\n\n    Returns:\n    tuple: A tuple containing the result of element-wise division.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result = tuple(a // b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function with the provided example\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n\n# Additional test cases\nassert division_elements((20, 8, 15), (4, 2, 5)) == (5, 4, 3)\nassert division_elements((100, 50, 25), (10, 5, 5)) == (10, 10, 5)\nassert division_elements((9, 18, 27), (3, 6, 9)) == (3, 3, 3)\n```\nThis script defines a function `division_elements` that takes two tuples as input and returns a new tuple containing the result of element-wise integer division. The function checks if the tuples have the same length and raises a `ValueError` if they do not. The division is performed using integer division (`//`) to match the expected output in the assertion. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/262", "solution": "```python\ndef split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L.\n\n    Parameters:\n    lst (list): The list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    # Ensure L is not greater than the length of the list\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n\n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return (first_part, second_part)\n\n# Test the function with the provided example\nassert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n\n# Additional test cases\nassert split_two_parts([10, 20, 30, 40, 50], 2) == ([10, 20], [30, 40, 50])\nassert split_two_parts(['a', 'b', 'c', 'd'], 1) == (['a'], ['b', 'c', 'd'])\nassert split_two_parts([True, False, True], 0) == ([], [True, False, True])\nassert split_two_parts([], 0) == ([], [])\n```"}
{"task_id": "Mbpp/264", "solution": "```python\ndef dog_age(human_years):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    The first two years of a dog's life count as 10.5 dog years each.\n    Each year following equates to 4 dog years.\n\n    Parameters:\n    human_years (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n    \"\"\"\n    if human_years <= 0:\n        return 0\n    elif human_years == 1:\n        return 10.5\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Test the function with the given assertion\nassert dog_age(12) == 61\n\n# Example usage\nprint(f\"A 12-year-old dog is {dog_age(12)} in dog years.\")\n```\n\nThis script defines a function `dog_age` that calculates a dog's age in dog years based on the given rules: the first two years count as 10.5 dog years each, and each subsequent year counts as 4 dog years. The function is tested with an assertion to ensure it returns the correct result for a 12-year-old dog."}
{"task_id": "Mbpp/265", "solution": "```python\ndef list_split(lst, n):\n    \"\"\"\n    Splits a list into n lists, where each list contains every nth element from the original list.\n    \n    Parameters:\n    lst (list): The list to be split.\n    n (int): The interval at which to split the list.\n    \n    Returns:\n    list: A list of lists, where each sublist contains every nth element from the original list.\n    \"\"\"\n    # Initialize a list of empty lists to hold the result\n    result = [[] for _ in range(n)]\n    \n    # Iterate over the list and distribute elements into the result lists\n    for index, element in enumerate(lst):\n        result[index % n].append(element)\n    \n    return result\n\n# Test the function with the provided example\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\n# Additional test cases\nprint(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))  # Expected: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nprint(list_split(['x', 'y', 'z'], 1))  # Expected: [['x', 'y', 'z']]\nprint(list_split(['x', 'y', 'z'], 2))  # Expected: [['x', 'z'], ['y']]\nprint(list_split([], 3))  # Expected: [[], [], []]\n```\n\nThis script defines a function `list_split` that takes a list and an integer `n` and splits the list into `n` sublists, each containing every nth element from the original list. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/266", "solution": "```python\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    # The lateral surface area of a cube is the sum of the areas of the four vertical faces.\n    # Each face is a square with area equal to side_length^2.\n    # Therefore, the lateral surface area is 4 times the area of one face.\n    lateral_surface_area = 4 * (side_length ** 2)\n    return lateral_surface_area\n\n# Test the function with the given assertion\nassert lateralsurface_cube(5) == 100\n\n# Example usage\nif __name__ == \"__main__\":\n    side_length = 5\n    print(f\"The lateral surface area of a cube with side length {side_length} is {lateralsurface_cube(side_length)}\")\n```\n\nThis script defines a function `lateralsurface_cube` that calculates the lateral surface area of a cube given its side length. The lateral surface area is calculated as four times the area of one face of the cube. The script includes an assertion to test the function with a side length of 5, which should return 100."}
{"task_id": "Mbpp/267", "solution": "```python\ndef square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2  # Move to the next odd number\n    return sum_of_squares\n\n# Test the function with the provided assertion\nassert square_Sum(2) == 10\n\n# Additional test cases\nprint(square_Sum(1))  # Should return 1 (1^2)\nprint(square_Sum(3))  # Should return 35 (1^2 + 3^2 + 5^2)\nprint(square_Sum(4))  # Should return 84 (1^2 + 3^2 + 5^2 + 7^2)\nprint(square_Sum(5))  # Should return 165 (1^2 + 3^2 + 5^2 + 7^2 + 9^2)\n```"}
{"task_id": "Mbpp/268", "solution": "```python\ndef find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n\n    A star number is a centered figurate number that represents a centered hexagram (six-pointed star),\n    such as the Star of David, or the Chinese Star. The nth star number is given by the formula:\n    \n    Star(n) = 6 * n * (n - 1) + 1\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The nth star number.\n    \"\"\"\n    return 6 * n * (n - 1) + 1\n\n# Test the function with the provided assertion\nassert find_star_num(3) == 37\n\n# Additional test cases\nprint(find_star_num(1))  # Output: 1\nprint(find_star_num(2))  # Output: 13\nprint(find_star_num(4))  # Output: 73\nprint(find_star_num(5))  # Output: 121\n```\n\nThis script defines a function `find_star_num` that calculates the nth star number using the formula for star numbers. It includes a test case to verify the function works as expected, as well as additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/269", "solution": "```python\ndef ascii_value(char):\n    \"\"\"\n    This function takes a single character as input and returns its ASCII value.\n    \n    :param char: A single character string\n    :return: ASCII value of the character\n    \"\"\"\n    return ord(char)\n\n# Test the function with the given assertion\nassert ascii_value('A') == 65\n\n# Additional test cases\nprint(ascii_value('B'))  # Should print 66\nprint(ascii_value('a'))  # Should print 97\nprint(ascii_value('z'))  # Should print 122\nprint(ascii_value('0'))  # Should print 48\nprint(ascii_value(' '))  # Should print 32\n```\nThis script defines a function `ascii_value` that takes a single character as input and returns its ASCII value using the built-in `ord()` function. It includes an assertion to verify the function works as expected for the character 'A', and additional test cases to demonstrate its usage with other characters."}
{"task_id": "Mbpp/270", "solution": "```python\ndef sum_even_and_even_index(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the sum of even numbers\n    that are located at even indices in the list.\n    \n    :param numbers: List of integers\n    :return: Sum of even numbers at even indices\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the list with index\n    for index in range(0, len(numbers), 2):  # Only consider even indices\n        if numbers[index] % 2 == 0:  # Check if the number at the even index is even\n            total_sum += numbers[index]\n    \n    return total_sum\n\n# Test the function with the provided test case\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\n# Additional test cases\nprint(sum_even_and_even_index([2, 3, 4, 5, 6, 7]))  # Output should be 12 (2 + 4 + 6)\nprint(sum_even_and_even_index([1, 3, 5, 7, 9]))     # Output should be 0 (no even numbers at even indices)\nprint(sum_even_and_even_index([0, 1, 2, 3, 4, 5]))  # Output should be 6 (0 + 2 + 4)\nprint(sum_even_and_even_index([]))                  # Output should be 0 (empty list)\n```\n"}
{"task_id": "Mbpp/271", "solution": "```python\ndef even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of the first n even natural numbers raised to the fifth power.\n    \n    Parameters:\n    n (int): The number of even natural numbers to consider.\n    \n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_even_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_even_powers += even_number ** 5\n    return sum_even_powers\n\n# Test the function with the provided assertion\nassert even_Power_Sum(2) == 1056\n\n# Additional test cases\nprint(even_Power_Sum(1))  # Should return 32, since 2^5 = 32\nprint(even_Power_Sum(3))  # Should return 1056 + 7776 = 8832, since 2^5 + 4^5 + 6^5 = 32 + 1024 + 7776\nprint(even_Power_Sum(4))  # Should return 8832 + 32768 = 41600, since 2^5 + 4^5 + 6^5 + 8^5 = 32 + 1024 + 7776 + 32768\n```\nThis script defines a function `even_Power_Sum` that calculates the sum of the first `n` even natural numbers raised to the fifth power. It includes a test case to verify the function's correctness and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/272", "solution": "```python\ndef rear_extract(tuples_list):\n    \"\"\"\n    This function takes a list of tuples and returns a list containing the rear element of each tuple.\n\n    :param tuples_list: List of tuples\n    :return: List of rear elements from each tuple\n    \"\"\"\n    # Use list comprehension to extract the last element from each tuple\n    return [t[-1] for t in tuples_list]\n\n# Test the function with the provided example\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\n# Additional test cases\nassert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]\nassert rear_extract([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]\nassert rear_extract([(1,), (2,), (3,)]) == [1, 2, 3]\nassert rear_extract([]) == []\n```"}
{"task_id": "Mbpp/273", "solution": "```python\ndef subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple of numbers.\n    tuple2 (tuple): The second tuple of numbers.\n\n    Returns:\n    tuple: A tuple containing the result of the subtraction.\n    \"\"\"\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length\")\n\n    # Subtract elements of tuple2 from tuple1\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function with the provided example\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\n# Additional test cases\nassert subtract_elements((1, 2, 3), (1, 1, 1)) == (0, 1, 2)\nassert subtract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\nassert subtract_elements((5, 10, 15), (5, 10, 15)) == (0, 0, 0)\nassert subtract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)\n```\n"}
{"task_id": "Mbpp/274", "solution": "```python\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of binomial coefficients at even indices for a given positive integer n.\n    \"\"\"\n    # Initialize the sum\n    sum_even_indices = 0\n    \n    # Calculate the binomial coefficients for even indices\n    for k in range(0, n + 1, 2):\n        sum_even_indices += binomial_coefficient(n, k)\n    \n    return sum_even_indices\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Helper function to calculate the binomial coefficient C(n, k) = n! / (k! * (n-k)!)\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Calculate factorials\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(num):\n    \"\"\"\n    Helper function to calculate the factorial of a number\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\n# Test the function with the provided assertion\nassert even_binomial_Coeff_Sum(4) == 8\n```\n\nThis script defines a function `even_binomial_Coeff_Sum` that calculates the sum of binomial coefficients at even indices for a given positive integer `n`. It uses helper functions `binomial_coefficient` to calculate individual binomial coefficients and `factorial` to compute factorials. The script includes an assertion to test the function with the example provided."}
{"task_id": "Mbpp/276", "solution": "```python\nimport math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # Volume of a cylinder formula: V = \u03c0r\u00b2h\n    volume = math.pi * (radius ** 2) * height\n    return volume\n\n# Test the function with the provided assertion\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 10\n    height = 5\n    print(f\"The volume of the cylinder with radius {radius} and height {height} is {volume_cylinder(radius, height)}\")\n```\nThis script defines a function `volume_cylinder` that calculates the volume of a cylinder using the formula \\( V = \\pi r^2 h \\). It includes an assertion to test the function with a specific example and prints the result when run as a standalone script."}
{"task_id": "Mbpp/277", "solution": "```python\ndef dict_filter(input_dict, n):\n    \"\"\"\n    Filters the input dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    input_dict (dict): The dictionary to filter.\n    n (int): The threshold value.\n\n    Returns:\n    dict: A new dictionary with filtered entries.\n    \"\"\"\n    return {key: value for key, value in input_dict.items() if value >= n}\n\n# Test the function with the provided assertion\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\n# Additional test cases\nprint(dict_filter({'Alice': 150, 'Bob': 160, 'Charlie': 170}, 160))  # {'Bob': 160, 'Charlie': 170}\nprint(dict_filter({'X': 100, 'Y': 200, 'Z': 300}, 250))  # {'Z': 300}\nprint(dict_filter({'A': 50, 'B': 60, 'C': 70}, 80))  # {}\n```\n"}
{"task_id": "Mbpp/278", "solution": "```python\ndef count_first_elements(tup):\n    \"\"\"\n    This function takes a tuple as input and returns the number of elements\n    that occur before the first tuple element in the given tuple.\n    \n    :param tup: A tuple containing various elements, including at least one tuple.\n    :return: An integer representing the number of elements before the first tuple element.\n    \"\"\"\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function with the provided assertion\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n\n# Additional test cases\nprint(count_first_elements((1, 2, 3, (4, 5), 6)))  # Output: 3\nprint(count_first_elements(((1, 2), 3, 4, 5)))    # Output: 0\nprint(count_first_elements((1, 2, 3, 4, 5)))      # Output: 5 (no tuple, so count all)\nprint(count_first_elements((1, (2, 3), 4, 5)))    # Output: 1\n```\nThis script defines a function `count_first_elements` that iterates over the elements of a given tuple and counts how many elements appear before the first tuple element. The function stops counting as soon as it encounters a tuple. The script also includes a test case to verify the function's correctness, along with additional test cases to demonstrate its behavior in different scenarios."}
{"task_id": "Mbpp/279", "solution": "```python\ndef is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    A decagonal number is a figurate number that extends the concept of\n    triangular and square numbers to the decagon (a ten-sided polygon).\n    The nth decagonal number is given by the formula:\n    \n    D_n = n * (4n - 3)\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (4 * n - 3)\n\n# Test the function with the provided assertion\nassert is_num_decagonal(3) == 27\n\n# Additional test cases\nprint(is_num_decagonal(1))  # Output: 1\nprint(is_num_decagonal(2))  # Output: 7\nprint(is_num_decagonal(4))  # Output: 52\nprint(is_num_decagonal(5))  # Output: 85\n```\n\nThis script defines a function `is_num_decagonal` that calculates the nth decagonal number using the formula \\( D_n = n \\times (4n - 3) \\). The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/280", "solution": "```python\ndef sequential_search(arr, element):\n    \"\"\"\n    This function takes an array and an element as input and returns a tuple.\n    The tuple contains a boolean indicating if the element is in the array and\n    the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)\n\n# Test the function with the provided assertion\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\n\n# Additional test cases\nprint(sequential_search([1, 2, 3, 4, 5], 3))  # Expected output: (True, 2)\nprint(sequential_search([1, 2, 3, 4, 5], 6))  # Expected output: (False, -1)\nprint(sequential_search([], 1))               # Expected output: (False, -1)\nprint(sequential_search([10, 20, 30], 10))    # Expected output: (True, 0)\nprint(sequential_search([10, 20, 30], 30))    # Expected output: (True, 2)\n```\nThis script defines a function `sequential_search` that iterates over the input array to find the specified element. If the element is found, it returns a tuple with `True` and the index of the element. If the element is not found, it returns a tuple with `False` and `-1`. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/281", "solution": "```python\ndef all_unique(lst):\n    \"\"\"\n    Check if all elements in the list are unique.\n\n    Parameters:\n    lst (list): The list to check for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Convert the list to a set, which removes duplicates\n    unique_elements = set(lst)\n    # Compare the length of the set with the original list\n    return len(unique_elements) == len(lst)\n\n# Test the function with the provided assertion\nassert all_unique([1, 2, 3]) == True\n\n# Additional test cases\nassert all_unique([1, 2, 2, 3]) == False\nassert all_unique([]) == True\nassert all_unique([1]) == True\nassert all_unique([1, 1, 1, 1]) == False\nassert all_unique(['a', 'b', 'c']) == True\nassert all_unique(['a', 'b', 'a']) == False\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `all_unique` that checks if all elements in a given list are unique. It uses a set to remove duplicates and compares the length of the set with the original list. If they are the same, all elements are unique. The script includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/282", "solution": "```python\ndef sub_list(list1, list2):\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n    \n    Parameters:\n    list1 (list of int/float): The first list of numbers.\n    list2 (list of int/float): The second list of numbers.\n    \n    Returns:\n    list of int/float: A new list containing the result of element-wise subtraction.\n    \n    Raises:\n    ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    return [a - b for a, b in zip(list1, list2)]\n\n# Test the function with the provided assertion\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n\n# Additional test cases\nprint(sub_list([10, 20, 30], [1, 2, 3]))  # Output: [9, 18, 27]\nprint(sub_list([5, 5, 5], [5, 5, 5]))    # Output: [0, 0, 0]\nprint(sub_list([0, 0, 0], [1, 2, 3]))    # Output: [-1, -2, -3]\n```\nThis script defines a function `sub_list` that takes two lists as input and returns a new list containing the result of subtracting the elements of the second list from the first list, element-wise. The function checks if the input lists are of the same length and raises a `ValueError` if they are not. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/283", "solution": "```python\ndef validate(number):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(number)\n    \n    # Create a dictionary to count the frequency of each digit\n    frequency = {}\n    \n    # Count the frequency of each digit in the number\n    for digit in num_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        if count > int(digit):\n            return False\n    \n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(122333) == True\nassert validate(1223334444) == False\nassert validate(0) == True\nassert validate(111) == False\nassert validate(222) == True\nassert validate(3333) == False\nassert validate(4444) == False\nassert validate(1234567890) == True\nassert validate(9876543210) == True\n\nprint(\"All test cases passed!\")\n```\n\nThis script defines a function `validate` that checks whether the frequency of each digit in a given integer is less than or equal to the digit itself. It includes several test cases to verify the correctness of the function."}
{"task_id": "Mbpp/284", "solution": "```python\ndef check_element(lst, element):\n    \"\"\"\n    This function checks whether all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element: The element to compare against each item in the list.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Test the function with the provided assertion\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\n\n# Additional test cases\nassert check_element([\"blue\", \"blue\", \"blue\"], 'blue') == True\nassert check_element([\"blue\", \"blue\", \"red\"], 'blue') == False\nassert check_element([], 'blue') == True  # An empty list should return True\nassert check_element([1, 1, 1], 1) == True\nassert check_element([1, 2, 1], 1) == False\n```"}
{"task_id": "Mbpp/285", "solution": "```python\nimport re\n\ndef text_match_two_three(text):\n    \"\"\"\n    This function checks whether the input string contains the character 'a' \n    followed by two or three 'b' characters.\n\n    Parameters:\n    text (str): The input string to check.\n\n    Returns:\n    bool: True if the pattern 'a' followed by two or three 'b's is found, False otherwise.\n    \"\"\"\n    # Define the regex pattern for 'a' followed by two or three 'b's\n    pattern = r'ab{2,3}'\n    \n    # Use re.search to find the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False\nassert text_match_two_three(\"a\") == False\nassert text_match_two_three(\"b\") == False\nassert text_match_two_three(\"aabb\") == True\nassert text_match_two_three(\"aabbb\") == True\nassert text_match_two_three(\"aabbbb\") == False\nassert text_match_two_three(\"xyz\") == False\n\nprint(\"All test cases passed.\")\n```\nThis script defines a function `text_match_two_three` that uses a regular expression to check if a string contains the character 'a' followed by two or three 'b' characters. The function returns `True` if the pattern is found and `False` otherwise. The script also includes several test cases to verify the correctness of the function."}
{"task_id": "Mbpp/286", "solution": "```python\ndef max_sub_array_sum_repeated(arr, n, k):\n    \"\"\"\n    Function to find the largest sum of a contiguous subarray in the modified array\n    which is formed by repeating the given array k times.\n    \n    :param arr: List[int] - The original array\n    :param n: int - The length of the original array\n    :param k: int - The number of times the array is repeated\n    :return: int - The largest sum of a contiguous subarray\n    \"\"\"\n    def kadane(arr):\n        \"\"\"Helper function to find the maximum subarray sum using Kadane's algorithm.\"\"\"\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n\n    # Use Kadane's algorithm to find the maximum subarray sum in one array\n    max_kadane = kadane(arr)\n\n    if k == 1:\n        return max_kadane\n\n    # Find the maximum prefix sum\n    max_prefix_sum = float('-inf')\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    # Find the maximum suffix sum\n    max_suffix_sum = float('-inf')\n    current_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    # If the total sum is positive, consider the contribution of the middle arrays\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k-2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n\n# Test the function with the provided test case\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n```\n\nThis script defines a function `max_sub_array_sum_repeated` that calculates the largest sum of a contiguous subarray in a modified array formed by repeating the given array `k` times. It uses Kadane's algorithm to find the maximum subarray sum in a single array and then considers the contributions of prefix and suffix sums along with the total sum of the array to handle the repeated nature of the array. The function is tested with the provided test case to ensure correctness."}
{"task_id": "Mbpp/287", "solution": "```python\ndef square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n\n# Test the function with the provided assertion\nassert square_Sum(2) == 20\n\n# Additional test cases\nprint(square_Sum(1))  # Should return 4 (2^2)\nprint(square_Sum(3))  # Should return 56 (4 + 16 + 36)\nprint(square_Sum(4))  # Should return 120 (4 + 16 + 36 + 64)\nprint(square_Sum(5))  # Should return 220 (4 + 16 + 36 + 64 + 100)\n```"}
{"task_id": "Mbpp/290", "solution": "```python\ndef max_length(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns a tuple containing the maximum length\n    of the lists and one of the lists with that maximum length.\n    \n    :param list_of_lists: List[List[Any]]\n    :return: Tuple[int, List[Any]]\n    \"\"\"\n    if not list_of_lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)\n\n# Test the function with the provided assertion\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n\n# Additional test cases\nprint(max_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]))  # Should return (4, [7, 8, 9, 10])\nprint(max_length([[], [1], [2, 3], [4, 5, 6], [7, 8]]))     # Should return (3, [4, 5, 6])\nprint(max_length([[1], [2], [3]]))                          # Should return (1, [1])\nprint(max_length([]))                                       # Should return (0, [])\n```"}
{"task_id": "Mbpp/292", "solution": "```python\ndef find(dividend, divisor):\n    \"\"\"\n    This function takes two numbers, dividend and divisor, and returns the quotient\n    rounded down to the nearest integer.\n    \n    :param dividend: The number to be divided.\n    :param divisor: The number by which to divide.\n    :return: The quotient rounded down to the nearest integer.\n    \"\"\"\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero.\")\n    \n    # Use floor division to get the quotient rounded down to the nearest integer\n    quotient = dividend // divisor\n    return quotient\n\n# Test the function with the provided assertion\nassert find(10, 3) == 3\n\n# Additional test cases\nprint(find(10, 3))  # Output: 3\nprint(find(9, 2))   # Output: 4\nprint(find(7, -3))  # Output: -3\nprint(find(-7, 3))  # Output: -3\nprint(find(-7, -3)) # Output: 2\n```\nThis script defines a function `find` that calculates the quotient of two numbers using floor division, which automatically rounds down to the nearest integer. It includes a check to prevent division by zero and provides a test case to verify the function's correctness. Additional test cases are also included to demonstrate the function's behavior with different inputs."}
{"task_id": "Mbpp/293", "solution": "```python\nimport math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle\n    given the lengths of the other two sides.\n\n    Parameters:\n    a (float): Length of one side of the triangle.\n    b (float): Length of the other side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n    \"\"\"\n    # Use the Pythagorean theorem: c^2 = a^2 + b^2\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test the function with the given assertion\nassert otherside_rightangle(7, 8) == 10.63014581273465\n\n# Example usage\nif __name__ == \"__main__\":\n    side1 = 7\n    side2 = 8\n    third_side = otherside_rightangle(side1, side2)\n    print(f\"The third side of the triangle with sides {side1} and {side2} is {third_side:.14f}\")\n```\nThis script defines a function `otherside_rightangle` that calculates the length of the hypotenuse of a right-angled triangle given the lengths of the other two sides using the Pythagorean theorem. The function is tested with an assertion to ensure it returns the expected result."}
{"task_id": "Mbpp/294", "solution": "```python\ndef max_val(heterogeneous_list):\n    # Filter out non-numeric values from the list\n    numeric_values = [item for item in heterogeneous_list if isinstance(item, (int, float))]\n    \n    # Return the maximum value from the numeric values\n    return max(numeric_values)\n\n# Test the function with the provided example\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n\n# Additional test cases\nprint(max_val([1, 'a', 2, 'b', 3.5, 'c']))  # Should return 3.5\nprint(max_val(['x', 'y', 'z', 10, 20, 30]))  # Should return 30\nprint(max_val([100, 'hello', 50, 'world', 75]))  # Should return 100\nprint(max_val(['no', 'numbers', 'here']))  # Should raise a ValueError\n```\n\nThis script defines a function `max_val` that takes a heterogeneous list as input and returns the maximum numeric value from the list. It filters out non-numeric values and then uses the `max` function to find the maximum among the remaining numeric values. The script includes a test case to verify the function's correctness. Note that if there are no numeric values in the list, the `max` function will raise a `ValueError`."}
{"task_id": "Mbpp/296", "solution": "```python\ndef get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n    An inversion is a pair (i, j) such that i < j and arr[i] > arr[j].\n    \"\"\"\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                # There are mid - i inversions, because all the remaining elements in the left subarray\n                # (arr[i...mid]) are greater than arr[j]\n                temp_arr[k] = arr[j]\n                inv_count += (mid-i + 1)\n                j += 1\n            k += 1\n\n        # Copy the remaining elements of left subarray, if any\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of right subarray, if any\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        # Copy the sorted subarray into Original array\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n            \n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right)//2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    # Create a temporary array\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5\n```"}
{"task_id": "Mbpp/297", "solution": "```python\ndef flatten_list(nested_list):\n    \"\"\"\n    Flattens a nested list structure into a single list of elements.\n\n    :param nested_list: List of elements, where elements can be either integers or lists of integers\n    :return: A single flattened list containing all the integers from the nested list\n    \"\"\"\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function with the provided assertion\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\n# Additional test cases\nprint(flatten_list([1, [2, 3], [4, [5, 6]], 7]))  # Output: [1, 2, 3, 4, 5, 6, 7]\nprint(flatten_list([]))  # Output: []\nprint(flatten_list([1, 2, 3]))  # Output: [1, 2, 3]\nprint(flatten_list([[1, 2], [3, [4, 5]], 6]))  # Output: [1, 2, 3, 4, 5, 6]\n```\n"}
{"task_id": "Mbpp/299", "solution": "```python\ndef max_aggregate(scores):\n    # Create a dictionary to store the aggregate scores for each person\n    aggregate_scores = {}\n    \n    # Iterate over each tuple in the list\n    for name, score in scores:\n        # If the name is already in the dictionary, add the score to the existing score\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            # If the name is not in the dictionary, add it with the current score\n            aggregate_scores[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    \n    return (max_name, max_score)\n\n# Test the function with the provided test case\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)\n\n# Additional test cases\nprint(max_aggregate([('Alice', 50), ('Bob', 60), ('Alice', 70), ('Bob', 40)]))  # ('Alice', 120)\nprint(max_aggregate([('Charlie', 100), ('Charlie', 200), ('Charlie', 300)]))   # ('Charlie', 600)\nprint(max_aggregate([('Dave', 10), ('Eve', 20), ('Dave', 30), ('Eve', 40)]))  # ('Eve', 60)\n```"}
{"task_id": "Mbpp/300", "solution": "```python\ndef count_binary_seq(n):\n    \"\"\"\n    Function to count all binary sequences of length 2n such that the sum of the first n bits\n    is the same as the sum of the last n bits.\n    \"\"\"\n    from math import comb\n\n    # The problem is equivalent to finding the number of ways to choose k bits from n bits\n    # such that the sum of the first n bits equals the sum of the last n bits.\n    # This is equivalent to finding the number of ways to choose k bits from n bits\n    # and then choosing k bits from the remaining n bits.\n\n    # Initialize the count\n    count = 0\n\n    # Iterate over all possible sums of the first n bits\n    for k in range(n + 1):\n        # The number of ways to choose k bits from n bits for the first half\n        first_half_ways = comb(n, k)\n        # The number of ways to choose k bits from n bits for the second half\n        second_half_ways = comb(n, k)\n        # Multiply the ways for both halves\n        count += first_half_ways * second_half_ways\n\n    return count\n\n# Test the function with the given assertion\nimport math\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\n# Additional test cases\nprint(count_binary_seq(1))  # Output: 2\nprint(count_binary_seq(2))  # Output: 6\nprint(count_binary_seq(3))  # Output: 20\nprint(count_binary_seq(4))  # Output: 70\n```\n\nThis script defines a function `count_binary_seq` that calculates the number of binary sequences of length `2n` where the sum of the first `n` bits is equal to the sum of the last `n` bits. The function uses combinatorial logic to determine the number of valid sequences. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/301", "solution": "```python\ndef dict_depth(d):\n    \"\"\"\n    This function calculates the depth of a dictionary.\n    The depth is defined as the maximum number of nested dictionaries.\n\n    :param d: The dictionary whose depth is to be calculated\n    :return: An integer representing the depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n\n# Test the function with the provided example\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\n\n# Additional test cases\nassert dict_depth({}) == 0\nassert dict_depth({'a': 1}) == 1\nassert dict_depth({'a': {'b': 1}}) == 2\nassert dict_depth({'a': {'b': {'c': {'d': {'e': 1}}}}}) == 5\nassert dict_depth({'a': {'b': {'c': {}}}, 'd': {'e': {}}}) == 3\n\nprint(\"All test cases passed!\")\n```\n\nThis script defines a function `dict_depth` that calculates the depth of a dictionary by recursively checking the depth of nested dictionaries. The function returns the maximum depth found among all nested dictionaries. The script also includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/305", "solution": "```python\ndef start_withp(word_list):\n    # Initialize an empty list to store words starting with 'p'\n    p_words = []\n    \n    # Iterate over each string in the list\n    for words in word_list:\n        # Split the string into individual words\n        for word in words.split():\n            # Check if the word starts with 'p' or 'P'\n            if word.lower().startswith('p'):\n                # Add the word to the list of p_words\n                p_words.append(word)\n            # If we have found two words, we can stop searching\n            if len(p_words) == 2:\n                return tuple(p_words)\n    \n    # If less than two words are found, return the found words\n    return tuple(p_words)\n\n# Test the function with the provided assertion\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n```"}
{"task_id": "Mbpp/306", "solution": "```python\ndef max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Function to find the maximum sum of increasing subsequence from prefix until ith index\n    and also including a given kth element which is after i, i.e., k > i.\n\n    :param arr: List of integers\n    :param n: Length of the array\n    :param i: Index until which the prefix is considered\n    :param k: Index of the element that must be included in the subsequence\n    :return: Maximum sum of the increasing subsequence\n    \"\"\"\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    max_sum = [0] * n\n\n    # Calculate the maximum sum of increasing subsequence for the prefix until index i\n    for j in range(i + 1):\n        max_sum[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                max_sum[j] = max(max_sum[j], max_sum[m] + arr[j])\n\n    # Find the maximum sum of increasing subsequence that includes the kth element\n    max_sum_with_k = 0\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum_with_k = max(max_sum_with_k, max_sum[j] + arr[k])\n\n    return max_sum_with_k\n\n# Test the function with the provided example\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n```\n\nThis script defines a function `max_sum_increasing_subseq` that calculates the maximum sum of an increasing subsequence from the prefix of an array up to a given index `i`, and also includes a specified element at index `k` where `k > i`. The function uses dynamic programming to compute the maximum sum of increasing subsequences ending at each index up to `i`, and then finds the maximum sum that can be achieved by including the element at index `k`. The test case provided in the problem statement is used to verify the correctness of the function."}
{"task_id": "Mbpp/308", "solution": "```python\ndef large_product(list1, list2, n):\n    # Create a list to store all possible products\n    products = []\n    \n    # Calculate the product of each pair (one element from each list)\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first n largest products\n    return products[:n]\n\n# Test the function with the provided example\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n\n# Additional test cases\nprint(large_product([1, 2, 3], [4, 5, 6], 2))  # Expected: [18, 15]\nprint(large_product([7, 8], [9, 10], 1))      # Expected: [80]\nprint(large_product([1, 2], [1, 2], 4))       # Expected: [4, 4, 2, 2]\n```\n\nThis script defines a function `large_product` that takes two lists and an integer `n` as input. It calculates all possible products by pairing each element from the first list with each element from the second list, sorts these products in descending order, and returns the top `n` largest products. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/309", "solution": "```python\ndef maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers a and b.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return a if a > b else b\n\n# Test the function with an assertion\nassert maximum(5, 10) == 10\n\n# Additional test cases\nassert maximum(10, 5) == 10\nassert maximum(-1, -5) == -1\nassert maximum(0, 0) == 0\nassert maximum(3.5, 2.5) == 3.5\nassert maximum(-3.5, -2.5) == -2.5\n\nprint(\"All tests passed.\")\n```"}
{"task_id": "Mbpp/310", "solution": "```python\ndef string_to_tuple(s):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    s (str): The string to be converted.\n\n    Returns:\n    tuple: A tuple containing each character of the string as an element.\n    \"\"\"\n    return tuple(s)\n\n# Test the function with the provided example\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')\n\n# Additional test cases\nassert string_to_tuple(\"\") == ()\nassert string_to_tuple(\"a\") == ('a',)\nassert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert string_to_tuple(\"123\") == ('1', '2', '3')\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `string_to_tuple` that converts a given string into a tuple of its characters. It includes an assertion to test the function with the example provided, as well as additional test cases to ensure the function works correctly for various inputs."}
{"task_id": "Mbpp/311", "solution": "```python\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left-most unset bit of a given integer n.\n    \"\"\"\n    # Convert the number to binary and find the first unset bit from the left\n    binary_representation = bin(n)[2:]  # Get binary representation without '0b' prefix\n    length = len(binary_representation)\n    \n    # Find the left-most unset bit\n    for i in range(length):\n        if binary_representation[i] == '0':\n            # Set the left-most unset bit\n            n |= (1 << (length - i - 1))\n            break\n    else:\n        # If no unset bit is found, it means all bits are set\n        # In this case, add a new bit at the left\n        n |= (1 << length)\n    \n    return n\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14\n\n# Additional test cases\nprint(set_left_most_unset_bit(10))  # Output: 14\nprint(set_left_most_unset_bit(0))   # Output: 1\nprint(set_left_most_unset_bit(7))   # Output: 15\nprint(set_left_most_unset_bit(15))  # Output: 31\n```\n\nThis script defines a function `set_left_most_unset_bit` that takes an integer `n` and sets the left-most unset bit in its binary representation. The function first converts the number to its binary form, then iterates over the bits to find the first unset bit from the left. If all bits are set, it adds a new bit at the left. The function is tested with an assertion and additional test cases."}
{"task_id": "Mbpp/312", "solution": "```python\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    # Volume of a cone formula: (1/3) * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function with the provided assertion\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 5\n    height = 12\n    print(f\"The volume of the cone with radius {radius} and height {height} is {volume_cone(radius, height)}\")\n```\n"}
{"task_id": "Mbpp/388", "solution": "```python\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \n    Parameters:\n    n (int): The number to compare against powers of 2.\n    \n    Returns:\n    int: The highest power of 2 less than or equal to n.\n    \"\"\"\n    # Start with the highest power of 2 as 1 (2^0)\n    power = 1\n    \n    # Double the power until it exceeds n\n    while power * 2 <= n:\n        power *= 2\n    \n    return power\n\n# Test the function with the provided assertion\nassert highest_Power_of_2(10) == 8\n\n# Additional test cases\nprint(highest_Power_of_2(1))  # Output: 1\nprint(highest_Power_of_2(2))  # Output: 2\nprint(highest_Power_of_2(15)) # Output: 8\nprint(highest_Power_of_2(16)) # Output: 16\nprint(highest_Power_of_2(31)) # Output: 16\nprint(highest_Power_of_2(32)) # Output: 32\n```"}
{"task_id": "Mbpp/389", "solution": "```python\ndef find_lucas(n):\n    \"\"\"\n    Function to find the n-th Lucas number.\n    \n    The Lucas numbers are a sequence similar to the Fibonacci numbers, \n    except that they start with 2 and 1. The sequence is defined as:\n    L(0) = 2\n    L(1) = 1\n    L(n) = L(n-1) + L(n-2) for n > 1\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    lucas_0 = 2\n    lucas_1 = 1\n    \n    # Calculate the n-th Lucas number iteratively\n    for i in range(2, n + 1):\n        lucas_n = lucas_0 + lucas_1\n        lucas_0 = lucas_1\n        lucas_1 = lucas_n\n    \n    return lucas_n\n\n# Test the function with the provided assertion\nassert find_lucas(9) == 76\n\n# Additional test cases\nprint(find_lucas(0))  # Output: 2\nprint(find_lucas(1))  # Output: 1\nprint(find_lucas(2))  # Output: 3\nprint(find_lucas(3))  # Output: 4\nprint(find_lucas(4))  # Output: 7\nprint(find_lucas(5))  # Output: 11\nprint(find_lucas(6))  # Output: 18\nprint(find_lucas(7))  # Output: 29\nprint(find_lucas(8))  # Output: 47\nprint(find_lucas(9))  # Output: 76\n```\nThis script defines a function `find_lucas` that calculates the n-th Lucas number using an iterative approach. The function is tested with an assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/390", "solution": "```python\ndef add_string(lst, format_str):\n    \"\"\"\n    This function takes a list of elements and a format string, and applies the format string\n    to each element in the list, returning a new list with the formatted strings.\n\n    :param lst: List of elements to be formatted\n    :param format_str: A format string that includes a placeholder for the element\n    :return: A list of formatted strings\n    \"\"\"\n    return [format_str.format(item) for item in lst]\n\n# Test the function with the provided assertion\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n\n# Additional test cases\nprint(add_string([5, 6, 7], 'value{0}'))  # Output: ['value5', 'value6', 'value7']\nprint(add_string(['a', 'b', 'c'], 'char-{0}'))  # Output: ['char-a', 'char-b', 'char-c']\nprint(add_string([10, 20, 30], 'number-{0}'))  # Output: ['number-10', 'number-20', 'number-30']\n```\n\nThis script defines a function `add_string` that takes a list and a format string, and returns a new list where each element is formatted according to the given format string. The function uses a list comprehension to apply the format to each element in the list. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/391", "solution": "```python\ndef convert_list_dictionary(ids, names, scores):\n    \"\"\"\n    Convert three lists into a list of nested dictionaries.\n\n    Parameters:\n    ids (list): A list of unique identifiers.\n    names (list): A list of names corresponding to the identifiers.\n    scores (list): A list of scores corresponding to the identifiers and names.\n\n    Returns:\n    list: A list of dictionaries where each dictionary has the structure:\n          {id: {name: score}}\n    \"\"\"\n    # Check if all lists have the same length\n    if not (len(ids) == len(names) == len(scores)):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Create the list of nested dictionaries\n    result = [{id_: {name: score}} for id_, name, score in zip(ids, names, scores)]\n    \n    return result\n\n# Test the function with the provided example\nassert convert_list_dictionary(\n    [\"S001\", \"S002\", \"S003\", \"S004\"],\n    [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n    [85, 98, 89, 92]\n) == [\n    {'S001': {'Adina Park': 85}},\n    {'S002': {'Leyton Marsh': 98}},\n    {'S003': {'Duncan Boyle': 89}},\n    {'S004': {'Saim Richards': 92}}\n]\n\n# Example usage\nif __name__ == \"__main__\":\n    ids = [\"S001\", \"S002\", \"S003\", \"S004\"]\n    names = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\n    scores = [85, 98, 89, 92]\n    nested_dicts = convert_list_dictionary(ids, names, scores)\n    print(nested_dicts)\n```\n"}
{"task_id": "Mbpp/392", "solution": "```python\ndef get_max_sum(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if n in memo:\n        return memo[n]\n    \n    if n == 0:\n        return 0\n    \n    # Calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    sum_parts = get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo)\n    \n    # The maximum sum is the maximum of the calculated sum and n itself\n    result = max(sum_parts, n)\n    \n    # Store the result in the memoization dictionary\n    memo[n] = result\n    \n    return result\n\n# Test the function with the given assertion\nassert get_max_sum(60) == 106\n```"}
{"task_id": "Mbpp/394", "solution": "```python\ndef check_distinct(input_tuple):\n    \"\"\"\n    This function checks if the given tuple contains no duplicates.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to check for duplicates.\n    \n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    # Convert the tuple to a set, which removes duplicates\n    unique_elements = set(input_tuple)\n    \n    # Compare the length of the set with the original tuple\n    return len(unique_elements) == len(input_tuple)\n\n# Test the function with the provided assertion\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\n# Additional test cases\nassert check_distinct((1, 2, 3, 4, 5)) == True\nassert check_distinct((1, 1, 1, 1, 1)) == False\nassert check_distinct(()) == True  # An empty tuple has no duplicates\nassert check_distinct((1,)) == True  # A single element tuple has no duplicates\n\nprint(\"All tests passed.\")\n```\n"}
{"task_id": "Mbpp/395", "solution": "```python\ndef first_non_repeating_character(s):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabbccdde\") == 'e'\nassert first_non_repeating_character(\"aabbcc\") == None\nassert first_non_repeating_character(\"a\") == 'a'\nassert first_non_repeating_character(\"\") == None\nassert first_non_repeating_character(\"swiss\") == 'w'\n```"}
{"task_id": "Mbpp/397", "solution": "```python\ndef median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    The median is the middle value when the numbers are sorted in order.\n    \"\"\"\n    # Create a list of the numbers\n    numbers = [a, b, c]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Return the middle element\n    return numbers[1]\n\n# Test the function with the provided assertion\nassert median_numbers(25, 55, 65) == 55.0\n\n# Additional test cases\nprint(median_numbers(1, 2, 3))  # Output: 2\nprint(median_numbers(10, 5, 8)) # Output: 8\nprint(median_numbers(100, 50, 75)) # Output: 75\nprint(median_numbers(0, -1, 1)) # Output: 0\n```\n\nThis script defines a function `median_numbers` that calculates the median of three numbers by sorting them and returning the middle value. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/398", "solution": "```python\ndef sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in the given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of all digits of each number in the list.\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        # Convert the number to a string to iterate over each digit\n        for digit in str(number):\n            # Convert the digit back to an integer and add to the total sum\n            total_sum += int(digit)\n    return total_sum\n\n# Test the function with the provided example\nassert sum_of_digits([10, 2, 56]) == 14\n\n# Additional test cases\nprint(sum_of_digits([123, 456, 789]))  # Expected output: 45\nprint(sum_of_digits([0, 0, 0]))        # Expected output: 0\nprint(sum_of_digits([111, 222, 333]))  # Expected output: 18\nprint(sum_of_digits([9, 99, 999]))     # Expected output: 45\n```\nThis script defines a function `sum_of_digits` that takes a list of integers and computes the sum of all digits of each number in the list. It includes a test case to verify the function works as expected, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/404", "solution": "```python\ndef minimum(a, b):\n    \"\"\"\n    This function returns the minimum of two numbers a and b.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    \n    Returns:\n    int or float: The minimum of the two numbers.\n    \"\"\"\n    return a if a < b else b\n\n# Test the function with the provided assertion\nassert minimum(1, 2) == 1\n\n# Additional test cases\nassert minimum(5, 3) == 3\nassert minimum(-1, -5) == -5\nassert minimum(0, 0) == 0\nassert minimum(2.5, 2.5) == 2.5\nassert minimum(10, 20) == 10\n\nprint(\"All tests passed.\")\n```"}
{"task_id": "Mbpp/405", "solution": "```python\ndef check_tuplex(tup, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search within.\n    element (any): The element to search for.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tup\n\n# Test the function with the provided assertion\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\n\n# Additional test cases\nassert check_tuplex((1, 2, 3, 4, 5), 3) == True\nassert check_tuplex((1, 2, 3, 4, 5), 6) == False\nassert check_tuplex(('a', 'b', 'c'), 'd') == False\nassert check_tuplex((), 'x') == False\nassert check_tuplex((None, True, False), None) == True\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `check_tuplex` that checks if a given element exists within a tuple. It includes the provided assertion as well as additional test cases to ensure the function works correctly."}
{"task_id": "Mbpp/406", "solution": "```python\ndef find_Parity(number):\n    \"\"\"\n    This function checks if the parity of a given number is odd.\n    Parity is odd if the number of 1-bits in the binary representation of the number is odd.\n    \n    :param number: Integer, the number to check the parity of\n    :return: Boolean, True if the parity is odd, False otherwise\n    \"\"\"\n    # Count the number of 1s in the binary representation of the number\n    count_of_ones = bin(number).count('1')\n    \n    # Check if the count of 1s is odd\n    return count_of_ones % 2 != 0\n\n# Test the function with the given assertion\nassert find_Parity(12) == False\n\n# Additional test cases\nprint(find_Parity(5))  # True, binary: 101 (2 ones)\nprint(find_Parity(7))  # False, binary: 111 (3 ones)\nprint(find_Parity(0))  # False, binary: 0 (0 ones)\nprint(find_Parity(1))  # True, binary: 1 (1 one)\n```\nThis script defines a function `find_Parity` that determines if the parity of a given number is odd. The parity is considered odd if the number of 1-bits in the binary representation of the number is odd. The function is tested with an assertion and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/409", "solution": "```python\ndef min_product_tuple(tuples_list):\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains two integers.\n    It returns the minimum product of the pairs of integers from the tuples.\n    \"\"\"\n    # Initialize the minimum product to a large number\n    min_product = float('inf')\n    \n    # Iterate over each tuple in the list\n    for a, b in tuples_list:\n        # Calculate the product of the current tuple\n        product = a * b\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n\n# Test the function with the provided test case\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n\n# Additional test cases\nprint(min_product_tuple([(3, 5), (1, 2), (4, 4)]))  # Output should be 2\nprint(min_product_tuple([(10, 10), (5, 5), (1, 1)]))  # Output should be 1\nprint(min_product_tuple([(0, 10), (5, 5), (1, 1)]))  # Output should be 0\nprint(min_product_tuple([(2, 3), (3, 2), (1, 1)]))  # Output should be 1\n```\nThis script defines a function `min_product_tuple` that calculates the minimum product of pairs of integers from a list of tuples. It iterates through each tuple, calculates the product, and keeps track of the smallest product found. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/410", "solution": "```python\ndef min_val(heterogeneous_list):\n    # Filter out non-numeric values\n    numeric_values = [item for item in heterogeneous_list if isinstance(item, (int, float))]\n    \n    # Return the minimum value from the numeric values\n    return min(numeric_values)\n\n# Test the function with the provided example\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n\n# Additional test cases\nprint(min_val([10, 'hello', 5, 3.5, 'world']))  # Should return 3.5\nprint(min_val(['a', 'b', 100, 50, 25]))         # Should return 25\nprint(min_val([1.1, 2.2, 'x', 0.5, 'y']))       # Should return 0.5\nprint(min_val(['no', 'numbers', 'here']))       # Should raise a ValueError\n```\n\nThis script defines a function `min_val` that takes a heterogeneous list as input, filters out non-numeric values, and returns the minimum value among the numeric values. The function is tested with the provided example and additional test cases. Note that if there are no numeric values in the list, calling `min()` will raise a `ValueError`."}
{"task_id": "Mbpp/412", "solution": "```python\ndef remove_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list with all the odd numbers removed.\n\n    :param numbers: List of integers\n    :return: List of integers with odd numbers removed\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function with the provided assertion\nassert remove_odd([1, 2, 3]) == [2]\n\n# Additional test cases\nprint(remove_odd([1, 2, 3, 4, 5, 6]))  # Output should be [2, 4, 6]\nprint(remove_odd([7, 8, 9, 10]))       # Output should be [8, 10]\nprint(remove_odd([11, 13, 15]))        # Output should be []\nprint(remove_odd([2, 4, 6, 8]))        # Output should be [2, 4, 6, 8]\nprint(remove_odd([]))                  # Output should be []\n```\n"}
{"task_id": "Mbpp/413", "solution": "```python\ndef extract_nth_element(tuples_list, n):\n    \"\"\"\n    Extracts the nth element from each tuple in a list of tuples.\n\n    Parameters:\n    tuples_list (list of tuples): The list of tuples from which to extract elements.\n    n (int): The index of the element to extract from each tuple.\n\n    Returns:\n    list: A list containing the nth element from each tuple.\n    \"\"\"\n    return [t[n] for t in tuples_list]\n\n# Test the function with the provided assertion\nassert extract_nth_element(\n    [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0\n) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\n# Additional test cases\nprint(extract_nth_element(\n    [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1\n))  # Output: [98, 97, 91, 94]\n\nprint(extract_nth_element(\n    [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2\n))  # Output: [99, 96, 94, 98]\n```\nThis script defines a function `extract_nth_element` that takes a list of tuples and an index `n`, and returns a list containing the nth element from each tuple. The function is tested with the provided assertion and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/414", "solution": "```python\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in seq1 exists in seq2.\n\n    Parameters:\n    seq1 (iterable): First sequence to check.\n    seq2 (iterable): Second sequence to check against.\n\n    Returns:\n    bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    # Convert the second sequence to a set for O(1) average time complexity lookups\n    set_seq2 = set(seq2)\n    \n    # Check if any element in seq1 is in the set of seq2\n    for item in seq1:\n        if item in set_seq2:\n            return True\n    return False\n\n# Test the function with the provided assertion\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\n```"}
{"task_id": "Mbpp/415", "solution": "```python\ndef max_Product(arr):\n    \"\"\"\n    This function finds a pair of numbers in the given array that has the highest product.\n    \n    :param arr: List of integers\n    :return: A tuple containing the pair of integers with the highest product\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements\")\n    \n    # Initialize variables to store the maximum and second maximum numbers\n    max1 = max2 = float('-inf')\n    # Initialize variables to store the minimum and second minimum numbers\n    min1 = min2 = float('inf')\n    \n    # Traverse the array to find the two largest and two smallest numbers\n    for num in arr:\n        # Update the two largest numbers\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        # Update the two smallest numbers\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Calculate the product of the two largest numbers and the two smallest numbers\n    max_product = max1 * max2\n    min_product = min1 * min2\n    \n    # Return the pair with the highest product\n    if max_product > min_product:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Test the function with the given example\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n```"}
{"task_id": "Mbpp/418", "solution": "```python\ndef Find_Max(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns the sublist with the maximum length.\n    If there are multiple sublists with the same maximum length, it returns the first one encountered.\n    \n    :param list_of_lists: List of lists\n    :return: The sublist with the maximum length\n    \"\"\"\n    if not list_of_lists:\n        return None\n    \n    max_length = 0\n    max_list = None\n    \n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    \n    return max_list\n\n# Test the function with the provided assertion\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n\n# Additional test cases\nassert Find_Max([['A', 'B', 'C'], ['A'], ['A', 'B']]) == ['A', 'B', 'C']\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C'], ['D', 'E', 'F', 'G']]) == ['D', 'E', 'F', 'G']\nassert Find_Max([[], ['A'], ['A', 'B']]) == ['A', 'B']\nassert Find_Max([]) == None\nassert Find_Max([['A', 'B'], ['C', 'D'], ['E', 'F']]) == ['A', 'B']\n```\nThis script defines a function `Find_Max` that takes a list of lists and returns the sublist with the maximum length. It includes a test case to verify the function works as expected, along with additional test cases to ensure robustness."}
{"task_id": "Mbpp/419", "solution": "```python\ndef round_and_sum(numbers):\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Multiply the sum by the length of the list\n    result = total_sum * len(numbers)\n    \n    return result\n\n# Test the function with the provided test case\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\n\n# Example usage\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))\n```\nThis script defines a function `round_and_sum` that rounds each number in a given list, calculates the sum of these rounded numbers, and then multiplies the sum by the length of the list. The function is tested with an assertion to ensure it returns the expected result."}
{"task_id": "Mbpp/420", "solution": "```python\ndef cube_Sum(n):\n    \"\"\"\n    This function calculates the sum of cubes of the first n even natural numbers.\n    \n    Parameters:\n    n (int): The number of even natural numbers to consider.\n    \n    Returns:\n    int: The sum of cubes of the first n even natural numbers.\n    \"\"\"\n    # Generate the first n even natural numbers\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    \n    # Calculate the sum of cubes of these even numbers\n    cube_sum = sum(x**3 for x in even_numbers)\n    \n    return cube_sum\n\n# Test the function with the provided assertion\nassert cube_Sum(2) == 72\n\n# Example usage\nprint(cube_Sum(3))  # Should print the sum of cubes of 2, 4, and 6\n```\n\nThis script defines a function `cube_Sum` that calculates the sum of cubes of the first `n` even natural numbers. It includes an assertion to verify that the function works correctly for the input `n = 2`. The script also includes an example usage of the function."}
{"task_id": "Mbpp/421", "solution": "```python\ndef concatenate_tuple(input_tuple, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple into a single string with the given delimiter.\n    \n    Parameters:\n    input_tuple (tuple): The tuple containing elements to concatenate.\n    delimiter (str): The delimiter to use between elements. Default is '-'.\n    \n    Returns:\n    str: A single string with all elements of the tuple concatenated with the delimiter.\n    \"\"\"\n    # Convert all elements to string and join them with the delimiter\n    return delimiter.join(map(str, input_tuple))\n\n# Test the function with the provided assertion\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n\n# Additional test cases\nprint(concatenate_tuple((\"Hello\", \"World\", 2023)))  # Output: 'Hello-World-2023'\nprint(concatenate_tuple((1, 2, 3, 4, 5), delimiter=':'))  # Output: '1:2:3:4:5'\nprint(concatenate_tuple((\"Python\", \"is\", \"fun\"), delimiter=' '))  # Output: 'Python is fun'\n```\n"}
{"task_id": "Mbpp/422", "solution": "```python\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of the cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    \n    # Calculate the average\n    average = sum_of_cubes / n\n    \n    return average\n\n# Test the function with the provided assertion\nassert find_Average_Of_Cube(2) == 4.5\n\n# Additional test cases\nprint(find_Average_Of_Cube(1))  # Should return 1.0\nprint(find_Average_Of_Cube(3))  # Should return 12.0\nprint(find_Average_Of_Cube(4))  # Should return 21.25\n```\nThis script defines a function `find_Average_Of_Cube` that calculates the average of the cubes of the first `n` natural numbers. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/424", "solution": "```python\ndef extract_rear(strings_tuple):\n    \"\"\"\n    Extracts the last character from each string in the given tuple.\n\n    Parameters:\n    strings_tuple (tuple): A tuple containing strings.\n\n    Returns:\n    list: A list containing the last character of each string in the tuple.\n    \"\"\"\n    return [s[-1] for s in strings_tuple]\n\n# Test the function with the provided example\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n\n# Additional test cases\nprint(extract_rear(('hello', 'world', 'python')))  # ['o', 'd', 'n']\nprint(extract_rear(('apple', 'banana', 'cherry')))  # ['e', 'a', 'y']\nprint(extract_rear(('a', 'b', 'c')))  # ['a', 'b', 'c']\nprint(extract_rear(('single',)))  # ['e']\n```\nThis script defines a function `extract_rear` that takes a tuple of strings and returns a list containing the last character of each string. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/425", "solution": "```python\ndef count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    lst (list of lists): The list of sublists to search through.\n    element (any): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function with the provided assertion\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\n\n# Additional test cases\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7))  # Output: 2\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5))  # Output: 1\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 10)) # Output: 0\nprint(count_element_in_list([], 1))                                      # Output: 0\n```\nThis script defines a function `count_element_in_list` that takes a list of sublists and an element as input and returns the number of sublists that contain the specified element. The function iterates over each sublist and checks if the element is present, incrementing a counter if it is. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/426", "solution": "```python\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the odd numbers from the original list.\n    \n    :param numbers: List of integers\n    :return: List of odd integers\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function with the provided assertion\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n# Additional test cases\nprint(filter_oddnumbers([11, 12, 13, 14, 15]))  # Output should be [11, 13, 15]\nprint(filter_oddnumbers([2, 4, 6, 8, 10]))     # Output should be []\nprint(filter_oddnumbers([1, 3, 5, 7, 9]))      # Output should be [1, 3, 5, 7, 9]\nprint(filter_oddnumbers([]))                   # Output should be []\n```\n"}
{"task_id": "Mbpp/427", "solution": "```python\ndef change_date_format(date_str):\n    \"\"\"\n    Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date_str (str): A date string in the format yyyy-mm-dd.\n\n    Returns:\n    str: The date string in the format dd-mm-yyyy.\n    \"\"\"\n    # Split the input date string by the '-' delimiter\n    year, month, day = date_str.split('-')\n    \n    # Reformat the date to dd-mm-yyyy\n    new_date_str = f\"{day}-{month}-{year}\"\n    \n    return new_date_str\n\n# Test the function with the provided example\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\n# Additional test cases\nprint(change_date_format(\"2023-10-05\"))  # Expected output: '05-10-2023'\nprint(change_date_format(\"1999-12-31\"))  # Expected output: '31-12-1999'\nprint(change_date_format(\"2000-01-01\"))  # Expected output: '01-01-2000'\n```\nThis script defines a function `change_date_format` that takes a date string in the format `yyyy-mm-dd` and converts it to the format `dd-mm-yyyy`. It includes an assertion to test the function with the example provided and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/428", "solution": "```python\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Initialize the gap size\n\n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            # Save arr[i] in temp and make a hole at position i\n            temp = arr[i]\n\n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            # Put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n\n        # Reduce the gap for the next element\n        gap //= 2\n\n    return arr\n\n# Test the function with the provided assertion\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n```\nThis script defines a function `shell_sort` that implements the Shell Sort algorithm. The function sorts the input list `arr` in ascending order and returns the sorted list. The provided assertion tests the function to ensure it works as expected."}
{"task_id": "Mbpp/429", "solution": "```python\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of integers and returns a new tuple where each element is the result\n    of the bitwise AND operation between the corresponding elements of the input tuples.\n    \"\"\"\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    # Perform elementwise bitwise AND operation\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    \n    return result\n\n# Test the function with the provided assertion\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n# Additional test cases\nprint(and_tuples((1, 2, 3), (4, 5, 6)))  # Expected output: (0, 0, 2)\nprint(and_tuples((255, 128, 64), (1, 1, 1)))  # Expected output: (1, 0, 0)\nprint(and_tuples((0, 0, 0), (1, 2, 3)))  # Expected output: (0, 0, 0)\n```\nThis script defines a function `and_tuples` that takes two tuples of integers and returns a new tuple where each element is the result of the bitwise AND operation between the corresponding elements of the input tuples. The function includes a check to ensure both tuples are of the same length, and it uses a generator expression to perform the elementwise operation. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/430", "solution": "To solve the problem of finding the directrix of a parabola, we need to understand the standard form of a parabola equation. The equation of a parabola with a vertical axis of symmetry is given by:\n\n\\[ y = ax^2 + bx + c \\]\n\nThe directrix of a parabola is a line that is perpendicular to the axis of symmetry of the parabola. For a parabola in the form \\( y = ax^2 + bx + c \\), the directrix is given by the formula:\n\n\\[ y = c - \\frac{b^2 - 1}{4a} \\]\n\nGiven the task, we need to implement a function `parabola_directrix(a, b, c)` that calculates the y-coordinate of the directrix for the parabola defined by the coefficients \\( a \\), \\( b \\), and \\( c \\).\n\nHere is the Python script that implements this:\n\n```python\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the y-coordinate of the directrix of a parabola\n    given by the equation y = ax^2 + bx + c.\n    \n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n    \n    Returns:\n    float: y-coordinate of the directrix\n    \"\"\"\n    # Calculate the y-coordinate of the directrix\n    directrix_y = c - (b**2 - 1) / (4 * a)\n    return directrix_y\n\n# Test the function with the given assertion\nassert parabola_directrix(5, 3, 2) == -198\n```\n\nThis script defines the function `parabola_directrix` which calculates the y-coordinate of the directrix using the formula derived from the standard form of a parabola. The assertion at the end tests the function with the provided example to ensure it returns the expected result."}
{"task_id": "Mbpp/432", "solution": "```python\ndef median_trapezium(a, b, h):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the first parallel side.\n    b (float): Length of the second parallel side.\n    h (float): Height of the trapezium (not used in median calculation).\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # The formula for the median length of a trapezium is (a + b) / 2\n    return (a + b) / 2\n\n# Test the function with the provided assertion\nassert median_trapezium(15, 25, 35) == 20\n\n# Additional test cases\nprint(median_trapezium(10, 30, 40))  # Expected output: 20.0\nprint(median_trapezium(5, 5, 10))    # Expected output: 5.0\nprint(median_trapezium(0, 0, 0))     # Expected output: 0.0\nprint(median_trapezium(7, 13, 5))    # Expected output: 10.0\n```\n\nThis script defines a function `median_trapezium` that calculates the median length of a trapezium using the formula \\((a + b) / 2\\), where \\(a\\) and \\(b\\) are the lengths of the two parallel sides. The height \\(h\\) is not used in the calculation of the median. The function is tested with an assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/433", "solution": "```python\ndef check_greater(arr, num):\n    \"\"\"\n    This function checks if the given number is greater than all elements in the array.\n    \n    Parameters:\n    arr (list): A list of numbers.\n    num (int or float): The number to compare against the elements of the array.\n    \n    Returns:\n    bool: True if the number is greater than all elements in the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test the function with the provided assertion\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\n# Additional test cases\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([10, 20, 30], 25) == False\nassert check_greater([10, 20, 30], 35) == True\nassert check_greater([], 0) == True  # Edge case: empty array\n```"}
{"task_id": "Mbpp/435", "solution": "```python\ndef last_Digit(number):\n    \"\"\"\n    This function returns the last digit of a given number.\n\n    Parameters:\n    number (int): The number from which to find the last digit.\n\n    Returns:\n    int: The last digit of the number.\n    \"\"\"\n    # Convert the number to a string, get the last character, and convert it back to an integer\n    return int(str(number)[-1])\n\n# Test the function with an example\nassert last_Digit(123) == 3\n\n# Additional test cases\nprint(last_Digit(4567))  # Output: 7\nprint(last_Digit(0))     # Output: 0\nprint(last_Digit(89))    # Output: 9\nprint(last_Digit(1001))  # Output: 1\n```\nThis script defines a function `last_Digit` that takes an integer as input and returns its last digit. The function is tested with an assertion and additional print statements to demonstrate its functionality."}
{"task_id": "Mbpp/436", "solution": "```python\ndef neg_nos(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list containing only the negative numbers.\n\n    :param numbers: List of integers\n    :return: List of negative integers\n    \"\"\"\n    return [num for num in numbers if num < 0]\n\n# Test the function with the provided assertion\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\n\n# Additional test cases\nprint(neg_nos([0, -2, 3, -4, 5]))  # Output: [-2, -4]\nprint(neg_nos([1, 2, 3, 4, 5]))    # Output: []\nprint(neg_nos([-1, -2, -3, -4]))   # Output: [-1, -2, -3, -4]\nprint(neg_nos([]))                 # Output: []\n```"}
{"task_id": "Mbpp/437", "solution": "```python\ndef remove_odd(s):\n    \"\"\"\n    This function removes characters at odd indices from the input string.\n\n    Parameters:\n    s (str): The input string from which odd indexed characters are to be removed.\n\n    Returns:\n    str: A new string with characters at odd indices removed.\n    \"\"\"\n    # Use string slicing to get characters at even indices\n    return s[::2]\n\n# Test the function with the provided assertion\nassert remove_odd(\"python\") == \"yhn\"\n\n# Additional test cases\nprint(remove_odd(\"abcdef\"))  # Output should be \"ace\"\nprint(remove_odd(\"123456789\"))  # Output should be \"13579\"\nprint(remove_odd(\"hello world\"))  # Output should be \"hlowrd\"\nprint(remove_odd(\"\"))  # Output should be \"\"\nprint(remove_odd(\"a\"))  # Output should be \"a\"\n```\nThis script defines a function `remove_odd` that removes characters at odd indices from a given string. It includes an assertion to test the function with the example provided, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/439", "solution": "```python\ndef multiple_to_single(numbers):\n    \"\"\"\n    Joins a list of integers into a single integer.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: A single integer formed by concatenating the integers in the list.\n    \"\"\"\n    # Convert each integer to a string and join them\n    joined_string = ''.join(map(str, numbers))\n    # Convert the resulting string back to an integer\n    return int(joined_string)\n\n# Test the function with the provided example\nassert multiple_to_single([11, 33, 50]) == 113350\n\n# Additional test cases\nprint(multiple_to_single([1, 2, 3]))  # Output: 123\nprint(multiple_to_single([0, 0, 1]))  # Output: 1\nprint(multiple_to_single([100, 200, 300]))  # Output: 100200300\nprint(multiple_to_single([5]))  # Output: 5\n```\nThis script defines a function `multiple_to_single` that takes a list of integers, converts each integer to a string, concatenates them, and then converts the result back to an integer. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/440", "solution": "```python\nimport re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match adverbs ending with 'ly'\n    adverb_pattern = r'\\b\\w+ly\\b'\n    \n    # Search for the first adverb in the sentence\n    match = re.search(adverb_pattern, sentence)\n    \n    if match:\n        # Return the start position, end position, and the adverb itself\n        return (match.start(), match.end(), match.group())\n    else:\n        # Return None if no adverb is found\n        return None\n\n# Test the function with the provided example\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\n\n# Additional test cases\nprint(find_adverb_position(\"He spoke softly to the child.\"))  # (9, 15, 'softly')\nprint(find_adverb_position(\"She quickly ran to the store.\"))  # (5, 12, 'quickly')\nprint(find_adverb_position(\"The cat is very cute.\"))          # None\nprint(find_adverb_position(\"Surprisingly, he agreed.\"))       # (0, 12, 'Surprisingly')\n```\nThis script defines a function `find_adverb_position` that uses a regular expression to find the first adverb ending with 'ly' in a given sentence. It returns a tuple containing the start position, end position, and the adverb itself. If no adverb is found, it returns `None`. The function is tested with the provided example and additional test cases."}
{"task_id": "Mbpp/441", "solution": "```python\ndef surfacearea_cube(side_length):\n    \"\"\"\n    Calculate the surface area of a cube given the side length.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    # A cube has 6 faces, each of which is a square with area side_length^2\n    return 6 * (side_length ** 2)\n\n# Test the function with the provided assertion\nassert surfacearea_cube(5) == 150\n\n# Additional test cases\nprint(surfacearea_cube(1))  # Expected output: 6\nprint(surfacearea_cube(2))  # Expected output: 24\nprint(surfacearea_cube(3))  # Expected output: 54\nprint(surfacearea_cube(4))  # Expected output: 96\n```\n\nThis script defines a function `surfacearea_cube` that calculates the surface area of a cube given the length of its side. The function is tested with an assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/445", "solution": "```python\ndef index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index-wise multiplication of tuple elements in the given two tuples.\n    \n    Args:\n    tuple1: A tuple of tuples containing integers.\n    tuple2: A tuple of tuples containing integers.\n    \n    Returns:\n    A tuple of tuples where each element is the result of index-wise multiplication of the input tuples.\n    \"\"\"\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform index-wise multiplication\n    result = tuple((a * c, b * d) for (a, b), (c, d) in zip(tuple1, tuple2))\n    \n    return result\n\n# Test the function with the provided assertion\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\n# Example usage\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))\nresult = index_multiplication(tuple1, tuple2)\nprint(\"Result of index-wise multiplication:\", result)\n```\nThis script defines a function `index_multiplication` that takes two tuples of tuples as input and returns a new tuple of tuples, where each element is the result of index-wise multiplication of the input tuples. The function is tested with an assertion to ensure it works as expected."}
{"task_id": "Mbpp/446", "solution": "```python\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements of the list in the tuple.\n\n    Parameters:\n    tup (tuple): A tuple containing elements to be counted.\n    lst (list): A list of elements whose occurrences need to be counted in the tuple.\n\n    Returns:\n    int: The total count of occurrences of list elements in the tuple.\n    \"\"\"\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count\n\n# Test the function with the provided assertion\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\n\n# Additional test cases\nprint(count_Occurrence(('x', 'y', 'z', 'x', 'x'), ['x', 'y']))  # Output should be 4\nprint(count_Occurrence(('1', '2', '3', '4', '5'), ['6', '7']))  # Output should be 0\nprint(count_Occurrence(('apple', 'banana', 'apple', 'orange'), ['apple', 'orange']))  # Output should be 3\nprint(count_Occurrence((), ['a', 'b']))  # Output should be 0\n```\n\nThis script defines a function `count_Occurrence` that takes a tuple and a list as input and returns the total number of times the elements of the list appear in the tuple. The function uses the `count` method of tuples to count occurrences of each element from the list in the tuple and sums these counts to get the total. The script also includes a test case to verify the function's correctness, as well as additional test cases for further validation."}
{"task_id": "Mbpp/447", "solution": "```python\ndef cube_nums(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with the cubes of the original numbers.\n    \n    :param numbers: List of integers\n    :return: List of integers where each element is the cube of the corresponding element in the input list\n    \"\"\"\n    return [x**3 for x in numbers]\n\n# Test the function with the provided assertion\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n# Example usage\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    cubes = cube_nums(numbers)\n    print(\"Original numbers:\", numbers)\n    print(\"Cubes of numbers:\", cubes)\n```\n"}
{"task_id": "Mbpp/448", "solution": "```python\ndef perrin_number(n):\n    \"\"\"\n    Calculate the nth Perrin number.\n    The Perrin sequence is defined as:\n    P(0) = 3, P(1) = 0, P(2) = 2\n    P(n) = P(n-2) + P(n-3) for n > 2\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 3, 0, 2\n        for i in range(3, n + 1):\n            a, b, c = b, c, b + a\n        return c\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \"\"\"\n    return sum(perrin_number(i) for i in range(n))\n\n# Test the function with the provided assertion\nassert cal_sum(9) == 49\n\n# Example usage\nprint(cal_sum(9))  # Output: 49\n```\nThis script defines two functions: `perrin_number` to calculate the nth Perrin number and `cal_sum` to calculate the sum of the first n Perrin numbers. The script includes an assertion to verify that the function works as expected for the input 9."}
{"task_id": "Mbpp/450", "solution": "```python\ndef extract_string(strings, size):\n    \"\"\"\n    Extract strings of a specified size from a given list of string values.\n\n    Parameters:\n    strings (list): A list of string values.\n    size (int): The size of strings to extract.\n\n    Returns:\n    list: A list of strings that have the specified size.\n    \"\"\"\n    return [s for s in strings if len(s) == size]\n\n# Test the function with the provided example\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n\n# Additional test cases\nprint(extract_string(['hello', 'world', 'python', 'code'], 5))  # ['hello', 'world']\nprint(extract_string(['short', 'tiny', 'minuscule', 'big'], 4))  # ['tiny', 'big']\nprint(extract_string(['one', 'two', 'three', 'four'], 3))  # ['one', 'two']\nprint(extract_string(['apple', 'banana', 'cherry', 'date'], 6))  # ['banana', 'cherry']\n```\n\nThis script defines a function `extract_string` that takes a list of strings and an integer `size` as input and returns a list of strings from the input list that have the specified length. The function uses a list comprehension to filter the strings based on their length. The script also includes a test case to verify the function's correctness, as well as additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/451", "solution": "```python\ndef remove_whitespaces(s: str) -> str:\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Parameters:\n    s (str): The input string from which whitespaces need to be removed.\n\n    Returns:\n    str: A new string with all whitespaces removed.\n    \"\"\"\n    return ''.join(s.split())\n\n# Test the function with the provided assertion\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\n# Additional test cases\nprint(remove_whitespaces('  Hello World  '))  # Expected: 'HelloWorld'\nprint(remove_whitespaces('Python  Programming'))  # Expected: 'PythonProgramming'\nprint(remove_whitespaces('  NoSpacesHere'))  # Expected: 'NoSpacesHere'\nprint(remove_whitespaces(''))  # Expected: ''\nprint(remove_whitespaces('   '))  # Expected: ''\n```\nThis script defines a function `remove_whitespaces` that removes all whitespace characters from a given string. It uses the `split()` method to split the string into a list of words (removing all whitespace), and then `join()` to concatenate them back into a single string without spaces. The function is tested with an assertion and additional test cases to ensure it works as expected."}
{"task_id": "Mbpp/453", "solution": "```python\ndef sum_of_even_factors(n):\n    \"\"\"\n    This function returns the sum of even factors of a given number n.\n    \n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n    \n    Returns:\n    int: The sum of even factors of n.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):  # Start from 2 and increment by 2 to check only even numbers\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Test the function with the given assertion\nassert sum_of_even_factors(18) == 26\n\n# Additional test cases\nprint(sum_of_even_factors(12))  # Output should be 18 (2 + 4 + 6 + 12)\nprint(sum_of_even_factors(30))  # Output should be 48 (2 + 6 + 10 + 30)\nprint(sum_of_even_factors(1))   # Output should be 0 (no even factors)\nprint(sum_of_even_factors(2))   # Output should be 2 (only even factor is 2)\n```"}
{"task_id": "Mbpp/454", "solution": "```python\nimport re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if the given text contains a word with the letter 'z'.\n    \n    Parameters:\n    text (str): The input string to be checked.\n    \n    Returns:\n    bool: True if there is a word containing 'z', False otherwise.\n    \"\"\"\n    # Use regular expression to find a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return match is not None\n\n# Test the function\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"hello world\") == False\nassert text_match_wordz(\"fizz buzz\") == True\nassert text_match_wordz(\"amazing\") == True\nassert text_match_wordz(\"no z here\") == False\n\nprint(\"All tests passed.\")\n```\n\nThis script defines a function `text_match_wordz` that uses a regular expression to check if a given string contains a word with the letter 'z'. The function returns `True` if such a word is found and `False` otherwise. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/455", "solution": "```python\ndef check_month_number(month):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \n    Parameters:\n    month (int): The month number (1 for January, 2 for February, ..., 12 for December)\n    \n    Returns:\n    bool: True if the month has 31 days, False otherwise\n    \"\"\"\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month is in the list of months with 31 days\n    return month in months_with_31_days\n\n# Test the function with the provided assertion\nassert check_month_number(5) == True\n\n# Additional test cases\nassert check_month_number(2) == False  # February\nassert check_month_number(4) == False  # April\nassert check_month_number(7) == True   # July\nassert check_month_number(11) == False # November\nassert check_month_number(12) == True  # December\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `check_month_number` that checks if a given month number corresponds to a month with 31 days. It includes a list of months with 31 days and checks if the input month is in that list. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/456", "solution": "```python\ndef reverse_string_list(strings):\n    \"\"\"\n    Reverses each string in the given list of strings.\n\n    Parameters:\n    strings (list of str): A list of strings to be reversed.\n\n    Returns:\n    list of str: A list containing the reversed strings.\n    \"\"\"\n    return [s[::-1] for s in strings]\n\n# Test the function with the provided test case\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\n# Additional test cases\nprint(reverse_string_list(['Hello', 'World']))  # ['olleH', 'dlroW']\nprint(reverse_string_list(['Python', 'Code']))  # ['nohtyP', 'edoC']\nprint(reverse_string_list(['123', '456']))      # ['321', '654']\nprint(reverse_string_list(['', 'Test']))        # ['', 'tseT']\n```\nThis script defines a function `reverse_string_list` that takes a list of strings and returns a new list with each string reversed. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/457", "solution": "```python\ndef Find_Min(sublists):\n    \"\"\"\n    This function takes a list of sublists and returns the sublist with the minimum length.\n    If there are multiple sublists with the same minimum length, it returns the first one encountered.\n    \n    :param sublists: List of sublists\n    :return: Sublist with the minimum length\n    \"\"\"\n    if not sublists:\n        return None  # Return None if the input list is empty\n\n    # Initialize the minimum sublist as the first sublist\n    min_sublist = sublists[0]\n    \n    # Iterate through the sublists to find the one with the minimum length\n    for sublist in sublists:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    \n    return min_sublist\n\n# Test the function with the provided assertion\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\n\n# Additional test cases\nassert Find_Min([[1, 2, 3], [4, 5], [6]]) == [6]\nassert Find_Min([[1, 2], [3, 4], [5, 6]]) == [1, 2]  # All have the same length, return the first\nassert Find_Min([[], [1], [1, 2]]) == []  # Empty list is the shortest\nassert Find_Min([[1, 2, 3]]) == [1, 2, 3]  # Only one sublist\nassert Find_Min([]) == None  # No sublists, return None\n```\n"}
{"task_id": "Mbpp/458", "solution": "```python\ndef rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Test the function with the given assertion\nassert rectangle_area(10, 20) == 200\n\n# Additional test cases\nprint(rectangle_area(5, 5))  # Expected output: 25\nprint(rectangle_area(7.5, 3.2))  # Expected output: 24.0\nprint(rectangle_area(0, 10))  # Expected output: 0\nprint(rectangle_area(15, 0))  # Expected output: 0\n```"}
{"task_id": "Mbpp/459", "solution": "```python\ndef remove_uppercase(s):\n    \"\"\"\n    This function removes uppercase substrings from the given string.\n    \n    Parameters:\n    s (str): The input string from which uppercase substrings need to be removed.\n    \n    Returns:\n    str: A new string with all uppercase substrings removed.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            # Skip the entire uppercase substring\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            # Add lowercase character to result\n            result.append(s[i])\n            i += 1\n    return ''.join(result)\n\n# Test the function with the provided assertion\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n```"}
{"task_id": "Mbpp/460", "solution": "```python\ndef Extract(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns a list containing the first element of each sublist.\n    \n    :param list_of_lists: List of lists from which to extract the first element of each sublist\n    :return: List of first elements from each sublist\n    \"\"\"\n    # Use list comprehension to extract the first element from each sublist\n    return [sublist[0] for sublist in list_of_lists if sublist]\n\n# Test the function with the provided assertion\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\n# Additional test cases\nprint(Extract([[10, 20], [30, 40, 50], [60, 70, 80, 90]]))  # Output: [10, 30, 60]\nprint(Extract([[1], [2], [3]]))  # Output: [1, 2, 3]\nprint(Extract([[1, 2, 3], [], [4, 5, 6]]))  # Output: [1, 4]\nprint(Extract([[], [1, 2], [3, 4]]))  # Output: [1, 3]\nprint(Extract([]))  # Output: []\n```\nThis script defines a function `Extract` that takes a list of lists and returns a list containing the first element of each sublist. It includes a test case to verify the function works as expected, along with additional test cases to demonstrate its behavior with different inputs. The function also handles empty sublists by checking if the sublist is non-empty before attempting to access its first element."}
{"task_id": "Mbpp/462", "solution": "```python\nfrom itertools import combinations\n\ndef combinations_list(elements):\n    result = []\n    # Generate combinations of all possible lengths\n    for r in range(len(elements) + 1):\n        for combo in combinations(elements, r):\n            result.append(list(combo))\n    return result\n\n# Test the function with the given assertion\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [\n    [], \n    ['orange'], \n    ['red'], \n    ['orange', 'red'], \n    ['green'], \n    ['orange', 'green'], \n    ['red', 'green'], \n    ['orange', 'red', 'green'], \n    ['blue'], \n    ['orange', 'blue'], \n    ['red', 'blue'], \n    ['orange', 'red', 'blue'], \n    ['green', 'blue'], \n    ['orange', 'green', 'blue'], \n    ['red', 'green', 'blue'], \n    ['orange', 'red', 'green', 'blue']\n]\n\n# Example usage\nif __name__ == \"__main__\":\n    elements = ['orange', 'red', 'green', 'blue']\n    print(combinations_list(elements))\n```\n\nThis script defines a function `combinations_list` that generates all possible combinations of the elements in a given list. It uses the `combinations` function from the `itertools` module to generate combinations of different lengths, starting from 0 up to the length of the list. The function is then tested with an assertion to ensure it produces the expected output."}
{"task_id": "Mbpp/463", "solution": "```python\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    # Initialize the maximum product, minimum product, and result with the first element\n    max_product = min_product = result = nums[0]\n\n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        if num < 0:\n            # Swap max_product and min_product if the current number is negative\n            max_product, min_product = min_product, max_product\n\n        # Calculate the maximum and minimum product ending at the current position\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n\n    return result\n\n# Test the function with the provided test case\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\nThis script defines a function `max_subarray_product` that calculates the maximum product of a contiguous subarray within a given list of integers. The function uses a dynamic programming approach, maintaining both the maximum and minimum products up to the current position to handle negative numbers effectively. The test case provided in the problem statement is used to verify the correctness of the function."}
{"task_id": "Mbpp/465", "solution": "```python\ndef drop_empty(input_dict):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary\n    with all items that have a value of None removed.\n    \n    :param input_dict: Dictionary to process\n    :return: Dictionary with non-None values\n    \"\"\"\n    # Use dictionary comprehension to filter out items with None values\n    return {key: value for key, value in input_dict.items() if value is not None}\n\n# Test the function with the provided assertion\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\n\n# Additional test cases\nprint(drop_empty({'a': 1, 'b': None, 'c': 3}))  # Expected output: {'a': 1, 'c': 3}\nprint(drop_empty({'x': None, 'y': None, 'z': None}))  # Expected output: {}\nprint(drop_empty({'key1': 'value1', 'key2': 'value2'}))  # Expected output: {'key1': 'value1', 'key2': 'value2'}\n```\nThis script defines a function `drop_empty` that removes items with `None` values from a dictionary. It includes an assertion to verify the function works as expected and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/468", "solution": "```python\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize a list to store the maximum product of increasing subsequences ending at each index\n    max_product_ending_at = [0] * n\n\n    # Initialize the maximum product found\n    max_product_found = 0\n\n    # Iterate over each element in the array\n    for i in range(n):\n        # Start with the current element as the minimum product\n        max_product_ending_at[i] = arr[i]\n\n        # Check all previous elements to find increasing subsequences\n        for j in range(i):\n            if arr[j] < arr[i]:\n                # Update the maximum product for the subsequence ending at i\n                max_product_ending_at[i] = max(max_product_ending_at[i], max_product_ending_at[j] * arr[i])\n\n        # Update the global maximum product found\n        max_product_found = max(max_product_found, max_product_ending_at[i])\n\n    return max_product_found\n\n# Test the function with the provided test case\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n```\n\nThis script defines a function `max_product` that calculates the maximum product of an increasing subsequence in a given list of integers. It uses dynamic programming to keep track of the maximum product of increasing subsequences ending at each index and updates the global maximum product found. The function is tested with the provided test case to ensure correctness."}
{"task_id": "Mbpp/470", "solution": "```python\ndef add_pairwise(input_tuple):\n    \"\"\"\n    This function takes a tuple of integers and returns a new tuple containing the pairwise addition\n    of neighboring elements from the input tuple.\n    \n    :param input_tuple: A tuple of integers\n    :return: A tuple containing the pairwise addition of neighboring elements\n    \"\"\"\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the input tuple, stopping before the last element\n    for i in range(len(input_tuple) - 1):\n        # Add the current element and the next element\n        pair_sum = input_tuple[i] + input_tuple[i + 1]\n        # Append the result to the list\n        result.append(pair_sum)\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)\n\n# Test the function with the provided assertion\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n# Additional test cases\nprint(add_pairwise((2, 4, 6)))  # Expected output: (6, 10)\nprint(add_pairwise((0, 0, 0, 0)))  # Expected output: (0, 0, 0)\nprint(add_pairwise((10, 20)))  # Expected output: (30)\nprint(add_pairwise((5,)))  # Expected output: ()\nprint(add_pairwise(()))  # Expected output: ()\n```\n\nThis script defines a function `add_pairwise` that takes a tuple of integers and returns a new tuple containing the sum of each pair of neighboring elements. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/471", "solution": "```python\ndef find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a modulus n, and returns the product of the array elements modulo n.\n    \n    :param arr: List[int] - A list of integers\n    :param n: int - The modulus\n    :return: int - The product of the array elements modulo n\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Take modulo at each step to prevent overflow and keep the number manageable\n    return product\n\n# Test the function with the provided test case\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\n\n# Additional test cases\nprint(find_remainder([1, 2, 3, 4, 5], 7))  # Expected output: 1 (120 % 7 = 1)\nprint(find_remainder([2, 3, 5], 13))       # Expected output: 1 (30 % 13 = 4)\nprint(find_remainder([10, 20, 30], 17))    # Expected output: 6 (6000 % 17 = 6)\nprint(find_remainder([7, 11, 13], 19))     # Expected output: 1 (1001 % 19 = 1)\n```\n\nThis script defines a function `find_remainder` that calculates the product of an array of integers modulo a given number `n`. The function iterates through each element in the array, multiplies it to a running product, and takes the modulo `n` at each step to ensure the product remains manageable and to prevent overflow. The function is tested with the provided test case and additional test cases to demonstrate its correctness."}
{"task_id": "Mbpp/472", "solution": "```python\ndef check_Consecutive(lst):\n    \"\"\"\n    This function checks if the given list contains consecutive numbers.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if not lst:\n        return False\n    \n    # Sort the list\n    sorted_lst = sorted(lst)\n    \n    # Check if each element is consecutive\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    \n    return True\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 2, 5, 4]) == True\nassert check_Consecutive([1, 2, 4, 5]) == False\nassert check_Consecutive([5, 4, 3, 2, 1]) == True\nassert check_Consecutive([10, 11, 12, 14]) == False\nassert check_Consecutive([]) == False\nassert check_Consecutive([7]) == True\n```"}
{"task_id": "Mbpp/473", "solution": "```python\ndef tuple_intersection(list1, list2):\n    # Convert each tuple to a frozenset to ignore order\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert frozensets back to tuples with sorted elements\n    result = {tuple(sorted(t)) for t in intersection}\n    \n    return result\n\n# Test the function with the provided assertion\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\n# Example usage\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))\n```\nThis script defines a function `tuple_intersection` that takes two lists of tuples and returns a set of tuples that are present in both lists, irrespective of the order of elements within the tuples. The function uses `frozenset` to handle unordered elements and then converts the intersection back to tuples with sorted elements. The provided assertion checks the correctness of the function."}
{"task_id": "Mbpp/474", "solution": "```python\ndef replace_char(s, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of old_char with new_char in the string s.\n\n    Parameters:\n    s (str): The original string.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace with.\n\n    Returns:\n    str: The modified string with old_char replaced by new_char.\n    \"\"\"\n    return s.replace(old_char, new_char)\n\n# Test the function with the provided assertion\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\n\n# Additional test cases\nprint(replace_char(\"hello world\", 'o', 'a'))  # Expected: \"hella warld\"\nprint(replace_char(\"banana\", 'a', 'o'))       # Expected: \"bonono\"\nprint(replace_char(\"test\", 't', 'T'))         # Expected: \"TesT\"\nprint(replace_char(\"mississippi\", 'i', 'I'))  # Expected: \"mIssIssIppI\"\nprint(replace_char(\"abcdef\", 'x', 'y'))       # Expected: \"abcdef\" (no change)\n```\nThis script defines a function `replace_char` that takes a string and two characters as input, replacing all occurrences of the first character with the second character in the string. It includes a test case to verify the function works as expected, along with additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/475", "solution": "```python\ndef sort_counter(d):\n    \"\"\"\n    Sorts a dictionary by its values in descending order and returns a list of tuples.\n\n    Parameters:\n    d (dict): The dictionary to be sorted.\n\n    Returns:\n    list: A list of tuples sorted by the dictionary's values in descending order.\n    \"\"\"\n    # Sort the dictionary by value in descending order and return as a list of tuples\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)\n\n# Test the function with the provided assertion\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_dict = {'Math': 81, 'Physics': 83, 'Chemistry': 87}\n    sorted_list = sort_counter(example_dict)\n    print(\"Sorted dictionary by value:\", sorted_list)\n```\n"}
{"task_id": "Mbpp/476", "solution": "```python\ndef big_sum(arr):\n    \"\"\"\n    This function takes a list of numbers and returns the sum of the largest and smallest numbers in the list.\n    \n    :param arr: List of numbers\n    :return: Sum of the largest and smallest numbers in the list\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The array should not be empty\")\n    \n    smallest = min(arr)\n    largest = max(arr)\n    \n    return smallest + largest\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([10, 20, 30, 40, 50]) == 60\nassert big_sum([-10, -20, -30, -40, -50]) == -60\nassert big_sum([5]) == 10  # In case of a single element, it is both the smallest and largest\nassert big_sum([0, 0, 0, 0]) == 0\n\nprint(\"All test cases passed!\")\n```\nThis script defines a function `big_sum` that calculates the sum of the largest and smallest values in a given list. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/477", "solution": "```python\ndef is_lower(s):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    s (str): The string to be converted.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return s.lower()\n\n# Test the function\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"HELLO\") == \"hello\"\nassert is_lower(\"Python\") == \"python\"\nassert is_lower(\"already lowercase\") == \"already lowercase\"\nassert is_lower(\"\") == \"\"  # Test with an empty string\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `is_lower` that converts a given string to lowercase using the `lower()` method. It includes assertions to test the function with various inputs."}
{"task_id": "Mbpp/478", "solution": "```python\ndef remove_lowercase(s):\n    \"\"\"\n    This function removes all lowercase substrings from the given string.\n    A substring is considered lowercase if it consists entirely of lowercase letters.\n    \"\"\"\n    result = []\n    current_substring = []\n\n    for char in s:\n        if char.islower():\n            # If we encounter a lowercase character, we clear the current substring\n            current_substring = []\n        else:\n            # If it's an uppercase character, we add it to the current substring\n            current_substring.append(char)\n            # Add the current substring to the result\n            result.extend(current_substring)\n            # Clear the current substring\n            current_substring = []\n\n    return ''.join(result)\n\n# Test the function with the provided assertion\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\n\n# Additional test cases\nprint(remove_lowercase(\"HelloWorld\"))  # Expected output: 'HW'\nprint(remove_lowercase(\"PYTHON\"))      # Expected output: 'PYTHON'\nprint(remove_lowercase(\"javaSCRIPT\"))  # Expected output: 'SCRIPT'\nprint(remove_lowercase(\"abcDEFghi\"))   # Expected output: 'DEF'\nprint(remove_lowercase(\"123abc456\"))   # Expected output: '123456'\n```\nThis script defines a function `remove_lowercase` that removes all lowercase substrings from a given string. The function iterates over each character in the string, and if it encounters a lowercase character, it clears the current substring. If it encounters an uppercase character, it adds it to the result. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/479", "solution": "```python\ndef first_Digit(number):\n    \"\"\"\n    This function returns the first digit of a given number.\n    \n    Parameters:\n    number (int): The number from which to find the first digit.\n    \n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to easily access the first character\n    number_str = str(abs(number))  # Use abs to handle negative numbers\n    # Return the first character converted back to an integer\n    return int(number_str[0])\n\n# Test the function with the provided assertion\nassert first_Digit(123) == 1\n\n# Additional test cases\nassert first_Digit(987654) == 9\nassert first_Digit(0) == 0\nassert first_Digit(-456) == 4\nassert first_Digit(1000) == 1\n\n# Print results for verification\nprint(first_Digit(123))  # Output: 1\nprint(first_Digit(987654))  # Output: 9\nprint(first_Digit(0))  # Output: 0\nprint(first_Digit(-456))  # Output: 4\nprint(first_Digit(1000))  # Output: 1\n```\nThis script defines a function `first_Digit` that takes an integer as input and returns the first digit of that number. It handles both positive and negative numbers by using the `abs` function to ensure the number is positive before converting it to a string. The function is tested with several assertions to ensure correctness."}
{"task_id": "Mbpp/554", "solution": "```python\ndef Split(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd integers.\n\n    :param numbers: List of integers\n    :return: List of odd integers\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function with the provided example\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n\n# Additional test cases\nassert Split([10, 15, 20, 25, 30]) == [15, 25]\nassert Split([2, 4, 6, 8, 10]) == []\nassert Split([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert Split([]) == []\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `Split` that filters out even numbers from a list, returning only the odd numbers. It includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/555", "solution": "```python\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference\n    return sum_of_cubes - sum_of_natural_numbers\n\n# Test the function with the provided assertion\nassert difference(3) == 30\n\n# Additional test cases\nprint(difference(1))  # Output should be 0\nprint(difference(2))  # Output should be 8\nprint(difference(4))  # Output should be 96\nprint(difference(5))  # Output should be 170\n```\n\nThis script defines a function `difference(n)` that calculates the difference between the sum of cubes of the first `n` natural numbers and the sum of the first `n` natural numbers. It uses the formula for the sum of the first `n` natural numbers and the formula for the sum of cubes of the first `n` natural numbers to compute the result efficiently. The function is tested with the provided assertion and additional test cases."}
{"task_id": "Mbpp/556", "solution": "```python\ndef find_Odd_Pair(arr, n):\n    \"\"\"\n    Function to count the number of pairs whose XOR value is odd.\n    \n    Parameters:\n    arr (list): List of integers.\n    n (int): Number of elements in the list.\n    \n    Returns:\n    int: Number of pairs with odd XOR value.\n    \"\"\"\n    # Count of even and odd numbers in the array\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through the array to count even and odd numbers\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # A pair (a, b) has an odd XOR if one is even and the other is odd\n    # So, the number of such pairs is even_count * odd_count\n    return even_count * odd_count\n\n# Test the function with the provided test case\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\n```"}
{"task_id": "Mbpp/557", "solution": "```python\ndef toggle_string(s):\n    \"\"\"\n    This function takes a string as input and returns a new string with the case of each character toggled.\n    \n    Parameters:\n    s (str): The input string whose characters' cases need to be toggled.\n    \n    Returns:\n    str: A new string with each character's case toggled.\n    \"\"\"\n    # Use a list comprehension to toggle the case of each character\n    toggled = [char.lower() if char.isupper() else char.upper() for char in s]\n    \n    # Join the list back into a string and return\n    return ''.join(toggled)\n\n# Test the function with the provided assertion\nassert toggle_string(\"Python\") == \"pYTHON\"\n\n# Additional test cases\nprint(toggle_string(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\nprint(toggle_string(\"123abcABC\"))     # Output: \"123ABCabc\"\nprint(toggle_string(\"\"))              # Output: \"\"\nprint(toggle_string(\"TOGGLE\"))        # Output: \"toggle\"\n```\nThis script defines a function `toggle_string` that toggles the case of each character in the input string. It uses a list comprehension to iterate over each character, checking if it is uppercase or lowercase, and then toggles its case accordingly. The function is tested with an assertion and additional test cases to ensure it works as expected."}
{"task_id": "Mbpp/558", "solution": "```python\ndef digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit differences.\n    \"\"\"\n    # Convert both numbers to strings to compare digit by digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    # Calculate the sum of per-digit differences\n    total_difference = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference\n\n# Test the function with the provided assertion\nassert digit_distance_nums(1, 2) == 1\n\n# Additional test cases\nassert digit_distance_nums(123, 456) == 9  # (1-4) + (2-5) + (3-6) = 3 + 3 + 3 = 9\nassert digit_distance_nums(100, 200) == 1  # (1-2) + (0-0) + (0-0) = 1 + 0 + 0 = 1\nassert digit_distance_nums(1234, 5678) == 16  # (1-5) + (2-6) + (3-7) + (4-8) = 4 + 4 + 4 + 4 = 16\nassert digit_distance_nums(0, 0) == 0  # (0-0) = 0\nassert digit_distance_nums(123, 123) == 0  # (1-1) + (2-2) + (3-3) = 0 + 0 + 0 = 0\n```\nThis script defines a function `digit_distance_nums` that calculates the sum of the per-digit differences between two integers. It handles numbers of different lengths by padding the shorter one with leading zeros. The function is tested with several assertions to ensure its correctness."}
{"task_id": "Mbpp/559", "solution": "```python\ndef max_sub_array_sum(arr, n):\n    \"\"\"\n    Function to find the sum of the largest contiguous sublist in the given list.\n    \n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The number of elements in the list.\n    \n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n    # Initialize variables\n    max_so_far = float('-inf')  # This will store the maximum sum found so far\n    max_ending_here = 0  # This will store the maximum sum of the sublist ending at the current position\n\n    for i in range(n):\n        max_ending_here += arr[i]\n        \n        # Update max_so_far if max_ending_here is greater\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        \n        # If max_ending_here becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n\n# Test the function with the provided test case\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```"}
{"task_id": "Mbpp/560", "solution": "```python\ndef union_elements(tuple1, tuple2):\n    # Convert tuples to sets to find the union\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    \n    # Convert the union set back to a sorted tuple\n    sorted_union_tuple = tuple(sorted(union_set))\n    \n    return sorted_union_tuple\n\n# Test the function with the provided example\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n\n# Additional test cases\nprint(union_elements((1, 2, 3), (4, 5, 6)))  # Expected output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((1, 2, 3), (3, 2, 1)))  # Expected output: (1, 2, 3)\nprint(union_elements((), (1, 2, 3)))         # Expected output: (1, 2, 3)\nprint(union_elements((1, 2, 3), ()))         # Expected output: (1, 2, 3)\nprint(union_elements((), ()))                # Expected output: ()\n```"}
{"task_id": "Mbpp/562", "solution": "```python\ndef Find_Max_Length(list_of_lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the longest sublist.\n    \n    Parameters:\n    list_of_lists (list): A list containing sublists.\n    \n    Returns:\n    int: The length of the longest sublist.\n    \"\"\"\n    # Initialize a variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Update max_length if the current sublist is longer\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    return max_length\n\n# Test the function with the provided assertion\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4\n\n# Additional test cases\nprint(Find_Max_Length([[1, 2, 3], [4, 5], [6]]))  # Output should be 3\nprint(Find_Max_Length([[], [1, 2], [3, 4, 5, 6], [7]]))  # Output should be 4\nprint(Find_Max_Length([[1], [2], [3]]))  # Output should be 1\nprint(Find_Max_Length([[], [], []]))  # Output should be 0\n```\nThis script defines a function `Find_Max_Length` that calculates the length of the longest sublist within a list of lists. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/563", "solution": "```python\ndef extract_values(s):\n    import re\n    # Use regular expression to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test the function with the provided example\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\n\n# Additional test cases\nassert extract_values('\"Hello\", \"World\"') == ['Hello', 'World']\nassert extract_values('\"One\", \"Two\", \"Three\", \"Four\"') == ['One', 'Two', 'Three', 'Four']\nassert extract_values('No quotes here') == []\nassert extract_values('\"Single\"') == ['Single']\nassert extract_values('Mixed \"quotes\" and \"text\"') == ['quotes', 'text']\n\nprint(\"All tests passed.\")\n```\n\nThis script defines a function `extract_values` that uses a regular expression to find and return all substrings enclosed in double quotes from a given string. The function is tested with several test cases to ensure its correctness."}
{"task_id": "Mbpp/564", "solution": "```python\ndef count_pairs(lst, n):\n    \"\"\"\n    Count the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The number of unordered pairs with unequal elements.\n    \"\"\"\n    # Initialize a counter for pairs\n    pair_count = 0\n\n    # Iterate over each pair of elements in the list\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Check if the elements are unequal\n            if lst[i] != lst[j]:\n                pair_count += 1\n\n    return pair_count\n\n# Test the function with the provided example\nassert count_pairs([1, 2, 1], 3) == 2\n\n# Additional test cases\nprint(count_pairs([1, 2, 3, 4], 4))  # Expected output: 6\nprint(count_pairs([1, 1, 1, 1], 4))  # Expected output: 0\nprint(count_pairs([1, 2, 3, 2], 4))  # Expected output: 5\nprint(count_pairs([1, 2], 2))        # Expected output: 1\n```\n\nThis script defines a function `count_pairs` that takes a list of integers and its length as input and returns the number of unordered pairs where both elements are unequal. The function iterates over all possible pairs and counts those with unequal elements. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/565", "solution": "```python\ndef split(string):\n    \"\"\"\n    Splits a string into a list of its characters.\n\n    Parameters:\n    string (str): The string to be split.\n\n    Returns:\n    list: A list containing each character of the string.\n    \"\"\"\n    return list(string)\n\n# Test the function with the provided example\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\n\n# Additional test cases\nassert split('') == []\nassert split('a') == ['a']\nassert split('hello world') == ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\nassert split('12345') == ['1', '2', '3', '4', '5']\n```"}
{"task_id": "Mbpp/566", "solution": "```python\ndef sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    return sum(int(digit) for digit in str(n))\n\n# Test the function with the provided assertion\nassert sum_digits(345) == 12\n\n# Additional test cases\nprint(sum_digits(0))    # Output: 0\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(999))  # Output: 27\nprint(sum_digits(1001)) # Output: 2\n```\nThis script defines a function `sum_digits` that calculates the sum of the digits of a non-negative integer. It includes an assertion to verify the function works as expected for the given example, and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/567", "solution": "```python\ndef issort_list(lst):\n    \"\"\"\n    Check if the given list is sorted in non-decreasing order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Iterate through the list and check if each element is less than or equal to the next\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test the function with the provided assertion\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\n\n# Additional test cases\nassert issort_list([1, 2, 3, 4, 5]) == True  # Sorted list\nassert issort_list([5, 4, 3, 2, 1]) == False  # Not sorted\nassert issort_list([1, 1, 1, 1, 1]) == True  # All elements are the same\nassert issort_list([1, 2, 2, 3, 4]) == True  # Contains duplicates but sorted\nassert issort_list([]) == True  # Empty list is considered sorted\nassert issort_list([1]) == True  # Single element list is considered sorted\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `issort_list` that checks if a list is sorted in non-decreasing order. It includes the provided assertion and additional test cases to verify the function's correctness."}
{"task_id": "Mbpp/568", "solution": "```python\ndef empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list containing N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]\nassert empty_list(0) == []\nassert empty_list(3) == [{}, {}, {}]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(empty_list(5))  # Output: [{}, {}, {}, {}, {}]\n    print(empty_list(0))  # Output: []\n    print(empty_list(3))  # Output: [{}, {}, {}]\n```\nThis script defines a function `empty_list` that takes an integer `n` and returns a list of `n` empty dictionaries. It includes assertions to test the function and an example usage in the `__main__` block."}
{"task_id": "Mbpp/569", "solution": "```python\ndef sort_sublists(list_of_lists):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list_of_lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n    list of list of str: A list with each sublist sorted alphabetically.\n    \"\"\"\n    # Use list comprehension to sort each sublist\n    return [sorted(sublist) for sublist in list_of_lists]\n\n# Test the function with the provided example\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n# Additional test cases\nprint(sort_sublists([['apple', 'banana'], ['cherry', 'date'], ['fig', 'grape', 'elderberry']]))\n# Expected output: [['apple', 'banana'], ['cherry', 'date'], ['elderberry', 'fig', 'grape']]\n\nprint(sort_sublists([['zebra', 'antelope'], ['lion', 'tiger'], ['bear', 'wolf', 'fox']]))\n# Expected output: [['antelope', 'zebra'], ['lion', 'tiger'], ['bear', 'fox', 'wolf']]\n```\nThis script defines a function `sort_sublists` that takes a list of lists of strings and returns a new list where each sublist is sorted alphabetically. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/572", "solution": "```python\ndef two_unique_nums(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list containing only the numbers\n    that appear exactly once in the original list.\n    \n    :param lst: List of integers\n    :return: List of integers that appear exactly once in the input list\n    \"\"\"\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count each number in the list\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Collect numbers that appear exactly once\n    unique_nums = [num for num, count in count_dict.items() if count == 1]\n    \n    return unique_nums\n\n# Test the function with the provided example\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\n\n# Additional test cases\nprint(two_unique_nums([1, 1, 2, 3, 4, 4, 5]))  # Output should be [2, 3, 5]\nprint(two_unique_nums([10, 20, 20, 30, 40, 50, 50]))  # Output should be [10, 30, 40]\nprint(two_unique_nums([1, 2, 3, 4, 5]))  # Output should be [1, 2, 3, 4, 5] since all are unique\nprint(two_unique_nums([1, 1, 1, 1]))  # Output should be [] since all are duplicates\n```"}
{"task_id": "Mbpp/573", "solution": "```python\ndef unique_product(numbers):\n    # Convert the list to a set to get unique numbers\n    unique_numbers = set(numbers)\n    \n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for number in unique_numbers:\n        product *= number\n    \n    return product\n\n# Test the function with the provided test case\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n\n# Additional test cases\nprint(unique_product([1, 2, 3, 4, 5]))  # Expected output: 120\nprint(unique_product([2, 2, 2, 2, 2]))  # Expected output: 2\nprint(unique_product([0, 1, 2, 3, 4]))  # Expected output: 0 (since 0 is in the list)\nprint(unique_product([-1, -2, -3, -4])) # Expected output: 24 (product of unique negative numbers)\n```"}
{"task_id": "Mbpp/576", "solution": "```python\ndef is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is a sublist of main_list.\n\n    Parameters:\n    main_list (list): The list in which to search for the sublist.\n    sub_list (list): The list to check as a sublist.\n\n    Returns:\n    bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    # Get the lengths of both lists\n    len_main = len(main_list)\n    len_sub = len(sub_list)\n\n    # If the sub_list is longer than the main_list, it cannot be a sublist\n    if len_sub > len_main:\n        return False\n\n    # Iterate through the main_list to find the sub_list\n    for i in range(len_main - len_sub + 1):\n        # Check if the slice of main_list matches the sub_list\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n\n    return False\n\n# Test the function with the provided assertion\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\n\n# Additional test cases\nassert is_Sub_Array([1, 4, 3, 5], [4, 3]) == True\nassert is_Sub_Array([1, 4, 3, 5], [3, 5]) == True\nassert is_Sub_Array([1, 4, 3, 5], [5]) == True\nassert is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5]) == True\nassert is_Sub_Array([1, 4, 3, 5], [6]) == False\nassert is_Sub_Array([], []) == True\nassert is_Sub_Array([1, 2, 3], []) == True\nassert is_Sub_Array([], [1, 2, 3]) == False\n\nprint(\"All test cases passed!\")\n```\nThis script defines a function `is_Sub_Array` that checks if one list is a sublist of another. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/577", "solution": "```python\ndef last_digit_factorial(n):\n    \"\"\"\n    This function returns the last digit of the factorial of a given number n.\n    \"\"\"\n    # If n is 0 or 1, the factorial is 1, and the last digit is also 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the factorial result\n    factorial = 1\n    \n    # Calculate the factorial of n\n    for i in range(2, n + 1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return factorial % 10\n\n# Test the function with the given assertion\nassert last_digit_factorial(4) == 4\n\n# Additional test cases\nprint(last_digit_factorial(0))  # Output: 1\nprint(last_digit_factorial(1))  # Output: 1\nprint(last_digit_factorial(5))  # Output: 0\nprint(last_digit_factorial(10)) # Output: 0\n```\n\nThis script defines a function `last_digit_factorial` that calculates the last digit of the factorial of a given number `n`. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/578", "solution": "```python\ndef interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of the same length into a single flat list.\n    \n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n    list3 (list): The third list.\n    \n    Returns:\n    list: A new list with elements interleaved from the three input lists.\n    \"\"\"\n    # Check if all lists have the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Interleave the lists\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list\n\n# Test the function with the provided example\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\n# Example usage\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\nprint(interleave_lists(list1, list2, list3))  # Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n```\n"}
{"task_id": "Mbpp/579", "solution": "```python\ndef find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples and returns a tuple containing elements\n    that are present in one tuple but not in the other.\n    \"\"\"\n    # Convert tuples to sets to find dissimilar elements\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    \n    # Find elements that are in set1 but not in set2 and vice versa\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Convert the result back to a tuple\n    return tuple(dissimilar_elements)\n\n# Test the function with the provided assertion\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\n# Additional test cases\nprint(find_dissimilar((1, 2, 3), (3, 4, 5)))  # Expected output: (1, 2, 4, 5)\nprint(find_dissimilar((10, 20, 30), (10, 20, 30)))  # Expected output: ()\nprint(find_dissimilar((), (1, 2, 3)))  # Expected output: (1, 2, 3)\nprint(find_dissimilar((1, 2, 3), ()))  # Expected output: (1, 2, 3)\n```\nThis script defines a function `find_dissimilar` that takes two tuples as input and returns a tuple of elements that are present in one tuple but not in the other. The function uses set operations to find the symmetric difference between the two input tuples, which effectively gives the dissimilar elements. The result is then converted back to a tuple before being returned. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/580", "solution": "```python\ndef extract_even(mixed_tuple):\n    def is_even(n):\n        return isinstance(n, int) and n % 2 == 0\n\n    def filter_even_elements(t):\n        result = []\n        for item in t:\n            if isinstance(item, tuple):\n                filtered_item = filter_even_elements(item)\n                if filtered_item:  # Only add non-empty tuples\n                    result.append(filtered_item)\n            elif is_even(item):\n                result.append(item)\n        return tuple(result)\n\n    return filter_even_elements(mixed_tuple)\n\n# Test the function with the provided assertion\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\n# Additional test cases\nprint(extract_even((1, 3, 5, 7)))  # Should return ()\nprint(extract_even((2, 4, 6, 8)))  # Should return (2, 4, 6, 8)\nprint(extract_even((1, (3, 4), 5, (6, 7, (8, 9)))))  # Should return ((4,), (6, (8,)))\nprint(extract_even((10, (11, 12, (13, 14)), 15)))  # Should return (10, (12, (14,)))\n```\n"}
{"task_id": "Mbpp/581", "solution": "```python\nimport math\n\ndef surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid from the base to the apex.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    # Calculate the base area (A_base)\n    A_base = base_edge ** 2\n    \n    # Calculate the slant height (l) using the Pythagorean theorem\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the lateral surface area (A_lateral)\n    A_lateral = 2 * base_edge * slant_height\n    \n    # Total surface area is the sum of the base area and the lateral surface area\n    total_surface_area = A_base + A_lateral\n    \n    return total_surface_area\n\n# Test the function with the given assertion\nassert surface_Area(3, 4) == 33\n```"}
{"task_id": "Mbpp/583", "solution": "```python\ndef catalan_number(n):\n    \"\"\"\n    Function to calculate the nth Catalan number.\n    The nth Catalan number is given by the formula:\n    C(n) = (2n)! / ((n + 1)! * n!)\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Calculate factorials\n    factorial = [1] * (2 * n + 1)\n    for i in range(2, 2 * n + 1):\n        factorial[i] = factorial[i - 1] * i\n\n    # Calculate the nth Catalan number using the formula\n    catalan = factorial[2 * n] // (factorial[n + 1] * factorial[n])\n    return catalan\n\n# Test the function with the given assertion\nassert catalan_number(10) == 16796\n\n# Example usage\nprint(catalan_number(10))  # Output: 16796\n```\n\nThis script defines a function `catalan_number` that calculates the nth Catalan number using the formula involving factorials. It includes an assertion to verify that the function returns the correct value for the 10th Catalan number."}
{"task_id": "Mbpp/585", "solution": "```python\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of dictionaries (items) and an integer n, and returns a list of the n most expensive items.\n    Each item is represented as a dictionary with 'name' and 'price' keys.\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items\n    return sorted_items[:n]\n\n# Test the function with the provided assertion\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]\n\n# Additional test cases\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.0}], 2))\n# Expected output: [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.0}]\n\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.0}], 3))\n# Expected output: [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.0}, {'name': 'Item-1', 'price': 101.1}]\n\nprint(expensive_items([{'name': 'Item-1', 'price': 101.1}], 1))\n# Expected output: [{'name': 'Item-1', 'price': 101.1}]\n\nprint(expensive_items([], 1))\n# Expected output: []\n```\nThis script defines a function `expensive_items` that sorts a list of items by their price in descending order and returns the top `n` items. It includes a test case to verify the function works as expected, along with additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/586", "solution": "```python\ndef split_Arr(arr, n):\n    \"\"\"\n    Splits the list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The list to be split.\n    n (int): The index at which to split the list.\n\n    Returns:\n    list: The modified list with the first part moved to the end.\n    \"\"\"\n    # Split the list into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate the second part with the first part\n    result = second_part + first_part\n    \n    return result\n\n# Test the function with the provided example\nassert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]\n\n# Additional test cases\nprint(split_Arr([1, 2, 3, 4, 5], 3))  # Expected output: [4, 5, 1, 2, 3]\nprint(split_Arr([7, 8, 9], 1))        # Expected output: [8, 9, 7]\nprint(split_Arr([0, 1, 2, 3], 0))     # Expected output: [0, 1, 2, 3]\nprint(split_Arr([10, 20, 30, 40], 4)) # Expected output: [10, 20, 30, 40]\n```\nThis script defines a function `split_Arr` that takes a list and an index `n`, splits the list at the nth element, and appends the first part to the end of the list. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/587", "solution": "```python\ndef list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst (list): The list to be converted.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)\n\n# Test the function with the provided assertion\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n\n# Additional test cases\nassert list_tuple([]) == ()\nassert list_tuple([1]) == (1,)\nassert list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert list_tuple([True, False, True]) == (True, False, True)\n\nprint(\"All tests passed.\")\n```"}
{"task_id": "Mbpp/588", "solution": "```python\ndef big_diff(lst):\n    \"\"\"\n    This function takes a list of numbers and returns the difference between\n    the largest and smallest values in the list.\n    \n    :param lst: List of numbers\n    :return: Difference between the largest and smallest number\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List must not be empty\")\n    \n    max_value = max(lst)\n    min_value = min(lst)\n    \n    return max_value - min_value\n\n# Test the function with the provided assertion\nassert big_diff([1, 2, 3, 4]) == 3\n\n# Additional test cases\nprint(big_diff([10, 20, 30, 40, 50]))  # Output: 40\nprint(big_diff([-10, -20, -30, -40, -50]))  # Output: 40\nprint(big_diff([5]))  # Output: 0\nprint(big_diff([100, 100, 100]))  # Output: 0\n```\nThis script defines a function `big_diff` that calculates the difference between the largest and smallest values in a given list. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/589", "solution": "```python\nimport math\n\ndef perfect_squares(start, end):\n    \"\"\"\n    This function returns a list of perfect squares between two given numbers (inclusive).\n    \n    Parameters:\n    start (int): The starting number of the range.\n    end (int): The ending number of the range.\n    \n    Returns:\n    list: A list of perfect squares between start and end.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    squares = []\n    \n    # Find the smallest integer greater than or equal to the square root of start\n    start_sqrt = math.ceil(math.sqrt(start))\n    \n    # Find the largest integer less than or equal to the square root of end\n    end_sqrt = math.floor(math.sqrt(end))\n    \n    # Iterate over the range of integers from start_sqrt to end_sqrt\n    for i in range(start_sqrt, end_sqrt + 1):\n        # Append the square of the current integer to the list\n        squares.append(i * i)\n    \n    return squares\n\n# Test the function with the given assertion\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\n\n# Additional test cases\nprint(perfect_squares(10, 100))  # Output: [16, 25, 36, 49, 64, 81, 100]\nprint(perfect_squares(50, 60))   # Output: [49]\nprint(perfect_squares(0, 1))     # Output: [0, 1]\nprint(perfect_squares(5, 5))     # Output: []\n```\n"}
{"task_id": "Mbpp/590", "solution": "```python\nimport cmath\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius or magnitude.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing:\n        - A tuple with the rectangular coordinates (x, y).\n        - A complex number representing the same point.\n    \"\"\"\n    # Convert polar to rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Create a complex number from polar coordinates\n    complex_num = cmath.rect(r, theta)\n    \n    return ((x, y), complex_num)\n\n# Test the function with the given assertion\nassert polar_rect(3, 4) == ((-1.960930862590836, -2.2704074859237844), (-1.960930862590836-2.2704074859237844j))\n\n# Example usage\nprint(polar_rect(3, 4))  # Output: ((-1.960930862590836, -2.2704074859237844), (-1.960930862590836-2.2704074859237844j))\n```\n\nThis script defines a function `polar_rect` that converts polar coordinates to rectangular coordinates. It returns both the rectangular coordinates as a tuple `(x, y)` and as a complex number. The function is tested with an assertion to ensure it works as expected."}
{"task_id": "Mbpp/591", "solution": "```python\ndef swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n    \n    Parameters:\n    lst (list): The list whose first and last elements are to be swapped.\n    \n    Returns:\n    list: A new list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return lst\n    \n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    \n    return lst\n\n# Test the function with the provided example\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\n# Additional test cases\nassert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert swap_List([7]) == [7]\nassert swap_List([]) == []\nassert swap_List([10, 20]) == [20, 10]\n\nprint(\"All test cases passed!\")\n```\n"}
{"task_id": "Mbpp/592", "solution": "```python\ndef sum_of_product(n):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial coefficients for a given n.\n    \"\"\"\n    # Function to calculate binomial coefficient C(n, k)\n    def binomial_coefficient(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        # Use the property C(n, k) = C(n-1, k-1) + C(n-1, k)\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k+1)\n    \n    return total_sum\n\n# Test the function with the given assertion\nassert sum_of_product(3) == 15\n\n# Additional test cases\nprint(sum_of_product(1))  # Output: 1\nprint(sum_of_product(2))  # Output: 4\nprint(sum_of_product(4))  # Output: 40\nprint(sum_of_product(5))  # Output: 105\n```\n\nThis script defines a function `sum_of_product` that calculates the sum of the product of consecutive binomial coefficients for a given integer `n`. The function uses a helper function `binomial_coefficient` to compute individual binomial coefficients using a recursive approach. The main function then iterates over the range of `n` to compute the required sum. The script includes an assertion to verify the correctness of the function for `n = 3` and additional test cases for further validation."}
{"task_id": "Mbpp/593", "solution": "```python\ndef removezero_ip(ip_address):\n    # Split the IP address into its components\n    parts = ip_address.split('.')\n    # Remove leading zeros from each part\n    cleaned_parts = [str(int(part)) for part in parts]\n    # Join the cleaned parts back into a single string\n    cleaned_ip = '.'.join(cleaned_parts)\n    return cleaned_ip\n\n# Test the function with the provided assertion\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\n\n# Additional test cases\nprint(removezero_ip(\"192.168.001.001\"))  # Expected: '192.168.1.1'\nprint(removezero_ip(\"010.000.000.001\"))  # Expected: '10.0.0.1'\nprint(removezero_ip(\"001.002.003.004\"))  # Expected: '1.2.3.4'\nprint(removezero_ip(\"000.000.000.000\"))  # Expected: '0.0.0.0'\n```\nThis script defines a function `removezero_ip` that takes an IP address as a string, removes any leading zeros from each segment of the IP address, and returns the cleaned IP address. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/594", "solution": "```python\ndef diff_even_odd(numbers):\n    \"\"\"\n    This function finds the difference between the first even and the first odd number in a given list.\n    \n    :param numbers: List of integers\n    :return: Difference between the first even and the first odd number\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # If both first_even and first_odd are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate the difference\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Test the function with the provided test case\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3\n\n# Additional test cases\nprint(diff_even_odd([2, 1, 4, 6, 8]))  # Output should be 1\nprint(diff_even_odd([5, 10, 15, 20]))  # Output should be 5\nprint(diff_even_odd([8, 3, 6, 7]))     # Output should be 5\n```\nThis script defines a function `diff_even_odd` that calculates the difference between the first even and the first odd number in a list. It includes a test case to verify the function's correctness and additional test cases for further validation."}
{"task_id": "Mbpp/596", "solution": "```python\nimport sys\n\ndef tuple_size(t):\n    \"\"\"\n    This function returns the size in bytes of the given tuple.\n    \n    Parameters:\n    t (tuple): The tuple whose size is to be calculated.\n    \n    Returns:\n    int: The size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(t)\n\n# Test the function with the provided assertion\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\n# Additional test cases\nprint(tuple_size(()))  # Size of an empty tuple\nprint(tuple_size((1,)))  # Size of a tuple with one element\nprint(tuple_size((1, 2, 3, 4, 5)))  # Size of a tuple with multiple integers\nprint(tuple_size((\"Hello\", \"World\")))  # Size of a tuple with strings\n```\nThis script defines a function `tuple_size` that calculates the size of a tuple in bytes using Python's `sys.getsizeof` function. It includes a test case to verify the function's correctness and additional test cases to demonstrate its usage."}
{"task_id": "Mbpp/597", "solution": "```python\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the two sorted arrays.\n    \n    :param arr1: List[int] - First sorted array\n    :param arr2: List[int] - Second sorted array\n    :param k: int - The kth position (1-based index)\n    :return: int - The kth element in the merged sorted array\n    \"\"\"\n    # Initialize pointers for both arrays\n    index1, index2 = 0, 0\n    len1, len2 = len(arr1), len(arr2)\n    \n    # We need to find the kth element, so we iterate k times\n    for _ in range(k):\n        # If one array is exhausted, take elements from the other array\n        if index1 < len1 and (index2 >= len2 or arr1[index1] <= arr2[index2]):\n            kth_element = arr1[index1]\n            index1 += 1\n        else:\n            kth_element = arr2[index2]\n            index2 += 1\n    \n    return kth_element\n\n# Test the function with the provided assertion\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n```"}
{"task_id": "Mbpp/598", "solution": "```python\ndef armstrong_number(n):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to easily iterate over digits\n    digits = str(n)\n    # Calculate the number of digits\n    num_digits = len(digits)\n    # Calculate the sum of each digit raised to the power of the number of digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == n\n\n# Test the function with the provided assertion\nassert armstrong_number(153) == True\n\n# Additional test cases\nprint(armstrong_number(370))  # True, since 3^3 + 7^3 + 0^3 = 370\nprint(armstrong_number(371))  # True, since 3^3 + 7^3 + 1^3 = 371\nprint(armstrong_number(9474)) # True, since 9^4 + 4^4 + 7^4 + 4^4 = 9474\nprint(armstrong_number(123))  # False, since 1^3 + 2^3 + 3^3 != 123\n```\n"}
{"task_id": "Mbpp/599", "solution": "```python\ndef sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers using the formula n * (n + 1) / 2\n    total_sum = n * (n + 1) // 2\n    \n    # Calculate the average by dividing the sum by n\n    average = total_sum / n\n    \n    return total_sum, average\n\n# Test the function with the provided assertion\nassert sum_average(10) == (55, 5.5)\n\n# Additional test cases\nprint(sum_average(1))  # Expected output: (1, 1.0)\nprint(sum_average(5))  # Expected output: (15, 3.0)\nprint(sum_average(100))  # Expected output: (5050, 50.5)\n```\nThis script defines a function `sum_average` that calculates the sum and average of the first `n` natural numbers. It uses the formula for the sum of the first `n` natural numbers, `n * (n + 1) / 2`, and then calculates the average by dividing the sum by `n`. The function is tested with an assertion and additional test cases to ensure correctness."}
{"task_id": "Mbpp/600", "solution": "```python\ndef is_Even(number):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \n    Parameters:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(0) == True\nassert is_Even(-2) == True\nassert is_Even(-3) == False\n\n# Example usage\nprint(is_Even(10))  # Output: True\nprint(is_Even(15))  # Output: False\n```\nThis script defines a function `is_Even` that checks if a given number is even by using the modulus operator. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/602", "solution": "```python\ndef first_repeated_char(s):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n    \n    :param s: The input string\n    :return: The first repeated character or None if no repetition is found\n    \"\"\"\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test the function with the provided example\nassert first_repeated_char(\"abcabc\") == \"a\"\n\n# Additional test cases\nassert first_repeated_char(\"abcdef\") == None  # No repeated characters\nassert first_repeated_char(\"aabbcc\") == \"a\"   # First repeated character is 'a'\nassert first_repeated_char(\"abca\") == \"a\"     # First repeated character is 'a'\nassert first_repeated_char(\"abcb\") == \"b\"     # First repeated character is 'b'\nassert first_repeated_char(\"\") == None        # Empty string, no repeated characters\nassert first_repeated_char(\"a\") == None       # Single character, no repeated characters\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `first_repeated_char` that iterates over the characters in the input string, keeping track of characters it has seen using a set. When it encounters a character that has already been seen, it returns that character as the first repeated character. If no repeated character is found, it returns `None`. The script includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/603", "solution": "```python\ndef get_ludic(n):\n    \"\"\"\n    Function to get all ludic numbers smaller than or equal to a given integer n.\n    \"\"\"\n    # Initialize the list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    \n    # Start with the first number in the list, which is always 1\n    i = 1\n    while i < len(numbers):\n        # The current number is a ludic number\n        current_ludic = numbers[i]\n        \n        # Remove every current_ludic-th number from the list, starting from the current position\n        numbers = [num for j, num in enumerate(numbers) if (j % current_ludic) != 0 or j == i]\n        \n        # Move to the next number in the list\n        i += 1\n    \n    return numbers\n\n# Test the function with the given assertion\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\n# Additional test cases\nprint(get_ludic(20))  # Output should be [1, 2, 3, 5, 7, 11, 13, 17, 19]\nprint(get_ludic(1))   # Output should be [1]\nprint(get_ludic(15))  # Output should be [1, 2, 3, 5, 7, 11, 13]\n```\n\nThis script defines a function `get_ludic` that calculates all ludic numbers up to a given integer `n`. The function uses a sieve-like method to filter out non-ludic numbers, similar to the Sieve of Eratosthenes used for finding prime numbers. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/604", "solution": "```python\ndef reverse_words(s: str) -> str:\n    # Split the string into words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list of words back into a string with spaces\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n# Test the function with the provided assertion\nassert reverse_words(\"python program\") == \"program python\"\n\n# Additional test cases\nprint(reverse_words(\"hello world\"))  # Output: \"world hello\"\nprint(reverse_words(\"a b c d e\"))    # Output: \"e d c b a\"\nprint(reverse_words(\"singleword\"))   # Output: \"singleword\"\nprint(reverse_words(\"\"))             # Output: \"\"\n```\nThis script defines a function `reverse_words` that takes a string `s` as input, splits it into words, reverses the order of the words, and then joins them back into a single string with spaces. The function is tested with the provided assertion and additional test cases to ensure it works as expected."}
{"task_id": "Mbpp/605", "solution": "```python\ndef prime_num(n):\n    \"\"\"Check if the given integer is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test the function with the provided assertion\nassert prime_num(13) == True\n\n# Additional test cases\nprint(prime_num(1))  # False, 1 is not a prime number\nprint(prime_num(2))  # True, 2 is a prime number\nprint(prime_num(3))  # True, 3 is a prime number\nprint(prime_num(4))  # False, 4 is not a prime number\nprint(prime_num(17)) # True, 17 is a prime number\nprint(prime_num(18)) # False, 18 is not a prime number\n```\nThis script defines a function `prime_num` that checks if a given integer is a prime number. It includes an assertion to verify the function works correctly for the number 13, and additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/606", "solution": "```python\nimport math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966\n\n# Example usage\nif __name__ == \"__main__\":\n    degrees = 90\n    radians = radian_degree(degrees)\n    print(f\"{degrees} degrees is equal to {radians} radians.\")\n```\nThis script defines a function `radian_degree` that converts an angle from degrees to radians using the formula \\( \\text{radians} = \\text{degrees} \\times \\frac{\\pi}{180} \\). It includes an assertion to verify that the function works correctly for an input of 90 degrees. The script also contains an example usage that prints the conversion result."}
{"task_id": "Mbpp/607", "solution": "```python\nimport re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Search for a regex pattern in a given string and return the matching substring,\n    start index, and end index.\n\n    :param text: The string to search within.\n    :param pattern: The regex pattern to search for.\n    :return: A tuple containing the matching substring, start index, and end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return (match.group(), start_index, end_index)\n    else:\n        return None\n\n# Test the function with the provided example\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\n# Additional test cases\nprint(find_literals('Hello, world!', 'world'))  # Expected: ('world', 7, 12)\nprint(find_literals('Python is fun!', 'Python'))  # Expected: ('Python', 0, 6)\nprint(find_literals('No match here', 'xyz'))  # Expected: None\n```\nThis script defines a function `find_literals` that uses the `re` module to search for a regex pattern in a given string. It returns a tuple containing the matching substring, start index, and end index if a match is found, or `None` if no match is found. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/608", "solution": "```python\ndef bell_Number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case\n    bell[0][0] = 1\n    \n    # Fill the Bell triangle\n    for i in range(1, n+1):\n        # Explicitly put the last value of the previous row as the first value of the current row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first element of the nth row\n    return bell[n][0]\n\n# Test the function with the provided assertion\nassert bell_Number(2) == 2\n\n# Additional test cases\nprint(bell_Number(0))  # Output: 1\nprint(bell_Number(1))  # Output: 1\nprint(bell_Number(3))  # Output: 5\nprint(bell_Number(4))  # Output: 15\nprint(bell_Number(5))  # Output: 52\n```\n\nThis script defines a function `bell_Number` that calculates the nth Bell number using a dynamic programming approach. The Bell numbers are stored in a 2D list, where each row represents a level in the Bell triangle. The function then returns the first element of the nth row, which is the nth Bell number. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/610", "solution": "```python\ndef remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the list.\n\n    Parameters:\n    lst (list): The list from which to remove the element.\n    k (int): The index of the element to remove.\n\n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index out of range\")\n    return lst[:k] + lst[k+1:]\n\n# Test the function with the provided example\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n\n# Additional test cases\nassert remove_kth_element([10, 20, 30, 40, 50], 0) == [20, 30, 40, 50]\nassert remove_kth_element([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert remove_kth_element(['a', 'b', 'c', 'd'], 2) == ['a', 'b', 'd']\nassert remove_kth_element([1], 0) == []\n```"}
{"task_id": "Mbpp/611", "solution": "```python\ndef max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value of the n-th column in the given matrix.\n\n    :param matrix: List of lists where each sublist represents a row in the matrix.\n    :param n: The index of the column to find the maximum value of.\n    :return: The maximum value in the n-th column.\n    \"\"\"\n    # Extract the n-th column from the matrix\n    nth_column = [row[n] for row in matrix]\n    \n    # Return the maximum value in the n-th column\n    return max(nth_column)\n\n# Test the function with the provided assertion\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\n# Additional test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 8\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1) == 9\nassert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9\nassert max_of_nth([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 1) == 80\n```"}
{"task_id": "Mbpp/612", "solution": "```python\ndef merge(list_of_lists):\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists\n    return [first_elements, second_elements]\n\n# Test the function with the provided example\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\n# Additional test cases\nprint(merge([['1', '2'], ['3', '4'], ['5', '6']]))  # Expected: [['1', '3', '5'], ['2', '4', '6']]\nprint(merge([['apple', 'banana'], ['carrot', 'date']]))  # Expected: [['apple', 'carrot'], ['banana', 'date']]\nprint(merge([['cat', 'dog']]))  # Expected: [['cat'], ['dog']]\nprint(merge([]))  # Expected: [[], []]\n```"}
{"task_id": "Mbpp/614", "solution": "```python\ndef cumulative_sum(tuple_list):\n    \"\"\"\n    This function takes a list of tuples and returns the cumulative sum of all the values present in the tuples.\n    \n    :param tuple_list: List of tuples containing integers\n    :return: Integer representing the cumulative sum of all values in the tuples\n    \"\"\"\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function with the provided example\nassert cumulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\n# Additional test cases\nprint(cumulative_sum([(1, 2), (3, 4), (5,)]))  # Output should be 15\nprint(cumulative_sum([(0, 0), (0, 0), (0, 0)]))  # Output should be 0\nprint(cumulative_sum([(10,), (20, 30), (40, 50, 60)]))  # Output should be 210\nprint(cumulative_sum([]))  # Output should be 0, as there are no tuples\n```\n"}
{"task_id": "Mbpp/615", "solution": "```python\ndef average_tuple(tuples):\n    \"\"\"\n    This function takes a tuple of tuples and returns a list containing the average value of each tuple.\n    \n    :param tuples: A tuple of tuples, where each inner tuple contains numeric values.\n    :return: A list of average values for each inner tuple.\n    \"\"\"\n    averages = []\n    for t in tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages\n\n# Test the function with the provided assertion\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]\n\n# Example usage\nif __name__ == \"__main__\":\n    tuples = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\n    print(\"Averages:\", average_tuple(tuples))\n```\n"}
{"task_id": "Mbpp/616", "solution": "```python\ndef tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Takes two tuples of the same length and performs element-wise modulo operation.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple of integers.\n    tuple2 (tuple): The second tuple of integers.\n    \n    Returns:\n    tuple: A tuple containing the result of element-wise modulo operation.\n    \"\"\"\n    # Ensure both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    # Perform element-wise modulo operation\n    result = tuple(a % b for a, b in zip(tuple1, tuple2))\n    \n    return result\n\n# Test the function with the provided example\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\n# Additional test cases\nassert tuple_modulo((12, 15, 9), (3, 5, 2)) == (0, 0, 1)\nassert tuple_modulo((20, 30, 40), (7, 8, 9)) == (6, 6, 4)\nassert tuple_modulo((0, 0, 0), (1, 1, 1)) == (0, 0, 0)\n```"}
{"task_id": "Mbpp/618", "solution": "```python\ndef div_list(list1, list2):\n    \"\"\"\n    Divides elements of list1 by elements of list2 element-wise.\n    \n    Parameters:\n    list1 (list of numbers): The dividend list.\n    list2 (list of numbers): The divisor list.\n    \n    Returns:\n    list of floats: A new list containing the result of element-wise division.\n    \n    Raises:\n    ValueError: If the lists are not of the same length.\n    ZeroDivisionError: If an element in list2 is zero.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for a, b in zip(list1, list2):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero encountered in list2.\")\n        result.append(a / b)\n    \n    return result\n\n# Test the function with the provided assertion\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n\n# Example usage\nlist1 = [10, 20, 30]\nlist2 = [2, 4, 5]\nprint(div_list(list1, list2))  # Output: [5.0, 5.0, 6.0]\n```\nThis script defines a function `div_list` that takes two lists as input and returns a new list containing the result of dividing each element of the first list by the corresponding element of the second list. It includes error handling for mismatched list lengths and division by zero. The function is tested with an assertion and an example usage is provided."}
{"task_id": "Mbpp/619", "solution": "```python\ndef move_num(s):\n    # Separate letters and numbers\n    letters = []\n    numbers = []\n    \n    # Iterate over each character in the string\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    \n    # Join letters and numbers separately and concatenate them\n    return ''.join(letters) + ''.join(numbers)\n\n# Test the function with the provided test case\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\n# Additional test cases\nprint(move_num('abc123def456'))  # Expected: 'abcdef123456'\nprint(move_num('noNumbersHere'))  # Expected: 'noNumbersHere'\nprint(move_num('123456'))        # Expected: '123456'\nprint(move_num('a1b2c3'))        # Expected: 'abc123'\n```"}
{"task_id": "Mbpp/620", "solution": "```python\ndef largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    n = len(nums)\n    dp = [1] * n  # dp[i] will store the size of the largest subset ending with nums[i]\n\n    for i in range(n):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n# Test the function with the provided test case\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\n\n# Additional test cases\nprint(largest_subset([1, 2, 4, 8, 16]))  # Should return 5, as all are divisible by each other\nprint(largest_subset([2, 3, 5, 7, 11]))  # Should return 1, as no two numbers are divisible\nprint(largest_subset([1, 2, 3, 4, 6, 12]))  # Should return 4, subset could be [1, 2, 4, 12]\nprint(largest_subset([10, 5, 3, 15, 20]))  # Should return 3, subset could be [5, 10, 20]\n```\n\nThis script defines a function `largest_subset` that calculates the size of the largest subset of a list of numbers such that every pair in the subset is divisible. The function uses dynamic programming to build up the solution, storing the size of the largest divisible subset ending at each element in the list. The function is tested with the provided test case and additional test cases to ensure correctness."}
{"task_id": "Mbpp/622", "solution": "```python\ndef get_median(arr1, arr2, n):\n    \"\"\"\n    Function to find the median of two sorted arrays of the same size.\n    \n    Parameters:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of each list.\n    \n    Returns:\n    float: The median of the two sorted lists.\n    \"\"\"\n    # Initialize pointers for both arrays\n    i = 0  # Current index of arr1\n    j = 0  # Current index of arr2\n    \n    # Since there are 2n elements, median will be average of elements at index n-1 and n\n    m1 = -1  # To store the element at index n-1\n    m2 = -1  # To store the element at index n\n    \n    # Loop through the arrays to find the median\n    for count in range(n + 1):\n        # If all elements of arr1 are smaller than smallest (or first) element of arr2\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        \n        # If all elements of arr2 are smaller than smallest (or first) element of arr1\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        \n        # Compare elements of arr1 and arr2 to find the median\n        if arr1[i] <= arr2[j]:\n            m1 = m2  # Store the previous median\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2  # Store the previous median\n            m2 = arr2[j]\n            j += 1\n    \n    # Return the average of the two middle elements\n    return (m1 + m2) / 2\n\n# Test the function with the provided test case\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```"}
{"task_id": "Mbpp/623", "solution": "```python\ndef nth_nums(numbers, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n, and returns a new list\n    where each number is raised to the n-th power.\n\n    :param numbers: List of numbers\n    :param n: The power to which each number should be raised\n    :return: A list of numbers raised to the n-th power\n    \"\"\"\n    return [x ** n for x in numbers]\n\n# Test the function with the provided assertion\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# Example usage\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 2\n    result = nth_nums(numbers, n)\n    print(f\"The {n}-th power of each number in the list is: {result}\")\n```\n"}
{"task_id": "Mbpp/624", "solution": "```python\ndef is_upper(s):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    s (str): The string to convert.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return s.upper()\n\n# Test the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"hello world\") == \"HELLO WORLD\"\nassert is_upper(\"Python3\") == \"PYTHON3\"\nassert is_upper(\"123abc\") == \"123ABC\"\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `is_upper` that takes a string `s` as input and returns the uppercase version of that string using the `upper()` method. It includes an assertion to test the function with the example provided, as well as additional test cases to ensure the function works correctly."}
{"task_id": "Mbpp/626", "solution": "```python\nimport math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    Parameters:\n    radius (float): The radius of the semicircle. Must be a non-negative number.\n    \n    Returns:\n    float: The area of the largest inscribed triangle, or None if the radius is negative.\n    \"\"\"\n    if radius < 0:\n        return None\n    \n    # The largest triangle that can be inscribed in a semicircle is a right triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # The base and height of this triangle are both equal to the radius of the semicircle.\n    base = radius\n    height = radius\n    \n    # Area of the triangle = 0.5 * base * height\n    area = 0.5 * base * height\n    return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0.0\nassert triangle_area(1) == 0.5\nassert triangle_area(2) == 2.0\nassert triangle_area(3) == 4.5\n\n# Example usage\nprint(triangle_area(5))  # Output: 12.5\n```\n\nThis script defines a function `triangle_area` that calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius. The function returns `None` if the radius is negative, as a semicircle with a negative radius is not valid. The largest inscribed triangle is a right triangle with its base and height equal to the radius of the semicircle. The script includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/628", "solution": "```python\ndef replace_spaces(input_string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Parameters:\n    input_string (str): The string in which spaces need to be replaced.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return input_string.replace(' ', '%20')\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"Hello World\") == 'Hello%20World'\nassert replace_spaces(\"NoSpacesHere\") == 'NoSpacesHere'\nassert replace_spaces(\" Leading and trailing spaces \") == '%20Leading%20and%20trailing%20spaces%20'\nassert replace_spaces(\"\") == ''\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `replace_spaces` that takes a string as input and replaces all spaces with '%20'. It includes assertions to test the function with various cases, ensuring it behaves as expected."}
{"task_id": "Mbpp/629", "solution": "```python\ndef find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers from the input list.\n\n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function with the provided assertion\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\n\n# Additional test cases\nprint(find_even_numbers([10, 15, 20, 25, 30]))  # Output: [10, 20, 30]\nprint(find_even_numbers([1, 3, 5, 7]))          # Output: []\nprint(find_even_numbers([2, 4, 6, 8, 10]))      # Output: [2, 4, 6, 8, 10]\nprint(find_even_numbers([]))                    # Output: []\n```\nThis script defines a function `find_even_numbers` that takes a list of integers and returns a list of even numbers from that list. It includes an assertion to test the function with the example provided, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/630", "solution": "```python\ndef get_coordinates(coord):\n    \"\"\"\n    Given a coordinate tuple (x, y), this function returns a list of all adjacent coordinates\n    including the coordinate itself. The adjacent coordinates are those that differ by at most\n    1 in either the x or y direction.\n    \n    :param coord: A tuple (x, y) representing the coordinate.\n    :return: A list of lists, where each inner list is a coordinate [x, y].\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n\n    # Iterate over the range x-1 to x+1 and y-1 to y+1 to get all adjacent coordinates\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            adjacent_coords.append([i, j])\n\n    return adjacent_coords\n\n# Test the function with the provided assertion\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\n# Example usage\nprint(get_coordinates((3, 4)))\n```\nThis script defines a function `get_coordinates` that takes a tuple representing a coordinate and returns a list of all adjacent coordinates, including the coordinate itself. The function is tested with an assertion to ensure it works as expected."}
{"task_id": "Mbpp/631", "solution": "```python\ndef replace_spaces(s):\n    # Create a translation table for replacing spaces with underscores and vice versa\n    translation_table = str.maketrans(' _', '_ ')\n    # Use the translate method to apply the translation table to the string\n    return s.translate(translation_table)\n\n# Test the function with the provided example\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\n# Additional test cases\nassert replace_spaces('Hello World') == 'Hello_World'\nassert replace_spaces('Python_is_fun') == 'Python is fun'\nassert replace_spaces('  Leading and trailing  ') == '__Leading_and_trailing__'\nassert replace_spaces('NoSpaces') == 'NoSpaces'\n\n# Print results for visual confirmation\nprint(replace_spaces('Jumanji The Jungle'))  # Output: Jumanji_The_Jungle\nprint(replace_spaces('Hello World'))         # Output: Hello_World\nprint(replace_spaces('Python_is_fun'))       # Output: Python is fun\nprint(replace_spaces('  Leading and trailing  '))  # Output: __Leading_and_trailing__\nprint(replace_spaces('NoSpaces'))            # Output: NoSpaces\n```\nThis script defines a function `replace_spaces` that replaces spaces with underscores and underscores with spaces in a given string. It uses the `str.maketrans` method to create a translation table and the `translate` method to apply this table to the input string. The function is tested with several test cases to ensure it works as expected."}
{"task_id": "Mbpp/632", "solution": "```python\ndef move_zero(lst):\n    \"\"\"\n    This function takes a list of integers and moves all zeroes to the end\n    while maintaining the order of non-zero elements.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    list: A list with all zeroes moved to the end.\n    \"\"\"\n    # Count the number of zeroes in the list\n    zero_count = lst.count(0)\n    \n    # Create a new list with all non-zero elements\n    non_zero_list = [num for num in lst if num != 0]\n    \n    # Append the zeroes to the end of the non-zero list\n    non_zero_list.extend([0] * zero_count)\n    \n    return non_zero_list\n\n# Test the function with the provided test case\nassert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]\n\n# Additional test cases\nprint(move_zero([0, 1, 0, 3, 12]))  # Output should be [1, 3, 12, 0, 0]\nprint(move_zero([0, 0, 0, 0, 0]))   # Output should be [0, 0, 0, 0, 0]\nprint(move_zero([1, 2, 3, 4, 5]))   # Output should be [1, 2, 3, 4, 5]\nprint(move_zero([]))                # Output should be []\n```\n"}
{"task_id": "Mbpp/633", "solution": "```python\ndef pair_xor_sum(arr, n):\n    \"\"\"\n    Function to find the sum of XOR of all pairs of numbers in the given list.\n    \n    Parameters:\n    arr (list): List of integers.\n    n (int): Length of the list.\n    \n    Returns:\n    int: Sum of XOR of all pairs.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n# Test the function with the provided test case\nassert pair_xor_sum([5, 9, 7, 6], 4) == 47\n\n# Additional test cases\nprint(pair_xor_sum([1, 2, 3], 3))  # Expected output: 6 (1^2 + 1^3 + 2^3 = 3 + 2 + 1 = 6)\nprint(pair_xor_sum([0, 0, 0], 3))  # Expected output: 0 (0^0 + 0^0 + 0^0 = 0)\nprint(pair_xor_sum([1, 1, 1, 1], 4))  # Expected output: 0 (all pairs XOR to 0)\nprint(pair_xor_sum([10, 20, 30], 3))  # Expected output: 62 (10^20 + 10^30 + 20^30 = 30 + 20 + 12 = 62)\n```\n\nThis script defines a function `pair_xor_sum` that calculates the sum of XOR for all unique pairs in a given list of integers. The function iterates over each pair of elements in the list, computes their XOR, and accumulates the result. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/635", "solution": "```python\ndef heapify(arr, n, i):\n    \"\"\"\n    Helper function to maintain the heap property of a subtree rooted at index i.\n    :param arr: List of elements to be sorted\n    :param n: Size of the heap\n    :param i: Index of the root element of the subtree\n    \"\"\"\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1  # left = 2*i + 1\n    right = 2 * i + 2  # right = 2*i + 2\n\n    # If left child is larger than root\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    # If right child is larger than largest so far\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    # If largest is not root\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n\n        # Recursively heapify the affected sub-tree\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    \"\"\"\n    Function to perform heap sort on a list.\n    :param arr: List of elements to be sorted\n    :return: Sorted list\n    \"\"\"\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # swap\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"}
{"task_id": "Mbpp/637", "solution": "```python\ndef noprofit_noloss(cost_price, selling_price):\n    \"\"\"\n    This function checks whether there is no profit and no loss for the given cost price and selling price.\n    \n    Parameters:\n    cost_price (float): The cost price of the item.\n    selling_price (float): The selling price of the item.\n    \n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return cost_price == selling_price\n\n# Test the function with the provided assertion\nassert noprofit_noloss(1500, 1200) == False\n\n# Additional test cases\nassert noprofit_noloss(1000, 1000) == True\nassert noprofit_noloss(2000, 2500) == False\nassert noprofit_noloss(500, 500) == True\nassert noprofit_noloss(750, 750.0) == True  # Testing with float\n```"}
{"task_id": "Mbpp/638", "solution": "```python\ndef wind_chill(velocity_kmh, temperature_celsius):\n    \"\"\"\n    Calculate the wind chill index given the wind velocity in km/h and temperature in Celsius.\n    The formula used is the one provided by Environment Canada for temperatures in Celsius and wind speeds in km/h.\n    The result is rounded to the nearest integer.\n\n    Parameters:\n    velocity_kmh (float): Wind velocity in kilometers per hour.\n    temperature_celsius (float): Temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    if velocity_kmh < 4.8:\n        # If the wind speed is less than 4.8 km/h, the wind chill effect is negligible\n        return round(temperature_celsius)\n    \n    # Wind chill formula for Celsius and km/h\n    wind_chill_index = (13.12 + 0.6215 * temperature_celsius \n                        - 11.37 * (velocity_kmh ** 0.16) \n                        + 0.3965 * temperature_celsius * (velocity_kmh ** 0.16))\n    \n    return round(wind_chill_index)\n\n# Test the function with the provided assertion\nassert wind_chill(120, 35) == 40\n\n# Example usage\nprint(wind_chill(120, 35))  # Output should be 40\n```\n\nThis script defines a function `wind_chill` that calculates the wind chill index using the formula provided by Environment Canada, which is suitable for temperatures in Celsius and wind speeds in km/h. The function rounds the result to the nearest integer and includes a test case to verify its correctness."}
{"task_id": "Mbpp/639", "solution": "```python\ndef sample_nam(names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length\n\n# Test the function with the provided test case\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n\n# Additional test cases\nprint(sample_nam(['Alice', 'bob', 'Charlie', 'dave']))  # Should return 11 (Alice + Charlie)\nprint(sample_nam(['eve', 'Frank', 'George', 'harry']))  # Should return 11 (Frank + George)\nprint(sample_nam(['Ivy', 'jack', 'Kara']))              # Should return 7 (Ivy + Kara)\nprint(sample_nam(['lisa', 'Mona', 'nina']))             # Should return 4 (Mona)\n```\n"}
{"task_id": "Mbpp/641", "solution": "```python\ndef is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    A nonagonal number is a figurate number that extends the concept of\n    triangular and square numbers to the nonagon (a nine-sided polygon).\n    The formula for the nth nonagonal number is:\n    \n    N(n) = n * (7n - 5) / 2\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (7 * n - 5) // 2\n\n# Test the function with the provided assertion\nassert is_nonagonal(10) == 325\n\n# Additional test cases\nprint(is_nonagonal(1))  # Output: 1\nprint(is_nonagonal(2))  # Output: 9\nprint(is_nonagonal(3))  # Output: 24\nprint(is_nonagonal(4))  # Output: 46\nprint(is_nonagonal(5))  # Output: 75\n```\n\nThis script defines a function `is_nonagonal` that calculates the nth nonagonal number using the formula \\( N(n) = \\frac{n(7n - 5)}{2} \\). It includes a test case to verify that the function works correctly for the 10th nonagonal number, which should be 325. Additional test cases are provided to demonstrate the function's correctness for other values of n."}
{"task_id": "Mbpp/643", "solution": "```python\ndef text_match_wordz_middle(s):\n    \"\"\"\n    This function checks if the string contains the letter 'z', except at the start and end of the word.\n    \n    Parameters:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if 'z' is found in the middle of the string, False otherwise.\n    \"\"\"\n    # Check if the string is long enough to have a middle\n    if len(s) <= 2:\n        return False\n    \n    # Check for 'z' in the middle of the string\n    for i in range(1, len(s) - 1):\n        if s[i] == 'z':\n            return True\n    \n    return False\n\n# Test the function with the provided assertion\nassert text_match_wordz_middle(\"pythonzabc.\") == True\n\n# Additional test cases\nassert text_match_wordz_middle(\"zabc\") == False  # 'z' at the start\nassert text_match_wordz_middle(\"abcz\") == False  # 'z' at the end\nassert text_match_wordz_middle(\"abc\") == False   # no 'z' at all\nassert text_match_wordz_middle(\"abczdef\") == True  # 'z' in the middle\nassert text_match_wordz_middle(\"a\") == False     # single character\nassert text_match_wordz_middle(\"zz\") == False    # 'z' at both start and end\nassert text_match_wordz_middle(\"azb\") == True    # 'z' in the middle\n```"}
{"task_id": "Mbpp/644", "solution": "```python\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses the elements of the array up to the k-th position (0-based index).\n    \n    Parameters:\n    arr (list): The list of elements to be partially reversed.\n    k (int): The position up to which the array should be reversed.\n    \n    Returns:\n    list: The array with elements reversed up to the k-th position.\n    \"\"\"\n    # Ensure k is within the bounds of the array\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"k must be within the bounds of the array indices.\")\n    \n    # Reverse the portion of the array from start to k (inclusive)\n    reversed_part = arr[:k+1][::-1]\n    # Concatenate the reversed part with the rest of the array\n    return reversed_part + arr[k+1:]\n\n# Test the function with the provided example\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n\n# Additional test cases\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 2))  # Output: [3, 2, 1, 4, 5, 6]\nprint(reverse_Array_Upto_K([10, 20, 30, 40, 50], 3))  # Output: [40, 30, 20, 10, 50]\nprint(reverse_Array_Upto_K([7, 8, 9], 0))  # Output: [7, 8, 9]\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5], 4))  # Output: [5, 4, 3, 2, 1]\n```\n"}
{"task_id": "Mbpp/720", "solution": "```python\ndef add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    This function takes a tuple and a dictionary as input and returns a new tuple\n    with the dictionary added as the last element of the tuple.\n    \n    Parameters:\n    tup (tuple): The original tuple.\n    dictionary (dict): The dictionary to add to the tuple.\n    \n    Returns:\n    tuple: A new tuple with the dictionary added as the last element.\n    \"\"\"\n    # Create a new tuple by concatenating the original tuple with a single-element tuple containing the dictionary\n    return tup + (dictionary,)\n\n# Test the function with the provided example\nresult = add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3})\nassert result == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n# Print the result to verify the output\nprint(result)\n```\nThis script defines a function `add_dict_to_tuple` that takes a tuple and a dictionary as arguments and returns a new tuple with the dictionary added as the last element. The function is tested with an example, and the result is printed to verify the output."}
{"task_id": "Mbpp/721", "solution": "```python\ndef maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    count = [[0] * N for _ in range(N)]\n\n    # Initialize the starting point\n    dp[0][0] = matrix[0][0]\n    count[0][0] = 1\n\n    # Fill the first row\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n        count[0][j] = count[0][j-1] + 1\n\n    # Fill the first column\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        count[i][0] = count[i-1][0] + 1\n\n    # Fill the rest of the dp and count tables\n    for i in range(1, N):\n        for j in range(1, N):\n            if dp[i-1][j] > dp[i][j-1]:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n                count[i][j] = count[i][j-1] + 1\n\n    # Calculate the maximum average\n    total_cost = dp[N-1][N-1]\n    total_cells = count[N-1][N-1]\n    max_average = total_cost / total_cells\n\n    return max_average\n\n# Test the function with the provided example\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\nThis script defines a function `maxAverageOfPath` that calculates the maximum average path cost in a given square matrix. The function uses dynamic programming to compute the maximum path cost and the number of cells in the path, then calculates the average by dividing the total cost by the number of cells. The function is tested with the provided example to ensure correctness."}
{"task_id": "Mbpp/722", "solution": "```python\ndef filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on minimum height and weight criteria.\n\n    Parameters:\n    students (dict): A dictionary with student names as keys and a tuple of (height, weight) as values.\n    min_height (float): The minimum height requirement.\n    min_weight (float): The minimum weight requirement.\n\n    Returns:\n    dict: A dictionary of students who meet both the height and weight criteria.\n    \"\"\"\n    # Initialize an empty dictionary to store the filtered students\n    filtered_students = {}\n\n    # Iterate over the students dictionary\n    for student, (height, weight) in students.items():\n        # Check if both height and weight are above the minimum requirements\n        if height > min_height and weight > min_weight:\n            # Add the student to the filtered dictionary\n            filtered_students[student] = (height, weight)\n\n    return filtered_students\n\n# Test the function with the provided example\nstudents_data = {\n    'Cierra Vega': (6.2, 70),\n    'Alden Cantrell': (5.9, 65),\n    'Kierra Gentry': (6.0, 68),\n    'Pierre Cox': (5.8, 66)\n}\nmin_height = 6.0\nmin_weight = 70\n\n# Assert the function works as expected\nassert filter_data(students_data, min_height, min_weight) == {'Cierra Vega': (6.2, 70)}\n\n# Print the result for verification\nprint(filter_data(students_data, min_height, min_weight))\n```\nThis script defines a function `filter_data` that filters students based on given minimum height and weight criteria. It then tests the function with a sample input to ensure it works as expected."}
{"task_id": "Mbpp/723", "solution": "```python\ndef count_same_pair(list1, list2):\n    \"\"\"\n    This function takes two lists of the same length and returns the count of indices where the lists have the same values.\n    \n    Parameters:\n    list1 (list): The first list of elements.\n    list2 (list): The second list of elements, must be of the same length as list1.\n    \n    Returns:\n    int: The count of indices where the elements in list1 and list2 are the same.\n    \"\"\"\n    # Ensure both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    # Initialize a counter for the same values\n    count = 0\n    \n    # Iterate over the lists and compare elements at each index\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    \n    return count\n\n# Test the function with the provided example\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\n\n# Additional test cases\nprint(count_same_pair([1, 2, 3], [1, 2, 3]))  # Output should be 3\nprint(count_same_pair([1, 2, 3], [3, 2, 1]))  # Output should be 1\nprint(count_same_pair([1, 2, 3, 4], [1, 2, 3, 4]))  # Output should be 4\nprint(count_same_pair([1, 2, 3, 4], [4, 3, 2, 1]))  # Output should be 0\n```"}
{"task_id": "Mbpp/724", "solution": "```python\ndef power_base_sum(base, power):\n    # Calculate base raised to the power\n    result = base ** power\n    \n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    \n    # Calculate the sum of all digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    \n    return digit_sum\n\n# Test the function with the provided assertion\nassert power_base_sum(2, 100) == 115\n\n# Example usage\nif __name__ == \"__main__\":\n    base = 2\n    power = 100\n    print(f\"The sum of the digits of {base}^{power} is {power_base_sum(base, power)}\")\n```\n\nThis script defines a function `power_base_sum` that calculates the sum of the digits of a number obtained by raising `base` to the `power`. It includes an assertion to verify the function works as expected for the given example. The script also includes an example usage in the `__main__` block."}
{"task_id": "Mbpp/725", "solution": "```python\ndef extract_quotation(s):\n    import re\n    # Use regular expression to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test the function with the provided example\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\n# Additional test cases\nprint(extract_quotation('The \"quick\" brown \"fox\" jumps \"over\" the \"lazy\" dog'))  # ['quick', 'fox', 'over', 'lazy']\nprint(extract_quotation('No quotes here'))  # []\nprint(extract_quotation('\"Single\" quote at the \"start\"'))  # ['Single', 'start']\nprint(extract_quotation('Ends with a \"quote\"'))  # ['quote']\n```\n\nThis script defines a function `extract_quotation` that uses a regular expression to find and return all substrings enclosed in double quotes from a given string. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/726", "solution": "```python\ndef multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers and returns a new tuple where each element is the product\n    of consecutive elements from the input tuple.\n\n    :param t: A tuple of numbers (t_1, t_2, ..., t_{N+1})\n    :return: A tuple of length N where each element is t_i * t_{i+1}\n    \"\"\"\n    # Calculate the length of the resulting tuple\n    n = len(t) - 1\n    \n    # Use a list comprehension to generate the products of consecutive elements\n    result = tuple(t[i] * t[i+1] for i in range(n))\n    \n    return result\n\n# Test the function with the provided example\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\n# Additional test cases\nprint(multiply_elements((2, 3, 4)))  # Expected output: (6, 12)\nprint(multiply_elements((0, 1, 2, 3)))  # Expected output: (0, 2, 6)\nprint(multiply_elements((10, 20)))  # Expected output: (200,)\nprint(multiply_elements((5,)))  # Expected output: ()\n```\n"}
{"task_id": "Mbpp/728", "solution": "```python\ndef sum_list(list1, list2):\n    \"\"\"\n    Takes two lists of equal length and returns a new list where each element is the sum of the elements\n    at the corresponding positions in the input lists.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A list containing the sums of the corresponding elements of list1 and list2.\n    \"\"\"\n    # Check if the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # Use a list comprehension to sum corresponding elements\n    return [a + b for a, b in zip(list1, list2)]\n\n# Test the function with the provided assertion\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\n\n# Example usage\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    result = sum_list(list1, list2)\n    print(\"The sum of the lists is:\", result)\n```\n"}
{"task_id": "Mbpp/730", "solution": "```python\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result\n\n# Test the function with the provided assertion\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\n# Additional test cases\nprint(consecutive_duplicates([1, 1, 1, 1, 1]))  # Output: [1]\nprint(consecutive_duplicates([1, 2, 2, 3, 3, 3, 4]))  # Output: [1, 2, 3, 4]\nprint(consecutive_duplicates([]))  # Output: []\nprint(consecutive_duplicates([1]))  # Output: [1]\nprint(consecutive_duplicates([1, 2, 3, 4, 5]))  # Output: [1, 2, 3, 4, 5]\n```\n"}
{"task_id": "Mbpp/731", "solution": "```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\n\n# Test the function with the given assertion\nassert lateralsurface_cone(5, 12) == 204.20352248333654\n\n# Example usage\nif __name__ == \"__main__\":\n    radius = 5\n    height = 12\n    print(f\"The lateral surface area of the cone with radius {radius} and height {height} is {lateralsurface_cone(radius, height)}\")\n```\nThis script defines a function `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \\( \\pi \\times r \\times l \\), where \\( l \\) is the slant height of the cone calculated as \\( \\sqrt{r^2 + h^2} \\). The function is tested with an assertion to ensure it returns the expected result."}
{"task_id": "Mbpp/732", "solution": "```python\ndef replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots in the input text with a colon.\n\n    Parameters:\n    text (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    # Define the characters to be replaced\n    chars_to_replace = \" ,.\"\n    \n    # Use str.replace in a loop to replace each character with a colon\n    for char in chars_to_replace:\n        text = text.replace(char, ':')\n    \n    return text\n\n# Test the function with the provided assertion\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\n\n# Additional test cases\nprint(replace_specialchar('Hello, world.'))  # Expected: 'Hello::world:'\nprint(replace_specialchar('No special chars'))  # Expected: 'No:special:chars'\nprint(replace_specialchar('Comma, space and dot.'))  # Expected: 'Comma::space:and:dot:'\nprint(replace_specialchar('Multiple   spaces'))  # Expected: 'Multiple:::::spaces'\n```\nThis script defines a function `replace_specialchar` that replaces spaces, commas, and dots in a given string with colons. It includes an assertion to test the function with the example provided, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/733", "solution": "```python\ndef find_first_occurrence(arr, target):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number in a sorted array.\n    \n    :param arr: List[int] - A sorted list of integers\n    :param target: int - The target number to find\n    :return: int - The index of the first occurrence of the target number, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Test the function with the provided assertion\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\nThis script defines a function `find_first_occurrence` that uses a binary search approach to efficiently find the index of the first occurrence of a target number in a sorted array. The function returns the index if the target is found, or -1 if it is not present in the array. The provided assertion tests the function with a specific example."}
{"task_id": "Mbpp/734", "solution": "```python\ndef sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    This function calculates the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n\n    # Iterate over all possible sublists\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total_sum += product\n\n    return total_sum\n\n# Test the function with the provided example\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\n\n# Additional test cases\nprint(sum_Of_Subarray_Prod([1, 2, 3]))  # Output: 20\nprint(sum_Of_Subarray_Prod([1, 2]))     # Output: 5\nprint(sum_Of_Subarray_Prod([2, 3, 4]))  # Output: 50\nprint(sum_Of_Subarray_Prod([1]))        # Output: 1\nprint(sum_Of_Subarray_Prod([]))         # Output: 0\n```\n\nThis script defines a function `sum_Of_Subarray_Prod` that calculates the sum of products of all possible sublists of a given list. It iterates over all possible starting points of sublists and calculates the product of elements for each sublist, adding it to the total sum. The function is tested with the provided example and additional test cases."}
{"task_id": "Mbpp/735", "solution": "```python\ndef toggle_middle_bits(n):\n    \"\"\"\n    Toggle all bits of the number except the first and the last bit.\n    \n    Parameters:\n    n (int): The input number whose middle bits are to be toggled.\n    \n    Returns:\n    int: The number after toggling the middle bits.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]  # Remove the '0b' prefix\n    \n    # If the number has less than 3 bits, toggling middle bits doesn't make sense\n    if len(binary_str) < 3:\n        return n\n    \n    # Extract the first and last bits\n    first_bit = binary_str[0]\n    last_bit = binary_str[-1]\n    \n    # Extract the middle bits\n    middle_bits = binary_str[1:-1]\n    \n    # Toggle the middle bits\n    toggled_middle_bits = ''.join('1' if bit == '0' else '0' for bit in middle_bits)\n    \n    # Reconstruct the binary string with toggled middle bits\n    toggled_binary_str = first_bit + toggled_middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_binary_str, 2)\n\n# Test the function with the provided assertion\nassert toggle_middle_bits(9) == 15\n\n# Additional test cases\nprint(toggle_middle_bits(9))  # Output: 15\nprint(toggle_middle_bits(0))  # Output: 0 (no middle bits to toggle)\nprint(toggle_middle_bits(1))  # Output: 1 (no middle bits to toggle)\nprint(toggle_middle_bits(2))  # Output: 2 (no middle bits to toggle)\nprint(toggle_middle_bits(6))  # Output: 6 (binary 110 -> 110, no middle bits to toggle)\nprint(toggle_middle_bits(14)) # Output: 11 (binary 1110 -> 1011)\n```\nThis script defines a function `toggle_middle_bits` that toggles all bits of a given integer except the first and last bits. It includes a test case to verify the function's correctness and additional test cases to demonstrate its behavior with different inputs."}
{"task_id": "Mbpp/736", "solution": "```python\ndef left_insertion(arr, target):\n    \"\"\"\n    This function returns the index at which the target should be inserted to maintain sorted order.\n    It uses a binary search approach to find the leftmost insertion point.\n    \n    :param arr: List of sorted integers\n    :param target: Integer value to find the insertion point for\n    :return: Index at which the target should be inserted\n    \"\"\"\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left\n\n# Test the function with the provided example\nassert left_insertion([1, 2, 4, 5], 6) == 4\n\n# Additional test cases\nassert left_insertion([1, 2, 4, 5], 3) == 2\nassert left_insertion([1, 2, 4, 5], 0) == 0\nassert left_insertion([1, 2, 4, 5], 5) == 3\nassert left_insertion([], 1) == 0\nassert left_insertion([1, 2, 4, 5], 1) == 0\n```\n\nThis script defines a function `left_insertion` that uses a binary search algorithm to find the leftmost insertion point for a given target in a sorted list. The function is tested with several test cases to ensure its correctness."}
{"task_id": "Mbpp/737", "solution": "```python\nimport re\n\ndef check_str(s):\n    \"\"\"\n    This function checks if the given string starts with a vowel using regex.\n    \n    Parameters:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    # Define a regex pattern to match strings starting with a vowel (case insensitive)\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Use re.match to check if the string starts with a vowel\n    return bool(re.match(pattern, s))\n\n# Test the function with an example\nassert check_str(\"annie\") == True\nassert check_str(\"bob\") == False\nassert check_str(\"Eve\") == True\nassert check_str(\"umbrella\") == True\nassert check_str(\"Zebra\") == False\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `check_str` that uses a regular expression to determine if a given string starts with a vowel. The function is tested with several assertions to ensure it works correctly."}
{"task_id": "Mbpp/739", "solution": "```python\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    A triangular number is a number that can be represented as a triangle with dots.\n    The nth triangular number is given by the formula: T(n) = n * (n + 1) / 2\n    \"\"\"\n    index = 1\n    while True:\n        # Calculate the nth triangular number\n        triangular_number = index * (index + 1) // 2\n        \n        # Check the number of digits in the triangular number\n        if len(str(triangular_number)) == n:\n            return index\n        \n        # Increment the index to check the next triangular number\n        index += 1\n\n# Test the function with the provided assertion\nassert find_Index(2) == 4\n\n# Additional test cases\nprint(find_Index(1))  # Should return 1, as the first triangular number is 1\nprint(find_Index(3))  # Should return 14, as the 14th triangular number is 105\nprint(find_Index(4))  # Should return 45, as the 45th triangular number is 1035\n```\n\nThis script defines a function `find_Index` that calculates the index of the smallest triangular number with a specified number of digits. The function uses a while loop to iterate through triangular numbers, checking the number of digits in each until it finds one with the desired number of digits. The script includes a test case to verify the function's correctness and additional test cases for further validation."}
{"task_id": "Mbpp/740", "solution": "```python\ndef tuple_to_dict(tpl):\n    \"\"\"\n    Convert a tuple to a dictionary using adjacent elements as key-value pairs.\n\n    Parameters:\n    tpl (tuple): A tuple with an even number of elements.\n\n    Returns:\n    dict: A dictionary with keys and values from adjacent elements of the tuple.\n    \"\"\"\n    # Check if the tuple has an even number of elements\n    if len(tpl) % 2 != 0:\n        raise ValueError(\"The tuple must have an even number of elements.\")\n\n    # Create a dictionary using a dictionary comprehension\n    return {tpl[i]: tpl[i + 1] for i in range(0, len(tpl), 2)}\n\n# Test the function with the provided example\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\n# Additional test cases\nprint(tuple_to_dict((2, 4, 6, 8)))  # Expected output: {2: 4, 6: 8}\nprint(tuple_to_dict((10, 20, 30, 40, 50, 60)))  # Expected output: {10: 20, 30: 40, 50: 60}\n```\nThis script defines a function `tuple_to_dict` that converts a tuple with an even number of elements into a dictionary by pairing adjacent elements as key-value pairs. The function raises a `ValueError` if the tuple does not have an even number of elements. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/741", "solution": "```python\ndef all_Characters_Same(s: str) -> bool:\n    \"\"\"\n    Check whether all characters in the string are the same.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    # If the string is empty or has only one character, return True\n    if len(s) <= 1:\n        return True\n    \n    # Compare each character with the first character\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"a\") == True\nassert all_Characters_Same(\"\") == True\nassert all_Characters_Same(\"bbbbbb\") == True\nassert all_Characters_Same(\"abc\") == False\n```"}
{"task_id": "Mbpp/742", "solution": "To calculate the area of a regular tetrahedron, we can use the formula:\n\n\\[ \\text{Area} = \\sqrt{3} \\times a^2 \\]\n\nwhere \\( a \\) is the length of a side of the tetrahedron.\n\nHere is a Python script that defines a function `area_tetrahedron` to calculate the area of a regular tetrahedron given the side length, and includes an assertion to verify the result:\n\n```python\nimport math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron with side length a.\n    \n    Parameters:\n    a (float): The length of a side of the tetrahedron.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * a**2\n\n# Test the function with the given assertion\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=1e-9)\n\n# Example usage\nif __name__ == \"__main__\":\n    side_length = 3\n    area = area_tetrahedron(side_length)\n    print(f\"The area of a tetrahedron with side length {side_length} is {area:.10f}\")\n```\n\nThis script includes:\n- The `area_tetrahedron` function that calculates the area using the formula for a regular tetrahedron.\n- An assertion to check that the function returns the expected result for a side length of 3.\n- An example usage that prints the area of a tetrahedron with a side length of 3."}
{"task_id": "Mbpp/743", "solution": "```python\ndef rotate_right(lst, n):\n    \"\"\"\n    Rotates the list to the right by n elements.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    n (int): The number of positions to rotate the list.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:\n        return lst\n    \n    n = n % len(lst)  # In case n is greater than the length of the list\n    return lst[-n:] + lst[:-n]\n\n# Test the function with the provided example\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\n# Additional test cases\nassert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert rotate_right([], 3) == []\nassert rotate_right([1], 1) == [1]\n```"}
{"task_id": "Mbpp/744", "solution": "```python\ndef check_none(input_tuple):\n    \"\"\"\n    This function checks if the given tuple contains any None value.\n\n    Parameters:\n    input_tuple (tuple): The tuple to check for None values.\n\n    Returns:\n    bool: True if there is at least one None value in the tuple, False otherwise.\n    \"\"\"\n    return None in input_tuple\n\n# Test the function with the provided assertion\nassert check_none((10, 4, 5, 6, None)) == True\n\n# Additional test cases\nassert check_none((1, 2, 3, 4, 5)) == False  # No None values\nassert check_none((None, 2, 3, 4, 5)) == True  # None is the first element\nassert check_none((1, 2, 3, None, 5)) == True  # None is in the middle\nassert check_none((1, 2, 3, 4, None)) == True  # None is the last element\nassert check_none(()) == False  # Empty tuple, no None values\n```"}
{"task_id": "Mbpp/745", "solution": "```python\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        original_num = num\n        while num > 0:\n            digit = num % 10\n            if digit == 0 or original_num % digit != 0:\n                return False\n            num //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result\n\n# Test the function with the provided assertion\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\n# Example usage\nprint(divisible_by_digits(1, 22))\n```\n\nThis script defines a function `divisible_by_digits` that takes two arguments, `startnum` and `endnum`, and returns a list of numbers within that range where each number is divisible by every digit it contains. The function `is_divisible_by_digits` checks if a number meets this condition. The script also includes an assertion to verify the function's correctness with the given example."}
{"task_id": "Mbpp/748", "solution": "```python\ndef capital_words_spaces(s):\n    \"\"\"\n    This function takes a string `s` and inserts spaces before each capital letter,\n    except the first letter if it is capitalized. It returns the modified string.\n    \"\"\"\n    result = []\n    for i, char in enumerate(s):\n        # Check if the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"HelloWorld\") == 'Hello World'\nassert capital_words_spaces(\"ThisIsATest\") == 'This Is A Test'\nassert capital_words_spaces(\"OpenAI\") == 'Open AI'\nassert capital_words_spaces(\"AnExampleString\") == 'An Example String'\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"ThisIsAnExample\"\n    print(capital_words_spaces(test_string))  # Output: \"This Is An Example\"\n```\nThis script defines a function `capital_words_spaces` that takes a string and inserts spaces before each capital letter, except the first one if it is capitalized. The function is tested with several test cases to ensure it works as expected."}
{"task_id": "Mbpp/749", "solution": "```python\ndef sort_numeric_strings(string_list):\n    # Convert each string in the list to an integer\n    int_list = [int(num) for num in string_list]\n    # Sort the list of integers\n    int_list.sort()\n    return int_list\n\n# Test the function with the provided test case\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\n# Additional test cases\nprint(sort_numeric_strings(['10', '1', '3', '2']))  # Output: [1, 2, 3, 10]\nprint(sort_numeric_strings(['-1', '-10', '0', '5']))  # Output: [-10, -1, 0, 5]\nprint(sort_numeric_strings(['1000', '100', '10', '1']))  # Output: [1, 10, 100, 1000]\n```\nThis script defines a function `sort_numeric_strings` that takes a list of strings representing numbers, converts them to integers, sorts them, and returns the sorted list of integers. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/750", "solution": "```python\ndef add_tuple(lst, tpl):\n    \"\"\"\n    Add the elements of the given tuple to the given list.\n\n    Parameters:\n    lst (list): The list to which the tuple elements will be added.\n    tpl (tuple): The tuple whose elements will be added to the list.\n\n    Returns:\n    list: The list with the tuple elements added.\n    \"\"\"\n    # Convert the tuple to a list and extend the original list\n    lst.extend(tpl)\n    return lst\n\n# Test the function with the provided assertion\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\n# Additional test cases\nassert add_tuple([], (1, 2, 3)) == [1, 2, 3]\nassert add_tuple([1, 2], ()) == [1, 2]\nassert add_tuple([1], (2, 3, 4)) == [1, 2, 3, 4]\nassert add_tuple([0], (0,)) == [0, 0]\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `add_tuple` that takes a list and a tuple as arguments, adds the elements of the tuple to the list, and returns the modified list. The function is tested with several assertions to ensure it works as expected."}
{"task_id": "Mbpp/751", "solution": "```python\ndef check_min_heap(arr):\n    \"\"\"\n    Function to check if the given array represents a min heap.\n    \n    A min heap is a complete binary tree where the value of each node is less than or equal to the values of its children.\n    For an array representation of a binary tree, for any index i:\n    - The left child is at index 2*i + 1\n    - The right child is at index 2*i + 2\n    - The parent is at index (i-1) // 2\n    \n    Parameters:\n    arr (list): The array to check.\n    \n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    \n    # Check for each node if it is less than or equal to its children\n    for i in range(n // 2):  # Only need to check up to the last parent node\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        # If left child exists and is less than the current node, it's not a min heap\n        if left < n and arr[i] > arr[left]:\n            return False\n        \n        # If right child exists and is less than the current node, it's not a min heap\n        if right < n and arr[i] > arr[right]:\n            return False\n    \n    return True\n\n# Test the function with the given assertion\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n```"}
{"task_id": "Mbpp/752", "solution": "```python\ndef jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number using the recursive formula:\n    J(n) = J(n-1) + 2 * J(n-2)\n    with initial conditions J(0) = 0 and J(1) = 1.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the first two Jacobsthal numbers\n        j0, j1 = 0, 1\n        # Calculate the nth Jacobsthal number iteratively\n        for i in range(2, n + 1):\n            jn = j1 + 2 * j0\n            j0, j1 = j1, jn\n        return jn\n\n# Test the function with the provided assertion\nassert jacobsthal_num(5) == 11\n\n# Additional test cases\nprint(jacobsthal_num(0))  # Output: 0\nprint(jacobsthal_num(1))  # Output: 1\nprint(jacobsthal_num(2))  # Output: 1\nprint(jacobsthal_num(3))  # Output: 3\nprint(jacobsthal_num(4))  # Output: 5\nprint(jacobsthal_num(6))  # Output: 21\nprint(jacobsthal_num(7))  # Output: 43\n```"}
{"task_id": "Mbpp/753", "solution": "```python\ndef min_k(records, k):\n    \"\"\"\n    This function takes a list of tuples and an integer k, and returns the k tuples with the smallest second element.\n    \n    :param records: List of tuples, where each tuple contains a name and a number.\n    :param k: Integer, the number of minimum records to return based on the second element of the tuples.\n    :return: List of k tuples with the smallest second element.\n    \"\"\"\n    # Sort the records based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test the function with the provided test case\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\n# Additional test cases\nprint(min_k([('Alice', 5), ('Bob', 3), ('Charlie', 7), ('David', 1)], 3))  # Expected: [('David', 1), ('Bob', 3), ('Alice', 5)]\nprint(min_k([('X', 100), ('Y', 50), ('Z', 75)], 1))  # Expected: [('Y', 50)]\nprint(min_k([('A', 10), ('B', 20), ('C', 30)], 0))  # Expected: []\n```"}
{"task_id": "Mbpp/754", "solution": "```python\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of elements that are common\n    to all three lists at the same index.\n    \n    Parameters:\n    l1, l2, l3 (list): Three lists of elements.\n    \n    Returns:\n    list: A list of elements that are common to all three lists at the same index.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Determine the minimum length of the three lists to avoid index out of range errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate over the range of the minimum length\n    for i in range(min_length):\n        # Check if the elements at the current index are the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, add the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n\n# Test the function with the provided example\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n\n# Additional test cases\nprint(extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]))  # Output: [1, 2, 3]\nprint(extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]))  # Output: []\nprint(extract_index_list([1, 2, 3, 4], [1, 2, 0, 4], [1, 2, 3, 4]))  # Output: [1, 2, 4]\n```\n"}
{"task_id": "Mbpp/755", "solution": "```python\ndef second_smallest(numbers):\n    \"\"\"\n    This function returns the second smallest number in a list.\n    If the list has fewer than 2 unique numbers, it returns None.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    \n    # If there are fewer than 2 unique numbers, return None\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Convert the set back to a sorted list\n    sorted_numbers = sorted(unique_numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]\n\n# Test the function with the provided assertion\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\n\n# Additional test cases\nprint(second_smallest([4, 3, 1, 2, 5]))  # Output: 2\nprint(second_smallest([10, 10, 10]))     # Output: None\nprint(second_smallest([1, 2]))           # Output: 2\nprint(second_smallest([5]))              # Output: None\nprint(second_smallest([-1, -2, -3, -4])) # Output: -3\n```\nThis script defines a function `second_smallest` that finds the second smallest number in a list. It handles cases where there are fewer than two unique numbers by returning `None`. The function is tested with the provided assertion and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/757", "solution": "```python\ndef count_reverse_pairs(string_list):\n    # Create a set to store the strings for quick lookup\n    string_set = set(string_list)\n    count = 0\n\n    # Iterate over each string in the list\n    for s in string_list:\n        # Reverse the current string\n        reversed_s = s[::-1]\n        # Check if the reversed string is in the set\n        if reversed_s in string_set:\n            count += 1\n            # Remove both the string and its reverse from the set to avoid double counting\n            string_set.remove(s)\n            string_set.remove(reversed_s)\n\n    return count\n\n# Test the function with the provided test case\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n\n# Additional test cases\nprint(count_reverse_pairs([\"abc\", \"cba\", \"xyz\", \"zyx\", \"def\"]))  # Output should be 2\nprint(count_reverse_pairs([\"hello\", \"world\", \"dlrow\", \"olleh\"]))  # Output should be 2\nprint(count_reverse_pairs([\"abc\", \"def\", \"ghi\"]))  # Output should be 0\nprint(count_reverse_pairs([\"a\", \"b\", \"c\", \"d\", \"e\"]))  # Output should be 0\nprint(count_reverse_pairs([\"madam\", \"madam\"]))  # Output should be 1\n```\nThis script defines a function `count_reverse_pairs` that takes a list of strings and counts how many pairs of strings are reverses of each other. The function uses a set to efficiently check for the presence of reversed strings and ensures that each pair is only counted once by removing both the string and its reverse from the set after counting. The script includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/758", "solution": "```python\ndef unique_sublists(lst):\n    \"\"\"\n    Count the occurrences of lists within a list and return a dictionary\n    where each list is converted to a tuple and the value is the count of its occurrences.\n\n    Parameters:\n    lst (list of lists): The input list containing sublists.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist to a tuple (since lists are not hashable)\n        sublist_tuple = tuple(sublist)\n        \n        # Increment the count of this tuple in the dictionary\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n\n    return count_dict\n\n# Test the function with the provided example\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {\n    (1, 3): 2,\n    (5, 7): 2,\n    (13, 15, 17): 1,\n    (9, 11): 1\n}\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\n    result = unique_sublists(example_list)\n    print(\"Result:\", result)\n```\n"}
{"task_id": "Mbpp/759", "solution": "```python\ndef is_decimal(s):\n    \"\"\"\n    Check if the given string is a decimal number with a precision of 2.\n\n    A valid decimal number with a precision of 2 should:\n    - Have exactly one decimal point.\n    - Have exactly two digits after the decimal point.\n    - Have at least one digit before the decimal point.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string is a valid decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    # Split the string by the decimal point\n    parts = s.split('.')\n    \n    # Check if there are exactly two parts (one decimal point)\n    if len(parts) != 2:\n        return False\n    \n    # Check if the part before the decimal point is a valid integer\n    if not parts[0].isdigit():\n        return False\n    \n    # Check if the part after the decimal point has exactly two digits\n    if len(parts[1]) != 2 or not parts[1].isdigit():\n        return False\n    \n    return True\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.1') == False\nassert is_decimal('123.') == False\nassert is_decimal('.11') == False\nassert is_decimal('123.111') == False\nassert is_decimal('abc.def') == False\nassert is_decimal('123.45') == True\nassert is_decimal('0.00') == True\nassert is_decimal('0.0') == False\nassert is_decimal('0.000') == False\n```"}
{"task_id": "Mbpp/760", "solution": "```python\ndef unique_Element(lst):\n    \"\"\"\n    This function checks whether a list contains only one distinct element.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    # Check if the length of the set is 1, meaning all elements in the list were the same\n    return len(unique_elements) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 1]) == False\nassert unique_Element([2, 2, 2, 2]) == True\nassert unique_Element([3]) == True\nassert unique_Element([]) == False  # An empty list does not have any elements, hence not one distinct element\n\n# Example usage\nprint(unique_Element([1, 1, 1]))  # Output: True\nprint(unique_Element([1, 2, 3]))  # Output: False\n```"}
{"task_id": "Mbpp/762", "solution": "```python\ndef check_monthnumber_number(month_number):\n    \"\"\"\n    This function checks if the given month number has 30 days.\n    \n    Parameters:\n    month_number (int): The month number (1 for January, 2 for February, ..., 12 for December)\n    \n    Returns:\n    bool: True if the month has 30 days, False otherwise\n    \"\"\"\n    # List of months with 30 days: April (4), June (6), September (9), November (11)\n    months_with_30_days = [4, 6, 9, 11]\n    \n    return month_number in months_with_30_days\n\n# Test the function with the given assertion\nassert check_monthnumber_number(6) == True\n\n# Additional test cases\nassert check_monthnumber_number(4) == True  # April\nassert check_monthnumber_number(9) == True  # September\nassert check_monthnumber_number(11) == True # November\nassert check_monthnumber_number(1) == False # January\nassert check_monthnumber_number(2) == False # February\nassert check_monthnumber_number(3) == False # March\nassert check_monthnumber_number(5) == False # May\nassert check_monthnumber_number(7) == False # July\nassert check_monthnumber_number(8) == False # August\nassert check_monthnumber_number(10) == False # October\nassert check_monthnumber_number(12) == False # December\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `check_monthnumber_number` that checks if a given month number corresponds to a month with 30 days. It includes a list of months with 30 days and checks if the input month number is in that list. The script also includes test cases to verify the function's correctness."}
{"task_id": "Mbpp/763", "solution": "```python\ndef find_min_diff(arr, n):\n    \"\"\"\n    Function to find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): A tuple of integers.\n    n (int): The number of elements in the tuple.\n\n    Returns:\n    int: The minimum difference between any two elements.\n    \"\"\"\n    # Convert the tuple to a list and sort it\n    sorted_arr = sorted(arr)\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through the sorted list and find the minimum difference\n    for i in range(n - 1):\n        diff = sorted_arr[i + 1] - sorted_arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function with the provided test case\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\n```"}
{"task_id": "Mbpp/764", "solution": "```python\ndef number_ctr(s):\n    \"\"\"\n    Count the number of digits in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    return sum(1 for char in s if char.isdigit())\n\n# Test the function with the provided assertion\nassert number_ctr('program2bedone') == 1\n\n# Additional test cases\nprint(number_ctr('123abc'))  # Output: 3\nprint(number_ctr('no_digits_here'))  # Output: 0\nprint(number_ctr('2023year'))  # Output: 4\nprint(number_ctr('a1b2c3'))  # Output: 3\n```\nThis script defines a function `number_ctr` that counts the number of digits in a given string. It uses a generator expression to iterate over each character in the string and checks if it is a digit using the `isdigit()` method. The `sum()` function is then used to count the number of `True` values returned by the generator expression, which corresponds to the number of digits in the string. The function is tested with an assertion and additional test cases."}
{"task_id": "Mbpp/765", "solution": "```python\ndef is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n    A polite number is a positive integer that is not a power of 2.\n    \"\"\"\n    def is_power_of_two(x):\n        # A number is a power of two if it has exactly one bit set in its binary representation\n        return (x & (x - 1)) == 0 and x != 0\n\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Test the function\nassert is_polite(7) == 11\nprint(\"The 7th polite number is:\", is_polite(7))\n```\n\nThis script defines a function `is_polite` that calculates the nth polite number. A polite number is defined as a positive integer that is not a power of two. The function uses a helper function `is_power_of_two` to check if a number is a power of two. It then iterates through positive integers, counting those that are not powers of two, until it reaches the nth polite number. The script includes an assertion to test the function with the example provided."}
{"task_id": "Mbpp/766", "solution": "```python\ndef pair_wise(lst):\n    \"\"\"\n    This function takes a list and returns a list of tuples, \n    where each tuple contains a pair of consecutive items from the input list.\n    \n    :param lst: List of items\n    :return: List of tuples with consecutive pairs\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst) - 1)]\n\n# Test the function with the provided example\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\n# Additional test cases\nprint(pair_wise([10, 20, 30]))  # Expected: [(10, 20), (20, 30)]\nprint(pair_wise([5]))           # Expected: []\nprint(pair_wise([]))            # Expected: []\nprint(pair_wise([7, 7, 7, 7]))  # Expected: [(7, 7), (7, 7), (7, 7)]\n```\nThis script defines a function `pair_wise` that takes a list as input and returns a list of tuples, each containing a pair of consecutive elements from the input list. The function is tested with the provided example and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/767", "solution": "```python\ndef get_pairs_count(numbers, target_sum):\n    \"\"\"\n    This function counts the number of pairs in the list 'numbers' whose sum is equal to 'target_sum'.\n    \n    :param numbers: List of integers\n    :param target_sum: Integer, the target sum for the pairs\n    :return: Integer, the count of pairs whose sum is equal to 'target_sum'\n    \"\"\"\n    count = 0\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Calculate the complement that would sum with the current number to reach the target_sum\n        complement = target_sum - number\n        \n        # If the complement is already in the frequency dictionary, it means we have found a pair\n        if complement in freq:\n            count += freq[complement]\n        \n        # Add the current number to the frequency dictionary\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n    \n    return count\n\n# Test the function with the provided test case\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\n\n# Additional test cases\nprint(get_pairs_count([1, 2, 3, 4, 3], 6))  # Output: 2 (pairs: (2, 4), (3, 3))\nprint(get_pairs_count([1, 5, 7, -1, 5], 6))  # Output: 3 (pairs: (1, 5), (1, 5), (7, -1))\nprint(get_pairs_count([1, 1, 1, 1], 3))  # Output: 0 (no pairs sum to 3)\nprint(get_pairs_count([], 2))  # Output: 0 (empty list)\n```\nThis script defines a function `get_pairs_count` that calculates the number of pairs in a list whose sum equals a given target sum. The function uses a dictionary to keep track of the frequency of each number and checks for complements that would form the target sum with the current number. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/769", "solution": "```python\ndef Diff(list1, list2):\n    \"\"\"\n    This function takes two lists and returns a list containing the elements\n    that are present in the first list but not in the second list.\n    \"\"\"\n    # Use list comprehension to filter out elements not in list2\n    return [item for item in list1 if item not in list2]\n\n# Test the function with the provided assertion\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 15, 20, 30]\n\n# Additional test cases\nprint(Diff([1, 2, 3, 4, 5], [2, 4]))  # Expected output: [1, 3, 5]\nprint(Diff(['a', 'b', 'c'], ['b']))   # Expected output: ['a', 'c']\nprint(Diff([1, 2, 3], [1, 2, 3]))     # Expected output: []\nprint(Diff([], [1, 2, 3]))            # Expected output: []\nprint(Diff([1, 2, 3], []))            # Expected output: [1, 2, 3]\n```\n"}
{"task_id": "Mbpp/770", "solution": "```python\ndef odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum\n    sum_of_powers = 0\n    \n    # Generate the first n odd natural numbers and calculate their fourth power\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_of_powers += odd_number ** 4\n    \n    return sum_of_powers\n\n# Test the function with the provided assertion\nassert odd_num_sum(2) == 82\n\n# Additional test cases\nprint(odd_num_sum(1))  # Should return 1^4 = 1\nprint(odd_num_sum(3))  # Should return 1^4 + 3^4 + 5^4 = 1 + 81 + 625 = 707\nprint(odd_num_sum(4))  # Should return 1^4 + 3^4 + 5^4 + 7^4 = 1 + 81 + 625 + 2401 = 3108\n```"}
{"task_id": "Mbpp/771", "solution": "```python\ndef check_expression(expression):\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map:\n            # Check if the stack is empty or the top of the stack is not the matching opening bracket\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            # If it matches, pop the top of the stack\n            stack.pop()\n    \n    # If the stack is empty, all brackets were matched correctly\n    return not stack\n\n# Test the function with the given assertion\nassert check_expression(\"{()}[{}]\") == True\n```"}
{"task_id": "Mbpp/772", "solution": "```python\ndef remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    # Filter out words with length k\n    filtered_words = [word for word in words if len(word) != k]\n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)\n\n# Test the function with the provided assertion\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\n# Additional test cases\nprint(remove_length('The quick brown fox jumps over the lazy dog', 3))  # 'quick brown jumps over lazy'\nprint(remove_length('Hello world', 5))  # ''\nprint(remove_length('Python programming is fun', 2))  # 'Python programming fun'\nprint(remove_length('This is a test', 4))  # 'This is a'\n```\nThis script defines a function `remove_length` that removes all words of a specified length `k` from a given string `s`. The function splits the string into words, filters out the words with the specified length, and then joins the remaining words back into a string. The script also includes a test case to verify the function's correctness, as well as additional test cases for further validation."}
{"task_id": "Mbpp/773", "solution": "```python\ndef occurance_substring(main_string, sub_string):\n    \"\"\"\n    This function finds the first occurrence and position of the substring within the main string.\n    It returns a tuple containing the substring, start index, and end index.\n    If the substring is not found, it returns None.\n    \"\"\"\n    start_index = main_string.find(sub_string)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(sub_string)\n    return (sub_string, start_index, end_index)\n\n# Test the function with the provided assertion\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)\n\n# Additional test cases\nprint(occurance_substring('hello world', 'world'))  # Expected: ('world', 6, 11)\nprint(occurance_substring('hello world', 'python'))  # Expected: None\nprint(occurance_substring('abcabcabc', 'abc'))  # Expected: ('abc', 0, 3)\nprint(occurance_substring('abcabcabc', 'bca'))  # Expected: ('bca', 1, 4)\n```"}
{"task_id": "Mbpp/775", "solution": "```python\ndef odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in the given list.\n\n    Parameters:\n    lst (list): The list of integers to check.\n\n    Returns:\n    bool: True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    # Iterate over the list, checking only the odd indices\n    for i in range(1, len(lst), 2):\n        # If the number at the odd index is not odd, return False\n        if lst[i] % 2 == 0:\n            return False\n    # If all odd indices contain odd numbers, return True\n    return True\n\n# Test the function with the provided test case\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True\n\n# Additional test cases\nassert odd_position([1, 3, 2, 5, 4, 7]) == True  # All odd indices (1, 3, 5) have odd numbers\nassert odd_position([1, 2, 3, 4, 5, 6]) == False # Index 1 has an even number\nassert odd_position([0, 1, 0, 1, 0, 1]) == True  # All odd indices (1, 3, 5) have odd numbers\nassert odd_position([1, 2, 3, 4, 5]) == False    # Index 1 has an even number\nassert odd_position([]) == True                  # Empty list, trivially true\nassert odd_position([1]) == True                 # Single element, no odd index to check\n```"}
{"task_id": "Mbpp/777", "solution": "```python\ndef find_sum(lst):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    \n    # Count each element in the list\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Sum up elements that appear only once\n    sum_non_repeated = sum(num for num, count in count_dict.items() if count == 1)\n    \n    return sum_non_repeated\n\n# Test the function with the provided test case\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21\n\n# Additional test cases\nprint(find_sum([1, 2, 2, 3, 4, 4, 5]))  # Output should be 9 (1 + 3 + 5)\nprint(find_sum([10, 20, 30, 10, 40, 50, 20]))  # Output should be 120 (30 + 40 + 50)\nprint(find_sum([1, 1, 1, 1]))  # Output should be 0 (no non-repeated elements)\nprint(find_sum([]))  # Output should be 0 (empty list)\n```"}
{"task_id": "Mbpp/778", "solution": "```python\ndef pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed_list = []\n    current_sublist = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_sublist.append(lst[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [lst[i]]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n\n# Test the function with the provided test case\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\n# Additional test cases\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3]))  # [[1, 1, 1], [2, 2], [3]]\nprint(pack_consecutive_duplicates([1, 2, 3, 4, 5]))    # [[1], [2], [3], [4], [5]]\nprint(pack_consecutive_duplicates([]))                 # []\nprint(pack_consecutive_duplicates([1]))                # [[1]]\nprint(pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 1, 1]))  # [[1, 1], [2, 2, 2], [3, 3], [1, 1]]\n```\nThis script defines a function `pack_consecutive_duplicates` that takes a list as input and returns a list of sublists, where each sublist contains consecutive duplicate elements from the input list. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/780", "solution": "```python\ndef find_combinations(tuple_list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each tuple in the list\n    for i in range(len(tuple_list)):\n        # For each tuple, iterate over the remaining tuples in the list\n        for j in range(i + 1, len(tuple_list)):\n            # Calculate the sum of the first elements and the sum of the second elements\n            sum_first_elements = tuple_list[i][0] + tuple_list[j][0]\n            sum_second_elements = tuple_list[i][1] + tuple_list[j][1]\n            # Append the resulting tuple to the result list\n            result.append((sum_first_elements, sum_second_elements))\n    \n    return result\n\n# Test the function with the provided example\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\n# Print the result to verify\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]))\n```\nThis script defines a function `find_combinations` that takes a list of tuples as input and returns a list of tuples representing the combinations of sums of the first and second elements of each pair of tuples in the list. The function is tested with the provided example to ensure correctness."}
{"task_id": "Mbpp/781", "solution": "```python\ndef count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors of a given number n is even.\n    \n    Parameters:\n    n (int): The number for which to count the divisors.\n    \n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    \n    return count % 2 == 0\n\n# Test the function with the given assertion\nassert count_divisors(10) == True\n\n# Additional test cases\nprint(count_divisors(1))  # False, divisors: [1]\nprint(count_divisors(2))  # False, divisors: [1, 2]\nprint(count_divisors(3))  # False, divisors: [1, 3]\nprint(count_divisors(4))  # True, divisors: [1, 2, 4]\nprint(count_divisors(6))  # True, divisors: [1, 2, 3, 6]\nprint(count_divisors(9))  # False, divisors: [1, 3, 9]\nprint(count_divisors(12)) # True, divisors: [1, 2, 3, 4, 6, 12]\n```"}
{"task_id": "Mbpp/782", "solution": "```python\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible starting points of subarrays\n    for start in range(n):\n        # Iterate over all possible ending points of subarrays\n        for end in range(start, n):\n            # Calculate the length of the current subarray\n            length = end - start + 1\n            # Check if the length is odd\n            if length % 2 == 1:\n                # Sum the elements of the subarray\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum\n\n# Test the function with the provided test case\nassert odd_length_sum([1, 2, 4]) == 14\n\n# Additional test cases\nprint(odd_length_sum([1, 2, 3, 4, 5]))  # Expected output: 58\nprint(odd_length_sum([10, 11, 12]))     # Expected output: 66\nprint(odd_length_sum([1]))              # Expected output: 1\nprint(odd_length_sum([]))               # Expected output: 0\n```\n\nThis script defines a function `odd_length_sum` that calculates the sum of all odd-length subarrays of a given list. It iterates over all possible subarrays, checks if their length is odd, and adds their sum to the total sum. The function is tested with the provided test case and additional test cases to ensure its correctness."}
{"task_id": "Mbpp/784", "solution": "```python\ndef mul_even_odd(numbers):\n    \"\"\"\n    This function finds the product of the first even and the first odd number in the given list.\n    \n    :param numbers: List of integers\n    :return: Product of the first even and the first odd number\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n\n# Test the function with the provided test case\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\n# Additional test cases\nprint(mul_even_odd([2, 3, 5, 7, 4, 1, 6, 8]))  # Output should be 6 (2 * 3)\nprint(mul_even_odd([10, 1, 5, 7, 4, 1, 6, 8]))  # Output should be 10 (10 * 1)\nprint(mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]))  # Output should be 2 (1 * 2)\nprint(mul_even_odd([4, 5, 6, 7, 8, 9, 10]))    # Output should be 20 (4 * 5)\n```"}
{"task_id": "Mbpp/785", "solution": "```python\ndef tuple_str_int(s):\n    # Remove the parentheses and split the string by comma\n    elements = s.strip('()').split(',')\n    # Convert each element to an integer and return as a tuple\n    return tuple(int(element) for element in elements)\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\nassert tuple_str_int(\"(10, 20, 30)\") == (10, 20, 30)\nassert tuple_str_int(\"(0, -1, -2)\") == (0, -1, -2)\n\nprint(\"All tests passed.\")\n```\n\nThis script defines a function `tuple_str_int` that converts a string representation of a tuple into an actual tuple of integers. It then tests the function with several assertions to ensure it works correctly."}
{"task_id": "Mbpp/786", "solution": "```python\ndef right_insertion(arr, value):\n    \"\"\"\n    This function returns the index at which the specified value should be inserted\n    in the sorted array `arr` to maintain the sorted order. If the value is already\n    present, it returns the index after the last occurrence of the value.\n    \n    :param arr: List[int] - A list of integers sorted in non-decreasing order.\n    :param value: int - The value to find the right insertion point for.\n    :return: int - The index at which the value should be inserted.\n    \"\"\"\n    low, high = 0, len(arr)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] <= value:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return low\n\n# Test the function with the provided assertion\nassert right_insertion([1, 2, 4, 5], 6) == 4\n\n# Additional test cases\nassert right_insertion([1, 2, 4, 5], 3) == 2\nassert right_insertion([1, 2, 4, 5], 5) == 4\nassert right_insertion([1, 2, 4, 5], 0) == 0\nassert right_insertion([], 1) == 0\nassert right_insertion([1, 1, 1, 1], 1) == 4\n```"}
{"task_id": "Mbpp/787", "solution": "Certainly! Below is a Python script that defines a function `text_match_three` which checks if a given string contains the letter 'a' followed by exactly three 'b's. The script also includes an assertion to test the function.\n\n```python\nimport re\n\ndef text_match_three(text):\n    \"\"\"\n    This function checks if the input string contains an 'a' followed by exactly three 'b's.\n    \n    Parameters:\n    text (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    # Define the regex pattern for 'a' followed by exactly three 'b's\n    pattern = r'ab{3}'\n    \n    # Use re.search to find the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with an assertion\nassert not text_match_three(\"ac\"), \"Test failed: 'ac' should not match the pattern\"\nassert text_match_three(\"abbb\"), \"Test failed: 'abbb' should match the pattern\"\nassert not text_match_three(\"abb\"), \"Test failed: 'abb' should not match the pattern\"\nassert not text_match_three(\"abbbb\"), \"Test failed: 'abbbb' should not match the pattern\"\nassert text_match_three(\"xxabbbxx\"), \"Test failed: 'xxabbbxx' should match the pattern\"\nassert not text_match_three(\"a\"), \"Test failed: 'a' should not match the pattern\"\nassert not text_match_three(\"b\"), \"Test failed: 'b' should not match the pattern\"\n\nprint(\"All tests passed.\")\n```\n\nThis script uses the `re` module to perform regular expression matching. The pattern `r'ab{3}'` is used to find occurrences of 'a' followed by exactly three 'b's in the input string. The function returns `True` if the pattern is found and `False` otherwise. The script also includes several assertions to verify the correctness of the function."}
{"task_id": "Mbpp/788", "solution": "```python\ndef new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given list and string.\n\n    Parameters:\n    lst (list): A list of strings.\n    string (str): A string to be added to the tuple.\n\n    Returns:\n    tuple: A tuple containing the elements of the list followed by the string.\n    \"\"\"\n    # Convert the list to a tuple and add the string as the last element\n    return tuple(lst) + (string,)\n\n# Test the function with the provided assertion\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\n# Additional test cases\nprint(new_tuple([\"Hello\", \"World\"], \"Python\"))  # Expected: ('Hello', 'World', 'Python')\nprint(new_tuple([], \"Empty\"))  # Expected: ('Empty',)\nprint(new_tuple([\"Only\"], \"One\"))  # Expected: ('Only', 'One')\n```"}
{"task_id": "Mbpp/790", "solution": "```python\ndef even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in the given list.\n\n    Parameters:\n    lst (list): The list of integers to check.\n\n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3, 2, 1]) == False\nassert even_position([2, 3, 4, 5, 6]) == True\nassert even_position([0, 1, 2, 3, 4, 5]) == True\nassert even_position([1, 2, 3, 4, 5, 6]) == False\nassert even_position([]) == True  # Edge case: empty list\nassert even_position([2]) == True  # Edge case: single element list\nassert even_position([1]) == False  # Edge case: single element list with odd number\n```"}
{"task_id": "Mbpp/791", "solution": "```python\ndef remove_nested(input_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with any nested tuples removed.\n    \n    Parameters:\n    input_tuple (tuple): The input tuple which may contain nested tuples.\n    \n    Returns:\n    tuple: A new tuple with all nested tuples removed.\n    \"\"\"\n    # Use a generator expression to filter out elements that are tuples\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))\n\n# Test the function with the provided assertion\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\n# Additional test cases\nprint(remove_nested((1, 2, (3, 4), 5, (6, 7), 8)))  # Expected output: (1, 2, 5, 8)\nprint(remove_nested((1, (2, 3), (4, 5), 6)))        # Expected output: (1, 6)\nprint(remove_nested((1, 2, 3, 4, 5)))               # Expected output: (1, 2, 3, 4, 5)\nprint(remove_nested(((1, 2), (3, 4), (5, 6))))      # Expected output: ()\n```"}
{"task_id": "Mbpp/792", "solution": "```python\ndef count_list(list_of_lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the count of lists within it.\n    \n    Parameters:\n    list_of_lists (list): A list containing other lists.\n    \n    Returns:\n    int: The number of lists contained within the input list.\n    \"\"\"\n    return len(list_of_lists)\n\n# Test the function with the provided example\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\n# Additional test cases\nassert count_list([]) == 0  # No lists inside\nassert count_list([[1], [2], [3]]) == 3  # Three lists inside\nassert count_list([[1, 2, 3]]) == 1  # One list inside\nassert count_list([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == 5  # Five lists inside\n\nprint(\"All tests passed.\")\n```\n"}
{"task_id": "Mbpp/793", "solution": "```python\ndef last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of elements.\n    target (int): The element to find the last position of.\n\n    Returns:\n    int: The last position of the target element in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1  # Continue searching in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 2, 2, 2, 3], 2) == 3\nassert last([1, 2, 3, 4, 5], 5) == 4\nassert last([1, 1, 1, 1, 1], 1) == 4\nassert last([1, 2, 3, 4, 5], 6) == -1\nassert last([], 1) == -1\n```"}
{"task_id": "Mbpp/794", "solution": "```python\nimport re\n\ndef text_starta_endb(s):\n    \"\"\"\n    This function checks if the input string matches the pattern:\n    a string that has an 'a' followed by anything, ending in 'b'.\n    \"\"\"\n    # Define the regex pattern\n    pattern = r'^a.*b$'\n    \n    # Use re.match to check if the entire string matches the pattern\n    return bool(re.match(pattern, s))\n\n# Test the function with the provided test case\nassert text_starta_endb(\"aabbbb\") == True\n\n# Additional test cases\nassert text_starta_endb(\"ab\") == True\nassert text_starta_endb(\"acb\") == True\nassert text_starta_endb(\"a123b\") == True\nassert text_starta_endb(\"b\") == False\nassert text_starta_endb(\"a\") == False\nassert text_starta_endb(\"abc\") == False\nassert text_starta_endb(\"a123\") == False\nassert text_starta_endb(\"123b\") == False\n\nprint(\"All test cases passed.\")\n```\nThis script defines a function `text_starta_endb` that uses a regular expression to check if a given string starts with 'a', can have any characters in between, and ends with 'b'. The function returns `True` if the string matches the pattern and `False` otherwise. The script also includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/796", "solution": "```python\ndef return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    :param dictionary: A dictionary with numeric values\n    :return: The sum of all values in the dictionary\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function with the provided assertion\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\n\n# Additional test cases\nprint(return_sum({'x': 1, 'y': 2, 'z': 3}))  # Output should be 6\nprint(return_sum({'key1': 10, 'key2': 20, 'key3': 30, 'key4': 40}))  # Output should be 100\nprint(return_sum({}))  # Output should be 0, as there are no items in the dictionary\n```"}
{"task_id": "Mbpp/797", "solution": "```python\ndef sum_in_range(l, r):\n    \"\"\"\n    This function calculates the sum of all odd natural numbers within the range l and r (inclusive).\n    \n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n    \n    Returns:\n    int: The sum of all odd natural numbers within the range.\n    \"\"\"\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the range from l to r (inclusive)\n    for number in range(l, r + 1):\n        # Check if the number is odd\n        if number % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += number\n    \n    return total_sum\n\n# Test the function with the provided assertion\nassert sum_in_range(2, 5) == 8\n\n# Additional test cases\nprint(sum_in_range(1, 10))  # Output should be 25 (1 + 3 + 5 + 7 + 9)\nprint(sum_in_range(3, 7))   # Output should be 15 (3 + 5 + 7)\nprint(sum_in_range(10, 20)) # Output should be 75 (11 + 13 + 15 + 17 + 19)\nprint(sum_in_range(0, 0))   # Output should be 0 (no odd numbers in the range)\nprint(sum_in_range(1, 1))   # Output should be 1 (only one odd number in the range)\n```"}
{"task_id": "Mbpp/798", "solution": "```python\ndef _sum(arr):\n    \"\"\"\n    This function takes a list of numbers and returns their sum.\n    \n    Parameters:\n    arr (list): A list of numbers (integers or floats).\n    \n    Returns:\n    int/float: The sum of the numbers in the list.\n    \"\"\"\n    return sum(arr)\n\n# Test the function with the provided assertion\nassert _sum([1, 2, 3]) == 6\n\n# Additional test cases\nassert _sum([0, 0, 0]) == 0\nassert _sum([-1, 1, 0]) == 0\nassert _sum([1.5, 2.5, 3.5]) == 7.5\nassert _sum([]) == 0  # Sum of an empty list should be 0\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `_sum` that calculates the sum of a list of numbers using Python's built-in `sum` function. It includes a test case to verify the function works as expected, along with additional test cases to ensure robustness."}
{"task_id": "Mbpp/799", "solution": "```python\ndef left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits for a given 32-bit number n.\n\n    :param n: The number to rotate (assumed to be 32-bit)\n    :param d: The number of bits to rotate to the left\n    :return: The result of the left rotation\n    \"\"\"\n    # Mask to ensure the number is treated as 32-bit\n    MAX_BITS = 32\n    # Perform the left rotation\n    rotated = ((n << d) | (n >> (MAX_BITS - d))) & 0xFFFFFFFF\n    return rotated\n\n# Test the function with the provided assertion\nassert left_rotate(16, 2) == 64\n\n# Additional test cases\nprint(left_rotate(1, 1))  # Expected output: 2\nprint(left_rotate(1, 31)) # Expected output: 0x80000000\nprint(left_rotate(0xFFFFFFFF, 1)) # Expected output: 0xFFFFFFFF\nprint(left_rotate(0x80000000, 1)) # Expected output: 1\n```\n\nThis script defines a function `left_rotate` that performs a left bit rotation on a 32-bit integer. The function takes two arguments: `n`, the number to rotate, and `d`, the number of bits to rotate to the left. The function uses bitwise operations to achieve the rotation and ensures the result is within the bounds of a 32-bit integer using a mask. The script also includes a test case to verify the function's correctness."}
{"task_id": "Mbpp/800", "solution": "```python\ndef remove_all_spaces(input_string):\n    \"\"\"\n    This function removes all whitespaces from the given input string.\n\n    Parameters:\n    input_string (str): The string from which to remove all whitespaces.\n\n    Returns:\n    str: A new string with all whitespaces removed.\n    \"\"\"\n    return input_string.replace(\" \", \"\")\n\n# Test the function with the provided assertion\nassert remove_all_spaces('python  program') == 'pythonprogram'\n\n# Additional test cases\nprint(remove_all_spaces('  leading and trailing  '))  # Expected: 'leadingandtrailing'\nprint(remove_all_spaces('multiple   spaces'))         # Expected: 'multiplespaces'\nprint(remove_all_spaces('no_spaces'))                 # Expected: 'no_spaces'\nprint(remove_all_spaces(''))                          # Expected: ''\nprint(remove_all_spaces('single space '))             # Expected: 'singlespace'\n```\nThis script defines a function `remove_all_spaces` that removes all spaces from a given string using the `replace` method. It includes an assertion to test the function with the example provided, as well as additional test cases to demonstrate its functionality."}
{"task_id": "Mbpp/801", "solution": "```python\ndef test_three_equal(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of numbers that are equal.\n    If all three numbers are equal, it returns 3.\n    If two numbers are equal, it returns 2.\n    If no numbers are equal, it returns 0.\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2\nassert test_three_equal(2, 3, 2) == 2\nassert test_three_equal(3, 3, 2) == 2\nassert test_three_equal(4, 5, 4) == 2\nassert test_three_equal(5, 5, 5) == 3\nassert test_three_equal(6, 7, 8) == 0\n\nprint(\"All test cases passed!\")\n```\n\nThis script defines a function `test_three_equal` that checks how many of the three given integers are equal. It includes test cases to verify the correctness of the function."}
{"task_id": "Mbpp/803", "solution": "```python\nimport math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\n# Test cases\nassert not is_perfect_square(10)  # 10 is not a perfect square\nassert is_perfect_square(0)       # 0 is a perfect square (0 * 0)\nassert is_perfect_square(1)       # 1 is a perfect square (1 * 1)\nassert is_perfect_square(4)       # 4 is a perfect square (2 * 2)\nassert is_perfect_square(9)       # 9 is a perfect square (3 * 3)\nassert not is_perfect_square(2)   # 2 is not a perfect square\nassert not is_perfect_square(3)   # 3 is not a perfect square\nassert is_perfect_square(16)      # 16 is a perfect square (4 * 4)\nassert not is_perfect_square(15)  # 15 is not a perfect square\nassert is_perfect_square(25)      # 25 is a perfect square (5 * 5)\n\nprint(\"All test cases passed!\")\n```\nThis script defines a function `is_perfect_square` that checks if a given number is a perfect square. It uses the `math.isqrt` function to compute the integer square root of the number and then checks if squaring this root gives back the original number. The script includes several test cases to verify the correctness of the function."}
{"task_id": "Mbpp/804", "solution": "```python\ndef is_product_even(numbers):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    bool: True if the product is even, False otherwise.\n    \"\"\"\n    # If the list is empty, the product is considered 1, which is odd\n    if not numbers:\n        return False\n    \n    # Check if any number in the list is even\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    \n    # If no even number is found, the product is odd\n    return False\n\n# Test the function with the provided assertion\nassert is_product_even([1, 2, 3]) == True\n\n# Additional test cases\nassert is_product_even([1, 3, 5]) == False  # All numbers are odd, product is odd\nassert is_product_even([2, 4, 6]) == True   # Contains even numbers, product is even\nassert is_product_even([1, 1, 1]) == False  # All numbers are odd, product is odd\nassert is_product_even([0, 1, 2]) == True   # Contains zero, product is even\nassert is_product_even([]) == False         # Empty list, product is considered odd\n```"}
{"task_id": "Mbpp/805", "solution": "```python\ndef max_sum_list(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns the list whose sum of elements is the highest.\n    \n    :param list_of_lists: List[List[int]] - A list containing lists of integers\n    :return: List[int] - The list with the highest sum of elements\n    \"\"\"\n    # Initialize variables to keep track of the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate over each list in the list of lists\n    for lst in list_of_lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        # If the current sum is greater than the maximum sum found so far, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n\n# Test the function with the provided test case\nassert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n\n# Additional test cases\nprint(max_sum_list([[1, 2], [3, 4], [5, 6]]))  # Should return [5, 6]\nprint(max_sum_list([[0, 0, 0], [-1, -2, -3], [1, 1, 1]]))  # Should return [1, 1, 1]\nprint(max_sum_list([[10], [20], [30]]))  # Should return [30]\nprint(max_sum_list([[1, 2, 3, 4], [4, 5, 6], [7, 8, 9]]))  # Should return [7, 8, 9]\n```"}
{"task_id": "Mbpp/806", "solution": "```python\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run\n\n# Test the function with the provided test case\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\n# Additional test cases\nprint(max_run_uppercase('ABCdEFGHI'))  # Should return 5\nprint(max_run_uppercase('aBcDeFgHiJ'))  # Should return 1\nprint(max_run_uppercase(''))  # Should return 0\nprint(max_run_uppercase('abcdefg'))  # Should return 0\nprint(max_run_uppercase('ABCDEFG'))  # Should return 7\n```\nThis script defines a function `max_run_uppercase` that calculates the maximum run of consecutive uppercase characters in a given string. It iterates through each character in the string, checking if it is uppercase. If it is, it increments the current run count. If the current run exceeds the maximum run found so far, it updates the maximum run. If a non-uppercase character is encountered, it resets the current run count. The function is tested with the provided test case and additional cases to ensure correctness."}
{"task_id": "Mbpp/807", "solution": "```python\ndef first_odd(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number found in the list.\n    If no odd number is found, it returns None.\n    \"\"\"\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6, 7, 8]) == 7\nassert first_odd([2, 4, 6, 8]) == None\nassert first_odd([10, 15, 20]) == 15\nassert first_odd([]) == None\n\n# Example usage\nprint(first_odd([1, 3, 5]))  # Output: 1\nprint(first_odd([2, 4, 6, 7, 8]))  # Output: 7\nprint(first_odd([2, 4, 6, 8]))  # Output: None\nprint(first_odd([10, 15, 20]))  # Output: 15\nprint(first_odd([]))  # Output: None\n```\n"}
{"task_id": "Mbpp/808", "solution": "```python\ndef check_K(tup, k):\n    \"\"\"\n    Check if the given tuple contains the element k.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n    k (any): The element to search for in the tuple.\n\n    Returns:\n    bool: True if k is in the tuple, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function with the provided assertion\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\n# Additional test cases\nassert check_K((1, 2, 3, 4, 5), 3) == True\nassert check_K((1, 2, 3, 4, 5), 6) == False\nassert check_K((), 1) == False\nassert check_K((None, True, False), None) == True\nassert check_K((10, 20, 30), 10) == True\nassert check_K((10, 20, 30), 40) == False\n\nprint(\"All tests passed.\")\n```\nThis script defines a function `check_K` that checks if a given element `k` is present in a tuple `tup`. It includes the provided assertion as a test case and additional test cases to ensure the function works correctly in various scenarios."}
{"task_id": "Mbpp/809", "solution": "```python\ndef check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Parameters:\n    tuple1 (tuple): The first tuple of numbers.\n    tuple2 (tuple): The second tuple of numbers.\n\n    Returns:\n    bool: True if each element of tuple2 is smaller than the corresponding element in tuple1, False otherwise.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Iterate over the elements of both tuples and compare them\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((5, 6, 7), (4, 5, 6)) == True\nassert check_smaller((10, 20, 30), (9, 19, 29)) == True\nassert check_smaller((1, 1, 1), (0, 0, 0)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == False\n```"}
