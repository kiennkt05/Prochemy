{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    assert product_of_elements([-1, -2, -3]) == -6\n    assert product_of_elements([]) == 1  # Edge case: empty list\n    assert product_of_elements([0, 1, 2]) == 0  # Edge case: includes zero\n    assert product_of_elements([5]) == 5  # Edge case: single element\n    assert product_of_elements([-1, 2, -3, 4]) == 24  # Mixed signs\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 1, 2, 3])\n    1\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1])\n    [1]\n    >>> unique_elements([1, 2, 2, 1, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected: [5]\n    \n    # Additional test cases\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected: [1, 2, 3]\n    print(unique_elements([]))                    # Expected: []\n    print(unique_elements([1]))                   # Expected: [1]\n    print(unique_elements([1, 2, 2, 1, 3, 4, 4, 5]))  # Expected: [1, 2, 3, 4, 5]"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 2, 3, 4, 5, 1, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n    count = {}\n    duplicates = []\n    \n    for item in items:\n        if item in count:\n            count[item] += 1\n            # Only add to duplicates if it's the second occurrence\n            if count[item] == 2:\n                duplicates.append(item)\n        else:\n            count[item] = 1\n            \n    return duplicates\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected: [5]\n    print(find_duplicates([1, 2, 3, 4]))         # Expected: []\n    print(find_duplicates([1, 1, 2, 2, 3, 3]))   # Expected: [1, 2, 3]\n    print(find_duplicates([]))                     # Expected: []\n    print(find_duplicates([1, 2, 3, 4, 5, 1, 2, 3]))  # Expected: [1, 2, 3]"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1,5]]\n    >>> merge_overlapping_intervals([[1,4],[2,3]])\n    [[1,4]]\n    >>> merge_overlapping_intervals([[1,2],[3,4],[5,6]])\n    [[1,2],[3,4],[5,6]]\n    >>> merge_overlapping_intervals([])\n    []\n    >>> merge_overlapping_intervals([[1,4],[0,4]])\n    [[0,4]]\n    \"\"\"\n    \n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting point\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = []\n    \n    # Step 2: Iterate through the sorted intervals and merge them\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([1, 2, 3, 4, 5], 0)\n    0\n    >>> count_occurrences([1, 2, 3, 2, 1, 2], 2)\n    3\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_occurrences([1, 2, 3, 3, 4], 3))  # Expected output: 2\n    print(count_occurrences([1, 2, 2, 2, 3, 4], 5))  # Expected output: 0\n    \n    # Additional test cases\n    print(count_occurrences([], 1))  # Expected output: 0 (empty list)\n    print(count_occurrences([1, 1, 1, 1], 1))  # Expected output: 4 (all elements match)\n    print(count_occurrences([1, 2, 3, 4, 5], 0))  # Expected output: 0 (no matches)\n    print(count_occurrences([1, 2, 3, 2, 1, 2], 2))  # Expected output: 3 (multiple matches)"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the list is empty or contains less than two elements.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    Traceback (most recent call last):\n        ...\n    ValueError: List must contain at least two elements.\n    \"\"\"\n    \n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Valid cases\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    print(find_max_difference([5, 1, 3, 2, 4]))  # Expected output: 4\n\n    # Edge cases\n    try:\n        print(find_max_difference([5]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: List must contain at least two elements.\n\n    try:\n        print(find_max_difference([]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: List must contain at least two elements."}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    unique_elements = []\n    seen = set()\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Track the element as seen\n            unique_elements.append(element)  # Add to the result list\n    \n    return unique_elements\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test cases\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates([1, 2, 1, 2, 1, 2]) == [1, 2]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5])  # Mixed positive and negative\n    5\n    >>> sum_integers([1, 2, 3, 4, 5])  # Larger list\n    15\n    >>> sum_integers([-5, -5, -5])  # All negative numbers\n    -15\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    \n    # Additional test cases\n    print(sum_integers([]))  # Expected output: 0 (edge case)\n    print(sum_integers([10, -10, 5]))  # Expected output: 5\n    print(sum_integers([1, 2, 3, 4, 5]))  # Expected output: 15\n    print(sum_integers([-5, -5, -5]))  # Expected output: -15"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    >>> count_unique_elements([0, 0, 0, 0])  # All zeros\n    1\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    \n    # Additional test cases\n    print(count_unique_elements([]))                  # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))    # Expected output: 5\n    print(count_unique_elements([-1, -2, -2, -3, -4])) # Expected output: 4\n    print(count_unique_elements([0, 0, 0, 0]))        # Expected output: 1"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    return n * n\n\n# Test cases to validate the implementation\ndef test_car_race_collision():\n    # Test with 0 cars in each direction\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    \n    # Test with 1 car in each direction\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    \n    # Test with 2 cars in each direction\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    \n    # Test with 3 cars in each direction\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    \n    # Test with 10 cars in each direction\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    \n    # Test with a large number of cars\n    assert car_race_collision(1000) == 1000000, \"Test case 1000 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_car_race_collision()"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # If the string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix that needs to be reversed and appended\n            prefix_to_append = string[:i]\n            # Create the palindrome by appending the reverse of the prefix\n            return string + prefix_to_append[::-1]\n    \n    # If no palindromic suffix is found, the entire string is non-palindromic\n    return string + string[::-1]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(make_palindrome(''))          # Expected: ''\n    print(make_palindrome('cat'))       # Expected: 'catac'\n    print(make_palindrome('cata'))      # Expected: 'catac'\n    print(make_palindrome('race'))      # Expected: 'racecar'\n    print(make_palindrome('a'))         # Expected: 'a'\n    print(make_palindrome('ab'))        # Expected: 'aba'\n    print(make_palindrome('abc'))       # Expected: 'abcba'\n    print(make_palindrome('abcd'))      # Expected: 'abcba'\n    print(make_palindrome('madam'))     # Expected: 'madam'\n    print(make_palindrome('madame'))    # Expected: 'madamem'"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    n = round(abs(a) ** (1/3))\n    \n    # Check if n cubed is equal to the absolute value of a\n    return n**3 == abs(a)\n\n# Test cases to validate the implementation\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-8) == True, \"Test case 7 failed\"\n    assert iscube(27) == True, \"Test case 8 failed\"\n    assert iscube(-27) == True, \"Test case 9 failed\"\n    assert iscube(1000) == True, \"Test case 10 failed\"\n    assert iscube(-1000) == True, \"Test case 11 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Args:\n    x (int): The integer whose digits are to be shifted.\n    shift (int): The number of positions to shift the digits to the right.\n    \n    Returns:\n    str: The resulting string after the circular shift.\n    \n    Examples:\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string to work with its digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    # Calculate the effective shift (in case shift is larger than num_digits)\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted_str\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Expected output: '21'\n    print(circular_shift(12, 2))  # Expected output: '12'\n    print(circular_shift(12345, 1))  # Expected output: '51234'\n    print(circular_shift(12345, 5))  # Expected output: '54321'\n    print(circular_shift(12345, 6))  # Expected output: '54321'\n    print(circular_shift(0, 1))  # Expected output: '0'\n    print(circular_shift(7, 3))  # Expected output: '7'"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom math import prod\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Ensure a is within the specified range\n\n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes\n    for combo in combinations(primes, 3):\n        if prod(combo) == a:\n            return True\n            \n    return False\n\n# Test cases\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True  # 2 * 3 * 5\n    assert is_multiply_prime(60) == True  # 2 * 3 * 10 (10 is not prime, so False)\n    assert is_multiply_prime(42) == True  # 2 * 3 * 7\n    assert is_multiply_prime(70) == True  # 2 * 5 * 7\n    assert is_multiply_prime(1) == False   # No product of primes\n    assert is_multiply_prime(2) == False   # Only one prime\n    assert is_multiply_prime(5) == False   # Only one prime\n    assert is_multiply_prime(100) == False  # Out of range\n    assert is_multiply_prime(99) == False   # No combination of 3 primes gives 99\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_multiply_prime()"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears two places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacements = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            swapped_char = char.swapcase()\n            # Replace vowel if it is one\n            if swapped_char in vowel_replacements:\n                swapped_char = vowel_replacements[swapped_char]\n            encoded_message.append(swapped_char)\n        else:\n            # If it's not a letter, we keep it as is\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected: 'TGST'\n    print(encode('This is a message'))  # Expected: 'tHKS KS C MGSSCGG'\n    print(encode('Hello World'))  # Expected: 'hGNNQ WQTKD'\n    print(encode('Python Programming'))  # Expected: 'pKTHQN PRQJQNNG'\n    print(encode('AEIOU'))  # Expected: 'CGKQW'\n    print(encode('aeiou'))  # Expected: 'cgkqw'\n    print(encode('1234!'))  # Expected: '1234!' (non-letter characters remain unchanged)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Ensure N is within the specified constraints\n    if not (0 <= N <= 10000):\n        raise ValueError(\"N must be between 0 and 10000 inclusive.\")\n    \n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Test cases to validate the implementation\ndef test_solve():\n    assert solve(1000) == \"1\", \"Test case 1 failed\"\n    assert solve(150) == \"110\", \"Test case 2 failed\"\n    assert solve(147) == \"1100\", \"Test case 3 failed\"\n    assert solve(0) == \"0\", \"Test case 4 failed\"  # Edge case for N = 0\n    assert solve(9999) == \"36\", \"Test case 5 failed\"  # Edge case for maximum N\n    assert solve(1234) == \"10\", \"Test case 6 failed\"  # Sum is 10, binary is \"1010\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solve()"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \n    Args:\n    xs (list): Coefficients of the polynomial, where xs[i] is the coefficient for x^i.\n    x (float): The point at which to evaluate the polynomial.\n    \n    Returns:\n    float: The value of the polynomial at x.\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    \n    Args:\n    xs (list): Coefficients of the polynomial, must have an even number of coefficients.\n    \n    Returns:\n    float: A root of the polynomial.\n    \n    Raises:\n    ValueError: If the number of coefficients is not even or if the polynomial has no roots.\n    \n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Initial guess for the root\n    x0 = 0.0\n    tolerance = 1e-7\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        f_prime_x0 = sum(i * coeff * math.pow(x0, i - 1) for i, coeff in enumerate(xs) if i > 0)\n        \n        if abs(f_x0) < tolerance:\n            return x0  # Found a root\n        \n        if f_prime_x0 == 0:\n            raise ValueError(\"Derivative is zero; no solution found.\")\n        \n        # Newton-Raphson update\n        x0 -= f_x0 / f_prime_x0\n    \n    raise ValueError(\"Maximum iterations reached; no solution found.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the implementation\n    assert round(find_zero([1, 2]), 2) == -0.5\n    assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0\n    assert round(find_zero([1, 0, -1]), 2) == 1.0  # f(x) = x^2 - 1\n    assert round(find_zero([1, 0, 0, -1]), 2) == 1.0  # f(x) = x^3 - 1\n    assert round(find_zero([1, -3, 2]), 2) == 1.0  # f(x) = x^2 - 3x + 2\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers to consider.\n    \n    Returns:\n    int: The count of n-digit positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        end_with_1 = 1  # Only the number '1'\n    else:\n        end_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n == 1:\n        start_end_with_1 = 1  # Only the number '1'\n    else:\n        start_end_with_1 = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_end_with_1\n    \n    return total_count\n\n# Test cases to validate the implementation\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only the number '1'\n    assert starts_one_ends(2) == 19  # 10-19 (start with 1) + 1, 11 (end with 1)\n    assert starts_one_ends(3) == 271  # 100-199 (start with 1) + 90 (end with 1) - 10 (start and end with 1)\n    assert starts_one_ends(4) == 3701  # 1000-1999 (start with 1) + 900 (end with 1) - 100 (start and end with 1)\n    assert starts_one_ends(5) == 37001  # 10000-19999 (start with 1) + 9000 (end with 1) - 1000 (start and end with 1)\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_starts_one_ends()"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime was found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(largest_prime_digit_sum([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(largest_prime_digit_sum([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(largest_prime_digit_sum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(largest_prime_digit_sum([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(largest_prime_digit_sum([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(largest_prime_digit_sum([0, 8, 1, 2, 1, 7]))  # Output: 7\nprint(largest_prime_digit_sum([4, 6, 8, 10]))  # Output: 0 (no primes)"}
