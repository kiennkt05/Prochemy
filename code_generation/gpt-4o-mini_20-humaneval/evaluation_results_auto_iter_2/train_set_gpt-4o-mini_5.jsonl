{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search.\n        target (int): The integer to count in the list.\n    \n    Returns:\n        int: The count of occurrences of the target in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    return elements.count(target)\n\n# Unit tests to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    # Initialize product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current number to the product\n    \n    return product  # Return the final product"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Unit tests\ndef test_find_max_difference():\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    assert find_max_difference([5]) == 0  # Single element case\n    assert find_max_difference([1, 1, 1, 1]) == 0  # All elements the same\n    assert find_max_difference([1, -1]) == 2  # Two elements case\n    print(\"All tests passed.\")\n\n# Uncomment the following line to run the tests\n# test_find_max_difference()"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 1, 2, 3])\n    1\n    >>> find_repeat([3, 3, 3, 3])\n    3\n    >>> find_repeat([1, 2, 3, 4, 5, 1, 2])\n    1\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set\n    return None  # Return None if no repeats are found\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n    \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    # Convert the list to a set to get unique elements\n    unique_elements = set(lst)\n    # Return the number of unique elements\n    return len(unique_elements)"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A new list containing only unique integers in the order of their first appearance.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n        [5, 3, 2, 1]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_elements = []  # To store the result\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_elements.append(element)  # Add to the result list\n\n    return unique_elements"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1,5]]\n    >>> merge_overlapping_intervals([])\n    []\n    >>> merge_overlapping_intervals([[1,2],[3,4],[5,6]])\n    [[1,2],[3,4],[5,6]]\n    \"\"\"\n    \n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = []\n    \n    # Step 2: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    \"\"\"\n    seen = set()          # To track seen elements\n    duplicates = []       # To store duplicates in order of first occurrence\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already added\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n        >>> sum_integers([])\n        0\n        >>> sum_integers([-5, 5, 0])\n        0\n        >>> sum_integers([10, -10, 20])\n        20\n    \"\"\"\n    return sum(integers)\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0\n    assert sum_integers([-5, 5, 0]) == 0\n    assert sum_integers([10, -10, 20]) == 20\n    assert sum_integers([100, 200, 300]) == 600\n    assert sum_integers([-100, -200, -300]) == -600\n    assert sum_integers([1]) == 1\n    assert sum_integers([-1]) == -1\n\n    print(\"All tests passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the result list\n\n    return unique_list"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Validate input\n    if n < 0:\n        raise ValueError(\"The number of cars must be a non-negative integer.\")\n    \n    # Calculate the number of collisions\n    return n * n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    '''\n    # Calculate the cube root and round it to the nearest integer\n    n = round(a ** (1/3))\n    \n    # Check if cubing the rounded value gives us back the original number\n    return n**3 == a\n\n# Unit tests to validate the functionality of the iscube function\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-8) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    assert iscube(1000) == True, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_iscube()"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import bisect\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\" \n    Finds x such that poly(x) = 0.\n    Returns only one zero point, even if there are many.\n    Assumes xs has an even number of coefficients and the largest non-zero coefficient guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Define the function to find the root\n    def f(x):\n        return poly(xs, x)\n    \n    # Use bisect method to find the root in the interval [-1000, 1000]\n    root = bisect(f, -1000, 1000)\n    return root\n\n# Unit tests\nif __name__ == \"__main__\":\n    import unittest\n\n    class TestFindZero(unittest.TestCase):\n        def test_linear(self):\n            self.assertAlmostEqual(round(find_zero([1, 2]), 2), -0.5)\n\n        def test_cubic(self):\n            self.assertAlmostEqual(round(find_zero([-6, 11, -6, 1]), 2), 1.0)\n\n        def test_quadratic(self):\n            self.assertAlmostEqual(round(find_zero([1, -3, 2]), 2), 1.0)  # (x-1)(x-2)\n\n        def test_high_degree(self):\n            self.assertAlmostEqual(round(find_zero([1, 0, -4]), 2), 2.0)  # x^2 - 4 = 0\n\n        def test_no_real_root(self):\n            with self.assertRaises(ValueError):\n                find_zero([1, 1])  # x^2 + 1 has no real roots\n\n    unittest.main()"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Edge case: if the string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix that needs to be reversed and appended\n            prefix_to_append = string[:i]\n            # Create the palindrome by appending the reversed prefix\n            return string + prefix_to_append[::-1]\n    \n    # If no palindromic suffix is found, the entire string is used\n    return string + string[:-1][::-1]  # This case is for single character strings\n\n# Example usage\nif __name__ == \"__main__\":\n    print(make_palindrome('cat'))  # Output: 'catac'\n    print(make_palindrome('cata'))  # Output: 'catac'\n    print(make_palindrome('race'))  # Output: 'racecar'"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 2)\n    '45123'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(7, 1)\n    '7'\n    >>> circular_shift(0, 1)\n    '0'\n    \"\"\"\n    # Convert the integer to a string to manipulate digits\n    str_x = str(x)\n    length = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= length:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    # Calculate the effective shift (in case of larger shifts)\n    effective_shift = shift % length\n    if effective_shift == 0:\n        return str_x  # No shift needed\n    \n    # Perform the circular shift\n    return str_x[-effective_shift:] + str_x[:-effective_shift]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Output: '21'\n    print(circular_shift(12, 2))  # Output: '12'\n    print(circular_shift(12345, 2))  # Output: '45123'\n    print(circular_shift(12345, 5))  # Output: '54321'\n    print(circular_shift(7, 1))  # Output: '7'\n    print(circular_shift(0, 1))  # Output: '0'"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    if n == 1:\n        # For 1-digit numbers, only the number '1' fits the criteria\n        return 1\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    end_with_1 = 9 * 10 ** (n - 2)\n    \n    # Count of n-digit numbers starting and ending with '1'\n    start_and_end_with_1 = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return total_count"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations_with_replacement\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint check\n\n    primes = generate_primes(100)\n    \n    # Check combinations of three primes\n    for combo in combinations_with_replacement(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(28))  # Should return False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digits = str(N)\n    \n    # Step 2: Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in digits)\n    \n    # Step 3: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    # Step 4: Return the binary representation as a string\n    return binary_sum\n\n# Example usage\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping case and replacing vowels.\n    \n    Vowels are replaced with the letter that appears two places ahead in the English alphabet.\n    \n    Args:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel and swap case\n            encoded_message.append(vowel_replacement[char])\n        elif char.isalpha():\n            # Swap case for consonants\n            encoded_message.append(char.swapcase())\n        else:\n            # Keep spaces unchanged\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(encode('test'))  # Output: 'TGST'\n    print(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime was found, return 0\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Example usage\nprint(largest_prime_digit_sum([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(largest_prime_digit_sum([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(largest_prime_digit_sum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(largest_prime_digit_sum([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(largest_prime_digit_sum([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(largest_prime_digit_sum([0, 8, 1, 2, 1, 7]))  # Output: 7"}
