{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    \"\"\"\n    return sum(integers)\n\n# Testing the function with provided examples\nif __name__ == \"__main__\":\n    print(sum_integers([1, 2, 3]))  # Output: 6\n    print(sum_integers([-1, -2, 3]))  # Output: 0"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    \"\"\"\n    # Convert the list to a set to filter out duplicate elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Testing the function with provided examples\nif __name__ == \"__main__\":\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Output: 1"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0  # Return 0 or raise an exception based on requirements\n\n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    # The maximum difference is the difference between the max and min values\n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Output: 30\n    print(find_max_difference([5]))  # Output: 0 (only one element)\n    print(find_max_difference([]))  # Output: 0 (empty list)"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n        >>> product_of_elements([1, 2, 3, 4])\n        24\n        >>> product_of_elements([-1, -2, -3])\n        -6\n        >>> product_of_elements([0, 1, 2, 3])\n        0\n        >>> product_of_elements([5])\n        5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current number to the product\n    \n    return product  # Return the final product\n\n# Testing the function with provided examples\nif __name__ == \"__main__\":\n    print(product_of_elements([1, 2, 3, 4]))  # Output: 24\n    print(product_of_elements([-1, -2, -3]))  # Output: -6\n    print(product_of_elements([0, 1, 2, 3]))   # Output: 0\n    print(product_of_elements([5]))             # Output: 5"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # Initialize an empty set to keep track of seen numbers\n    \n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if it's not seen before\n    \n    return None  # Return None if no repeats are found"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark the element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list  # Return the list of unique elements"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    \"\"\"\n    seen = set()          # To track seen items\n    duplicates = set()    # To track duplicates\n    result = []           # To maintain the order of duplicates\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.add(item)  # Add to duplicates only once\n                result.append(item)    # Maintain order of first occurrence\n        else:\n            seen.add(item)            # Mark the item as seen\n\n    return result\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Output: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Output: [5]"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The number of times the target integer appears in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Use the list's count method to find the number of occurrences of target\n    return elements.count(target)\n\n# Testing the function with the provided examples\nif __name__ == \"__main__\":\n    print(count_occurrences([1, 2, 3, 3, 4], 3))  # Output: 2\n    print(count_occurrences([1, 2, 2, 2, 3, 4], 5))  # Output: 0"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the input list and add elements to the set\n    for element in elements:\n        unique_elements.add(element)\n    \n    # Convert the set back to a list and return it\n    return list(unique_elements)\n\n# Testing the function with provided examples\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Output: [1, 2, 3, 4]\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Output: [1]"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Step 3: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Example usage\nif __name__ == \"__main__\":\n    print(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]))  # Output: [[1, 6], [8, 10], [15, 18]]"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each direction (left to right and right to left).\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    # Therefore, the total number of collisions is n * n\n    return n * n\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a few examples\n    print(car_race_collision(0))  # Expected output: 0\n    print(car_race_collision(1))  # Expected output: 1\n    print(car_race_collision(2))  # Expected output: 4\n    print(car_race_collision(3))  # Expected output: 9"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube of some integer.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The longest palindromic suffix is string[i:]\n            suffix_length = len(string) - i\n            break\n    else:\n        # If no palindromic suffix is found, the whole string is non-palindromic\n        suffix_length = 0\n\n    # The prefix that needs to be reversed and appended\n    prefix = string[:len(string) - suffix_length]\n    # Create the palindrome by appending the reversed prefix\n    palindrome = string + prefix[::-1]\n    \n    return palindrome\n\n# Testing the function with provided test cases\nif __name__ == \"__main__\":\n    print(make_palindrome(''))        # Output: ''\n    print(make_palindrome('cat'))     # Output: 'catac'\n    print(make_palindrome('cata'))    # Output: 'catac'"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string to manipulate the digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # Calculate effective shift\n    effective_shift = shift % num_digits if num_digits > 0 else 0\n    \n    if effective_shift == 0:\n        # If shift is 0 or a multiple of the number of digits, return the original number\n        return str_x\n    elif effective_shift >= num_digits:\n        # If shift is greater than or equal to the number of digits, return reversed digits\n        return str_x[::-1]\n    else:\n        # Perform the circular shift\n        return str_x[-effective_shift:] + str_x[:-effective_shift]\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Output: '21'\n    print(circular_shift(12, 2))  # Output: '12'\n    print(circular_shift(12345, 1))  # Output: '51234'\n    print(circular_shift(12345, 5))  # Output: '54321'\n    print(circular_shift(12345, 6))  # Output: '54321'"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint: a must be less than 100\n\n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes (with repetition)\n    for i in range(len(primes)):\n        for j in range(len(primes)):\n            for k in range(len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n    return False\n\n# Example test cases\nprint(is_multiply_prime(30))  # True, because 30 = 2 * 3 * 5\nprint(is_multiply_prime(12))  # True, because 12 = 2 * 2 * 3\nprint(is_multiply_prime(15))  # True, because 15 = 3 * 5 * 1 (1 is not prime, so this should return False)\nprint(is_multiply_prime(1))   # False, as 1 cannot be expressed as a product of three primes\nprint(is_multiply_prime(100)) # False, as 100 is not less than 100"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping the case of all letters and replacing\n    all vowels with the letter that appears two places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    \n    for char in message:\n        if char in vowels:\n            # Find the next character that is two places ahead\n            if char.islower():\n                # For lowercase vowels\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                # For uppercase vowels\n                new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            # Swap case for consonants and non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers to consider.\n    \n    Returns:\n    int: The count of n-digit positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    count_start_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        count_end_1 = 1  # Only the number '1'\n    else:\n        count_end_1 = 9 * (10 ** (n - 2))\n    \n    # If n = 1, we have counted '1' in both counts, so we need to adjust\n    count_both = 1 if n == 1 else 0\n    \n    # Total count\n    total_count = count_start_1 + count_end_1 - count_both\n    \n    return total_count\n\n# Example usage:\nprint(starts_one_ends(1))  # Output: 1\nprint(starts_one_ends(2))  # Output: 19\nprint(starts_one_ends(3))  # Output: 190"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    The polynomial is defined as:\n    f(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    \n    The function assumes that xs has an even number of coefficients\n    and that the largest non-zero coefficient guarantees a solution.\n    \n    Returns only one root of the polynomial.\n    \n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Initial guess for the root\n    x0 = 0.0\n    # Define the tolerance and maximum iterations\n    tolerance = 1e-7\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        # Use a small delta to approximate the derivative\n        delta = 1e-5\n        f_x0_plus_delta = poly(xs, x0 + delta)\n        derivative = (f_x0_plus_delta - f_x0) / delta\n        \n        # Avoid division by zero\n        if derivative == 0:\n            break\n        \n        # Newton-Raphson update\n        x1 = x0 - f_x0 / derivative\n        \n        # Check for convergence\n        if abs(x1 - x0) < tolerance:\n            return x1\n        \n        x0 = x1\n    \n    # If we reach here, we did not converge\n    raise ValueError(\"Failed to find a root within the maximum number of iterations.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Output: 1.0"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Example test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
