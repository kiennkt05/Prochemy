# MBPP/241
### Completion
def array_3d(depth, rows, columns):
    """
    Generate a 3D array filled with the character '*'.
    
    Parameters:
    depth (int): The number of layers in the 3D array.
    rows (int): The number of rows in each layer.
    columns (int): The number of columns in each row.
    
    Returns:
    list: A 3D list (array) filled with '*'.
    """
    return [[[ '*' for _ in range(columns) ] for _ in range(rows) ] for _ in range(depth)]

# Test the function with the provided assertion
assert array_3d(6, 4, 3) == [[['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']],
                               [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']],
                               [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']],
                               [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']],
                               [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']],
                               [['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*'], ['*', '*', '*']]]

# The assertion will pass if the function works correctly.
### Test


METADATA = {
    'author': 'mbpp',
    'dataset': 'mbpp'
}

def check(candidate):
    assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
    assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]
    assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]
