{"task_id": "MBPP/645", "prompt": "\"\"\"\nWrite a function to find the product of it\ufffds kth index in the given tuples.\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n\"\"\"\n", "entry_point": "find_k_product", "canonical_solution": "def get_product(val) : \n    res = 1\n    for ele in val: \n        res *= ele \n    return res \ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210\n"}
{"task_id": "MBPP/460", "prompt": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n", "entry_point": "Extract", "canonical_solution": "def Extract(lst): \n    return [item[0] for item in lst] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n"}
{"task_id": "MBPP/402", "prompt": "\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n", "entry_point": "ncr_modp", "canonical_solution": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(10,2,13)==6\n    assert candidate(15,12,43)==25\n    assert candidate(17,9,18)==10\n"}
{"task_id": "MBPP/954", "prompt": "\"\"\"\nWrite a function that gives profit amount if the given amount has profit else return none.\nassert profit_amount(1500,1200)==300\n\"\"\"\n", "entry_point": "profit_amount", "canonical_solution": "def profit_amount(actual_cost,sale_amount): \n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(1500,1200)==300\n    assert candidate(100,200)==None\n    assert candidate(2000,5000)==None\n"}
{"task_id": "MBPP/495", "prompt": "\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n", "entry_point": "remove_lowercase", "canonical_solution": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n"}
{"task_id": "MBPP/801", "prompt": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n", "entry_point": "test_three_equal", "canonical_solution": "def test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(1,1,1) == 3\n    assert candidate(-1,-2,-3) == 0\n    assert candidate(1,2,2) == 2\n"}
{"task_id": "MBPP/131", "prompt": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n", "entry_point": "reverse_vowels", "canonical_solution": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    return result_string", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n"}
{"task_id": "MBPP/173", "prompt": "\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n", "entry_point": "remove_splchar", "canonical_solution": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate('python  @#&^%$*program123')==('pythonprogram123')\n    assert candidate('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n    assert candidate('python   ^%&^()(+_)(_^&67)                    program')==('python67program')\n"}
{"task_id": "MBPP/929", "prompt": "\"\"\"\nWrite a function to count repeated items of a tuple.\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n\"\"\"\n", "entry_point": "count_tuplex", "canonical_solution": "def count_tuplex(tuplex,value):  \n  count = tuplex.count(value)\n  return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4\n"}
{"task_id": "MBPP/865", "prompt": "\"\"\"\nWrite a function to print n-times a list using map function.\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n\"\"\"\n", "entry_point": "ntimes_list", "canonical_solution": "def ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums) \n    return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]\n"}
{"task_id": "MBPP/4_1", "prompt": "\"\"\"\nWrite a function to return the n-th Fibonacci number.\nassert fibonacci(5) == 5\n\"\"\"\n", "entry_point": "fibonacci", "canonical_solution": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(5) == 5\n    assert candidate(7) == 13\n    assert candidate(10) == 55\n"}
{"task_id": "MBPP/4_2", "prompt": "\"\"\"\nWrite a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n\"\"\"\n", "entry_point": "longest_common_prefix", "canonical_solution": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(['flower', 'flow', 'flight']) == 'fl'\n    assert candidate(['dog', 'racecar', 'car']) == ''\n    assert candidate(['apple', 'apricot', 'apartment']) == 'ap'\n"}
{"task_id": "MBPP/4_3", "prompt": "\"\"\"\nWrite a function to return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\nassert gcd(48, 18) == 6\n\"\"\"\n", "entry_point": "gcd", "canonical_solution": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate(48, 18) == 6\n    assert candidate(56, 98) == 14\n    assert candidate(100, 10) == 10\n"}
{"task_id": "MBPP/4_4", "prompt": "\"\"\"\nWrite a function to rotate a given matrix by 90 degrees clockwise.\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\"\"\"\n", "entry_point": "rotate_matrix", "canonical_solution": "def rotate_matrix(matrix):\n    return [list(reversed(col)) for col in zip(*matrix)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert candidate([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert candidate([[1]]) == [[1]]\n"}
{"task_id": "MBPP/4_5", "prompt": "\"\"\"\nWrite a function to find the length of the longest common substring between two strings.\nassert longest_common_substring('abcdef', 'zcdemf') == 3\n\"\"\"\n", "entry_point": "longest_common_substring", "canonical_solution": "def longest_common_substring(s1, s2):\n    max_len = 0\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_len = max(max_len, dp[i][j])\n    return max_len", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate('abcdef', 'zcdemf') == 3\n    assert candidate('hello', 'yello') == 4\n    assert candidate('abcdxyz', 'xyzabcd') == 4\n"}
{"task_id": "MBPP/4_6", "prompt": "\"\"\"\nWrite a function to find the maximum value in a list of integers.\nassert max_value([-1, -2, -3, -4]) == -1\n\"\"\"\n", "entry_point": "max_value", "canonical_solution": "def max_value(arr):\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([-1, -2, -3, -4]) == -1\n    assert candidate([10, 20, 30, 40]) == 40\n    assert candidate([5, 5, 5, 5]) == 5\n"}
{"task_id": "MBPP/4_7", "prompt": "\"\"\"\nWrite a function to find the second largest number in a list of integers.\nassert second_largest([1, 2, 3, 4, 5]) == 4\n\"\"\"\n", "entry_point": "second_largest", "canonical_solution": "def second_largest(nums):\n    if len(nums) < 2:\n        return None\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        return None\n    unique_nums.sort()\n    return unique_nums[-2]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 4\n    assert candidate([10, 5, 8, 20, 15]) == 15\n    assert candidate([7, 7, 7, 7]) == None\n    assert candidate([42, 17]) == 17\n"}
{"task_id": "MBPP/4_8", "prompt": "\"\"\"\nWrite a function to count the number of words in a string that start with a vowel.\nassert count_vowel_words('apple orange umbrella ice elephant') == 5\n\"\"\"\n", "entry_point": "count_vowel_words", "canonical_solution": "def count_vowel_words(text):\n    if not text:\n        return 0\n    words = text.split()\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for word in words:\n        if word and word[0] in vowels:\n            count += 1\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate('apple orange umbrella ice elephant') == 5\n    assert candidate('hello world python programming') == 0\n    assert candidate('Amazing underwater exploration adventure') == 4\n    assert candidate('') == 0\n"}
{"task_id": "MBPP/4_9", "prompt": "\"\"\"\nWrite a function to merge two sorted lists into one sorted list.\nassert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n\"\"\"\n", "entry_point": "merge_sorted_lists", "canonical_solution": "def merge_sorted_lists(list1, list2):\n    merged = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged.append(list1[i])\n            i += 1\n        else:\n            merged.append(list2[j])\n            j += 1\n    merged.extend(list1[i:])\n    merged.extend(list2[j:])\n    return merged", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n    assert candidate([1, 5, 9], [2, 3, 4, 7, 8]) == [1, 2, 3, 4, 5, 7, 8, 9]\n    assert candidate([], [1, 2, 3]) == [1, 2, 3]\n    assert candidate([10, 20], []) == [10, 20]\n"}
{"task_id": "MBPP/4_10", "prompt": "\"\"\"\nWrite a function to find all pairs of numbers in a list that sum to a target value.\nassert find_pairs_sum([1, 2, 3, 4, 5], 6) == [(1, 5), (2, 4)]\n\"\"\"\n", "entry_point": "find_pairs_sum", "canonical_solution": "def find_pairs_sum(nums, target):\n    pairs = []\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen and complement != num:\n            pair = tuple(sorted([num, complement]))\n            if pair not in pairs:\n                pairs.append(pair)\n        elif complement in seen and complement == num:\n            if nums.count(num) >= 2:\n                pair = (num, num)\n                if pair not in pairs:\n                    pairs.append(pair)\n        seen.add(num)\n    return sorted(pairs)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 6) == [(1, 5), (2, 4)]\n    assert candidate([2, 4, 6, 8], 10) == [(2, 8), (4, 6)]\n    assert candidate([1, 1, 2, 3], 2) == [(1, 1)]\n    assert candidate([5, 5, 5, 5], 10) == [(5, 5)]\n"}