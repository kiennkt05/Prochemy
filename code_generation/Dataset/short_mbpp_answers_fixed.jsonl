{"task_id": "MBPP/938", "entry_point": "find_closet", "completion": "def find_closest(arr1, arr2, arr3, n1, n2, n3):\n    # Initialize pointers for each array\n    i, j, k = 0, 0, 0\n    # Initialize the closest difference to a large number\n    closest_diff = float('inf')\n    # Initialize the result tuple\n    closest_elements = (0, 0, 0)\n\n    # Loop until we reach the end of any of the arrays\n    while i < n1 and j < n2 and k < n3:\n        # Get the current elements from each array\n        a, b, c = arr1[i], arr2[j], arr3[k]\n        \n        # Find the maximum and minimum of the three elements\n        current_max = max(a, b, c)\n        current_min = min(a, b, c)\n        \n        # Calculate the current difference\n        current_diff = current_max - current_min\n        \n        # If the current difference is smaller than the closest found so far\n        if current_diff < closest_diff:\n            closest_diff = current_diff\n            closest_elements = (a, b, c)\n        \n        # Move the pointer that points to the smallest element\n        if current_min == a:\n            i += 1\n        elif current_min == b:\n            j += 1\n        else:\n            k += 1\n\n    return closest_elements\n\n# Test case\nassert find_closest([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) == (10, 15, 10)"}
