{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. Returns 1 if the list is empty.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total_sum = 0\n    \n    # Iterate through each integer in the list and add it to total_sum\n    for number in integers:\n        total_sum += number\n    \n    return total_sum\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0  # Edge case: empty list\n    assert sum_integers([0, 0, 0]) == 0  # Edge case: all zeros\n    assert sum_integers([1, -1, 1, -1]) == 0  # Edge case: positive and negative cancel out\n    assert sum_integers([100, 200, 300]) == 600  # Larger numbers\n    assert sum_integers([-5, -10, 5, 10]) == 0  # Mixed negative and positive\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Raises:\n        ValueError: If the list is empty or contains less than two elements.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements to find a difference.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Output: 30"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function maintains the order of first appearances of the unique elements.\n    \n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:  # Check if the element is already seen\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to unique list\n\n    return unique_elements  # Return the list of unique elements\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Output: [1, 2, 3, 4]"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([1, -1, 0, 1, -1])\n    3\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Output: 1"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # Increment the counter if the current element matches the target\n        if element == target:\n            count += 1\n            \n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_occurrences([1, 2, 3, 3, 4], 3))  # Output: 2\n    print(count_occurrences([1, 2, 2, 2, 3, 4], 5))  # Output: 0"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([1, 1, 2, 3])\n    1\n    >>> find_repeat([5, 5, 5, 5])\n    5\n    >>> find_repeat([])\n    None\n    \"\"\"\n    seen = set()  # A set to track seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats are found\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_repeat([1, 2, 3, 4, 5, 2]))  # Output: 2\n    print(find_repeat([1, 2, 3, 4]))         # Output: None\n    print(find_repeat([1, 1, 2, 3]))         # Output: 1\n    print(find_repeat([5, 5, 5, 5]))         # Output: 5\n    print(find_repeat([]))                    # Output: None"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order of their first appearance.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark the element as seen\n            unique_list.append(element)  # Add to the unique list\n    \n    return unique_list\n\n# Summary of functionality:\n# The function `unique_elements` takes a list of integers as input and returns a new list containing only the unique integers,\n# preserving the order of their first occurrence. It uses a set to efficiently track which elements have already been added to the result.\n\n# Test cases to validate the functionality:\nif __name__ == \"__main__\":\n    # Test case 1: Standard case with duplicates\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert unique_elements([5, 5, 5]) == [5]\n    \n    # Test case 3: No duplicates\n    assert unique_elements([1, 2, 3]) == [1, 2, 3]\n    \n    # Test case 4: Mixed duplicates\n    assert unique_elements([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    assert unique_elements([]) == []\n    \n    # Test case 6: List with negative numbers\n    assert unique_elements([-1, -2, -1, -3, -2]) == [-1, -2, -3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_start, current_end = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        start, end = intervals[i]\n        \n        # Step 3: Check if the current interval overlaps with the merged one\n        if start <= current_end:\n            # Merge the intervals by updating the end time\n            current_end = max(current_end, end)\n        else:\n            # No overlap, add the current merged interval to the list\n            merged.append([current_start, current_end])\n            # Update to the new interval\n            current_start, current_end = start, end\n    \n    # Add the last merged interval\n    merged.append([current_start, current_end])\n    \n    return merged\n\n# Example usage\nif __name__ == \"__main__\":\n    print(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]))  # Output: [[1, 6], [8, 10], [15, 18]]"}
