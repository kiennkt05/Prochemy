{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers to calculate the product of.\n        \n    Returns:\n        int: The product of all integers in the list. Returns 1 for an empty list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([]))             # Expected output: 1\n    print(product_of_elements([0, 1, 2]))      # Expected output: 0\n    print(product_of_elements([5]))             # Expected output: 5", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(elements)\n    \n    # Convert the set back to a list to return\n    return list(unique_elements)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Expected output: [1]\n    \n    # Test case 3: No duplicates\n    print(remove_duplicates([5, 6, 7, 8]))      # Expected output: [5, 6, 7, 8]\n    \n    # Test case 4: Mixed duplicates\n    print(remove_duplicates([1, 2, 3, 2, 1, 4, 5]))  # Expected output: [1, 2, 3, 4, 5]\n    \n    # Test case 5: Empty list\n    print(remove_duplicates([]))  # Expected output: []", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    This function takes a list of integers and returns the number of unique integers present in that list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All elements are unique\n    5\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                 # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))   # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))   # Expected output: 5", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total_sum = 0\n    \n    # Iterate through each integer in the list and add it to total_sum\n    for number in integers:\n        total_sum += number\n    \n    # Return the final computed sum\n    return total_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Sum of positive integers\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    \n    # Test case 2: Sum of negative and positive integers\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    \n    # Test case 3: Sum of an empty list\n    print(sum_integers([]))  # Expected output: 0\n    \n    # Test case 4: Sum of all negative integers\n    print(sum_integers([-5, -10, -15]))  # Expected output: -30\n    \n    # Test case 5: Sum of mixed integers\n    print(sum_integers([10, -5, 5, 0]))  # Expected output: 10", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Raises:\n        ValueError: If the list is empty.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    # Check if the list is empty and raise an error if it is\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive integers\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    \n    # Test case 2: Normal case with larger integers\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    \n    # Test case 3: Case with negative integers\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    \n    # Test case 4: Case with mixed positive and negative integers\n    print(find_max_difference([-5, 0, 5]))  # Expected output: 10\n    \n    # Test case 5: Single element case (should raise an error)\n    try:\n        print(find_max_difference([42]))  # Expected output: 0 (only one element)\n    except ValueError as e:\n        print(e)  # Expected output: The list cannot be empty.\n    \n    # Test case 6: Empty list case (should raise an error)\n    try:\n        print(find_max_difference([]))  # Expected output: ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The list cannot be empty.", "result": "failed: The list cannot be empty.", "passed": false}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # Initialize an empty set to keep track of seen numbers\n    \n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if it's not seen yet\n    \n    return None  # Return None if no repeats are found\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Should return 2 as it is the first repeated number\n    print(find_repeat([1, 2, 3, 4, 5, 2]))  # Output: 2\n    \n    # Test case 2: Should return None as there are no repeated numbers\n    print(find_repeat([1, 2, 3, 4]))  # Output: None\n    \n    # Additional test cases\n    print(find_repeat([5, 1, 2, 3, 5]))  # Output: 5 (5 is repeated)\n    print(find_repeat([1, 2, 3, 4, 1, 2, 3]))  # Output: 1 (1 is the first repeated)\n    print(find_repeat([]))  # Output: None (empty list)\n    print(find_repeat([1]))  # Output: None (single element list)", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([1, 2, 3, 4, 5], 6)\n    0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the count\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    assert count_occurrences([], 1) == 0\n    assert count_occurrences([1, 1, 1, 1], 1) == 4\n    assert count_occurrences([1, 2, 3, 4, 5], 6) == 0\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 3, 3, 3, 4])\n    [2, 3]\n    \"\"\"\n    seen = set()  # Set to track seen items\n    duplicates = []  # List to store duplicates\n\n    for item in items:\n        if item in seen:\n            # If the item is already seen and not in duplicates, add it\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            # If the item is not seen, add it to the seen set\n            seen.add(item)\n\n    return duplicates\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected output: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected output: [5]\n    print(find_duplicates([1, 2, 3, 4]))          # Expected output: []\n    print(find_duplicates([1, 2, 2, 3, 3, 3, 4])) # Expected output: [2, 3]", "result": "failed: ", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" \n    Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    \n    seen = set()  # A set to track seen elements\n    unique_list = []  # A list to store unique elements in order\n    \n    for element in elements:\n        if element not in seen:  # Check if the element has not been seen before\n            seen.add(element)  # Add the element to the seen set\n            unique_list.append(element)  # Append the unique element to the result list\n            \n    return unique_list  # Return the list of unique elements\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected output: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected output: [5]\n    \n    # Additional test cases\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected output: [1, 2, 3]\n    print(unique_elements([]))                    # Expected output: []\n    print(unique_elements([1, 2, 3, 4, 5]))      # Expected output: [1, 2, 3, 4, 5]\n    print(unique_elements([1, 1, 2, 2, 3, 3, 4])) # Expected output: [1, 2, 3, 4]", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to be merged.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged_intervals = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end of the current interval\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged_intervals.append(current_interval)\n            # Move to the next interval\n            current_interval = intervals[i]\n    \n    # Add the last interval after the loop\n    merged_intervals.append(current_interval)\n    \n    return merged_intervals\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1\n    print(merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]))  # Expected: [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2\n    print(merge_overlapping_intervals([[1, 4], [4, 5]]))  # Expected: [[1, 5]]\n    \n    # Test case 3\n    print(merge_overlapping_intervals([[1, 4], [2, 3]]))  # Expected: [[1, 4]]\n    \n    # Test case 4\n    print(merge_overlapping_intervals([]))  # Expected: []\n    \n    # Test case 5\n    print(merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]]))  # Expected: [[1, 2], [3, 4], [5, 6]]", "result": "passed", "passed": true}
