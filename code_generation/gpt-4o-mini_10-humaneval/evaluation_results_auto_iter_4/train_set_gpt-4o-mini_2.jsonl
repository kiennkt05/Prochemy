{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n        \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    \"\"\"\n    # Calculate the sum of the integers using the built-in sum function\n    return sum(integers)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert sum_integers([1, 2, 3]) == 6, \"Test case 1 failed\"\n    assert sum_integers([-1, -2, 3]) == 0, \"Test case 2 failed\"\n    assert sum_integers([]) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert sum_integers([10, -10, 5]) == 5, \"Test case 4 failed\"\n    assert sum_integers([0, 0, 0]) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers to calculate the product of.\n        \n    Returns:\n        int: The product of all integers in the list. If the list is empty, returns 1.\n        \n    Examples:\n        >>> product_of_elements([1, 2, 3, 4])\n        24\n        >>> product_of_elements([-1, -2, -3])\n        -6\n        >>> product_of_elements([])\n        1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24, \"Test case 1 failed\"\n    assert product_of_elements([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert product_of_elements([]) == 1, \"Test case 3 failed\"  # Edge case: empty list\n    assert product_of_elements([0, 1, 2]) == 0, \"Test case 4 failed\"  # Edge case: includes zero\n    assert product_of_elements([5]) == 5, \"Test case 5 failed\"  # Edge case: single element\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Raises:\n        ValueError: If the list is empty.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list must not be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Standard case\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    # Test case 2: Another standard case\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    # Test case 3: Negative numbers\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    # Test case 4: Mixed positive and negative numbers\n    assert find_max_difference([-10, 0, 10]) == 20\n    # Test case 5: Single element (should raise an error)\n    try:\n        find_max_difference([5])\n    except ValueError as e:\n        assert str(e) == \"The list must not be empty.\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n        >>> count_unique_elements([1, 2, 2, 3, 4])\n        4\n        >>> count_unique_elements([1, 1, 1, 1])\n        1\n        >>> count_unique_elements([])  # Edge case: empty list\n        0\n        >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n        1\n        >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique\n        5\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                  # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))    # Expected output: 5"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function preserves the order of the first occurrences of the elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n        [5, 3, 2, 1]\n        >>> remove_duplicates([])\n        []\n    \"\"\"\n    unique_elements = []\n    seen = set()  # Set to track seen elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to result list\n    \n    return unique_elements\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 1, 3, 4, 4])\n    [2, 1, 4]\n    \"\"\"\n    seen = set()  # Set to track seen items\n    duplicates = []  # List to store duplicates\n\n    for item in items:\n        if item in seen:\n            # If the item is already seen and not in duplicates, add it\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            # If the item is not seen, add it to the seen set\n            seen.add(item)\n\n    return duplicates\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers where we want to count occurrences.\n        target (int): The integer whose occurrences we want to count.\n        \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Target appears in an empty list\n    assert count_occurrences([], 1) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Target appears multiple times in a large list\n    assert count_occurrences([1, 1, 1, 1, 1, 1, 1], 1) == 7, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    This function iterates through the input list and adds elements to a result list only if they have not been seen before.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark the element as seen\n            unique_list.append(element)  # Add to the unique list\n    \n    return unique_list  # Return the list of unique elements\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected: [5]\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected: [1, 2, 3]\n    print(unique_elements([]))                    # Expected: []\n    print(unique_elements([1, 2, 3, 4, 5]))      # Expected: [1, 2, 3, 4, 5]"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to be merged.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end of the current interval\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            # Move to the next interval\n            current_interval = intervals[i]\n    \n    # Add the last interval after the loop\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    print(merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]))  # Expected: [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2: No overlapping intervals\n    print(merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]]))  # Expected: [[1, 2], [3, 4], [5, 6]]\n    \n    # Test case 3: All intervals overlap\n    print(merge_overlapping_intervals([[1, 4], [2, 3], [3, 5]]))  # Expected: [[1, 5]]\n    \n    # Test case 4: Single interval\n    print(merge_overlapping_intervals([[1, 2]]))  # Expected: [[1, 2]]\n    \n    # Test case 5: Empty list\n    print(merge_overlapping_intervals([]))  # Expected: []"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for repeats.\n    \n    Returns:\n        Optional[int]: The first repeated integer, or None if no repeats exist.\n    \n    Examples:\n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # Initialize an empty set to track seen numbers\n    \n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set of seen numbers\n    \n    return None  # Return None if no repeats are found\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Should return 2\n    print(find_repeat([1, 2, 3, 4, 5, 2]))  # Output: 2\n    \n    # Test case 2: Should return None\n    print(find_repeat([1, 2, 3, 4]))  # Output: None\n    \n    # Additional test cases\n    print(find_repeat([5, 1, 2, 3, 5]))  # Output: 5\n    print(find_repeat([1, 2, 3, 4, 1, 2]))  # Output: 1\n    print(find_repeat([]))  # Output: None\n    print(find_repeat([1, 1, 1, 1]))  # Output: 1"}
