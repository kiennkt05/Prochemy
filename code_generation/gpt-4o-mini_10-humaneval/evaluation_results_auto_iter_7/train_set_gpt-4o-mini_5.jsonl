{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total_sum = 0\n    \n    # Iterate through each integer in the list and add it to total_sum\n    for number in integers:\n        total_sum += number\n    \n    return total_sum\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    print(sum_integers([]))  # Expected output: 0 (sum of an empty list)\n    print(sum_integers([10, -10, 5]))  # Expected output: 5\n    print(sum_integers([100, 200, 300]))  # Expected output: 600"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    print(find_max_difference([5]))  # Expected output: 0\n    print(find_max_difference([]))  # Expected output: 0"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Output: 1\n    print(count_unique_elements([]))                  # Output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))    # Output: 5\n    print(count_unique_elements([-1, -2, -2, -3, -4])) # Output: 4"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # Increment the counter if the current element matches the target\n        if element == target:\n            count += 1\n            \n    return count\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(count_occurrences([1, 2, 3, 3, 4], 3))  # Output: 2\n    print(count_occurrences([1, 2, 2, 2, 3, 4], 5))  # Output: 0\n    print(count_occurrences([], 1))  # Output: 0\n    print(count_occurrences([1, 1, 1, 1], 1))  # Output: 4"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function iterates through the input list and adds each element to a new list\n    only if it has not been seen before. The order of first appearance is preserved.\n    \n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_elements.append(element)  # Add to the unique list\n\n    return unique_elements  # Return the list of unique elements\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Output: [1, 2, 3, 4]"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    seen = set()          # To track seen items\n    duplicates = set()    # To track duplicates\n    result = []           # To maintain the order of duplicates\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.add(item)  # Add to duplicates only once\n                result.append(item)    # Maintain order of first occurrence\n        else:\n            seen.add(item)            # Mark item as seen\n\n    return result\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Output: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Output: [5]\n    print(find_duplicates([1, 2, 3, 4]))          # Output: []\n    print(find_duplicates([]))                      # Output: []"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. Returns 1 for an empty list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([]))             # Expected output: 1\n    print(product_of_elements([0, 1, 2]))      # Expected output: 0\n    print(product_of_elements([5]))             # Expected output: 5"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n        If there are no repeats, return None.\n        \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # A set to keep track of numbers we have seen\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if it's not seen yet\n    return None  # Return None if no repeats are found\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_repeat([1, 2, 3, 4, 5, 2]))  # Output: 2\n    print(find_repeat([1, 2, 3, 4]))         # Output: None\n    print(find_repeat([5, 1, 2, 3, 5, 4]))   # Output: 5\n    print(find_repeat([1, 2, 3, 1, 2, 3]))   # Output: 1\n    print(find_repeat([]))                     # Output: None"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one, merge them\n        if intervals[i][0] <= current_interval[1]:\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            current_interval = intervals[i]  # Move to the next interval\n    \n    # Add the last interval after the loop\n    merged.append(current_interval)\n    \n    return merged\n\n# Example test case\nif __name__ == \"__main__\":\n    print(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]))  # Output: [[1, 6], [8, 10], [15, 18]]"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    This function iterates through the input list and adds elements to a result list only if they\n    have not been seen before. A set is used to track seen elements for efficient look-up.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark the element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list  # Return the list of unique elements"}
