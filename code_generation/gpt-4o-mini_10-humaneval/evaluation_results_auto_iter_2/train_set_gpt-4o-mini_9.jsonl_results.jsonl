{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([0, 0, 0])  # Edge case: list of zeros\n    0\n    >>> sum_integers([1, -1, 1, -1])  # Edge case: positive and negative numbers\n    0\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total_sum = 0\n    \n    # Iterate through each integer in the list and add it to total_sum\n    for number in integers:\n        total_sum += number\n    \n    return total_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    print(sum_integers([]))  # Expected output: 0\n    print(sum_integers([0, 0, 0]))  # Expected output: 0\n    print(sum_integers([1, -1, 1, -1]))  # Expected output: 0", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([1, 2, 3, 4, 5], 0)\n    0\n    \"\"\"\n    count = 0  # Initialize the counter\n    for element in elements:  # Iterate through each element in the list\n        if element == target:  # Check if the current element is equal to the target\n            count += 1  # Increment the counter if it matches\n    return count  # Return the total count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    assert count_occurrences([], 1) == 0\n    assert count_occurrences([1, 1, 1, 1], 1) == 4\n    assert count_occurrences([1, 2, 3, 4, 5], 0) == 0\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1])\n    [1]\n    >>> unique_elements([1, 2, 3, 2, 1, 4, 5, 4])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list  # Return the list of unique elements\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n        >>> product_of_elements([1, 2, 3, 4])\n        24\n        >>> product_of_elements([-1, -2, -3])\n        -6\n        >>> product_of_elements([])\n        1\n        >>> product_of_elements([0, 1, 2])\n        0\n        >>> product_of_elements([5])\n        5\n    \"\"\"\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current number to the product\n    \n    return product  # Return the final product\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24, \"Test case 1 failed\"\n    assert product_of_elements([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert product_of_elements([]) == 1, \"Test case 3 failed\"  # Edge case: empty list\n    assert product_of_elements([0, 1, 2]) == 0, \"Test case 4 failed\"  # Edge case: includes zero\n    assert product_of_elements([5]) == 5, \"Test case 5 failed\"  # Edge case: single element\n    assert product_of_elements([-1, 2, -3]) == 6, \"Test case 6 failed\"  # Mixed signs\n    assert product_of_elements([2, 2, 2]) == 8, \"Test case 7 failed\"  # All same positive numbers\n    assert product_of_elements([-2, -2, -2]) == -8, \"Test case 8 failed\"  # All same negative numbers\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" \n    Given a list of integers, return the first number that is repeated. \n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # Initialize an empty set to track seen numbers\n    \n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen before\n    \n    return None  # Return None if no repeats are found\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: A list with a repeat\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: A list with no repeats\n    assert find_repeat([1, 2, 3, 4]) is None, \"Test case 2 failed\"\n    \n    # Test case 3: A list with multiple repeats\n    assert find_repeat([5, 1, 2, 5, 3, 2]) == 5, \"Test case 3 failed\"\n    \n    # Test case 4: A list with all elements the same\n    assert find_repeat([7, 7, 7, 7]) == 7, \"Test case 4 failed\"\n    \n    # Test case 5: An empty list\n    assert find_repeat([]) is None, \"Test case 5 failed\"\n    \n    # Test case 6: A list with negative numbers\n    assert find_repeat([-1, -2, -3, -1]) == -1, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the list is empty.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # The maximum difference is the difference between the max and min values\n    return max_value - min_value\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    # Test case 2: Another normal case\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    # Test case 3: Negative numbers\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    # Test case 4: Single element\n    assert find_max_difference([5]) == 0\n    # Test case 5: Mixed positive and negative numbers\n    assert find_max_difference([-5, 0, 5]) == 10\n    # Test case 6: Empty list should raise an exception\n    try:\n        find_max_difference([])\n    except ValueError as e:\n        assert str(e) == \"The list cannot be empty.\"\n    \n    print(\"All test cases passed!\")", "result": "failed: The list cannot be empty.", "passed": false}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                 # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))   # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))   # Expected output: 5\n    print(count_unique_elements([-1, -2, -2, -3, -4]))  # Expected output: 4", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 1, 3, 4, 4])\n    [2, 1, 4]\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:  # Only add to duplicates if it's not already there\n                duplicates.append(item)\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected: [5]\n    print(find_duplicates([1, 2, 3, 4]))         # Expected: []\n    print(find_duplicates([1, 2, 2, 1, 3, 4, 4])) # Expected: [2, 1, 4]\n    print(find_duplicates([]))                     # Expected: []", "result": "failed: ", "passed": false}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(elements)\n    \n    # Convert the set back to a list and return it\n    return list(unique_elements)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Expected output: [1]\n    \n    # Test case 3: No duplicates\n    print(remove_duplicates([5, 6, 7, 8]))      # Expected output: [5, 6, 7, 8]\n    \n    # Test case 4: Empty list\n    print(remove_duplicates([]))                 # Expected output: []\n    \n    # Test case 5: Mixed duplicates\n    print(remove_duplicates([10, 20, 10, 30, 20, 40]))  # Expected output: [10, 20, 30, 40]", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the starting values\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Step 3: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    print(merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]))  # Expected: [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2: No overlapping intervals\n    print(merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]]))  # Expected: [[1, 2], [3, 4], [5, 6]]\n    \n    # Test case 3: All intervals overlap\n    print(merge_overlapping_intervals([[1, 4], [2, 3], [3, 5]]))  # Expected: [[1, 5]]\n    \n    # Test case 4: Single interval\n    print(merge_overlapping_intervals([[1, 2]]))  # Expected: [[1, 2]]\n    \n    # Test case 5: Empty list\n    print(merge_overlapping_intervals([]))  # Expected: []\n    \n    # Test case 6: Complex overlapping intervals\n    print(merge_overlapping_intervals([[1, 10], [2, 6], [8, 10], [15, 18], [17, 20]]))  # Expected: [[1, 10], [15, 20]]", "result": "passed", "passed": true}
