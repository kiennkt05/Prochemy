{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    \"\"\"\n    # Use the built-in sum function to calculate the sum of the list\n    return sum(integers)\n\n# Test cases to verify the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 6, 6, 7])\n    3\n    \"\"\"\n    # Convert the list to a set to filter out duplicate elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # If the list is empty, return 0\n        return 0\n    if len(numbers) == 1:  # If there's only one element, the difference is 0\n        return 0\n    \n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    return max_value - min_value  # Return the difference\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    If the list is empty, the function returns 1.\n    \n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    \"\"\"\n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current number to the product\n    \n    return product  # Return the final product\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([]))              # Expected output: 1\n    print(product_of_elements([0, 1, 2]))       # Expected output: 0\n    print(product_of_elements([5]))              # Expected output: 5", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    \"\"\"\n    # Use a set to track seen elements\n    seen = set()\n    unique_elements = []\n    \n    # Iterate through each element in the input list\n    for element in elements:\n        # If the element has not been seen before, add it to the unique list\n        if element not in seen:\n            unique_elements.append(element)\n            seen.add(element)  # Mark this element as seen\n    \n    return unique_elements\n\n# Test cases to verify the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    # Test case 2: All elements are the same\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    # Test case 3: No duplicates\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    # Test case 4: Mixed duplicates\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    # Test case 5: Empty list\n    assert remove_duplicates([]) == []\n    \n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = []  # To store duplicates\n\n    for item in items:\n        if item in seen:\n            # If the item is already seen, check if it's already in duplicates\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates  # Return the list of duplicates\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected output: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected output: [5]\n    print(find_duplicates([1, 2, 3, 4]))         # Expected output: []\n    print(find_duplicates([1, 1, 2, 2, 3, 3]))   # Expected output: [1, 2, 3]\n    print(find_duplicates([]))                     # Expected output: []", "result": "failed: ", "passed": false}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # A set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:  # Check if the number has already been seen\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if it's not seen yet\n    return None  # Return None if no repeats are found\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    # Test case 1: Should return 2 as it is the first repeated number\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2\n    # Test case 2: Should return None as there are no repeated numbers\n    assert find_repeat([1, 2, 3, 4]) is None\n    # Test case 3: Should return 3 as it is the first repeated number\n    assert find_repeat([1, 2, 3, 3, 4, 5]) == 3\n    # Test case 4: Should return 1 as it is the first repeated number\n    assert find_repeat([1, 1, 2, 3, 4]) == 1\n    # Test case 5: Should return None for an empty list\n    assert find_repeat([]) is None\n    # Test case 6: Should return 5 as it is the first repeated number\n    assert find_repeat([5, 6, 7, 5, 8, 9]) == 5\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order. \n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    \"\"\"\n    seen = set()  # A set to keep track of seen elements\n    unique_list = []  # A list to store the unique elements in order\n\n    for element in elements:\n        if element not in seen:  # Check if the element has not been seen\n            seen.add(element)  # Add the element to the seen set\n            unique_list.append(element)  # Append the unique element to the result list\n\n    return unique_list  # Return the list of unique elements\n\n# Test cases to verify the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected output: [1, 2, 3, 4]\n    # Test case 2\n    print(unique_elements([5, 5, 5]))  # Expected output: [5]\n    # Additional test case\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected output: [1, 2, 3]\n    # Additional test case with no duplicates\n    print(unique_elements([10, 20, 30]))  # Expected output: [10, 20, 30]\n    # Additional test case with all duplicates\n    print(unique_elements([7, 7, 7, 7]))  # Expected output: [7]", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n    elements (List[int]): A list of integers to search through.\n    target (int): The integer to count occurrences of.\n    \n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1\n    # Test case 4: Target appears at the beginning\n    assert count_occurrences([3, 1, 2, 3, 4], 3) == 2\n    # Test case 5: Empty list\n    assert count_occurrences([], 1) == 0\n    # Test case 6: All elements are the target\n    assert count_occurrences([2, 2, 2, 2], 2) == 4\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the starting point\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Step 3: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Provided test case\n    print(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]))  # Expected: [[1,6],[8,10],[15,18]]\n    \n    # Additional test cases\n    print(merge_overlapping_intervals([[1,4],[4,5]]))  # Expected: [[1,5]]\n    print(merge_overlapping_intervals([[1,2],[3,4],[5,6]]))  # Expected: [[1,2],[3,4],[5,6]]\n    print(merge_overlapping_intervals([[1,3],[2,4],[5,7],[6,8]]))  # Expected: [[1,4],[5,8]]\n    print(merge_overlapping_intervals([]))  # Expected: []", "result": "passed", "passed": true}
