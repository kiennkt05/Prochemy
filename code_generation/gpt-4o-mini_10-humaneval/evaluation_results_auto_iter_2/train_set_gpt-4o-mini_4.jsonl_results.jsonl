{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([0, 1, 2, 3])\n    0\n    >>> product_of_elements([1, 2, 0, 4])\n    0\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([0, 1, 2, 3]))   # Expected output: 0\n    print(product_of_elements([1, 2, 0, 4]))   # Expected output: 0\n    print(product_of_elements([]))              # Expected output: 1", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5])\n    5\n    >>> find_repeat([1, 2, 3, 4, 1])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 2, 3, 4])\n    2\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return number\n        seen.add(number)\n    return None\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    return elements.count(target)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1\n    \n    # Test case 4: Empty list\n    assert count_occurrences([], 1) == 0\n    \n    # Test case 5: Target is the only element in the list\n    assert count_occurrences([1], 1) == 1\n    \n    # Test case 6: Target appears at the beginning and end\n    assert count_occurrences([1, 2, 3, 1], 1) == 2\n    \n    # Test case 7: Large list with many occurrences\n    assert count_occurrences([1] * 1000 + [2] * 1000, 1) == 1000\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    >>> find_max_difference([1, 1, 1, 1])\n    0\n    \"\"\"\n    if not numbers:  # Handle empty list case\n        return 0\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    \n    # Additional test cases\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    print(find_max_difference([5]))  # Expected output: 0 (only one element)\n    print(find_max_difference([1, 1, 1, 1]))  # Expected output: 0 (all elements are the same)\n    print(find_max_difference([]))  # Expected output: 0 (empty list)", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1, 5]]\n    >>> merge_overlapping_intervals([[1,4],[2,3]])\n    [[1, 4]]\n    >>> merge_overlapping_intervals([[1,2],[3,4],[5,6]])\n    [[1, 2], [3, 4], [5, 6]]\n    >>> merge_overlapping_intervals([])\n    []\n    >>> merge_overlapping_intervals([[1, 5], [2, 3], [4, 6], [7, 8], [8, 10]])\n    [[1, 6], [7, 10]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = [intervals[0]]  # Start with the first interval\n\n    # Step 2: Iterate through the sorted intervals\n    for current in intervals[1:]:\n        last_merged = merged[-1]\n        \n        # Check if there is an overlap\n        if current[0] <= last_merged[1]:  # Overlapping intervals\n            last_merged[1] = max(last_merged[1], current[1])  # Merge\n        else:\n            merged.append(current)  # No overlap, add to merged list\n\n    return merged\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order. \n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1])\n    [1]\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()\n    unique_list = []\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)\n            unique_list.append(element)\n    \n    return unique_list\n\n# Test cases\nif __name__ == \"__main__\":\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected: [5]\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected: [1, 2, 3]\n    print(unique_elements([]))                    # Expected: []\n    print(unique_elements([1]))                   # Expected: [1]\n    print(unique_elements([1, 2, 3, 4, 5]))      # Expected: [1, 2, 3, 4, 5]", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n    \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5, 5])  # Mixed positive and negative\n    10\n    >>> sum_integers([100, 200, 300])  # Large numbers\n    600\n    >>> sum_integers([-5, -5, -5])  # All negative numbers\n    -15\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0\n    assert sum_integers([10, -10, 5, 5]) == 10\n    assert sum_integers([100, 200, 300]) == 600\n    assert sum_integers([-5, -5, -5]) == -15\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 6, 6])\n    2\n    >>> count_unique_elements([-1, -2, -2, -3, -1])\n    3\n    >>> count_unique_elements([0, 0, 0, 0])\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5, 6])\n    6\n    \"\"\"\n    return len(set(lst))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the test cases\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                 # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 6, 6])) # Expected output: 2\n    print(count_unique_elements([-1, -2, -2, -3, -1])) # Expected output: 3\n    print(count_unique_elements([0, 0, 0, 0]))      # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5, 6])) # Expected output: 6", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 1, 2])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    # Use a set to track unique elements\n    unique_elements = set()\n    result = []\n    \n    for element in elements:\n        if element not in unique_elements:\n            unique_elements.add(element)\n            result.append(element)\n    \n    return result\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Expected: [1, 2, 3, 4]\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Expected: [1]\n    \n    # Additional test cases\n    print(remove_duplicates([5, 3, 5, 2, 1, 2]))  # Expected: [5, 3, 2, 1]\n    print(remove_duplicates([]))  # Expected: []\n    print(remove_duplicates([10, 20, 10, 30, 20, 40]))  # Expected: [10, 20, 30, 40]", "result": "failed: ", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 1])\n    [2, 1]\n    \"\"\"\n    seen = set()\n    duplicates = []\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected: [5]\n    print(find_duplicates([1, 2, 3]))             # Expected: []\n    print(find_duplicates([]))                     # Expected: []\n    print(find_duplicates([1, 2, 3, 2, 1, 4, 5, 1]))  # Expected: [2, 1]", "result": "failed: ", "passed": false}
