{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n    \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5, 5])\n    10\n    \"\"\"\n    # Calculate the sum of the integers in the list using the built-in sum function\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Test case 1: Regular positive integers\n    assert sum_integers([1, 2, 3]) == 6, \"Test case 1 failed\"\n    \n    # Test case 2: Mixed negative and positive integers\n    assert sum_integers([-1, -2, 3]) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Edge case with an empty list\n    assert sum_integers([]) == 0, \"Test case 3 failed\"\n    \n    # Test case 4: Mixed integers with zero\n    assert sum_integers([10, -10, 5, 5]) == 10, \"Test case 4 failed\"\n    \n    # Test case 5: All negative integers\n    assert sum_integers([-5, -5, -5]) == -15, \"Test case 5 failed\"\n    \n    # Test case 6: Large integers\n    assert sum_integers([1000000, 2000000, 3000000]) == 6000000, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([0, 1, 2, 3])\n    0\n    >>> product_of_elements([5])\n    5\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    \"\"\"\n    # Use a set to store unique elements since sets do not allow duplicates\n    unique_elements = set(lst)\n    \n    # The number of unique elements is the size of the set\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the program\nif __name__ == \"__main__\":\n    # Test case 1: List with some duplicates\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4, \"Test case 1 failed\"\n    \n    # Test case 2: List with all duplicates\n    assert count_unique_elements([1, 1, 1, 1]) == 1, \"Test case 2 failed\"\n    \n    # Test case 3: Empty list\n    assert count_unique_elements([]) == 0, \"Test case 3 failed\"\n    \n    # Test case 4: List with negative numbers\n    assert count_unique_elements([-1, -2, -2, -3, -4]) == 4, \"Test case 4 failed\"\n    \n    # Test case 5: List with mixed positive and negative numbers\n    assert count_unique_elements([-1, 0, 1, 1, 2, -1]) == 4, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # A set to keep track of numbers we have seen\n    for number in numbers:\n        if number in seen:  # Check if the number has already been seen\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if it's not seen\n    return None  # Return None if no repeats are found\n\n# Test cases to validate the functionality of the program\nif __name__ == \"__main__\":\n    # Test case 1: A list with a repeat\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: A list with no repeats\n    assert find_repeat([1, 2, 3, 4]) is None, \"Test case 2 failed\"\n    \n    # Test case 3: A list with multiple repeats\n    assert find_repeat([5, 1, 2, 5, 3, 1]) == 5, \"Test case 3 failed\"\n    \n    # Test case 4: A list with all elements the same\n    assert find_repeat([7, 7, 7, 7]) == 7, \"Test case 4 failed\"\n    \n    # Test case 5: An empty list\n    assert find_repeat([]) is None, \"Test case 5 failed\"\n    \n    # Test case 6: A list with negative numbers\n    assert find_repeat([-1, -2, -3, -1]) == -1, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers in the order of their first occurrence.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    unique_elements = []  # List to store unique elements\n    seen = set()  # Set to track seen elements for quick lookup\n    \n    for element in elements:\n        if element not in seen:  # Check if the element has not been seen before\n            seen.add(element)  # Add the element to the seen set\n            unique_elements.append(element)  # Append the unique element to the result list\n            \n    return unique_elements  # Return the list of unique elements", "result": "failed: ", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order of their first appearance.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    unique_list = []  # List to store unique elements\n    seen = set()      # Set to track seen elements for O(1) lookups\n    \n    for element in elements:\n        if element not in seen:  # Check if the element has not been seen\n            seen.add(element)     # Add the element to the seen set\n            unique_list.append(element)  # Append to the unique list\n            \n    return unique_list  # Return the list of unique elements", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    # If there are no intervals, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end time\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to merged list\n            merged.append(current_interval)\n            current_interval = intervals[i]  # Move to the next interval\n    \n    # Add the last interval\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to validate the functionality of the program\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    \n    # Test case 3: All intervals overlap\n    assert merge_overlapping_intervals([[1,4],[2,3],[3,5]]) == [[1,5]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1,2]]) == [[1,2]]\n    \n    # Test case 5: Empty list of intervals\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Complex overlapping intervals\n    assert merge_overlapping_intervals([[1,4],[0,4]]) == [[0,4]]\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0  # Return 0 if there are no elements to compare\n    \n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    # The maximum difference is the difference between the max and min values\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the functionality of the program\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4, \"Test case 1 failed\"\n    assert find_max_difference([10, 20, 30, 40]) == 30, \"Test case 2 failed\"\n    assert find_max_difference([-10, -20, -30, -40]) == 30, \"Test case 3 failed\"\n    assert find_max_difference([5]) == 0, \"Test case 4 failed\"  # Only one element\n    assert find_max_difference([]) == 0, \"Test case 5 failed\"  # Empty list\n    assert find_max_difference([1, -1, 0]) == 2, \"Test case 6 failed\"  # Mixed positive and negative\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    \"\"\"\n    seen = set()  # A set to keep track of seen elements\n    duplicates = []  # A list to store duplicates\n\n    for item in items:\n        if item in seen:\n            # If the item is already in seen, it's a duplicate\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already added\n        else:\n            seen.add(item)  # Add the item to seen if it's not already there\n\n    return duplicates  # Return the list of duplicates", "result": "failed: ", "passed": false}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Target appears at the beginning\n    assert count_occurrences([3, 1, 2, 3, 4], 3) == 2, \"Test case 4 failed\"\n    \n    # Test case 5: Empty list\n    assert count_occurrences([], 1) == 0, \"Test case 5 failed\"\n    \n    # Test case 6: All elements are the target\n    assert count_occurrences([2, 2, 2, 2], 2) == 4, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
