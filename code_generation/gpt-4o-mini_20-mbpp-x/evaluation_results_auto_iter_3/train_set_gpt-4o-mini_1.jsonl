{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test case 2: Some empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]\n    \n    # Test case 3: All empty sublists\n    assert Extract([[], [], []]) == []\n    \n    # Test case 4: Single sublist\n    assert Extract([[42]]) == [42]\n    \n    # Test case 5: Mixed types in sublists\n    assert Extract([[1, 'a'], [2.5, 3], ['hello', 'world']]) == [1, 2.5, 'hello']\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"  # Empty tuple\n    assert count_tuplex((None, None, 1, 2), None) == 2, \"Test Case 5 Failed\"  # Counting None\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with special characters\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    \n    # Test case 2: String with only special characters\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test case 3: String with spaces and alphanumeric characters\n    assert remove_splchar('Hello World 2023!') == 'HelloWorld2023'\n    \n    # Test case 4: Empty string\n    assert remove_splchar('') == ''\n    \n    # Test case 5: String with numbers and letters only\n    assert remove_splchar('abc123') == 'abc123'\n    \n    # Test case 6: Non-string input\n    try:\n        remove_splchar(123)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal numbers (0, 2, or 3)\n    \n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count the number of equal integers\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n    assert test_three_equal(3, 3, 3) == 3, \"Test case 6 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\nif __name__ == \"__main__\":\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAJSI') == 'KDAJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 5: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW! 123'\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('1234!@#$%^&*()') == '1234!@#$%^&*()'\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the Kth index in the given tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the Kth elements of each tuple.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: K is 0 (first element)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 0) == 40, \"Test case 2 failed\"\n    \n    # Test case 3: K is 1 (second element)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 1) == 162, \"Test case 3 failed\"\n    \n    # Test case 4: K is out of bounds\n    try:\n        find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 3)\n    except IndexError as e:\n        assert str(e) == \"Index 3 is out of bounds for tuple (5, 6, 7).\", \"Test case 4 failed\"\n    \n    # Test case 5: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Profit exists\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 1 failed\"\n    \n    # Test case 2: No profit\n    assert profit_amount(1500, 1200) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Break-even\n    assert profit_amount(1500, 1500) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Negative profit\n    assert profit_amount(2000, 1500) is None, \"Test case 4 failed\"\n    \n    # Test case 5: Zero profit\n    assert profit_amount(1000, 1000) is None, \"Test case 5 failed\"\n    \n    # Test case 6: Non-numeric input\n    try:\n        profit_amount(\"1500\", 1800)\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numbers.\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list `nums` by the integer `n` using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the results of the multiplication.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"The first argument must be a list of numbers.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be a number.\")\n\n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case provided in the description\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Additional test cases\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10]  # Testing with zero\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]  # Testing with negative numbers\n    assert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]  # Testing with floats\n    assert ntimes_list([], 10) == []  # Testing with an empty list\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses the vowels in the given string while keeping the consonants in their original positions.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'Leotcede'\n    \"\"\"\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the functionality\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"LeetCode\") == \"Leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorials % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6\nassert ncr_modp(5, 2, 7) == 3\nassert ncr_modp(10, 0, 13) == 1  # nC0 is always 1\nassert ncr_modp(10, 10, 13) == 1  # nCn is always 1\nassert ncr_modp(10, 5, 13) == 10  # 10C5 % 13 should be 10\nassert ncr_modp(0, 0, 13) == 1  # 0C0 is always 1\nassert ncr_modp(10, 11, 13) == 0  # nCr is 0 if r > n\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Test cases to validate the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Test cases\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of the fibonacci function\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value to the smallest possible integer\n    max_val = float('-inf')\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([10, 20, 30, 40, 50]) == 50\n    assert max_value([5]) == 5\n\n    # Edge case: empty list\n    try:\n        max_value([])\n    except ValueError as e:\n        print(f\"Test passed: {e}\")\n\n    # Edge case: non-integer elements\n    try:\n        max_value([1, 2, '3', 4])\n    except ValueError as e:\n        print(f\"Test passed: {e}\")\n\n    # Edge case: not a list\n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        print(f\"Test passed: {e}\")\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring\n\n    return max_length\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_substring('abcde', 'abfce') == 2, \"Test case 7 failed\"\n    assert longest_common_substring('xyz', 'xyzabc') == 3, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): The input matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid matrix.\n    \"\"\"\n    if not matrix or not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list (matrix).\")\n    \n    # Check if all rows are of the same length\n    row_length = len(matrix[0])\n    if any(len(row) != row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n\n    # Get the number of rows and columns\n    m = len(matrix)\n    n = len(matrix[0])\n\n    # Create a new matrix for the rotated version\n    rotated = [[0] * m for _ in range(n)]\n\n    # Fill the rotated matrix\n    for i in range(m):\n        for j in range(n):\n            rotated[j][m - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x3 matrix\n    assert rotate_matrix([[1, 2, 3]]) == [[1], [2], [3]]\n    \n    # Test case 4: 3x1 matrix\n    assert rotate_matrix([[1], [2], [3]]) == [[3, 2, 1]]\n    \n    # Test case 5: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty 2D list (matrix).\"\n    \n    # Test case 6: Non-rectangular matrix\n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"All rows in the matrix must have the same length.\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Handle empty strings\n    if not s1 or not s2:\n        return 0\n    \n    # Initialize the dp table\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Fill the dp table\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('abcde', 'bdgek') == 3, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")"}
