{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Use a list comprehension to filter out non-alphanumeric characters\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    \n    return cleaned_text\n\n# Test cases to verify the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('abcDEF123') == 'abcDEF123'\n    assert remove_splchar('Python3.8') == 'Python38'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to replace all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test case to verify the functionality of the remove_lowercase function\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\n# Additional test cases\nassert remove_lowercase('HelloWorld') == 'HW'\nassert remove_lowercase('Python3.8') == 'P3.'\nassert remove_lowercase('123abcXYZ') == '123XYZ'\nassert remove_lowercase('') == ''  # Edge case: empty string\nassert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # No lowercase letters\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of list): A list containing sublists.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to verify the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test case 2: Some empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]\n    \n    # Test case 3: All empty sublists\n    assert Extract([[], [], []]) == []\n    \n    # Test case 4: Single sublist\n    assert Extract([[42]]) == [42]\n    \n    # Test case 5: Mixed types in sublists\n    assert Extract([[1, 'a'], [2.5, 3], ['hello', 'world']]) == [1, 2.5, 'hello']\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among x, y, and z\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Compare the integers and increment the count accordingly\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 for each pair of equal numbers)\n    return count\n\n# Test cases to verify the functionality of the function\nassert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\nassert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\nassert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\nassert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\nassert test_three_equal(5, 5, 3) == 2, \"Test case 5 failed\"\nassert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\nassert test_three_equal(-1, -1, 1) == 1, \"Test case 7 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: Test case 2 failed", "passed": false}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Check if inputs are valid numbers\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numeric values.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to verify the functionality\nassert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\nassert profit_amount(1500, 1800) == 300, \"Test Case 2 Failed\"\nassert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\nassert profit_amount(500, 700) == 200, \"Test Case 4 Failed\"\nassert profit_amount(0, 100) == 100, \"Test Case 5 Failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to multiply each element in nums by n\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to verify the functionality of the ntimes_list function\nif __name__ == \"__main__\":\n    # Test case 1: Basic functionality\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2: Multiplying by 0\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test case 4: Multiplying by 1 (identity)\n    assert ntimes_list([1, 2, 3], 1) == [1, 2, 3]\n    \n    # Test case 5: Empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test case 6: Large numbers\n    assert ntimes_list([1000, 2000, 3000], 2) == [2000, 4000, 6000]\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Handle edge case where r > n\n    if r > n:\n        return 0\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    nCr = (fact[n] * mod_inverse(fact[r], p) % p * mod_inverse(fact[n - r], p) % p) % p\n    return nCr\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\nassert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\nassert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\nassert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 is 1\nassert ncr_modp(5, 6, 10) == 0, \"Test case 5 failed\"  # 5C6 is 0\n\nprint(\"All test cases passed!\")", "result": "failed: Test case 3 failed", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string to reverse vowels in.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define the set of vowels\n    vowels = \"aeiouAEIOU\"\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to verify the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\", \"Test Case 8 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    return tuplex.count(value)\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Count of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Function to find the product of the elements at the Kth index in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the Kth index.\n    K (int): The index of the elements to be multiplied.\n    \n    Returns:\n    int: The product of the elements at the Kth index.\n    \n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty or contains non-tuple elements.\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize product\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if the current element is a tuple\n        if not isinstance(tup, tuple):\n            raise ValueError(\"All elements in the input list must be tuples.\")\n        \n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the Kth element\n        product *= tup[K]\n    \n    return product\n\n# Test cases to verify the functionality of the code\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(10, 20), (30, 40)], 1) == 800, \"Test case 4 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for tuple (1, 2).\", \"Test case 6 failed\"\n    \n    try:\n        find_k_product([(1, 2), [3, 4]], 0)\n    except ValueError as e:\n        assert str(e) == \"All elements in the input list must be tuples.\", \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Using an iterative approach to calculate Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to verify the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    return transposed\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Non-square matrix (should raise ValueError)\n    try:\n        rotate_matrix([[1, 2], [3, 4, 5]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \n    Raises:\n    ValueError: If a or b is not an integer\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases to verify the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to verify the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    max_length = 0  # Variable to keep track of the maximum length found\n    \n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n    \n    return max_length\n\n# Test cases to verify the functionality\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0        # No common substring\nassert longest_common_substring('abcdxyz', 'xyzabcd') == 4  # 'abcd' is the longest common substring\nassert longest_common_substring('', 'abc') == 0            # One string is empty\nassert longest_common_substring('abc', '') == 0            # One string is empty\nassert longest_common_substring('', '') == 0               # Both strings are empty\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value to the smallest possible integer\n    max_val = float('-inf')\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases to verify the functionality of the max_value function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    # Test case 2: Negative numbers\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    # Test case 3: Mixed positive and negative numbers\n    assert max_value([-1, 0, 1, 2, -2]) == 2\n    # Test case 4: Single element\n    assert max_value([42]) == 42\n    # Test case 5: All elements are the same\n    assert max_value([7, 7, 7, 7]) == 7\n    # Test case 6: Empty list (should raise an error)\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\"\n    # Test case 7: Invalid input (not a list)\n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\"\n    # Test case 8: Invalid input (contains non-integer)\n    try:\n        max_value([1, 2, 'three'])\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers.\"\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to verify the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix until it matches the start of the string\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases to verify the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
