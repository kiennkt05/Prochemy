{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\nif __name__ == \"__main__\":\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAJSI') == 'KDAJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW! 123'\n    \n    # Test case 5: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('1234!@#$%^&*()') == '1234!@#$%^&*()'\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the functionality\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\", \"Test Case 8 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regular expression to remove non-alphanumeric characters\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    \n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Testing with different types of input\n    try:\n        remove_splchar(12345)  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Using a list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test case 2: Sublist with a single element\n    assert Extract([[10], [20, 21], [30, 31, 32]]) == [10, 20, 30]\n    \n    # Test case 3: Empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]  # Should skip the empty sublist\n    \n    # Test case 4: All sublists are empty\n    assert Extract([[], [], []]) == []  # Should return an empty list\n    \n    # Test case 5: Mixed empty and non-empty sublists\n    assert Extract([[1], [], [2], [3, 4]]) == [1, 2, 3]  # Should skip the empty sublist\n    \n    # Test case 6: No sublists\n    assert Extract([]) == []  # Should return an empty list\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numeric values.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 1 failed\"\n    \n    # Test case 2: No profit scenario\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss scenario\n    assert profit_amount(1500, 1200) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Invalid input (string)\n    try:\n        profit_amount(1500, \"1800\")\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numeric values.\", \"Test case 4 failed\"\n    \n    # Test case 5: Invalid input (None)\n    try:\n        profit_amount(None, 1800)\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numeric values.\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal integers among the three inputs\n    \"\"\"\n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Initialize a count for equal numbers\n    count = 0\n\n    # Compare the integers and count the equal ones\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n\n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n\n    # Return the count of equal pairs (1 or 2)\n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 5 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 6 failed\"\n    assert test_three_equal(1, 2, -1) == 0, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list with each element multiplied by 'n'.\n\n    Raises:\n    ValueError: If 'nums' is not a list or if 'n' is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n\n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test cases to validate the functionality\ndef test_ntimes_list():\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21], \"Test case 1 failed\"\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10], \"Test case 2 failed\"\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6], \"Test case 3 failed\"\n    assert ntimes_list([10], 10) == [100], \"Test case 4 failed\"\n    assert ntimes_list([], 3) == [], \"Test case 5 failed\"  # Edge case: empty list\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count occurrences of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count occurrences of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count occurrences of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Count occurrences in an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    # Test case 6: Invalid input type\n    try:\n        count_tuplex([1, 2, 3], 1)\n    except TypeError as e:\n        assert str(e) == \"The first argument must be a tuple.\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the Kth elements from each tuple.\n\n    Raises:\n    ValueError: If K is out of bounds for the tuples in the list.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        return 0  # Return 0 or raise an error based on requirements\n\n    # Check if K is a valid index\n    if K < 0 or K >= len(test_list[0]):\n        raise ValueError(\"K is out of bounds for the tuples in the list.\")\n\n    product = 1\n    for tup in test_list:\n        product *= tup[K]  # Multiply the Kth element of each tuple\n\n    return product\n\n# Test cases to validate the functionality\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 3, 4), (1, 2, 3), (4, 5, 6)], 1) == 30, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(10, 20), (30, 40)], 1) == 800, \"Test case 4 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"K is out of bounds for the tuples in the list.\", \"Test case 5 failed\"\n\n    try:\n        find_k_product([(1, 2)], 2)\n    except ValueError as e:\n        assert str(e) == \"K is out of bounds for the tuples in the list.\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorials % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case from the prompt\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    assert ncr_modp(5, 0, 10) == 1, \"Test case 5 failed\"  # nC0 is 1\n    assert ncr_modp(5, 5, 10) == 1, \"Test case 6 failed\"  # nCn is 1\n    assert ncr_modp(10, 3, 11) == 4, \"Test case 7 failed\"  # 10C3 % 11\n    assert ncr_modp(10, 2, 1) == 0, \"Test case 8 failed\"  # Modulo 1 should always return 0\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not a non-negative integer\n    \"\"\"\n    # Validate input\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both a and b must be non-negative integers.\")\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Basic test case\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert gcd(54, 24) == 6, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD(0, b) = b\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD(a, 0) = a\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    assert fibonacci(20) == 6765, \"Test case 20 failed\"\n    \n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Test cases to validate the functionality of the rotate_matrix function\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Non-square matrix should raise ValueError\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, return it\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input list contains non-integer values.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise TypeError(f\"All elements in the list must be integers. Found: {num}\")\n        \n        # Update max_val if the current number is greater\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of max_value\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value([])  # Should raise ValueError\n    except ValueError:\n        pass  # Expected behavior\n\n    try:\n        max_value([1, 2, '3'])  # Should raise TypeError\n    except TypeError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference for comparison\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        # Compare the character at the current index with the same index in all other strings\n        for string in strs[1:]:\n            # If the index is out of bounds or characters do not match\n            if i >= len(string) or string[i] != prefix[i]:\n                # Return the prefix up to the current index\n                return prefix[:i]\n    \n    # If we complete the loop, the entire prefix is common\n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'che', \"Test case 5 failed\"\n    assert longest_common_prefix(['a']) == 'a', \"Test case 6 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 7 failed\"\n    assert longest_common_prefix(['']) == '', \"Test case 8 failed\"\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Edge case: if either string is empty, the longest common substring is 0\n    if not s1 or not s2:\n        return 0\n    \n    # Initialize a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    longest_length = 0  # Variable to keep track of the longest length found\n    \n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return longest_length\n\n# Test cases to validate the functionality\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to validate the functionality\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
