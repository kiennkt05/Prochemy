{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to remove all lowercase letters\n    result = re.sub(r'[a-z]', '', str1)\n    \n    return result\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Additional test cases\n    assert remove_lowercase('HelloWorld') == 'HW'\n    assert remove_lowercase('Python3IsFun') == 'P3IF'\n    assert remove_lowercase('123abcXYZ') == '123XYZ'\n    assert remove_lowercase('') == ''  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # Edge case: all uppercase\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is not a list or is empty.\n    \"\"\"\n    result = []\n    \n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"All elements of the input must be lists.\")\n        if len(sublist) == 0:\n            raise ValueError(\"Sublists cannot be empty.\")\n        \n        result.append(sublist[0])\n    \n    return result\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40], \"Test case 2 failed\"\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f'], \"Test case 3 failed\"\n    \n    try:\n        Extract([[1, 2], [], [3, 4]])  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"Sublists cannot be empty.\", \"Test case 4 failed\"\n    \n    try:\n        Extract([[1, 2], 'not a list', [3, 4]])  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"All elements of the input must be lists.\", \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise None\n    return profit if profit > 0 else None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\n    assert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\n    assert profit_amount(500, 700) == 200.0, \"Test case 4 failed\"\n    assert profit_amount(0, 100) == 100.0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('1234!@#$%^&*()') == '1234'\n    assert remove_splchar('Hello, World!') == 'HelloWorld'\n    assert remove_splchar('') == ''\n    assert remove_splchar('NoSpecialChars') == 'NoSpecialChars'\n    \n    try:\n        remove_splchar(1234)  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n\n    print(\"All tests passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_splchar()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Initialize count\n    count = 0\n    \n    # Count occurrences of the value\n    for item in tuplex:\n        if item == value:\n            count += 1\n            \n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic functionality\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Value not in tuple\n    assert count_tuplex((1, 2, 3), 4) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 3 failed\"\n    \n    # Test case 4: Multiple types in tuple\n    assert count_tuplex((1, 'a', 1, 'b', 1), 1) == 3, \"Test case 4 failed\"\n    \n    # Test case 5: Non-tuple input\n    try:\n        count_tuplex([1, 2, 3], 1)\n    except TypeError as e:\n        assert str(e) == \"The first argument must be a tuple.\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    >>> reverse_vowels(\"\")\n    ''\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    \"\"\"\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)  # Convert string to a list for mutability\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    reversed_vowels = [str_list[i] for i in reversed(vowel_indices)]\n    \n    for index, vowel in zip(vowel_indices, reversed_vowels):\n        str_list[index] = vowel\n    \n    return ''.join(str_list)\n\n# Test cases\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 4 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 5 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 6 failed\"\n    assert reverse_vowels(\"a quick brown fox\") == \"a qick brawn fox\", \"Test case 7 failed\"\n    assert reverse_vowels(\"AEIOU\") == \"UOIEA\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Edge case: if r > n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Calculate the result using modular inverse\n    result = (numerator * mod_inverse(denominator, p)) % p\n    \n    return result\n\n# Test cases\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 3, 5) == 0, \"Test case 3 failed\"  # 120 % 5 = 0\n    assert ncr_modp(0, 0, 7) == 1, \"Test case 4 failed\"  # 0C0 = 1\n    assert ncr_modp(5, 5, 11) == 1, \"Test case 5 failed\"  # 5C5 = 1\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 6 failed\"  # 10C5 % 100 = 252\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_ncr_modp()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the kth elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the kth elements from each tuple.\n\n    Raises:\n    ValueError: If the input list is empty or K is out of bounds.\n    \"\"\"\n    # Validate input\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    if K < 0 or K >= len(test_list[0]):\n        raise ValueError(f\"K must be between 0 and {len(test_list[0]) - 1}.\")\n\n    product = 1\n    for tup in test_list:\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: K is 0\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 0) == 40, \"Test case 2 failed\"\n    \n    # Test case 3: K is 1\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 1) == 162, \"Test case 3 failed\"\n    \n    # Test case 4: Edge case with empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 4 failed\"\n    \n    # Test case 5: K out of bounds\n    try:\n        find_k_product([(5, 6, 7)], 3)\n    except ValueError as e:\n        assert str(e) == \"K must be between 0 and 2.\", \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Raises:\n    ValueError: If 'nums' is not a list or if 'n' is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test cases\ndef test_ntimes_list():\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21], \"Test Case 1 Failed\"\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10], \"Test Case 2 Failed\"\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6], \"Test Case 3 Failed\"\n    assert ntimes_list([], 10) == [], \"Test Case 4 Failed\"  # Edge case: empty list\n    try:\n        ntimes_list(\"not a list\", 2)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list.\", \"Test Case 5 Failed\"\n    try:\n        ntimes_list([1, 2, 3], \"not an int\")\n    except ValueError as e:\n        assert str(e) == \"The second argument must be an integer.\", \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers among three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3)\n\n    Example:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    1\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count the number of equal integers\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n\n    # If all three are equal, we should return 3\n    if equal_count == 3:\n        return 3\n    # If two are equal, we should return 2\n    elif equal_count == 2:\n        return 2\n    # If one is equal, we should return 1\n    elif equal_count == 1:\n        return 1\n    # If none are equal, we return 0\n    else:\n        return 0\n\n# Test cases to validate the functionality\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(1, 1, 2) == 1, \"Test case 4 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 5 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 6 failed\"\n    assert test_three_equal(5, 5, 10) == 2, \"Test case 7 failed\"\n    assert test_three_equal(5, 10, 15) == 0, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return (0-based).\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two non-negative integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First non-negative integer.\n    b (int): Second non-negative integer.\n\n    Returns:\n    int: The GCD of a and b.\n\n    Raises:\n    ValueError: If either a or b is negative.\n    \"\"\"\n    # Check for non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Testing the gcd function\nif __name__ == \"__main__\":\n    # Test cases\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is often defined as 0\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    return transposed\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    # Edge case: empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Edge case: non-square matrix should raise ValueError\n    try:\n        rotate_matrix([[1, 2], [3, 4, 5]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n\n# Run the test cases\ntest_rotate_matrix()\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input list contains non-integer values.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list is empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element of the list\n\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(f\"Invalid value: {num}. All elements must be integers.\")\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n\n    return max_val\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([10, 20, 30, 40, 50]) == 50\n    assert max_value([5]) == 5  # Single element case\n    assert max_value([1, 3, 2, 5, 4]) == 5  # Unordered list\n\n    # Edge case: empty list\n    try:\n        max_value([])\n    except ValueError as e:\n        print(e)  # Expected output: The input list is empty.\n\n    # Edge case: list with non-integer values\n    try:\n        max_value([1, 2, 'three', 4])\n    except TypeError as e:\n        print(e)  # Expected output: Invalid value: three. All elements must be integers.\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n\n    Example:\n    >>> longest_common_substring('abcdef', 'zcdemf')\n    3\n    \"\"\"\n    # Handle edge cases\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise ValueError(\"Both inputs must be strings.\")\n    \n    if not s1 or not s2:\n        return 0\n\n    len1, len2 = len(s1), len(s2)\n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    longest = 0  # Variable to store the length of the longest common substring\n\n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest = max(longest, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest\n\n# Test cases to validate the functionality\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 2, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'xyz') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 7 failed\"\n    assert longest_common_substring('abcde', 'abcxyz') == 3, \"Test case 8 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \n    Example:\n    >>> longest_common_subsequence('abcde', 'ace')\n    3\n    \"\"\"\n    # Input validation\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise ValueError(\"Both inputs must be strings.\")\n    \n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len1][len2]\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    assert longest_common_subsequence('abc', 'abc') == 3\n    assert longest_common_subsequence('abc', 'def') == 0\n    assert longest_common_subsequence('', 'abc') == 0\n    assert longest_common_subsequence('abc', '') == 0\n    assert longest_common_subsequence('', '') == 0\n    assert longest_common_subsequence('a', 'a') == 1\n    assert longest_common_subsequence('a', 'b') == 0\n    print(\"All test cases passed!\")"}
