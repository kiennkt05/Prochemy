{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test cases to verify the functionality of the count_tuplex function\ndef test_count_tuplex():\n    # Test with a tuple containing repeated values\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test with a tuple containing no occurrences of the value\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test case 2 failed\"\n    \n    # Test with a tuple containing different data types\n    assert count_tuplex((1, 'a', 2, 'a', 3), 'a') == 2, \"Test case 3 failed\"\n    \n    # Test with an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 4 failed\"\n    \n    # Test with a tuple of one element\n    assert count_tuplex((1,), 1) == 1, \"Test case 5 failed\"\n    assert count_tuplex((1,), 2) == 0, \"Test case 6 failed\"\n    \n    # Test with a tuple of identical elements\n    assert count_tuplex((5, 5, 5, 5), 5) == 4, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regular expression to remove non-alphanumeric characters\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    \n    return cleaned_text\n\n# Test cases to verify the functionality of remove_splchar\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test with non-string input\n    try:\n        remove_splchar(12345)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regex to remove all lowercase letters\n    result = re.sub(r'[a-z]', '', str1)\n    \n    return result\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAJSI') == 'KDAJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 5: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW! 123'\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ'\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = []\n    for char in str1:\n        if char in vowels:\n            # Replace with the next reversed vowel\n            result.append(next(vowel_iter))\n        else:\n            # Keep the consonant as is\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases to verify the functionality\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 7 failed\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the current item is a list\n        if not isinstance(sublist, list):\n            raise ValueError(\"Each item in the input must be a list.\")\n        \n        # Check if the sublist is not empty\n        if sublist:  # This checks if the sublist has at least one element\n            first_elements.append(sublist[0])  # Append the first element to the result list\n        else:\n            first_elements.append(None)  # Append None if the sublist is empty\n\n    return first_elements\n\n# Test cases to verify the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test Case 1 Failed\"\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40], \"Test Case 2 Failed\"\n    assert Extract([[], [1, 2], [3]]) == [None, 1, 3], \"Test Case 3 Failed\"\n    assert Extract([[], [], []]) == [None, None, None], \"Test Case 4 Failed\"\n    assert Extract([[1], [], [2, 3]]) == [1, None, 2], \"Test Case 5 Failed\"\n    \n    # Test with invalid input\n    try:\n        Extract(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list of lists.\", \"Test Case 6 Failed\"\n    \n    try:\n        Extract([[1, 2], \"not a list\", [3]])\n    except ValueError as e:\n        assert str(e) == \"Each item in the input must be a list.\", \"Test Case 7 Failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/402", "completion": "def mod_inverse(a, p):\n    \"\"\"\n    Function to compute the modular inverse of a under modulo p using Fermat's Little Theorem.\n    a^(p-1) \u2261 1 (mod p) => a^(p-2) \u2261 a^(-1) (mod p)\n    \"\"\"\n    return pow(a, p - 2, p)\n\ndef factorial_mod(n, p):\n    \"\"\"\n    Function to compute factorial % p for all numbers from 0 to n.\n    Returns a list of factorials modulo p.\n    \"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Function to compute nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Edge case: if r > n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute factorials and their modular inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p using the formula\n    nCr = (fact[n] * mod_inverse(fact[r], p) % p * mod_inverse(fact[n - r], p) % p) % p\n    return nCr\n\n# Test cases to verify the functionality\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    assert ncr_modp(5, 6, 10) == 0, \"Test case 5 failed\"  # r > n\n    assert ncr_modp(100, 50, 1000000007) == 33322150, \"Test case 6 failed\"  # Large numbers\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ncr_modp()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Raises:\n    ValueError: If 'nums' is not a list or if 'n' is not an integer.\n    TypeError: If any element in 'nums' is not a number.\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    # Validate that all elements in nums are numbers (int or float)\n    for num in nums:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be numbers.\")\n    \n    # Use map to multiply each element by n and convert to list\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test cases to verify the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test with a normal case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with negative multiplier\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with zero multiplier\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with float numbers\n    assert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]\n    \n    # Test with an empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test with invalid input types\n    try:\n        ntimes_list(\"not a list\", 3)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list.\"\n    \n    try:\n        ntimes_list([1, 2, 3], \"not an integer\")\n    except ValueError as e:\n        assert str(e) == \"The second argument must be an integer.\"\n    \n    try:\n        ntimes_list([1, 2, \"three\"], 2)\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be numbers.\"\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the K-th index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    product = 1\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element\n        product *= tup[K]\n    \n    return product\n\n# Test cases to verify the functionality of the find_k_product function\ndef test_find_k_product():\n    # Test case 1: Normal case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: K is 0 (first index)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 0) == 40, \"Test case 2 failed\"\n    \n    # Test case 3: K is 1 (second index)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 1) == 162, \"Test case 3 failed\"\n    \n    # Test case 4: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list is empty.\", \"Test case 4 failed\"\n    \n    # Test case 5: K out of bounds\n    try:\n        find_k_product([(5, 6, 7), (1, 3, 5)], 3)\n    except IndexError as e:\n        assert str(e) == \"K index 3 is out of bounds for tuple (1, 3, 5).\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float or int): The cost price of the item.\n    sale_amount (float or int): The selling price of the item.\n    \n    Returns:\n    float or int: The profit amount if there is a profit, otherwise None.\n    \n    Raises:\n    ValueError: If actual_cost or sale_amount are not numbers.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers (int or float).\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to verify the functionality of the profit_amount function\ndef test_profit_amount():\n    # Test case 1: Profit exists\n    assert profit_amount(1500, 1800) == 300, \"Test case 1 failed\"\n    \n    # Test case 2: No profit\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss\n    assert profit_amount(1500, 1200) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Profit with float values\n    assert profit_amount(1500.50, 1800.75) == 300.25, \"Test case 4 failed\"\n    \n    # Test case 5: Invalid input (string)\n    try:\n        profit_amount(\"1500\", 1800)\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numbers (int or float).\", \"Test case 5 failed\"\n    \n    # Test case 6: Invalid input (None)\n    try:\n        profit_amount(None, 1800)\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numbers (int or float).\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string or an empty string if none exists\n    \"\"\"\n    # Edge case: If the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference for comparison\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        # Compare the character with the same position in all other strings\n        for string in strs[1:]:\n            # If we reach the end of any string or characters do not match\n            if i >= len(string) or string[i] != prefix[i]:\n                # Return the prefix up to this point\n                return prefix[:i]\n    \n    # If we complete the loop, the entire prefix is common\n    return prefix\n\n# Test cases to verify the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'throne']) == 'throne', \"Test case 4 failed\"\n    assert longest_common_prefix(['a']) == 'a', \"Test case 5 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 6 failed\"\n    assert longest_common_prefix(['']) == '', \"Test case 7 failed\"\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not an integer or if both are zero.\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Check for the case where both numbers are zero\n    if a == 0 and b == 0:\n        raise ValueError(\"GCD is not defined for both numbers being zero.\")\n    \n    # Ensure a and b are non-negative for the algorithm\n    a, b = abs(a), abs(b)\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Test cases to verify the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Basic test case\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert gcd(54, 24) == 6, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0)  # This should raise a ValueError\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid matrix (not a list of lists or rows of unequal length).\n    \"\"\"\n    # Validate the input matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    if len(matrix) == 0 or any(len(row) != len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    \n    # Step 1: Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    # Step 2: Reverse each row\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix (should raise ValueError)\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n    \n    # Test case 5: Non-square matrix (should raise ValueError)\n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string or an empty string if none exists\n    \"\"\"\n    # Edge case: If the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference for comparison\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        # Compare the character at the current index with the same index in all other strings\n        for string in strs[1:]:\n            # If the index is out of bounds or characters do not match\n            if i >= len(string) or string[i] != prefix[i]:\n                # Return the prefix up to the current index\n                return prefix[:i]\n    \n    # If we complete the loop, the entire prefix is common\n    return prefix\n\n# Test cases to verify the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal numbers (0, 1, 2, or 3)\n    \n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(0, 0, 0)\n    3\n    >>> test_three_equal(-1, -1, 1)\n    2\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n    \n    # Count the number of equal integers\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases to verify the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 4 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 5 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 6 failed\"\n    assert test_three_equal(10, 10, 20) == 2, \"Test case 7 failed\"\n    assert test_three_equal(100, 200, 300) == 0, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer or not an integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Iterative approach to calculate Fibonacci number\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Test cases\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to verify the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    # Handle edge cases for empty strings\n    if not s1 or not s2:\n        return 0\n\n    # Initialize a 2D array to store lengths of common substrings\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n\n    # Fill the dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return max_length\n\n# Test cases to verify the functionality\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 7 failed\"\n    assert longest_common_substring('abcde', 'cdefg') == 2, \"Test case 8 failed\"\n    assert longest_common_substring('xyz', 'xyzabc') == 3, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value with the first element\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases to verify the functionality of max_value\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value([])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"The list cannot be empty.\", \"Test case 6 failed\"\n\n    try:\n        max_value(\"not a list\")  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\", \"Test case 7 failed\"\n\n    try:\n        max_value([1, 2, '3'])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers.\", \"Test case 8 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string or an empty string if none exists\n    \"\"\"\n    # Check if the input is a list and not empty\n    if not isinstance(strs, list):\n        raise ValueError(\"Input must be a list of strings.\")\n    \n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the current prefix with the next string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, return it\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to verify the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n\n    Example:\n    >>> longest_common_subsequence('abcde', 'ace')\n    3\n    \"\"\"\n    # Validate input types\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise ValueError(\"Both inputs must be strings.\")\n\n    # Get lengths of both strings\n    len1, len2 = len(s1), len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n\n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Characters don't match\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len1][len2]\n\n# Test cases to verify the functionality\nif __name__ == \"__main__\":\n    # Basic test case\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    # Additional test cases\n    assert longest_common_subsequence('abc', 'abc') == 3  # Full match\n    assert longest_common_subsequence('abc', 'def') == 0  # No match\n    assert longest_common_subsequence('', 'abc') == 0  # One empty string\n    assert longest_common_subsequence('abc', '') == 0  # One empty string\n    assert longest_common_subsequence('a', 'a') == 1  # Single character match\n    assert longest_common_subsequence('a', 'b') == 0  # Single character no match\n    assert longest_common_subsequence('abcde', 'bd') == 2  # Partial match\n    assert longest_common_subsequence('abcdef', 'fbdam') == 2  # Complex case\n\n    print(\"All test cases passed!\")"}
