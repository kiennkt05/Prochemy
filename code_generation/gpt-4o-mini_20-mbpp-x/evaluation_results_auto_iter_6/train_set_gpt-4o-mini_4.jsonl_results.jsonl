{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Count the occurrences of the specified value in the tuple\n    return tuplex.count(value)\n\n# Testing the function with the provided assertion\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n\n# Additional test cases\nassert count_tuplex((1, 2, 3, 4, 5), 6) == 0  # Value not in tuple\nassert count_tuplex((), 1) == 0  # Empty tuple\nassert count_tuplex((1, 1, 1, 1), 1) == 4  # All elements are the same\nassert count_tuplex((1, 2, 3, 4, 5), 1) == 1  # Value is the first element\nassert count_tuplex((1, 2, 3, 4, 5), 5) == 1  # Value is the last element\n\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic input with special characters\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    \n    # Test case 2: Input with only alphanumeric characters\n    assert remove_splchar('pythonprogram123') == 'pythonprogram123'\n    \n    # Test case 3: Input with only special characters\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test case 4: Input with spaces and special characters\n    assert remove_splchar('   hello world! 123   ') == 'helloworld123'\n    \n    # Test case 5: Empty string input\n    assert remove_splchar('') == ''\n    \n    # Test case 6: Input with numbers and letters\n    assert remove_splchar('abc123!@#') == 'abc123'\n    \n    # Test case 7: Input with mixed case letters\n    assert remove_splchar('Python3.8') == 'Python38'\n    \n    # Test case 8: Non-string input\n    try:\n        remove_splchar(123)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(input_string):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    input_string (str): The string from which to remove lowercase letters.\n\n    Returns:\n    str: The modified string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', input_string)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test case 1 failed\"\n    assert remove_lowercase('HelloWorld') == 'HW', \"Test case 2 failed\"\n    assert remove_lowercase('PythonIsFun') == 'PIF', \"Test case 3 failed\"\n    assert remove_lowercase('123abcXYZ') == '123XYZ', \"Test case 4 failed\"\n    assert remove_lowercase('') == '', \"Test case 5 failed\"  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE', \"Test case 6 failed\"  # Edge case: all uppercase\n    assert remove_lowercase('lowercase') == '', \"Test case 7 failed\"  # Edge case: all lowercase\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by n using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing each element of nums multiplied by n.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))\n\n# Testing the function with the provided assertion\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases\n# Test with n = 0\nassert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n\n# Test with negative n\nassert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n\n# Test with an empty list\nassert ntimes_list([], 5) == []\n\n# Test with n = 1 (identity)\nassert ntimes_list([1, 2, 3], 1) == [1, 2, 3]\n\n# Test with a single element\nassert ntimes_list([10], 5) == [50]\n\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'Leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\" \")\n    ' '\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modification\n    str_list = list(str1)\n    \n    # Extract the vowels from the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Place the reversed vowels back into their original positions\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"LeetCode\") == \"Leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\" \") == \" \", \"Test case 5 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    assert reverse_vowels(\"aeiou\") == \"uoiea\", \"Test case 8 failed\"\n    assert reverse_vowels(\"AEIOU\") == \"UOIEA\", \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()", "result": "failed: Test case 3 failed", "passed": false}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the K-th index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if K is a valid index for the tuples\n    if K < 0 or K >= len(test_list[0]):\n        raise IndexError(\"Index K is out of bounds for the tuples.\")\n    \n    # Extract the K-th elements and calculate the product\n    k_elements = [t[K] for t in test_list]\n    product = reduce(operator.mul, k_elements, 1)\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    # Additional test cases\n    assert find_k_product([(2, 3, 4), (5, 6, 7), (8, 9, 10)], 1) == 162  # 3 * 6 * 9\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15  # 1 * 3 * 5\n    assert find_k_product([(1, 2, 3)], 2) == 3  # Single tuple case\n    try:\n        find_k_product([], 0)  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output\n    try:\n        find_k_product([(1, 2)], 2)  # Should raise IndexError\n    except IndexError as e:\n        print(e)  # Expected output", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases\nassert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\nassert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\nassert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\nassert profit_amount(2000, 2500) == 500.0, \"Test case 4 failed\"\nassert profit_amount(500, 600) == 100.0, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n\n    return a  # When b is 0, a is the GCD\n\n# Test case\nif __name__ == \"__main__\":\n    # Example test case\n    assert gcd(48, 18) == 6, \"Test case failed!\"\n    print(\"Test case passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Testing the function with assertions\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(6) == 8\nassert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34\nassert fibonacci(10) == 55\n\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'  # Single string case\n    assert longest_common_prefix([]) == ''  # Empty list case\n    assert longest_common_prefix(['']) == ''  # List with empty string\n\n# Run the test cases\ntest_longest_common_prefix()\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Input matrix must be a non-empty 2D list.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input matrix must be a non-empty 2D list.\"\n    \n    # Test case 5: Non-square matrix (3x2)\n    assert rotate_matrix([[1, 2], [3, 4], [5, 6]]) == [[5, 3, 1], [6, 4, 2]]\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y == z:\n        count = 3  # All three are equal\n    elif x == y or y == z or x == z:\n        count = 2  # Two are equal\n    else:\n        count = 0  # All are different\n    \n    return count\n\n# Test cases to validate the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 1, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(0, 1, 0) == 2, \"Test case 9 failed\"\n    assert test_three_equal(1, 0, 2) == 0, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    first_elements = []\n    for sublist in lst:\n        if not sublist:  # Check if the sublist is empty\n            raise ValueError(\"One of the sublists is empty.\")\n        first_elements.append(sublist[0])  # Append the first element of the sublist\n    return first_elements\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test case\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Additional test cases\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40]\n    \n    # Test case with empty sublist\n    try:\n        Extract([[1, 2], [], [3, 4]])\n    except ValueError as e:\n        print(e)  # Expected output: One of the sublists is empty.\n    \n    print(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n or if n, r, or p are negative.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    if n < 0 or r < 0 or p <= 0:\n        raise ValueError(\"n, r must be non-negative and p must be positive.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse for the denominator\n    denominator_inv = mod_inverse(denominator, p)\n    \n    return (numerator * denominator_inv) % p\n\n# Test cases\nif __name__ == \"__main__\":\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 1) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    try:\n        ncr_modp(5, 6, 7)  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"r cannot be greater than n.\", \"Test case 5 failed\"\n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ending here\n    \n    return max_length\n\n# Test cases\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0        # No common substring\nassert longest_common_substring('', 'abc') == 0           # One string is empty\nassert longest_common_substring('abc', '') == 0           # One string is empty\nassert longest_common_substring('', '') == 0              # Both strings are empty\nassert longest_common_substring('a', 'a') == 1            # Single character match\nassert longest_common_substring('abcde', 'abcxyz') == 3   # 'abc' is the longest common substring\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as a reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix:\n            # Shorten the prefix until it matches\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    >>> max_value([-1, -2, -3])\n    -1\n    >>> max_value([10])\n    10\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list is empty. Please provide a list with integers.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element of the list\n    for num in arr:\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n    return max_val\n\n# Test cases to validate the functionality of max_value\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3]) == -1\n    assert max_value([10]) == 10\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([5, 5, 5, 5]) == 5\n    assert max_value([1, 2, 3, -1, -2]) == 3\n    assert max_value([-5, -1, -10, -3]) == -1\n    \n    try:\n        max_value([])  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"The input list is empty. Please provide a list with integers.\"\n\n# Run the test cases\ntest_max_value()\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return table[m][n]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\nassert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\nassert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\nassert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\nassert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\nassert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\nassert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\nassert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\nassert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
