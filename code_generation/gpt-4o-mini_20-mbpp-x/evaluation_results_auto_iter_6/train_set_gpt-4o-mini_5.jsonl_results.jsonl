{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Using a list comprehension to filter out non-alphanumeric characters\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    return cleaned_text", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the function\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1800) == 300.0, \"Test Case 2 Failed\"\n    assert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\n    assert profit_amount(2000, 2500) == 500.0, \"Test Case 4 Failed\"\n    assert profit_amount(500, 600) == 100.0, \"Test Case 5 Failed\"\n    assert profit_amount(100, 150) == 50.0, \"Test Case 6 Failed\"\n    assert profit_amount(1000, 999) is None, \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to replace all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test Case 1 Failed\"\n    assert remove_lowercase('HelloWorld') == 'HW', \"Test Case 2 Failed\"\n    assert remove_lowercase('PythonIsFun') == 'PIF', \"Test Case 3 Failed\"\n    assert remove_lowercase('123abcXYZ') == '123XYZ', \"Test Case 4 Failed\"\n    assert remove_lowercase('') == '', \"Test Case 5 Failed\"  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE', \"Test Case 6 Failed\"  # Edge case: all uppercase\n    assert remove_lowercase('lowercase') == '', \"Test Case 7 Failed\"  # Edge case: all lowercase\n    assert remove_lowercase('Mixed123Case') == 'MC123', \"Test Case 8 Failed\"  # Mixed case with numbers\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()", "result": "failed: Test Case 8 Failed", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses the vowels in the given string while keeping the consonants in their original positions.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'Leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\"\")\n    ''\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n\n    while left < right:\n        # Move left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # Swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)\n\n# Test cases\nif __name__ == \"__main__\":\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"LeetCode\") == \"Leotcede\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"racecar\") == \"racecar\"\n    assert reverse_vowels(\"aeiou\") == \"uoiea\"\n    assert reverse_vowels(\"xyz\") == \"xyz\"\n    assert reverse_vowels(\"a quick brown fox jumps over the lazy dog\") == \"e qick brawn fox jomps uver thi lazy dag\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n    \"\"\"\n    # Check for equality and count\n    if x == y == z:\n        return 3  # All three are equal\n    elif x == y or y == z or x == z:\n        return 2  # Two are equal\n    else:\n        return 0  # All are different\n\n# Example usage\nif __name__ == \"__main__\":\n    print(test_three_equal(1, 1, 1))  # Output: 3\n    print(test_three_equal(1, 1, 2))  # Output: 2\n    print(test_three_equal(1, 2, 3))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of value in tuplex.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by the given integer n.\n\n    Parameters:\n    nums (list of int): A list of integers to be multiplied.\n    n (int): The integer by which to multiply each element in the list.\n\n    Returns:\n    list of int: A new list containing the multiplied values.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))\n\n# Example assertion to verify the function works as expected\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist. If a sublist is empty, None is added.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[], [1, 2], [3]])\n    [None, 1, 3]\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            result.append(sublist[0])  # Append the first element\n        else:\n            result.append(None)  # Append None for empty sublists\n    return result", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorials modulo p up to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute factorials modulo p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6  # Example test case\nassert ncr_modp(5, 2, 7) == 3     # 5C2 % 7 = 10 % 7 = 3\nassert ncr_modp(5, 5, 7) == 1     # 5C5 % 7 = 1\nassert ncr_modp(10, 0, 13) == 1   # 10C0 % 13 = 1\nassert ncr_modp(10, 10, 13) == 1   # 10C10 % 13 = 1\nassert ncr_modp(10, 3, 13) == 4    # 10C3 % 13 = 120 % 13 = 4\nassert ncr_modp(0, 0, 13) == 1     # 0C0 % 13 = 1\nassert ncr_modp(10, 11, 13) == 0   # 10C11 % 13 = 0 (r > n)\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    \n    # Additional test cases\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (8, 9, 10)], 1) == 4 * 3 * 9  # 108\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 1 * 3 * 5  # 15\n    assert find_k_product([(10, 20), (30, 40)], 1) == 20 * 40  # 800\n    \n    # Edge case: empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        print(e)  # Expected: The input list cannot be empty.\n    \n    # Edge case: K out of bounds\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        print(e)  # Expected: K=2 is out of bounds for tuple (1, 2).", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    >>> gcd(56, 98)\n    14\n    >>> gcd(101, 10)\n    1\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert gcd(48, 18) == 6\n    assert gcd(56, 98) == 14\n    assert gcd(101, 10) == 1\n    assert gcd(0, 5) == 5  # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5  # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0   # GCD of 0 and 0 is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['throne', 'dungeon']) == ''\nassert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['single']) == 'single'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['a', 'a', 'a']) == 'a'", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix\n\n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): The input matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid matrix.\n    \"\"\"\n    if not matrix or not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list (matrix).\")\n    \n    # Check if all rows are of the same length\n    row_length = len(matrix[0])\n    if any(len(row) != row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n\n    # Get the dimensions of the original matrix\n    m = len(matrix)\n    n = len(matrix[0])\n\n    # Create a new matrix for the rotated version\n    rotated = [[0] * m for _ in range(n)]\n\n    # Fill the rotated matrix\n    for i in range(m):\n        for j in range(n):\n            rotated[j][m - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n    assert rotate_matrix([]) == []  # Edge case: empty matrix\n    try:\n        rotate_matrix([[1, 2], [3]])  # Non-rectangular matrix\n    except ValueError as e:\n        assert str(e) == \"All rows in the matrix must have the same length.\"\n    try:\n        rotate_matrix(\"not a matrix\")  # Invalid input\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty 2D list (matrix).\"\n\n# Run the tests\ntest_rotate_matrix()\nprint(\"All tests passed!\")", "result": "failed: Input must be a non-empty 2D list (matrix).", "passed": false}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string s\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix([]) == ''\nassert longest_prefix(['']) == ''\nassert longest_prefix(['abc', 'ab', 'a']) == 'a'\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\nassert longest_prefix(['throne', 'dungeon']) == ''\nassert longest_prefix(['throne', 'throne']) == 'throne'\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the implementation\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    >>> max_value([-1, -2, -3])\n    -1\n    >>> max_value([42])\n    42\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Start with the first element as the maximum\n    for num in arr:\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n    \n    return max_val", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[m][n]\n    return dp[m][n]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3\nassert longest_common_subsequence('abc', 'abc') == 3\nassert longest_common_subsequence('abc', 'def') == 0\nassert longest_common_subsequence('abcdef', 'acf') == 3\nassert longest_common_subsequence('', 'abc') == 0\nassert longest_common_subsequence('abc', '') == 0\nassert longest_common_subsequence('', '') == 0\nassert longest_common_subsequence('a', 'a') == 1\nassert longest_common_subsequence('a', 'b') == 0\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
