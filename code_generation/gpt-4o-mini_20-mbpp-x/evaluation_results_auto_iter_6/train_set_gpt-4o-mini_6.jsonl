{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test Case 1 Failed\"\n    assert remove_lowercase('HelloWorld') == 'HW', \"Test Case 2 Failed\"\n    assert remove_lowercase('PythonIsFun') == 'PIF', \"Test Case 3 Failed\"\n    assert remove_lowercase('123abcXYZ') == '123XYZ', \"Test Case 4 Failed\"\n    assert remove_lowercase('') == '', \"Test Case 5 Failed\"  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE', \"Test Case 6 Failed\"  # Edge case: all uppercase\n    assert remove_lowercase('MixedCASE123') == 'MC123', \"Test Case 7 Failed\"  # Mixed case with numbers\n    assert remove_lowercase('lowercase') == '', \"Test Case 8 Failed\"  # All lowercase\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Validate input\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if K is a valid index for the tuples\n    if any(len(tup) <= K for tup in test_list):\n        raise IndexError(f\"K={K} is out of bounds for the tuples in the list.\")\n\n    product = 1\n    for tup in test_list:\n        product *= tup[K]\n    \n    return product\n\n# Test cases\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (8, 9, 10)], 1) == 108, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(1, 2, 3)], 2) == 3, \"Test case 4 failed\"\n    \n    # Edge case: empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    # Edge case: K out of bounds\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for the tuples in the list.\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_find_k_product()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Count the occurrences of the value in the tuple\n    return tuplex.count(value)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count occurrences of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count occurrences of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count occurrences of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Count occurrences in an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by a given number using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the results of the multiplication.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Using map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test with a standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with n = 0 (should return a list of zeros)\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with n = 1 (should return the same list)\n    assert ntimes_list([1, 2, 3], 1) == [1, 2, 3]\n    \n    # Test with negative n (should return negative values)\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with an empty list (should return an empty list)\n    assert ntimes_list([], 5) == []\n    \n    # Test with a single element list\n    assert ntimes_list([10], 5) == [50]\n    \n    # Test with large numbers\n    assert ntimes_list([1000000, 2000000], 3) == [3000000, 6000000]\n\n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of remove_splchar\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123', \"Test Case 1 Failed\"\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023', \"Test Case 2 Failed\"\n    assert remove_splchar('1234567890') == '1234567890', \"Test Case 3 Failed\"\n    assert remove_splchar('') == '', \"Test Case 4 Failed\"\n    assert remove_splchar('!@#$%^&*()') == '', \"Test Case 5 Failed\"\n    assert remove_splchar('abc_def-ghi.jkl') == 'abcdefghijkl', \"Test Case 6 Failed\"\n    assert remove_splchar('Spaces    and    tabs\\tare\\nremoved!') == 'Spacesandtabsremoved', \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'LeotCede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\"\")\n    ''\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"LeetCode\") == \"LeotCede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 6 failed\"\n    assert reverse_vowels(\"!\") == \"!\", \"Test case 7 failed\"\n    assert reverse_vowels(\"12345\") == \"12345\", \"Test case 8 failed\"\n    assert reverse_vowels(\"a quick brown fox jumps over the lazy dog\") == \"e qick brawn fox jomps ovor thi lezy deg\", \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    first_elements = []\n    for sublist in lst:\n        if not sublist:  # Check if the sublist is empty\n            raise ValueError(\"All sublists must contain at least one element.\")\n        first_elements.append(sublist[0])  # Append the first element of the sublist\n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f'], \"Test case 2 failed\"\n    assert Extract([[True, False], [False, True]]) == [True, False], \"Test case 3 failed\"\n    assert Extract([[1]]) == [1], \"Test case 4 failed\"\n    \n    try:\n        Extract([[], [1, 2], [3, 4]])\n    except ValueError as e:\n        assert str(e) == \"All sublists must contain at least one element.\", \"Test case 5 failed\"\n    \n    try:\n        Extract([[1, 2], [], [3, 4]])\n    except ValueError as e:\n        assert str(e) == \"All sublists must contain at least one element.\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The sale amount of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    300.0\n    >>> profit_amount(1500, 1500)\n    None\n    >>> profit_amount(1500, 1600)\n    None\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise None\n    return profit if profit > 0 else None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Profit exists\n    assert profit_amount(1500, 1200) == None, \"Test case 1 failed\"\n    \n    # Test case 2: No profit\n    assert profit_amount(1500, 1500) == None, \"Test case 2 failed\"\n    \n    # Test case 3: Profit exists\n    assert profit_amount(1500, 1600) == 100.0, \"Test case 3 failed\"\n    \n    # Test case 4: Profit exists\n    assert profit_amount(1000, 1200) == 200.0, \"Test case 4 failed\"\n    \n    # Test case 5: Invalid input\n    try:\n        profit_amount(\"1500\", 1200)\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numbers.\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n    \"\"\"\n    if x == y == z:\n        return 3  # All three numbers are equal\n    elif x == y or y == z or x == z:\n        return 2  # Two numbers are equal\n    else:\n        return 0  # All numbers are different\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 1, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(0, 1, 0) == 2, \"Test case 9 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/402", "completion": "def mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef factorial_mod(n, p):\n    \"\"\"Compute factorials and their modular inverses up to n modulo p.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    inv_fact = [1] * (n + 1)\n    inv_fact[n] = mod_inverse(fact[n], p)\n    for i in range(n - 1, 0, -1):\n        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % p\n    return fact, inv_fact\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    fact, inv_fact = factorial_mod(n, p)\n    return (fact[n] * inv_fact[r] % p * inv_fact[n - r] % p) % p\n\n# Test cases\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    assert ncr_modp(5, 0, 10) == 1, \"Test case 5 failed\"  # 5C0 is 1\n    assert ncr_modp(5, 5, 10) == 1, \"Test case 6 failed\"  # 5C5 is 1\n    assert ncr_modp(10, 3, 11) == 4, \"Test case 7 failed\"  # 10C3 % 11\n    assert ncr_modp(10, 11, 13) == 0, \"Test case 8 failed\"  # 10C11 is 0\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_ncr_modp()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    - F(0) = 0\n    - F(1) = 1\n    - F(n) = F(n-1) + F(n-2) for n > 1\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    >>> gcd(56, 98)\n    14\n    >>> gcd(101, 10)\n    1\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD of 0 and 0 is undefined, but we return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'  # Single string case\n    assert longest_common_prefix([]) == ''  # Empty list case\n    assert longest_common_prefix(['']) == ''  # List with empty string\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list is empty. Please provide a list with integers.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix(['ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    return transposed\n\n# Test cases to validate the functionality\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    # Edge case: empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Edge case: non-square matrix should raise an error\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix becomes empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Edge case: if either string is empty, the longest common substring is 0\n    if not s1 or not s2:\n        return 0\n\n    # Initialize a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return max_length\n\n# Test cases to validate the function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 8 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 9 failed\"\n    assert longest_common_substring('abcdefg', 'abcdefg') == 7, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Initialize the DP table\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    # Fill the DP table\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[len(s1)][len(s2)]\n\n# Test cases to validate the functionality\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 4 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 6 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 8 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 9 failed\"\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
