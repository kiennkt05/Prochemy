{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test case\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    \n    # Additional test cases\n    assert remove_splchar('Hello, World!') == 'HelloWorld'\n    assert remove_splchar('1234!@#$%^&*()') == '1234'\n    assert remove_splchar('') == ''\n    assert remove_splchar('NoSpecialChars') == 'NoSpecialChars'\n    assert remove_splchar('Spaces   and   tabs\\t') == 'Spacesandtabs'\n    assert remove_splchar('Mixed123!@#Characters') == 'Mixed123Characters'\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist from a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[10], [20, 30], [], [40]])\n    [10, 20, 40]\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # Extract first element if sublist is not empty\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Typical case with non-empty sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n\n    # Test case 2: Sublist with a single element\n    assert Extract([[10], [20, 30], [], [40]]) == [10, 20, 40], \"Test case 2 failed\"\n\n    # Test case 3: All sublists are empty\n    assert Extract([[], [], []]) == [], \"Test case 3 failed\"\n\n    # Test case 4: Mixed empty and non-empty sublists\n    assert Extract([[], [1, 2], [], [3]]) == [1, 3], \"Test case 4 failed\"\n\n    # Test case 5: Single sublist\n    assert Extract([[5]]) == [5], \"Test case 5 failed\"\n\n    # Test case 6: No sublists\n    assert Extract([]) == [], \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n\n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n\n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate inputs\n    if actual_cost < 0 or sale_amount < 0:\n        raise ValueError(\"Actual cost and sale amount must be non-negative.\")\n\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1800) == 300, \"Test Case 2 Failed\"\n    assert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\n    assert profit_amount(500, 700) == 200, \"Test Case 4 Failed\"\n    assert profit_amount(0, 100) == 100, \"Test Case 5 Failed\"\n    \n    # Edge cases\n    try:\n        profit_amount(-100, 200)\n    except ValueError:\n        pass  # Expected behavior\n\n    try:\n        profit_amount(100, -200)\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    return re.sub(r'[a-z]', '', str1)\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    # Test with a mix of uppercase and lowercase letters\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test with only uppercase letters\n    assert remove_lowercase('ABCDEFG') == 'ABCDEFG'\n    \n    # Test with a mix of uppercase, lowercase, and numbers\n    assert remove_lowercase('A1b2C3d4E5F6g7H8') == 'A12345678'\n    \n    # Test with an empty string\n    assert remove_lowercase('') == ''\n    \n    # Test with special characters\n    assert remove_lowercase('Hello! How are you?') == 'H! H?'\n    \n    # Test with no lowercase letters\n    assert remove_lowercase('1234567890!@#$%^&*()') == '1234567890!@#$%^&*()'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by the given integer n using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the multiplied values.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with n = 0\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with negative n\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with an empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test with a single element\n    assert ntimes_list([10], 4) == [40]\n    \n    # Test with mixed positive and negative numbers\n    assert ntimes_list([-1, 0, 1], 2) == [-2, 0, 2]\n    \n    # Test with large numbers\n    assert ntimes_list([1000000, 2000000], 3) == [3000000, 6000000]\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases\ndef test_count_tuplex():\n    # Test with a normal case\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test with a value that does not exist in the tuple\n    assert count_tuplex((1, 2, 3, 4), 5) == 0, \"Test case 2 failed\"\n    \n    # Test with an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 3 failed\"\n    \n    # Test with multiple occurrences of the same value\n    assert count_tuplex((1, 1, 1, 1), 1) == 4, \"Test case 4 failed\"\n    \n    # Test with a tuple of mixed types\n    assert count_tuplex((1, 'a', 1, 'b', 1), 1) == 3, \"Test case 5 failed\"\n    \n    # Test with a tuple of different types\n    assert count_tuplex((1, 'a', 1.0, 1), 1) == 3, \"Test case 6 failed\"\n    \n    # Test with a non-tuple input\n    try:\n        count_tuplex([1, 2, 3], 1)\n    except TypeError as e:\n        assert str(e) == \"The first argument must be a tuple.\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'LeotCede'\n    >>> reverse_vowels(\"\")\n    ''\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(next(vowel_iter))  # Replace with the next reversed vowel\n        else:\n            result.append(char)  # Keep the consonant or other character\n    \n    return ''.join(result)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"LeetCode\") == \"LeotCede\"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\"racecar\") == \"racecar\"  # Palindrome case\n    assert reverse_vowels(\"a quick brown fox\") == \"a qick brawn fox\"  # Mixed case\n    assert reverse_vowels(\"xyz\") == \"xyz\"  # No vowels\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3)\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count the number of equal integers\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(1, 0, 0) == 2, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    \n    # Edge case: K is out of bounds\n    try:\n        find_k_product([(5, 6, 7), (1, 3, 5)], 3)\n    except IndexError as e:\n        print(e)  # Expected: K=3 is out of bounds for tuple (1, 3, 5).\n\n    # Edge case: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        print(e)  # Expected: The input list cannot be empty.\n\n    # Additional test cases\n    assert find_k_product([(2, 4), (3, 5), (6, 8)], 0) == 36  # 2 * 3 * 6\n    assert find_k_product([(1, 2, 3), (4, 5, 6)], 1) == 10  # 2 * 5\n    assert find_k_product([(10, 20), (30, 40), (50, 60)], 1) == 72000  # 20 * 40 * 60", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorials % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    nCr = (fact[n] * mod_inverse(fact[r], p) % p * mod_inverse(fact[n - r], p) % p) % p\n    return nCr\n\n# Test cases\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(6, 3, 5) == 4, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 1) == 1, \"Test case 4 failed\"  # 0C0 = 1\n    assert ncr_modp(10, 0, 13) == 1, \"Test case 5 failed\"  # nC0 = 1\n    assert ncr_modp(10, 10, 13) == 1, \"Test case 6 failed\"  # nCn = 1\n    try:\n        ncr_modp(5, 6, 7)  # This should raise an exception\n    except ValueError:\n        pass  # Expected behavior\n    else:\n        assert False, \"Test case 7 failed: ValueError not raised\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ncr_modp()", "result": "failed: Test case 3 failed", "passed": false}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n        matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n        list of list of int: The rotated matrix.\n\n    Raises:\n        ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    return transposed\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Non-square matrix (should raise ValueError)\n    try:\n        rotate_matrix([[1, 2], [3, 4, 5]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases to validate the function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Edge case: large Fibonacci number\n    assert fibonacci(30) == 832040, \"Test case 30 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix(['abc', 'abcd', 'abcde']) == 'abc'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-integer values.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list is empty.\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    max_val = arr[0]  # Start with the first element as the maximum\n    for num in arr:\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n    \n    return max_val\n\n# Test cases\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value([])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"The input list is empty.\", \"Test case 6 failed\"\n    \n    try:\n        max_value([1, 2, '3'])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers.\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Initialize the lengths of the strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    max_length = 0  # Variable to store the maximum length of common substring\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring\n\n    return max_length\n\n# Test cases\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    assert longest_common_substring('abcde', 'abfce') == 2, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n\n    Example:\n    >>> longest_common_subsequence('abcde', 'ace')\n    3\n    \"\"\"\n    # Validate input\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        raise ValueError(\"Both inputs must be strings.\")\n\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n\n    # Fill the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[len_s1][len_s2]\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    assert longest_common_subsequence('abc', 'abc') == 3\n    assert longest_common_subsequence('abc', 'def') == 0\n    assert longest_common_subsequence('', 'abc') == 0\n    assert longest_common_subsequence('abc', '') == 0\n    assert longest_common_subsequence('', '') == 0\n    assert longest_common_subsequence('a', 'a') == 1\n    assert longest_common_subsequence('a', 'b') == 0\n    assert longest_common_subsequence('abcdef', 'acf') == 3\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
