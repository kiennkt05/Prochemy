{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Use a list comprehension to filter out non-alphanumeric characters\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    \n    return cleaned_text\n\n# Test cases\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('123!@#456') == '123456'\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('Hello, World!') == 'HelloWorld'\n    assert remove_splchar('') == ''\n    assert remove_splchar('abc123xyz') == 'abc123xyz'\n    assert remove_splchar('   spaces   ') == 'spaces'\n    assert remove_splchar('Python3.8') == 'Python38'\n    \n    try:\n        remove_splchar(123)  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a string\"\n\n# Run the test cases\ntest_remove_splchar()\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist from a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each non-empty sublist.\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Append the first element of the sublist to the result list\n            first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test Case 1 Failed\"\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40], \"Test Case 2 Failed\"\n    assert Extract([[], [1, 2], [], [3]]) == [1, 3], \"Test Case 3 Failed\"\n    assert Extract([[], [], []]) == [], \"Test Case 4 Failed\"\n    assert Extract([]) == [], \"Test Case 5 Failed\"\n    assert Extract([[1], [], [2], [3, 4]]) == [1, 2, 3], \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1600) == 100, \"Test Case 2 Failed\"\n    assert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\n    assert profit_amount(200, 300) == 100, \"Test Case 4 Failed\"\n    assert profit_amount(0, 100) == 100, \"Test Case 5 Failed\"\n    assert profit_amount(100, 0) is None, \"Test Case 6 Failed\"\n    assert profit_amount(50.5, 100.5) == 50.0, \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal numbers (0, 2, or 3)\n    \"\"\"\n    # Create a set of the three numbers to find unique values\n    unique_numbers = {x, y, z}\n    \n    # Count the number of unique values\n    unique_count = len(unique_numbers)\n    \n    # Determine the count of equal numbers based on unique count\n    if unique_count == 1:\n        return 3  # All three numbers are equal\n    elif unique_count == 2:\n        return 2  # Two numbers are equal\n    else:\n        return 0  # All three numbers are different\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 5 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 7 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 8 failed\"\n    assert test_three_equal(5, 5, 6) == 2, \"Test case 9 failed\"\n    assert test_three_equal(5, 6, 7) == 0, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of value in tuplex.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of the count_tuplex function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n    # Test case 2: Value not present\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0\n    # Test case 3: Value appears multiple times\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5\n    # Test case 4: Empty tuple\n    assert count_tuplex((), 1) == 0\n    # Test case 5: Different data types\n    assert count_tuplex((1, 'a', 2, 'a', 3), 'a') == 2\n    # Test case 6: Count of None\n    assert count_tuplex((None, None, 1, 2), None) == 2\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to reverse vowels in.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = []\n    for char in str1:\n        if char in vowels:\n            # Replace with the next vowel from the reversed list\n            result.append(next(vowel_iter))\n        else:\n            # Keep the consonant as is\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases to validate the functionality\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"A man, a plan, a canal: Panama\") == \"A man, a plan, a canal: Panama\", \"Test Case 8 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the K-th index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Example usage\nresult = find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\nprint(result)  # Output should be 665"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Handle edge case where r > n\n    if r > n:\n        return 0\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    nCr = (fact[n] * mod_inverse(fact[r], p) % p * mod_inverse(fact[n - r], p) % p) % p\n    return nCr\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    # Additional test cases\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"  # 5C2 % 7 = 10 % 7 = 3\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"  # 10C5 % 100 = 252\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 % 10 = 1\n    assert ncr_modp(5, 6, 10) == 0, \"Test case 5 failed\"  # 5C6 % 10 = 0 (r > n)\n    assert ncr_modp(100, 50, 1000000007) == 538992043, \"Test case 6 failed\"  # Large case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"The first argument must be a list of numbers.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be a number.\")\n    \n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic functionality\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2: Multiplying by zero\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test case 4: Floating point multiplication\n    assert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]\n    \n    # Test case 5: Empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test case 6: Invalid input (not a list)\n    try:\n        ntimes_list(\"not a list\", 2)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list of numbers.\"\n    \n    # Test case 7: Invalid input (non-numeric in list)\n    try:\n        ntimes_list([1, 2, 'three'], 2)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list of numbers.\"\n    \n    # Test case 8: Invalid multiplier\n    try:\n        ntimes_list([1, 2, 3], \"not a number\")\n    except ValueError as e:\n        assert str(e) == \"The second argument must be a number.\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix(['ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Test for a large Fibonacci number\n    assert fibonacci(20) == 6765, \"Test case 20 failed\"\n    \n    # Test for negative input\n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case for negative input failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Update the prefix until it matches the start of the string\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]  # Reduce the prefix by one character\n            if not prefix:  # If prefix becomes empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Test cases to validate the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found\n\n# Test cases\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    assert max_value([-10, -20, -30, -5]) == -5, \"Test case 6 failed\"\n    \n    try:\n        max_value([])  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Edge case: if either string is empty, the longest common substring is 0\n    if not s1 or not s2:\n        return 0\n    \n    # Initialize a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    max_length = 0  # Variable to keep track of the maximum length found\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the functionality\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_substring('abcde', 'abfce') == 2, \"Test case 7 failed\"\n    assert longest_common_substring('xyz', 'xyzabc') == 3, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, no common prefix exists\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_prefix([]) == '', \"Test case 6 failed\"  # Edge case: empty list\n    assert longest_prefix(['single']) == 'single', \"Test case 7 failed\"  # Edge case: single string\n    assert longest_prefix(['a', 'a', 'a']) == 'a', \"Test case 8 failed\"  # Edge case: all same single character\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Update the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given square matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the square matrix to be rotated.\n\n    Returns:\n    list of list of int: A new 2D list representing the rotated matrix.\n\n    Raises:\n    ValueError: If the input matrix is not square.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return matrix\n\n    n = len(matrix)\n\n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n\n    # Fill the rotated matrix\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    # Test with an empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test with a non-square matrix (should raise ValueError)\n    try:\n        rotate_matrix([[1, 2], [3, 4, 5]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n\n# Run the test cases\ntest_rotate_matrix()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Edge case: if either string is empty, the LCS is 0\n    if not s1 or not s2:\n        return 0\n    \n    # Initialize the DP table\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Fill the DP table\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Test cases\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 8 failed\"\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
