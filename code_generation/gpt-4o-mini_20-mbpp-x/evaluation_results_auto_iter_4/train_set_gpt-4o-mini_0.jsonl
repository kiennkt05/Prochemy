{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    return re.sub(r'[a-z]', '', str1)\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDA') == 'KDA'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW! 123'\n    \n    # Test case 5: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ'\n    \n    # Test case 7: All lowercase letters\n    assert remove_lowercase('abcdefghijklmnopqrstuvwxyz') == ''\n    \n    # Test case 8: String with uppercase letters only\n    assert remove_lowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Using a list comprehension to filter out non-alphanumeric characters\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    return cleaned_text"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\", \"Test Case 8 Failed\"\n    assert reverse_vowels(\"a quick brown fox jumps over the lazy dog\") == \"e jockq brawn fux jomps ovor thi lezy deg\", \"Test Case 9 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_reverse_vowels()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty or contains non-tuple elements.\n    \"\"\"\n    # Validate input\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    if not all(isinstance(t, tuple) for t in test_list):\n        raise ValueError(\"All elements in the input list must be tuples.\")\n    \n    # Check if K is a valid index\n    if K < 0 or K >= len(test_list[0]):\n        raise IndexError(\"K is out of bounds for the tuples in the list.\")\n    \n    product = 1\n    for tup in test_list:\n        product *= tup[K]\n    \n    return product\n\n# Test cases\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (8, 9, 10)], 1) == 108, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(1, 2, 3)], 2) == 3, \"Test case 4 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    try:\n        find_k_product([(1, 2)], 3)\n    except IndexError as e:\n        assert str(e) == \"K is out of bounds for the tuples in the list.\", \"Test case 6 failed\"\n    \n    try:\n        find_k_product([(1, 2), [3, 4]], 0)\n    except ValueError as e:\n        assert str(e) == \"All elements in the input list must be tuples.\", \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_find_k_product()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    first_elements = []\n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            first_elements.append(sublist[0])\n    return first_elements"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    # Test case 1: Profit exists\n    assert profit_amount(1500, 1800) == 300, \"Test case 1 failed\"\n    \n    # Test case 2: No profit\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss\n    assert profit_amount(1500, 1200) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Profit with floating point numbers\n    assert profit_amount(1000.50, 1200.75) == 200.25, \"Test case 4 failed\"\n    \n    # Test case 5: Large numbers\n    assert profit_amount(1_000_000, 1_500_000) == 500_000, \"Test case 5 failed\"\n    \n    # Test case 6: Negative sale amount\n    assert profit_amount(1000, -500) is None, \"Test case 6 failed\"\n    \n    # Test case 7: Negative actual cost\n    assert profit_amount(-1000, 500) == 1500, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among the three inputs\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality and increment count accordingly\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we should return 2\n    if count == 1:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 1, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(0, 1, 0) == 2, \"Test case 9 failed\"\n    assert test_three_equal(1, 0, 0) == 2, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"\n    assert count_tuplex((None, None, None), None) == 3, \"Test Case 5 Failed\"\n    \n    try:\n        count_tuplex([1, 2, 3], 1)  # This should raise a TypeError\n    except TypeError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_count_tuplex()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the results of the multiplication.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    # Use map to multiply each element by n\n    return list(map(lambda x: x * n, nums))\n\n# Test cases\ndef test_ntimes_list():\n    # Test with normal case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with n = 0\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with negative n\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with an empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test with a single element\n    assert ntimes_list([10], 2) == [20]\n    \n    # Test with non-integer n\n    try:\n        ntimes_list([1, 2, 3], 2.5)\n    except ValueError as e:\n        assert str(e) == \"The second argument must be an integer.\"\n    \n    # Test with non-list nums\n    try:\n        ntimes_list(\"not a list\", 2)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list.\"\n\n# Run the tests\ntest_ntimes_list()\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    \n    # Precompute factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to get the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(6, 3, 5) == 4, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 1) == 1, \"Test case 4 failed\"  # 0C0 = 1\n    assert ncr_modp(10, 0, 13) == 1, \"Test case 5 failed\"  # nC0 = 1\n    assert ncr_modp(10, 10, 13) == 1, \"Test case 6 failed\"  # nCn = 1\n    try:\n        ncr_modp(5, 6, 7)\n    except ValueError:\n        pass  # Expected to raise ValueError\n    else:\n        assert False, \"Test case 7 failed: ValueError not raised\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_ncr_modp()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix(['abc', 'abcd', 'abcde']) == 'abc'\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_fibonacci()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_gcd()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the beginning of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix(['ab', 'a']) == 'a'\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the beginning of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix(['prefix', 'prefixes', 'prefixed']) == 'prefix'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: New matrix rotated 90 degrees clockwise.\n\n    Raises:\n    ValueError: If the input is not a valid matrix.\n    \"\"\"\n    if not matrix or not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list (matrix).\")\n    \n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Check if all rows are of the same length\n    if any(len(row) != num_cols for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same number of columns.\")\n    \n    # Create a new matrix for the rotated version\n    rotated = [[0] * num_rows for _ in range(num_cols)]\n    \n    for i in range(num_rows):\n        for j in range(num_cols):\n            rotated[j][num_rows - 1 - i] = matrix[i][j]\n    \n    return rotated\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n    \n    # Edge case: empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty 2D list (matrix).\"\n    \n    # Edge case: non-rectangular matrix\n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"All rows in the matrix must have the same number of columns.\"\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    max_length = 0  # Variable to store the maximum length of common substring\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring\n    \n    return max_length\n\n# Test cases\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('abc', 'abc') == 3  # 'abc' is the longest common substring\nassert longest_common_substring('abc', 'def') == 0  # No common substring\nassert longest_common_substring('a', 'a') == 1  # Single character match\nassert longest_common_substring('', 'abc') == 0  # Empty string\nassert longest_common_substring('abc', '') == 0  # Empty string\nassert longest_common_substring('abcde', 'abfce') == 2  # 'ab' is the longest common substring\nassert longest_common_substring('xyz', 'xyzxyz') == 3  # 'xyz' is the longest common substring\nassert longest_common_substring('abcdefg', 'xyzabcde') == 5  # 'abcde' is the longest common substring\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-integer values.\n    \"\"\"\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    for item in arr:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Example usage\nassert max_value([1, 2, 3, 4, 5]) == 5"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string.\n    s2 (str): Second string.\n    \n    Returns:\n    int: Length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[m][n]\n    return dp[m][n]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3\nassert longest_common_subsequence('abc', 'abc') == 3\nassert longest_common_subsequence('abc', 'def') == 0\nassert longest_common_subsequence('abcdef', 'acf') == 3\nassert longest_common_subsequence('', 'abc') == 0\nassert longest_common_subsequence('abc', '') == 0\nassert longest_common_subsequence('', '') == 0\nassert longest_common_subsequence('a', 'a') == 1\nassert longest_common_subsequence('a', 'b') == 0\n\nprint(\"All test cases passed!\")"}
