{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Raises:\n    ValueError: If the input is not a string.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regex to remove non-alphanumeric characters\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    \n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('12345!@#$%') == '12345'\n    assert remove_splchar('hello_world') == 'helloworld'\n    assert remove_splchar('') == ''\n    assert remove_splchar('abc123!@#') == 'abc123'\n    assert remove_splchar('   spaces   ') == 'spaces'\n    \n    try:\n        remove_splchar(12345)  # This should raise a ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Validate input\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    # Extract the first element of each sublist, handling empty sublists\n    return [sublist[0] for sublist in lst if sublist]\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test Case 1 Failed\"\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40], \"Test Case 2 Failed\"\n    assert Extract([[], [1, 2], [3]]) == [1, 3], \"Test Case 3 Failed\"  # Handling empty sublist\n    assert Extract([[], [], []]) == [], \"Test Case 4 Failed\"  # All empty sublists\n    assert Extract([[1], [], [2], [3, 4]]) == [1, 2, 3], \"Test Case 5 Failed\"  # Mixed empty and non-empty\n    assert Extract([]) == [], \"Test Case 6 Failed\"  # Empty list of lists\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Find all the vowels in the string\n    vowel_positions = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_values = [str_list[i] for i in vowel_positions]\n    \n    # Reverse the list of vowels\n    vowel_values.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for i, pos in enumerate(vowel_positions):\n        str_list[pos] = vowel_values[i]\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 8 failed\"\n    assert reverse_vowels(\"AEIOUaeiou\") == \"aeiouAEIOU\", \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n\n    Parameters:\n    actual_cost (float or int): The cost price of the item.\n    sale_amount (float or int): The selling price of the item.\n\n    Returns:\n    float or int: The profit amount if there is a profit, otherwise None.\n\n    If the sale amount is less than or equal to the actual cost, the function returns None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers (int or float).\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1800) == 300, \"Test Case 2 Failed\"\n    assert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\n    assert profit_amount(500, 700) == 200, \"Test Case 4 Failed\"\n    assert profit_amount(0, 100) == 100, \"Test Case 5 Failed\"\n    assert profit_amount(100, 0) is None, \"Test Case 6 Failed\"\n    \n    # Testing with negative values\n    assert profit_amount(-100, 100) == 200, \"Test Case 7 Failed\"\n    assert profit_amount(-100, -50) is None, \"Test Case 8 Failed\"\n    \n    # Testing with float values\n    assert profit_amount(1500.50, 1800.75) == 300.25, \"Test Case 9 Failed\"\n    assert profit_amount(1500.50, 1500.50) is None, \"Test Case 10 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to remove all lowercase letters\n    result = re.sub(r'[a-z]', '', str1)\n    \n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('abcDEFghiJKL') == 'DEFJKL'\n    assert remove_lowercase('123abcXYZ') == '123XYZ'\n    assert remove_lowercase('') == ''  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # No lowercase letters\n    assert remove_lowercase('NoLowerCaseHere') == 'NoUpperCaseHere'  # Mixed case\n    assert remove_lowercase('1234567890') == '1234567890'  # Only numbers\n    assert remove_lowercase('!@#$%^&*()') == '!@#$%^&*()'  # Special characters only\n\n    try:\n        remove_lowercase(123)  # Invalid input type\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n\n# Run the test cases\ntest_remove_lowercase()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from a list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n\n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the product by the K-th index element\n        product *= tup[K]\n    \n    return product\n\n# Test cases to validate the functionality of the code\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(10, 20), (30, 40)], 1) == 800, \"Test case 4 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for tuple (1, 2).\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n\n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    denominator_inv = mod_inverse(denominator, p)\n\n    return (numerator * denominator_inv) % p\n\n# Test cases to validate the functionality\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(5, 0, 7) == 1, \"Test case 3 failed\"\n    assert ncr_modp(5, 5, 7) == 1, \"Test case 4 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 5 failed\"\n    assert ncr_modp(0, 0, 1) == 1, \"Test case 6 failed\"  # Edge case: 0C0\n    assert ncr_modp(10, 11, 13) == 0, \"Test case 7 failed\"  # Edge case: r > n\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ncr_modp()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences of the value.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test cases to validate the functionality of the count_tuplex function\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"  # Empty tuple\n    assert count_tuplex((None, None, None), None) == 3, \"Test Case 5 Failed\"  # Counting None\n    assert count_tuplex((1, 2, 3, 4, 5), 1) == 1, \"Test Case 6 Failed\"  # Single occurrence\n    assert count_tuplex((1, 2, 3, 4, 5), 5) == 1, \"Test Case 7 Failed\"  # Last element\n    assert count_tuplex((1, 2, 3, 4, 5), 0) == 0, \"Test Case 8 Failed\"  # Non-existent element\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by a given integer n.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing each element of nums multiplied by n.\n\n    Raises:\n    ValueError: If nums is not a list or if n is not an integer.\n    TypeError: If any element in nums is not a number.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    # Validate that all elements in nums are numbers\n    for num in nums:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be numbers.\")\n\n    # Use map to multiply each element by n and convert to a list\n    return list(map(lambda x: x * n, nums))\n\n# Example usage\nif __name__ == \"__main__\":\n    result = ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    print(result)  # Output: [3, 6, 9, 12, 15, 18, 21]"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers among the three inputs.\n    \n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    >>> test_three_equal(1, 1, 2)\n    2\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count the number of equal integers\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n\n    # If all three are equal, we should return 3\n    if equal_count == 3:\n        return 3\n    # If two are equal, we should return 2\n    elif equal_count == 2:\n        return 2\n    # If none are equal, we return 0\n    else:\n        return 0\n\n# Test cases to validate the functionality of the code\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 6 failed\"\n    \n    # Testing with negative numbers\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 0) == 2, \"Test case 8 failed\"\n    assert test_three_equal(-1, 0, 1) == 0, \"Test case 9 failed\"\n    \n    # Testing with zero\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 10 failed\"\n    assert test_three_equal(0, 0, 1) == 2, \"Test case 11 failed\"\n    assert test_three_equal(0, 1, 2) == 0, \"Test case 12 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string. If there is no common prefix, return an empty string.\n    \n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['single'])\n    'single'\n    >>> longest_common_prefix([])\n    ''\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['single']) == 'single'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a', 'a', 'a']) == 'a'\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix(['prefix', 'pre', 'pretext']) == 'pre'\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    >>> gcd(56, 98)\n    14\n    >>> gcd(101, 10)\n    1\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases to validate the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD of 0 and 0 is undefined, but we return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"  # GCD should be positive\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"  # GCD should be positive\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"  # GCD should be positive\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input list contains non-integer values.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of the max_value function\ndef test_max_value():\n    # Test with a normal case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([5]) == 5\n    assert max_value([1, 3, 2, 5, 4]) == 5\n    \n    # Test with a mix of positive and negative integers\n    assert max_value([-10, 0, 10, 5]) == 10\n    \n    # Test with large numbers\n    assert max_value([1000000, 999999, 1000001]) == 1000001\n    \n    # Test with an empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\"\n    \n    # Test with non-integer values (should raise TypeError)\n    try:\n        max_value([1, 2, '3', 4])\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be integers.\"\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string\n    \"\"\"\n    if not strs:\n        return \"\"  # Return empty string if the list is empty\n\n    # Take the first string as the reference\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n\n    return prefix  # Return the longest common prefix found\n\n# Test cases to validate the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Test for larger Fibonacci numbers\n    assert fibonacci(20) == 6765, \"Test case 20 failed\"\n    assert fibonacci(30) == 832040, \"Test case 30 failed\"\n    \n    # Test for negative input\n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate for common prefix.\n    :return: The longest common prefix as a string. If there is no common prefix, return an empty string \"\".\n    \n    Example:\n    >>> longest_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_prefix(['single'])\n    'single'\n    >>> longest_prefix([])\n    ''\n    \"\"\"\n    \n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference for comparison\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['single']) == 'single', \"Test case 3 failed\"\n    assert longest_prefix([]) == '', \"Test case 4 failed\"\n    assert longest_prefix(['a', 'a', 'a']) == 'a', \"Test case 5 failed\"\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 6 failed\"\n    assert longest_prefix(['prefix', 'pre', 'preliminary']) == 'pre', \"Test case 7 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotates a given matrix by 90 degrees clockwise.\n\n    Args:\n        matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n        list of list of int: A new 2D list representing the rotated matrix.\n\n    Raises:\n        ValueError: If the input is not a square matrix.\n\n    Example:\n        >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n\n    return transposed\n\n# Example usage\nif __name__ == \"__main__\":\n    result = rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    print(result)  # Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string. If there is no common prefix, return an empty string.\n    \n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['single'])\n    'single'\n    >>> longest_common_prefix([])\n    ''\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the code\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['single']) == 'single'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a', 'a', 'a']) == 'a'\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix(['prefix', 'pre', 'pretext']) == 'pre'\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'abcd', 'ab']) == 'ab'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Calculate the length of the longest common subsequence (LCS) of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Test cases to validate the functionality\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 8 failed\"\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n\n    Example:\n    >>> longest_common_substring('abcdef', 'zcdemf')\n    3\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the functionality of the code\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 3, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
