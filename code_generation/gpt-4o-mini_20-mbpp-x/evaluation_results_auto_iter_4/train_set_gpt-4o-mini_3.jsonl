{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier for each element in the list.\n    \n    Returns:\n    list: A new list containing each element of 'nums' multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test the function with the provided assertion\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases to validate the function\nprint(ntimes_list([0, 1, 2], 5))  # Expected: [0, 5, 10]\nprint(ntimes_list([-1, -2, -3], 2))  # Expected: [-2, -4, -6]\nprint(ntimes_list([10, 20, 30], 0))  # Expected: [0, 0, 0]\nprint(ntimes_list([], 5))  # Expected: []"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist from a list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Raises:\n    ValueError: If any sublist is empty.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if not sublist:  # Check if the sublist is empty\n            raise ValueError(\"One of the sublists is empty.\")\n        first_elements.append(sublist[0])  # Append the first element of the sublist\n    \n    return first_elements\n\n# Test the function with the provided assertion\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\n# Additional test cases\ntry:\n    print(Extract([[1, 2], [], [6, 7]]))  # This should raise a ValueError\nexcept ValueError as e:\n    print(e)  # Output the error message\n\n# Valid test case\nprint(Extract([[10], [20, 30], [40, 50, 60]]))  # Output: [10, 20, 40]"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    \n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Create an iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string by replacing vowels with reversed ones\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers (0, 2, or 3)\n    \n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    \"\"\"\n    # Check if inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n    \n    # Count the number of equal integers\n    if x == y == z:\n        return 3  # All three are equal\n    elif x == y or y == z or x == z:\n        return 2  # Two are equal\n    else:\n        return 0  # All are different\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 1, 2) == 2\nassert test_three_equal(1, 2, 1) == 2\nassert test_three_equal(2, 2, 3) == 2\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(0, 0, 0) == 3\nassert test_three_equal(-1, -1, 1) == 2\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Use regular expression to remove non-alphanumeric characters\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n\n    return cleaned_text\n\n# Test case to validate the function\nassert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n\n# Additional test cases\nassert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\nassert remove_splchar('1234567890') == '1234567890'\nassert remove_splchar('') == ''\nassert remove_splchar('!@#$%^&*()') == ''\n\nprint(\"All tests passed successfully.\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float or int): The actual cost of the item.\n    sale_amount (float or int): The sale amount of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    300\n    >>> profit_amount(1500, 1500)\n    None\n    >>> profit_amount(1500, 1600)\n    100\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers (int or float).\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Provided test case\n    assert profit_amount(1500, 1200) == 300, \"Test case 1 failed\"\n    # Additional test cases\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    assert profit_amount(1500, 1600) == 100, \"Test case 3 failed\"\n    assert profit_amount(1000, 500) == None, \"Test case 4 failed\"\n    assert profit_amount(200, 300) == 100, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: The modified string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Use regex to remove all lowercase letters\n    result = re.sub(r'[a-z]+', '', str1)\n    \n    return result\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    # Test case 2: No lowercase letters\n    assert remove_lowercase('KDA') == 'KDA'\n    # Test case 3: All lowercase letters\n    assert remove_lowercase('abcdef') == ''\n    # Test case 4: Mixed case with no lowercase\n    assert remove_lowercase('KLMNOP') == 'KLMNOP'\n    # Test case 5: Empty string\n    assert remove_lowercase('') == ''\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Count of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n    # Test case 2: Count of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2\n    # Test case 3: Count of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1\n    # Test case 4: Count of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0\n    # Test case 5: Count of a string in a tuple of integers (should return 0)\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), '4') == 0\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    ValueError: If K is out of bounds for the tuples in the list.\n    AssertionError: If the input list is empty or contains tuples of different lengths.\n    \"\"\"\n    \n    # Validate input\n    if not test_list:\n        raise AssertionError(\"Input list is empty.\")\n    \n    # Check if all tuples have the same length and K is a valid index\n    tuple_length = len(test_list[0])\n    if K < 0 or K >= tuple_length:\n        raise ValueError(f\"K must be between 0 and {tuple_length - 1}.\")\n    \n    # Calculate the product of the Kth elements\n    product = 1\n    for tup in test_list:\n        if len(tup) != tuple_length:\n            raise AssertionError(\"All tuples must have the same length.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: Edge case with K = 0\n    assert find_k_product([(2, 3, 4), (5, 6, 7), (8, 9, 10)], 0) == 80, \"Test case 2 failed\"\n    \n    # Test case 3: Edge case with K = 1\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 1) == 48, \"Test case 3 failed\"\n    \n    # Test case 4: Edge case with K = 2 (should raise ValueError)\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except ValueError as e:\n        print(f\"Test case 4 passed: {e}\")\n    \n    # Test case 5: Edge case with empty list (should raise AssertionError)\n    try:\n        find_k_product([], 0)\n    except AssertionError as e:\n        print(f\"Test case 5 passed: {e}\")\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Check for invalid inputs\n    if r > n:\n        return 0\n    if n < 0 or r < 0 or p <= 1:\n        raise ValueError(\"Invalid input values: n, r must be non-negative and p must be greater than 1.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6\n\n# Additional test cases\nprint(ncr_modp(5, 2, 7))  # Expected output: 3\nprint(ncr_modp(10, 3, 11)) # Expected output: 4\nprint(ncr_modp(0, 0, 5))   # Expected output: 1 (0C0 is 1)"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        for string in strs[1:]:  # Compare with the rest of the strings\n            # If the current character does not match or we reach the end of the string\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[:i]  # Return the common prefix found so far\n    \n    return prefix  # If we complete the loop, the entire prefix is common\n\n# Test cases to validate the function\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\nassert longest_common_prefix([]) == ''\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Test the function with the provided example\nassert gcd(48, 18) == 6, \"Test case failed: gcd(48, 18) should be 6\"\n\n# Additional test cases\nassert gcd(56, 98) == 14, \"Test case failed: gcd(56, 98) should be 14\"\nassert gcd(101, 10) == 1, \"Test case failed: gcd(101, 10) should be 1\"\nassert gcd(0, 5) == 5, \"Test case failed: gcd(0, 5) should be 5\"\nassert gcd(5, 0) == 5, \"Test case failed: gcd(5, 0) should be 5\"\nassert gcd(0, 0) == 0, \"Test case failed: gcd(0, 0) should be 0\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        # Compare with each string in the list\n        for string in strs[1:]:\n            # If we reach the end of any string or characters do not match\n            if i >= len(string) or string[i] != prefix[i]:\n                # Return the prefix up to this point\n                return prefix[:i]\n    \n    # If we complete the loop, the entire prefix is common\n    return prefix\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative or not an integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Iterative approach to calculate Fibonacci number\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(6) == 8\nassert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34\nassert fibonacci(10) == 55\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as a reference\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix:\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix([]) == ''\nassert longest_prefix(['']) == ''\nassert longest_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value to the smallest possible integer\n    max_val = float('-inf')\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    # If the list is empty, we can return None or raise an error\n    if max_val == float('-inf'):\n        return None  # or raise ValueError(\"The list is empty.\")\n\n    return max_val\n\n# Test cases\nassert max_value([1, 2, 3, 4, 5]) == 5\nassert max_value([-1, -2, -3, -4, -5]) == -1\nassert max_value([0, 0, 0]) == 0\nassert max_value([10]) == 10\nassert max_value([]) is None  # Testing empty list case\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the other strings\n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    # Test case 1\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    # Test case 2\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    # Test case 3\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    # Test case 4\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    # Test case 5\n    assert longest_common_prefix(['a']) == 'a'\n    # Test case 6\n    assert longest_common_prefix([]) == ''\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid 2D list or if the matrix is not square.\n    \"\"\"\n    # Check if the input is a valid 2D list\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a 2D list (matrix).\")\n    \n    # Check if the matrix is square\n    n = len(matrix)\n    if n == 0 or any(len(row) != n for row in matrix):\n        raise ValueError(\"Matrix must be non-empty and square (same number of rows and columns).\")\n\n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix (should raise ValueError)\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        print(e)  # Expected output: Matrix must be non-empty and square (same number of rows and columns).\n    \n    # Test case 5: Non-square matrix (should raise ValueError)\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        print(e)  # Expected output: Matrix must be non-empty and square (same number of rows and columns).\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    :param s1: First input string\n    :param s2: Second input string\n    :return: Length of the longest common substring\n    \"\"\"\n    # Edge case: if either string is empty, the longest common substring is 0\n    if not s1 or not s2:\n        return 0\n\n    # Initialize a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0  # Variable to keep track of the maximum length found\n\n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length\n                max_length = max(max_length, dp[i][j])  # Update max length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return max_length\n\n# Test cases to validate the solution\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0       # No common substring\nassert longest_common_substring('', 'abc') == 0           # One string is empty\nassert longest_common_substring('abc', '') == 0           # One string is empty\nassert longest_common_substring('a', 'a') == 1             # Both strings are the same single character\nassert longest_common_substring('abcde', 'abcxyz') == 3   # 'abc' is the longest common substring\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \n    Example:\n    >>> longest_common_subsequence('abcde', 'ace')\n    3\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    assert longest_common_subsequence('abc', 'abc') == 3\n    assert longest_common_subsequence('abc', 'def') == 0\n    assert longest_common_subsequence('abcdef', 'acf') == 3\n    assert longest_common_subsequence('', 'abc') == 0\n    assert longest_common_subsequence('abc', '') == 0\n    assert longest_common_subsequence('', '') == 0\n    \n    print(\"All test cases passed!\")"}
