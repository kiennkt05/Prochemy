{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3)\n    \n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    \"\"\"\n    # Check for equality and count\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Unit tests to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 4 failed\"\n    assert test_three_equal(5, 5, 10) == 2, \"Test case 5 failed\"\n    assert test_three_equal(10, 20, 30) == 0, \"Test case 6 failed\"\n    print(\"All test cases passed!\")\n\n# Run the tests\nif __name__ == \"__main__\":\n    run_tests()", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    first_elements = []\n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            first_elements.append(sublist[0])\n    return first_elements", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\nimport unittest\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Unit tests for the remove_splchar function\nclass TestRemoveSplChar(unittest.TestCase):\n    \n    def test_basic_case(self):\n        self.assertEqual(remove_splchar('python  @#&^%$*program123'), 'pythonprogram123')\n    \n    def test_empty_string(self):\n        self.assertEqual(remove_splchar(''), '')\n    \n    def test_only_special_characters(self):\n        self.assertEqual(remove_splchar('!@#$%^&*()'), '')\n    \n    def test_alphanumeric_only(self):\n        self.assertEqual(remove_splchar('abc123'), 'abc123')\n    \n    def test_mixed_characters(self):\n        self.assertEqual(remove_splchar('Hello, World! 2023'), 'HelloWorld2023')\n    \n    def test_numeric_string(self):\n        self.assertEqual(remove_splchar('1234567890'), '1234567890')\n    \n    def test_non_string_input(self):\n        with self.assertRaises(ValueError):\n            remove_splchar(12345)  # Should raise an error for non-string input\n\n# Run the unit tests\nif __name__ == '__main__':\n    unittest.main()", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of value in tuplex.\n\n    Raises:\n    TypeError: If tuplex is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Unit Tests\nimport unittest\n\nclass TestCountTuplex(unittest.TestCase):\n    def test_count_occurrences(self):\n        self.assertEqual(count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4), 3)\n        self.assertEqual(count_tuplex((1, 1, 1, 1, 1), 1), 5)\n        self.assertEqual(count_tuplex((1, 2, 3, 4, 5), 6), 0)\n        self.assertEqual(count_tuplex((), 1), 0)  # Empty tuple case\n        self.assertEqual(count_tuplex((None, None, None), None), 3)  # Counting None\n\n    def test_invalid_input(self):\n        with self.assertRaises(TypeError):\n            count_tuplex([1, 2, 3], 1)  # List instead of tuple\n        with self.assertRaises(TypeError):\n            count_tuplex(\"not_a_tuple\", 1)  # String instead of tuple\n\nif __name__ == \"__main__\":\n    unittest.main()", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numeric values.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Unit tests\nimport unittest\n\nclass TestProfitAmount(unittest.TestCase):\n    def test_profit(self):\n        self.assertEqual(profit_amount(1500, 1800), 300.0)\n    \n    def test_no_profit(self):\n        self.assertIsNone(profit_amount(1500, 1500))\n    \n    def test_loss(self):\n        self.assertIsNone(profit_amount(1500, 1200))\n    \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            profit_amount(\"1500\", 1800)\n        with self.assertRaises(ValueError):\n            profit_amount(1500, \"1800\")\n        with self.assertRaises(ValueError):\n            profit_amount(None, 1800)\n        with self.assertRaises(ValueError):\n            profit_amount(1500, None)\n\nif __name__ == \"__main__\":\n    unittest.main()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/495", "completion": "import re\nimport unittest\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string containing only uppercase letters.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(str1, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Unit tests for the remove_lowercase function\nclass TestRemoveLowercase(unittest.TestCase):\n    \n    def test_remove_lowercase(self):\n        self.assertEqual(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf'), 'KDALOOOHLAJSI')\n        self.assertEqual(remove_lowercase('abcDEFghiJKL'), 'DEFKL')\n        self.assertEqual(remove_lowercase(''), '')  # Test with empty string\n        self.assertEqual(remove_lowercase('123abcXYZ'), 'XYZ')  # Test with numbers\n        self.assertEqual(remove_lowercase('NoLowerCaseHere'), 'NoUpperCaseHere')  # Mixed case\n        \n    def test_invalid_input(self):\n        with self.assertRaises(TypeError):\n            remove_lowercase(123)  # Test with integer\n        with self.assertRaises(TypeError):\n            remove_lowercase(None)  # Test with None\n        with self.assertRaises(TypeError):\n            remove_lowercase(['a', 'b', 'c'])  # Test with list\n\n# Run the unit tests\nif __name__ == '__main__':\n    unittest.main()", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(s):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    :param s: Input string\n    :return: String with vowels reversed\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in s if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Rebuild the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in s)\n    \n    return result\n\n# Unit tests\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test Case 8 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_reverse_vowels()", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list containing the results of the multiplication.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"The first argument must be a list of numbers.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be a number.\")\n    \n    # Use map to multiply each element by n\n    return list(map(lambda x: x * n, nums))\n\n# Unit tests\ndef test_ntimes_list():\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10]\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]\n    assert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]\n    assert ntimes_list([], 10) == []\n    \n    try:\n        ntimes_list(\"not a list\", 3)\n    except ValueError as e:\n        assert str(e) == \"The first argument must be a list of numbers.\"\n    \n    try:\n        ntimes_list([1, 2, 3], \"not a number\")\n    except ValueError as e:\n        assert str(e) == \"The second argument must be a number.\"\n\n# Run the tests\ntest_ntimes_list()\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "from typing import List, Tuple\n\ndef find_k_product(test_list: List[Tuple[int]], K: int) -> int:\n    \"\"\"\n    Calculate the product of the Kth index elements from a list of tuples.\n\n    Parameters:\n    test_list (List[Tuple[int]]): A list of tuples containing integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the Kth elements from each tuple.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Example usage\nif __name__ == \"__main__\":\n    result = find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    print(result)  # Output should be 665", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # nCr = n! / (r! * (n - r)!)\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Calculate nCr % p\n    return (numerator * mod_inverse(denominator, p)) % p\n\n# Unit tests\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 0, 13) == 1, \"Test case 3 failed\"\n    assert ncr_modp(10, 10, 13) == 1, \"Test case 4 failed\"\n    assert ncr_modp(10, 5, 13) == 10, \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_ncr_modp()", "result": "failed: Test case 5 failed", "passed": false}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Find the shortest string in the list\n    min_str = min(strs, key=len)\n\n    # Compare characters of each string with the shortest string\n    for i in range(len(min_str)):\n        for string in strs:\n            if string[i] != min_str[i]:\n                return min_str[:i]  # Return the prefix up to the mismatch\n\n    return min_str  # All characters matched, return the shortest string\n\n\n# Unit tests\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Unit tests\nimport unittest\n\nclass TestFibonacci(unittest.TestCase):\n    def test_fibonacci(self):\n        self.assertEqual(fibonacci(0), 0)\n        self.assertEqual(fibonacci(1), 1)\n        self.assertEqual(fibonacci(2), 1)\n        self.assertEqual(fibonacci(3), 2)\n        self.assertEqual(fibonacci(4), 3)\n        self.assertEqual(fibonacci(5), 5)\n        self.assertEqual(fibonacci(6), 8)\n        self.assertEqual(fibonacci(7), 13)\n        self.assertEqual(fibonacci(8), 21)\n        self.assertEqual(fibonacci(9), 34)\n        self.assertEqual(fibonacci(10), 55)\n    \n    def test_negative_input(self):\n        with self.assertRaises(ValueError):\n            fibonacci(-1)\n    \n    def test_large_input(self):\n        self.assertEqual(fibonacci(30), 832040)\n\nif __name__ == \"__main__\":\n    unittest.main()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    :param matrix: List of lists representing the matrix to be rotated\n    :return: New matrix rotated by 90 degrees clockwise\n    :raises ValueError: If the input is not a square matrix\n    \"\"\"\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix))]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Unit tests\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == \\\n           [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n# Run the tests\ntest_rotate_matrix()\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the beginning of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Unit tests\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Unit tests\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Unit tests\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_longest_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\n# Unit tests\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_gcd()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    :param s1: First input string\n    :param s2: Second input string\n    :return: Length of the longest common substring\n    \"\"\"\n    # Initialize the lengths of the strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring\n\n    return max_length\n\n# Example assertion to test the function\nassert longest_common_substring('abcdef', 'zcdemf') == 3", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string.\n    s2 (str): Second string.\n    \n    Returns:\n    int: Length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Unit tests\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    assert longest_common_subsequence('abc', 'abc') == 3\n    assert longest_common_subsequence('abc', 'def') == 0\n    assert longest_common_subsequence('abcdef', 'acf') == 3\n    assert longest_common_subsequence('', 'abc') == 0\n    assert longest_common_subsequence('abc', '') == 0\n    assert longest_common_subsequence('', '') == 0\n    assert longest_common_subsequence('a', 'a') == 1\n    assert longest_common_subsequence('a', 'b') == 0\n    assert longest_common_subsequence('abcde', 'edcba') == 1  # Only 'e', 'd', 'c', 'b', 'a' are common but not in order\n\n# Run the tests\nif __name__ == \"__main__\":\n    test_longest_common_subsequence()\n    print(\"All tests passed!\")", "result": "passed", "passed": true}
