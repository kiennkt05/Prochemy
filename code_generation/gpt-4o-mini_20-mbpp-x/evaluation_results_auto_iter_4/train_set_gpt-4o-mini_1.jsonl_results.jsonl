{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use a list comprehension to filter out non-alphanumeric characters\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123', \"Test Case 1 Failed\"\n    assert remove_splchar('!@#$%^&*()') == '', \"Test Case 2 Failed\"\n    assert remove_splchar('1234567890') == '1234567890', \"Test Case 3 Failed\"\n    assert remove_splchar('abcDEF123') == 'abcDEF123', \"Test Case 4 Failed\"\n    assert remove_splchar('') == '', \"Test Case 5 Failed\"\n    assert remove_splchar('Hello, World!') == 'HelloWorld', \"Test Case 6 Failed\"\n    assert remove_splchar('Python3.8') == 'Python38', \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among the three inputs\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Compare the integers and count the equal ones\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we should return 2\n    if count == 2:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0\n\n# Test cases to validate the function\nassert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\nassert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\nassert test_three_equal(1, 2, 2) == 2, \"Test case 3 failed\"\nassert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\nassert test_three_equal(0, 0, 0) == 3, \"Test case 5 failed\"\nassert test_three_equal(-1, -1, 1) == 2, \"Test case 6 failed\"\nassert test_three_equal(5, 5, 5) == 3, \"Test case 7 failed\"\nassert test_three_equal(5, 5, 6) == 2, \"Test case 8 failed\"\nassert test_three_equal(5, 6, 7) == 0, \"Test case 9 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: Test case 2 failed", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to multiply each element in nums by n\n    return list(map(lambda x: x * n, nums))\n\n# Test case to validate the function\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string containing only uppercase letters.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test case to validate the function\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'Leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\"\")\n    ''\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Rebuild the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist from a list of lists.\n    \n    Parameters:\n    lst (list of lists): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is indeed a list and not empty\n        if isinstance(sublist, list) and sublist:\n            first_elements.append(sublist[0])\n        elif not isinstance(sublist, list):\n            raise ValueError(\"All elements of the input must be lists.\")\n    \n    return first_elements", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Validate input types\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Example assertion to validate the function\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Handle edge case where r > n\n    if r > n:\n        return 0\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case from the prompt\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"  # 5C2 % 7 = 10 % 7 = 3\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"  # 10C5 % 100 = 252\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 % 10 = 1\n    assert ncr_modp(5, 5, 10) == 1, \"Test case 5 failed\"  # 5C5 % 10 = 1\n    assert ncr_modp(5, 6, 10) == 0, \"Test case 6 failed\"  # 5C6 % 10 = 0 (r > n)\n    \n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from a sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Profit exists\n    assert profit_amount(1500, 1800) == 300, \"Test case 1 failed\"\n    \n    # Test case 2: No profit, sale amount is equal to actual cost\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss, sale amount is less than actual cost\n    assert profit_amount(1500, 1200) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Profit exists with different values\n    assert profit_amount(1000, 2000) == 1000, \"Test case 4 failed\"\n    \n    # Test case 5: Edge case with zero profit\n    assert profit_amount(1000, 1000) is None, \"Test case 5 failed\"\n    \n    # Test case 6: Profit with floating point numbers\n    assert profit_amount(1500.50, 1800.75) == 300.25, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from each tuple in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    # Initialize product\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element to the product\n        product *= tup[K]\n    \n    return product\n\n# Example usage\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Provided test case\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    \n    # Additional test cases\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given square matrix by 90 degrees clockwise.\n\n    :param matrix: List of lists representing the square matrix to rotate\n    :return: New matrix that is the original matrix rotated 90 degrees clockwise\n    :raises ValueError: If the input matrix is not square\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or len(matrix) != len(matrix[0]):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Example usage\nif __name__ == \"__main__\":\n    original_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    rotated_matrix = rotate_matrix(original_matrix)\n    print(rotated_matrix)  # Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    if not s1 or not s2:\n        return 0  # If either string is empty, return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    longest_length = 0  # To keep track of the longest length found\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_substring('abcdef', 'zcdemf') == 2  # 'cd' is the longest common substring\n    assert longest_common_substring('abc', 'abc') == 3  # Entire string is common\n    assert longest_common_substring('abc', 'def') == 0  # No common substring\n    assert longest_common_substring('', 'abc') == 0  # One string is empty\n    assert longest_common_substring('abc', '') == 0  # One string is empty\n    assert longest_common_substring('', '') == 0  # Both strings are empty\n    assert longest_common_substring('a', 'a') == 1  # Single character match\n    assert longest_common_substring('abcde', 'cde') == 3  # 'cde' is the longest common substring\n    assert longest_common_substring('xyz', 'xyzabc') == 3  # 'xyz' is the longest common substring\n    assert longest_common_substring('abcdefg', 'xyzabc') == 3  # 'abc' is the longest common substring\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-integer values.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list is empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test case to validate the function\nassert max_value([1, 2, 3, 4, 5]) == 5, \"Test case failed!\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The GCD of the two integers\n\n    Raises:\n    ValueError: If either a or b is not an integer or if they are both zero.\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    if a == 0 and b == 0:\n        raise ValueError(\"GCD is not defined for both numbers being zero.\")\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # Return the absolute value of GCD\n\n# Testing the gcd function\nif __name__ == \"__main__\":\n    # Test case: gcd of 48 and 18 should be 6\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert gcd(54, 24) == 6, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0)  # This should raise a ValueError\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Calculate the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize a (len_s1 + 1) x (len_s2 + 1) matrix with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in dp[len_s1][len_s2]\n    return dp[len_s1][len_s2]\n\n# Example assertion to test the function\nassert longest_common_subsequence('abcde', 'ace') == 3", "result": "passed", "passed": true}
