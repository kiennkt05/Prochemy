{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test case\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\n# Additional test cases\nif __name__ == \"__main__\":\n    # Test with various cases\n    print(remove_lowercase('HelloWorld'))  # Expected: 'HW'\n    print(remove_lowercase('Python3.8'))   # Expected: 'P'\n    print(remove_lowercase('123abcXYZ'))    # Expected: '123XYZ'\n    print(remove_lowercase(''))              # Expected: ''\n    print(remove_lowercase('ALLUPPERCASE'))  # Expected: 'ALLUPPERCASE'\n    print(remove_lowercase('lowercase'))      # Expected: ''"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the item.\n    sale_amount (float): The amount at which the item was sold.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    300.0\n    >>> profit_amount(1500, 1500)\n    None\n    >>> profit_amount(1500, 1600)\n    None\n    \"\"\"\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Testing the function with assertions\nassert profit_amount(1500, 1200) == 300.0\nassert profit_amount(1500, 1500) is None\nassert profit_amount(1500, 1600) is None\nassert profit_amount(1000, 800) == 200.0\nassert profit_amount(2000, 2500) is None\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if not sublist:  # Check if the sublist is empty\n            raise ValueError(\"One of the sublists is empty.\")\n        first_elements.append(sublist[0])  # Append the first element of the sublist\n    \n    return first_elements\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test case\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Additional test cases\n    assert Extract([[10, 20], [30, 40], [50]]) == [10, 30, 50]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Test with empty sublist (should raise ValueError)\n    try:\n        Extract([[1, 2], [], [3, 4]])\n    except ValueError as e:\n        print(e)  # Expected output: One of the sublists is empty.\n    \n    print(\"All tests passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World!') == 'HelloWorld'\n    assert remove_splchar('1234!@#$%^&*()') == '1234'\n    assert remove_splchar('') == ''\n    assert remove_splchar('NoSpecialChars') == 'NoSpecialChars'\n    assert remove_splchar('Spaces   and   tabs\\t') == 'Spacesandtabs'\n    assert remove_splchar('Mixed123!@#Chars') == 'Mixed123Chars'\n    assert remove_splchar('!@#$%^&*()_+') == ''\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))\n\n# Testing the function with the provided assertion\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases\nassert ntimes_list([0, 1, 2], 5) == [0, 5, 10]  # Testing with zero\nassert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]  # Testing with negative numbers\nassert ntimes_list([1, 2, 3], 0) == [0, 0, 0]  # Testing with zero multiplier\nassert ntimes_list([], 3) == []  # Testing with an empty list\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of 4 in the given tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count occurrences of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count occurrences of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 3 failed\"\n    \n    # Test case 4: Count occurrences of a string in a tuple of strings\n    assert count_tuplex((\"apple\", \"banana\", \"apple\", \"orange\"), \"apple\") == 2, \"Test case 4 failed\"\n    \n    # Test case 5: Count occurrences in an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list is empty.\", \"Test case 2 failed\"\n\n    # Test case 3: K out of bounds\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for tuple (1, 2).\", \"Test case 3 failed\"\n\n    # Test case 4: K is 0\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 4 failed\"\n\n    # Test case 5: K is 1\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 1) == 48, \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n    \"\"\"\n    if x == y == z:\n        return 3  # All three are equal\n    elif x == y or y == z or x == z:\n        return 2  # Two are equal\n    else:\n        return 0  # None are equal"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n or if n, r, or p are negative.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    if n < 0 or r < 0 or p <= 0:\n        raise ValueError(\"n, r must be non-negative and p must be positive.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # nCr = n! / (r! * (n - r)!)\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Calculate nCr % p\n    return (numerator * mod_inverse(denominator, p)) % p\n\n# Test cases\nif __name__ == \"__main__\":\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 3, 11) == 4, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 5) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    try:\n        ncr_modp(5, 6, 7)  # Should raise ValueError\n    except ValueError:\n        pass  # Expected behavior\n    try:\n        ncr_modp(-1, 2, 7)  # Should raise ValueError\n    except ValueError:\n        pass  # Expected behavior\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n\n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\" \")\n    ' '\n    \"\"\"\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string\")\n\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n\n    while left < right:\n        # Move left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        if left < right:\n            # Swap the vowels\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)\n\n# Test cases\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\" \") == \" \"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"bcd\") == \"bcd\"\n    assert reverse_vowels(\"aeiou\") == \"uoiea\"\n    assert reverse_vowels(\"AEIOU\") == \"UOIEA\"\n    print(\"All tests passed!\")\n\n# Run tests\ntest_reverse_vowels()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test case\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    # Additional test cases\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD of 0 and 0 is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    \n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i + 1, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n\n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()\n\n    return matrix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: 4x4 matrix\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == \\\n           [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    # Test case 5: Error case - non-square matrix\n    try:\n        rotate_matrix([[1, 2, 3], [4, 5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, no need to check further\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    max_length = 0  # Variable to store the maximum length of common substring\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n    \n    return max_length\n\n# Test cases\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('abc', 'abc') == 3  # Entire string is common\nassert longest_common_substring('abc', 'def') == 0  # No common substring\nassert longest_common_substring('abcdxyz', 'xyzabcd') == 4  # 'abcd' is the longest common substring\nassert longest_common_substring('', 'abc') == 0  # One string is empty\nassert longest_common_substring('abc', '') == 0  # One string is empty\nassert longest_common_substring('', '') == 0  # Both strings are empty\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix until it matches the start of the string\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # If the list is empty, we can return None or raise an error\n    if not arr:\n        return None  # or raise ValueError(\"List cannot be empty.\")\n\n    # Initialize max_value with the first element\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([10, 20, 30, 40, 50]) == 50\n    assert max_value([5]) == 5\n    assert max_value([1, 2, 3, 5, 4]) == 5\n\n    # Edge case: empty list\n    assert max_value([]) is None  # or handle as per your requirement\n\n    # Invalid test cases\n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        print(e)  # Expected: Input must be a list.\n\n    try:\n        max_value([1, 2, 'three'])\n    except ValueError as e:\n        print(e)  # Expected: All elements in the list must be integers.\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[len(s1)][len(s2)]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\nassert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\nassert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\nassert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\nassert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\nassert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\nassert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\nassert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\nassert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n\nprint(\"All test cases passed!\")"}
