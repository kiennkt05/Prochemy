{"task_id": "HumanEval/3", "entry_point": "below_zero", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, \n    and at that point function should return True. Otherwise it should return False.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    >>> below_zero([-1])\n    True\n    >>> below_zero([5, -10, 5])\n    True\n    >>> below_zero([10, -5, -6])\n    True\n    >>> below_zero([0, 0, 0])\n    False\n    >>> below_zero([-1, 1, -1])\n    False\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/2", "entry_point": "truncate_number", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(5.75)\n    0.75\n    >>> truncate_number(10.0)\n    0.0\n    >>> truncate_number(0.99)\n    0.99\n    >>> truncate_number(1.234567)\n    0.234567\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number must be positive.\")\n    \n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    try:\n        print(truncate_number(-1.5))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The number must be positive.\n\n    print(truncate_number(3.5))  # Expected output: 0.5\n    print(truncate_number(5.75))  # Expected output: 0.75\n    print(truncate_number(10.0))  # Expected output: 0.0\n    print(truncate_number(0.99))   # Expected output: 0.99\n    print(truncate_number(1.234567))  # Expected output: 0.234567"}
{"task_id": "HumanEval/8", "entry_point": "sum_product", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    >>> sum_product([-1, -2, -3])\n    (-6, -6)\n    >>> sum_product([0, 1, 2])\n    (3, 0)\n    >>> sum_product([5])\n    (5, 5)\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        if not isinstance(number, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n        total_sum += number\n        total_product *= number\n    \n    return total_sum, total_product\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_product([]) == (0, 1)\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([-1, -2, -3]) == (-6, -6)\n    assert sum_product([0, 1, 2]) == (3, 0)\n    assert sum_product([5]) == (5, 5)\n    assert sum_product([1, -1, 2]) == (2, -2)\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/5", "entry_point": "intersperse", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        delimiter (int): The integer to insert between elements.\n    \n    Returns:\n        List[int]: A new list with the delimiter inserted.\n    \n    Examples:\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([5], 0)\n    [5]\n    >>> intersperse([1, 2, 3, 4], 9)\n    [1, 9, 2, 9, 3, 9, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Avoid adding delimiter after the last element\n            result.append(delimiter)\n    \n    return result\n\n# Test cases to validate the functionality of the intersperse function\nif __name__ == \"__main__\":\n    # Test cases\n    assert intersperse([], 4) == []\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n    assert intersperse([5], 0) == [5]\n    assert intersperse([1, 2, 3, 4], 9) == [1, 9, 2, 9, 3, 9, 4]\n    assert intersperse([10, 20, 30], 100) == [10, 100, 20, 100, 30]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/1", "entry_point": "separate_paren_groups", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Separate groups of nested parentheses into a list of strings.\n    \n    Args:\n        paren_string (str): A string containing multiple groups of nested parentheses.\n        \n    Returns:\n        List[str]: A list of strings, each representing a separate group of balanced parentheses.\n    \n    Examples:\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    groups = []\n    balance = 0\n    current_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        \n        # When balance is zero, we have a complete group\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []  # Reset for the next group\n    \n    return groups\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Basic input with spaces\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n    \n    # Test case 2: No spaces, multiple groups\n    assert separate_paren_groups('()(()())(())') == ['()', '(())', '(())']\n    \n    # Test case 3: Single group\n    assert separate_paren_groups('((()))') == ['((()))']\n    \n    # Test case 4: Empty input\n    assert separate_paren_groups('') == []\n    \n    # Test case 5: Complex nested groups\n    assert separate_paren_groups('(( ) ( ( ) )) ( )') == ['( )', '(( ))', '( )']\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/4", "entry_point": "mean_absolute_deviation", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Calculate the Mean Absolute Deviation (MAD) of a list of numbers.\n    \n    The Mean Absolute Deviation is the average absolute difference between each\n    element and the mean of the dataset.\n    \n    MAD = average(|x - x_mean|)\n    \n    Args:\n        numbers (List[float]): A list of numerical values.\n        \n    Returns:\n        float: The Mean Absolute Deviation of the input numbers.\n        \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list must not be empty.\")\n    \n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with a standard case\n    assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n    # Test with negative numbers\n    assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666\n    # Test with all identical numbers\n    assert mean_absolute_deviation([5.0, 5.0, 5.0]) == 0.0\n    # Test with a single number\n    assert mean_absolute_deviation([10.0]) == 0.0\n    # Test with a larger dataset\n    assert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/9", "entry_point": "rolling_max", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \n    From a given list of integers, generate a list of rolling maximum elements found until the given moment\n    in the sequence.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        List[int]: A list of rolling maximums.\n        \n    Examples:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:  # Handle empty list case\n        return []\n    \n    rolling_max_list = []\n    current_max = numbers[0]\n    \n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with provided example\n    assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]\n    \n    # Additional test cases\n    assert rolling_max([5, 3, 8, 1, 4]) == [5, 5, 8, 8, 8]\n    assert rolling_max([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert rolling_max([-1, -2, -3, -4]) == [-1, -1, -1, -1]\n    assert rolling_max([]) == []  # Test with empty list\n    assert rolling_max([10]) == [10]  # Test with single element\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/7", "entry_point": "filter_by_substring", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings to include only those that contain the given substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A list of strings that contain the specified substring.\n\n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        >>> filter_by_substring(['hello', 'world'], 'o')\n        ['world']\n        >>> filter_by_substring(['test', 'testing', 'tester'], 'test')\n        ['test', 'testing', 'tester']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not isinstance(substring, str):\n        raise ValueError(\"Invalid input: 'strings' must be a list and 'substring' must be a string.\")\n    \n    # Filter the list of strings\n    filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Empty list\n    assert filter_by_substring([], 'a') == []\n    \n    # Test case 2: Strings containing the substring\n    assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\n    \n    # Test case 3: Substring present in one string\n    assert filter_by_substring(['hello', 'world'], 'o') == ['world']\n    \n    # Test case 4: Substring present in multiple strings\n    assert filter_by_substring(['test', 'testing', 'tester'], 'test') == ['test', 'testing', 'tester']\n    \n    # Test case 5: Substring not present in any string\n    assert filter_by_substring(['hello', 'world'], 'x') == []\n    \n    # Test case 6: Substring is an empty string\n    assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']\n    \n    # Test case 7: Invalid input types\n    try:\n        filter_by_substring('not a list', 'a')\n    except ValueError as e:\n        assert str(e) == \"Invalid input: 'strings' must be a list and 'substring' must be a string.\"\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/0", "entry_point": "has_close_elements", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    Args:\n        numbers (List[float]): A list of floating-point numbers.\n        threshold (float): The threshold distance to check against.\n        \n    Returns:\n        bool: True if any two numbers are closer than the threshold, False otherwise.\n    \n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n        False\n        >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        True\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list of numbers cannot be empty.\")\n    if threshold < 0:\n        raise ValueError(\"The threshold must be a non-negative number.\")\n    \n    n = len(numbers)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid cases\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n    assert has_close_elements([1.0, 1.4, 2.0], 0.5) == True\n    assert has_close_elements([1.0, 1.5, 2.0], 0.6) == True\n    assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0) == True\n    assert has_close_elements([1.0, 2.0, 3.0, 4.0], 2.0) == True\n    assert has_close_elements([1.0, 3.0, 5.0], 1.5) == False\n\n    # Edge cases\n    assert has_close_elements([1.0], 0.5) == False  # Single element\n    assert has_close_elements([], 0.5)  # Should raise ValueError\nexcept ValueError as e:\n    print(e)"}
{"task_id": "HumanEval/6", "entry_point": "parse_nested_parens", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" \n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting_depth(group: str) -> int:\n        \"\"\" Helper function to calculate the maximum nesting depth of a single group of parentheses. \"\"\"\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n                if current_depth < 0:\n                    raise ValueError(\"Unmatched closing parenthesis detected.\")\n        \n        if current_depth != 0:\n            raise ValueError(\"Unmatched opening parenthesis detected.\")\n        \n        return max_depth\n\n    # Split the input string into groups and calculate the maximum depth for each\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        depths.append(max_nesting_depth(group))\n    \n    return depths\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test case\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Expected output: [2, 3, 1, 3]\n\n    # Additional test cases\n    print(parse_nested_parens('() () ()'))  # Expected output: [1, 1, 1]\n    print(parse_nested_parens('((())()) (()) (())'))  # Expected output: [2, 2, 2]\n    print(parse_nested_parens('((())) (()) (()) (())'))  # Expected output: [3, 2, 2, 2]\n    print(parse_nested_parens('()()()()'))  # Expected output: [1, 1, 1, 1]\n    \n    # Edge case: empty input\n    print(parse_nested_parens(''))  # Expected output: []\n    \n    # Edge case: unmatched parentheses\n    try:\n        print(parse_nested_parens('(()'))  # Should raise an error\n    except ValueError as e:\n        print(e)  # Expected output: Unmatched opening parenthesis detected.\n    \n    try:\n        print(parse_nested_parens('())'))  # Should raise an error\n    except ValueError as e:\n        print(e)  # Expected output: Unmatched closing parenthesis detected."}
{"task_id": "HumanEval/12", "entry_point": "longest", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    >>> longest(['abc', 'ab', 'abcd', 'a'])\n    'abcd'\n    >>> longest(['longest', 'longer', 'long'])\n    'longest'\n    >>> longest(['same', 'size', 'test'])\n    'same'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]  # Start with the first string as the longest\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/15", "entry_point": "string_sequence", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    Args:\n        n (int): The upper limit of the sequence (inclusive).\n        \n    Returns:\n        str: A space-delimited string of numbers from 0 to n.\n        \n    Raises:\n        ValueError: If n is a negative integer.\n    \n    Examples:\n        >>> string_sequence(0)\n        '0'\n        >>> string_sequence(5)\n        '0 1 2 3 4 5'\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Generate the sequence of numbers from 0 to n\n    sequence = range(n + 1)\n    \n    # Convert the sequence to a space-delimited string\n    result = ' '.join(map(str, sequence))\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid cases\n    print(string_sequence(0))  # Expected: '0'\n    print(string_sequence(5))  # Expected: '0 1 2 3 4 5'\n    \n    # Edge case\n    print(string_sequence(1))  # Expected: '0 1'\n    \n    # Test with larger number\n    print(string_sequence(10))  # Expected: '0 1 2 3 4 5 6 7 8 9 10'\n    \n    # Invalid case\n    try:\n        print(string_sequence(-1))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected: \"Input must be a non-negative integer.\""}
{"task_id": "HumanEval/19", "entry_point": "sort_numbers", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', \n    'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_numbers('nine eight seven six five four three two one zero')\n    'zero one two three four five six seven eight nine'\n    >>> sort_numbers('zero zero one one two two three three four four')\n    'zero zero one one two two three three four four'\n    >>> sort_numbers('five four three two one')\n    'one two three four five'\n    >>> sort_numbers('')\n    ''\n    \"\"\"\n    \n    # Mapping from words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping for sorting back to words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers, sort them, and convert back to words\n    sorted_words = sorted(words, key=lambda word: word_to_number[word])\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "entry_point": "all_prefixes", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string.\n    \n    Args:\n        string (str): The input string to generate prefixes from.\n        \n    Returns:\n        List[str]: A list containing all prefixes of the input string.\n    \n    Examples:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n        >>> all_prefixes('')\n        []\n        >>> all_prefixes('a')\n        ['a']\n        >>> all_prefixes('hello')\n        ['h', 'he', 'hel', 'hell', 'hello']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test cases to validate the functionality of the all_prefixes function\nif __name__ == \"__main__\":\n    # Test with a normal string\n    assert all_prefixes('abc') == ['a', 'ab', 'abc']\n    # Test with an empty string\n    assert all_prefixes('') == []\n    # Test with a single character\n    assert all_prefixes('a') == ['a']\n    # Test with a longer string\n    assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']\n    # Test with a string containing spaces\n    assert all_prefixes('a b c') == ['a', 'a ', 'a b', 'a b ', 'a b c']\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/17", "entry_point": "parse_music", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Parse a string representing musical notes in a special ASCII format\n    and return a list of integers corresponding to how many beats each note lasts.\n\n    Legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    Args:\n        music_string (str): A string of musical notes separated by spaces.\n\n    Returns:\n        List[int]: A list of integers representing the beats for each note.\n\n    Examples:\n        >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n        [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping of note representations to their corresponding beats\n    note_to_beats = {\n        'o': 4,   # whole note\n        'o|': 2,  # half note\n        '.|': 1   # quarter note\n    }\n    \n    # Split the input string into individual notes\n    notes = music_string.split()\n    \n    # Convert each note to its corresponding beat value\n    beats = []\n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n        else:\n            raise ValueError(f\"Invalid note representation: {note}\")\n    \n    return beats\n\n# Test cases to validate the functionality of the parse_music function\nif __name__ == \"__main__\":\n    # Valid input test case\n    assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \n    # Additional test cases\n    assert parse_music('o o o| .|') == [4, 4, 2, 1]\n    assert parse_music('.| .| .| o| o') == [1, 1, 1, 2, 4]\n    assert parse_music('o| o| o| o|') == [2, 2, 2, 2]\n    \n    # Edge case: empty input\n    assert parse_music('') == []\n    \n    # Edge case: invalid note representation\n    try:\n        parse_music('o o| x .|')\n    except ValueError as e:\n        assert str(e) == \"Invalid note representation: x\"\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/16", "entry_point": "count_distinct_characters", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of.\n    \n    Args:\n        string (str): The input string to analyze.\n        \n    Returns:\n        int: The number of distinct characters in the string.\n    \n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    >>> count_distinct_characters('Hello World!')\n    10\n    >>> count_distinct_characters('')\n    0\n    >>> count_distinct_characters('12345!@#')\n    8\n    \"\"\"\n    # Normalize the string to lowercase\n    normalized_string = string.lower()\n    \n    # Use a set to find distinct characters\n    distinct_characters = set(normalized_string)\n    \n    # Remove non-alphabetic characters if we only want letters\n    distinct_characters = {char for char in distinct_characters if char.isalpha()}\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "entry_point": "strlen", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string.\n    \n    Args:\n        string (str): The string whose length is to be calculated.\n        \n    Returns:\n        int: The length of the string.\n    \n    Examples:\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    >>> strlen('Hello, World!')\n    13\n    >>> strlen('Python')\n    6\n    >>> strlen('1234567890')\n    10\n    >>> strlen(' ')\n    1\n    >>> strlen('a' * 1000)  # Test with a long string\n    1000\n    \"\"\"\n    return len(string)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/20", "entry_point": "find_closest_elements", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    Args:\n        numbers (List[float]): A list of float numbers with at least two elements.\n    \n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers in ascending order.\n    \n    Raises:\n        ValueError: If the input list has fewer than two elements.\n    \n    Examples:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must contain at least two elements.\")\n    \n    # Sort the numbers\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to track the closest pair\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Expected: (2.0, 2.2)\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Expected: (2.0, 2.0)\n    \n    # Additional test cases\n    print(find_closest_elements([10.5, 10.1, 10.3, 10.2]))  # Expected: (10.1, 10.2)\n    print(find_closest_elements([-1.0, -2.0, -1.5, -1.8]))  # Expected: (-1.5, -1.8)\n    print(find_closest_elements([0.0, 0.0, 0.0]))  # Expected: (0.0, 0.0)"}
{"task_id": "HumanEval/22", "entry_point": "filter_integers", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers.\n    \n    Args:\n        values (List[Any]): A list containing elements of any type.\n        \n    Returns:\n        List[int]: A list containing only the integers from the input list.\n    \n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Test cases to validate the functionality of the filter_integers function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed types with integers\n    assert filter_integers(['a', 3.14, 5]) == [5]\n    \n    # Test case 2: Only integers and non-integer types\n    assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]\n    \n    # Test case 3: No integers in the list\n    assert filter_integers(['hello', 3.14, None]) == []\n    \n    # Test case 4: List with only integers\n    assert filter_integers([10, 20, 30]) == [10, 20, 30]\n    \n    # Test case 5: Empty list\n    assert filter_integers([]) == []\n    \n    # Test case 6: List with negative and positive integers\n    assert filter_integers([-1, 0, 1, 'test', 2.5]) == [-1, 0, 1, 2]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/13", "entry_point": "greatest_common_divisor", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b.\n    \n    The function uses the Euclidean algorithm to compute the GCD.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n    Returns:\n        int: The greatest common divisor of a and b.\n        \n    Raises:\n        ValueError: If either a or b is not an integer.\n        \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(5, 0)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(25, -15)\n    5\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Using absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert greatest_common_divisor(48, 18) == 6\n    assert greatest_common_divisor(101, 10) == 1\n    assert greatest_common_divisor(0, 0) == 0  # GCD(0, 0) is undefined, but we can handle it as a special case if needed\n    assert greatest_common_divisor(-48, -18) == 6\n    assert greatest_common_divisor(48, -18) == 6\n    assert greatest_common_divisor(-48, 18) == 6\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/11", "entry_point": "string_xor", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    >>> string_xor('111', '000')\n    '111'\n    >>> string_xor('101', '101')\n    '000'\n    >>> string_xor('1101', '1011')\n    '0110'\n    >>> string_xor('110', '1010')  # Different lengths\n    Traceback (most recent call last):\n        ...\n    ValueError: Input strings must be of the same length and consist only of '0' and '1'.\n    >>> string_xor('110', '10a')  # Invalid character\n    Traceback (most recent call last):\n        ...\n    ValueError: Input strings must be of the same length and consist only of '0' and '1'.\n    \"\"\"\n    \n    # Check if both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length and consist only of '0' and '1'.\")\n    \n    # Check if both strings consist only of '0' and '1'\n    if not all(char in '01' for char in a) or not all(char in '01' for char in b):\n        raise ValueError(\"Input strings must be of the same length and consist only of '0' and '1'.\")\n    \n    # Perform XOR operation\n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(result)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/10", "entry_point": "make_palindrome", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome. \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string the reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    >>> make_palindrome('abcde')\n    'abcdeedcba'\n    \"\"\"\n    if not string:\n        return string  # Return empty string if input is empty\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix is a palindrome, we need to reverse the prefix\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]  # This case is theoretically unreachable due to the loop\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('race') == 'racecar'\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('ab') == 'aba'\n    assert make_palindrome('abcde') == 'abcdeedcba'\n    assert make_palindrome('level') == 'level'\n    assert make_palindrome('noon') == 'noon'\n    assert make_palindrome('abc') == 'abcba'\n\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/24", "entry_point": "largest_divisor", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n.\n    \n    Args:\n        n (int): A positive integer greater than 1.\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \n    Raises:\n        ValueError: If n is less than or equal to 1.\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n        >>> largest_divisor(28)\n        14\n        >>> largest_divisor(1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 1\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    \n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert largest_divisor(10) == 5\n    assert largest_divisor(21) == 7\n    assert largest_divisor(100) == 50\n    assert largest_divisor(97) == 1  # 97 is prime, so the largest divisor is 1\n    try:\n        largest_divisor(1)  # This should raise a ValueError\n    except ValueError as e:\n        print(e)  # Expected output: n must be greater than 1"}
{"task_id": "HumanEval/21", "entry_point": "rescale_to_unit", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    Args:\n        numbers (List[float]): A list of float numbers with at least two elements.\n    \n    Returns:\n        List[float]: A new list of rescaled numbers in the range [0, 1].\n    \n    Raises:\n        ValueError: If the input list has fewer than two elements.\n    \n    Examples:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    if min_value == max_value:\n        # If all numbers are the same, return a list of zeros\n        return [0.0] * len(numbers)\n    \n    rescaled_numbers = [(num - min_value) / (max_value - min_value) for num in numbers]\n    \n    return rescaled_numbers\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Expected: [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n    # Test case 2: All elements are the same\n    print(rescale_to_unit([2.0, 2.0, 2.0]))  # Expected: [0.0, 0.0, 0.0]\n    \n    # Test case 3: Negative and positive numbers\n    print(rescale_to_unit([-1.0, 0.0, 1.0]))  # Expected: [0.0, 0.5, 1.0]\n    \n    # Test case 4: Mixed values\n    print(rescale_to_unit([10.0, 20.0, 30.0, 40.0]))  # Expected: [0.0, 0.333..., 0.666..., 1.0]\n    \n    # Test case 5: ValueError for less than two elements\n    try:\n        print(rescale_to_unit([5.0]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected: \"The input list must contain at least two elements.\""}
{"task_id": "HumanEval/18", "entry_point": "how_many_times", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \n    Args:\n        string (str): The original string to search within.\n        substring (str): The substring to count occurrences of.\n    \n    Returns:\n        int: The number of times the substring appears in the string, including overlaps.\n    \n    Examples:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not substring:  # If the substring is empty, return 0\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)  # Find the substring starting from 'start'\n        if start == -1:  # If not found, break the loop\n            break\n        count += 1  # Increment the count\n        start += 1  # Move to the next character to allow for overlapping\n    \n    return count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert how_many_times('', 'a') == 0\n    assert how_many_times('aaa', 'a') == 3\n    assert how_many_times('aaaa', 'aa') == 3\n    assert how_many_times('abcabcabc', 'abc') == 3\n    assert how_many_times('abababab', 'aba') == 4\n    assert how_many_times('hello', 'lo') == 1\n    assert how_many_times('hello', 'hello') == 1\n    assert how_many_times('hello', 'world') == 0\n    assert how_many_times('aaaaaa', 'aaa') == 4\n    assert how_many_times('a', 'a') == 1\n    assert how_many_times('a', '') == 0  # Edge case: empty substring\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/25", "entry_point": "factorize", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    >>> factorize(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer greater than 1.\n    >>> factorize(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer greater than 1.\n    >>> factorize(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer greater than 1.\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"Input must be a positive integer greater than 1.\")\n    \n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/26", "entry_point": "remove_duplicates", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    Args:\n        numbers (List[int]): A list of integers from which duplicates will be removed.\n    \n    Returns:\n        List[int]: A list of integers with duplicates removed, maintaining original order.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1])\n        []\n        >>> remove_duplicates([1, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([])\n        []\n    \"\"\"\n    # Count occurrences of each number\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    \n    # Filter out numbers that occur more than once\n    unique_numbers = [number for number in numbers if count[number] == 1]\n    \n    return unique_numbers\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]\n    \n    # Test case 2: All elements are duplicates\n    assert remove_duplicates([1, 1, 1, 1]) == []\n    \n    # Test case 3: No duplicates\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 4: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 5: Mixed duplicates\n    assert remove_duplicates([5, 6, 5, 7, 8, 6, 9]) == [7, 8, 9]\n    \n    # Test case 6: All unique elements\n    assert remove_duplicates([10, 20, 30, 40]) == [10, 20, 30, 40]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/29", "entry_point": "filter_by_prefix", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): A list of strings to filter.\n        prefix (str): The prefix to filter the strings by.\n        \n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \n    Examples:\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix(['apple', 'banana', 'apricot', 'grape'], 'ap')\n    ['apple', 'apricot']\n    >>> filter_by_prefix(['hello', 'world', 'hi', 'hermit'], 'h')\n    ['hello', 'hi', 'hermit']\n    >>> filter_by_prefix(['test', 'testing', 'tester'], 'test')\n    ['test', 'testing', 'tester']\n    >>> filter_by_prefix(['nope', 'yes', 'maybe'], 'not')\n    []\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/27", "entry_point": "flip_case", "completion": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    Args:\n        string (str): The input string to flip the case of its characters.\n        \n    Returns:\n        str: A new string with the case of each character flipped.\n    \n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n        >>> flip_case('world')\n        'WORLD'\n        >>> flip_case('Python 3.8')\n        'pYTHON 3.8'\n        >>> flip_case('')\n        ''\n        >>> flip_case('12345!@#')\n        '12345!@#'\n    \"\"\"\n    return string.swapcase()\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert flip_case('Hello') == 'hELLO'\n    assert flip_case('world') == 'WORLD'\n    assert flip_case('Python 3.8') == 'pYTHON 3.8'\n    \n    # Edge cases\n    assert flip_case('') == ''\n    assert flip_case('12345!@#') == '12345!@#'\n    \n    # Mixed case\n    assert flip_case('aBcDeFg') == 'AbCdEfG'\n    assert flip_case('!@#abcXYZ') == '!@#ABCxyz'\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/28", "entry_point": "concatenate", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate a list of strings into a single string.\n    \n    Args:\n        strings (List[str]): A list of strings to concatenate.\n        \n    Returns:\n        str: A single concatenated string.\n        \n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n        >>> concatenate(['Hello', ' ', 'World', '!'])\n        'Hello World!'\n        >>> concatenate(['Python', 'is', 'fun'])\n        'Pythonisfun'\n        \n    Raises:\n        ValueError: If the input is not a list of strings.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise ValueError(\"Input must be a list of strings.\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise ValueError(\"All items in the list must be strings.\")\n    \n    return ''.join(strings)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert concatenate(['a', 'b', 'c']) == 'abc'\n    assert concatenate(['Hello', ' ', 'World', '!']) == 'Hello World!'\n    assert concatenate(['Python', 'is', 'fun']) == 'Pythonisfun'\n    assert concatenate(['']) == ''\n    assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/30", "entry_point": "get_positive", "completion": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    \n    Args:\n        l (list): A list of numbers (integers or floats).\n    \n    Returns:\n        list: A list containing only the positive numbers from the input list.\n    \n    Examples:\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n# Testing the function with the provided examples and additional cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    print(get_positive([-10, -5, -1]))  # Expected: []\n    print(get_positive([0, 0, 0]))       # Expected: []\n    print(get_positive([1, 2, 3, 4]))    # Expected: [1, 2, 3, 4]\n    print(get_positive([-1, 0, 1, 2]))   # Expected: [1, 2]\n    print(get_positive([]))               # Expected: []"}
{"task_id": "HumanEval/31", "entry_point": "is_prime", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True  # 2 and 3 are prime numbers\n    if n % 2 == 0 or n % 3 == 0:\n        return False  # eliminate multiples of 2 and 3\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6  # check for next potential factors\n\n    return True\n\n# Testing the function with the provided test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/34", "entry_point": "unique", "completion": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list.\n    \n    Args:\n        l (list): A list of elements which may contain duplicates.\n        \n    Returns:\n        list: A sorted list of unique elements.\n    \n    Examples:\n        >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [0, 2, 3, 5, 9, 123]\n        >>> unique([1, 2, 2, 1, 3])\n        [1, 2, 3]\n        >>> unique([])\n        []\n        >>> unique([7, 7, 7, 7])\n        [7]\n    \"\"\"\n    return sorted(set(l))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Expected: [0, 2, 3, 5, 9, 123]\n    \n    # Test case 2: List with some duplicates\n    print(unique([1, 2, 2, 1, 3]))  # Expected: [1, 2, 3]\n    \n    # Test case 3: Empty list\n    print(unique([]))  # Expected: []\n    \n    # Test case 4: List with all duplicates\n    print(unique([7, 7, 7, 7]))  # Expected: [7]\n    \n    # Test case 5: List with negative numbers\n    print(unique([-1, -2, -2, 0, 1, 1]))  # Expected: [-2, -1, 0, 1]\n    \n    # Test case 6: List with mixed types (if applicable)\n    print(unique([3, 'a', 2, 'b', 3, 'a']))  # Expected: [2, 'a', 'b', 3]"}
{"task_id": "HumanEval/35", "entry_point": "max_element", "completion": "def max_element(l: list):\n    \"\"\"Return the maximum element in the list.\n    \n    Args:\n        l (list): A list of comparable elements.\n    \n    Returns:\n        The maximum element in the list.\n    \n    Raises:\n        ValueError: If the list is empty.\n    \n    Examples:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    >>> max_element([-1, -2, -3])\n    -1\n    >>> max_element([1])\n    1\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot determine the maximum element.\")\n    \n    return max(l)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    try:\n        print(max_element([]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The list is empty. Cannot determine the maximum element.\n\n    print(max_element([1, 2, 3]))  # Expected output: 3\n    print(max_element([-1, -2, -3]))  # Expected output: -1\n    print(max_element([5, 3, 9, 0, 123, 1, -10]))  # Expected output: 123\n    print(max_element([1]))  # Expected output: 1"}
{"task_id": "HumanEval/33", "entry_point": "sort_third", "completion": "def sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    >>> sort_third([10, 20, 30, 40, 50, 60, 70, 80])\n    [30, 20, 10, 40, 50, 60, 70, 80]\n    >>> sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [3, 2, 1, 4, 5, 6, 9, 8, 7]\n    >>> sort_third([])\n    []\n    \"\"\"\n    # Extract values at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted values\n    sorted_values = sorted(divisible_by_three)\n    \n    # Create a new list to hold the result\n    result = l[:]  # Make a copy of the original list\n    \n    # Replace values at indices divisible by 3 with sorted values\n    for index, value in zip([i for i in range(len(l)) if i % 3 == 0], sorted_values):\n        result[index] = value\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/32", "entry_point": "find_zero", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef poly_derivative(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum(i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, initial_guess: float = 0.0, tolerance: float = 1e-7, max_iterations: int = 1000) -> float:\n    \"\"\"\n    Find a root of the polynomial defined by coefficients xs using the Newton-Raphson method.\n    \n    Parameters:\n    xs : list\n        Coefficients of the polynomial.\n    initial_guess : float\n        Initial guess for the root.\n    tolerance : float\n        The tolerance for convergence.\n    max_iterations : int\n        Maximum number of iterations to prevent infinite loops.\n    \n    Returns:\n    float\n        A root of the polynomial.\n    \n    Raises:\n    ValueError\n        If the input list does not have an even number of coefficients.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    x = initial_guess\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        \n        if abs(f_prime_x) < 1e-10:  # Avoid division by zero\n            raise ValueError(\"Derivative is too small; no convergence.\")\n        \n        x_new = x - f_x / f_prime_x\n        \n        if abs(x_new - x) < tolerance:\n            return x_new\n        \n        x = x_new\n    \n    raise ValueError(\"Maximum iterations reached; no convergence.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases for find_zero\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x, expected -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1)(x - 2)(x - 3), expected 1.0\n    print(round(find_zero([1, 0, -4]), 2))  # f(x) = x^2 - 4, expected 2.0\n    print(round(find_zero([1, 0, 0, -1]), 2))  # f(x) = x^3 - 1, expected 1.0"}
{"task_id": "HumanEval/36", "entry_point": "fizz_buzz", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    Args:\n        n (int): The upper limit (exclusive) for the range of integers to check.\n        \n    Returns:\n        int: The count of digit '7' in the qualifying integers.\n    \n    Examples:\n        >>> fizz_buzz(50)\n        0\n        >>> fizz_buzz(78)\n        2\n        >>> fizz_buzz(79)\n        3\n    \"\"\"\n    count_of_sevens = 0\n    \n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_of_sevens += str(i).count('7')\n    \n    return count_of_sevens\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(fizz_buzz(50))  # Expected output: 0\n    print(fizz_buzz(78))  # Expected output: 2\n    print(fizz_buzz(79))  # Expected output: 3\n\n    # Additional test cases\n    print(fizz_buzz(100))  # Check for more numbers\n    print(fizz_buzz(0))    # Edge case: n = 0, should return 0\n    print(fizz_buzz(11))   # Edge case: n = 11, should return 0\n    print(fizz_buzz(13))   # Edge case: n = 13, should return 0\n    print(fizz_buzz(14))   # Edge case: n = 14, should return 0\n    print(fizz_buzz(1000)) # Larger number to check performance"}
{"task_id": "HumanEval/38", "entry_point": "decode_cyclic", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns an encoded string by cycling groups of three characters.\n    \n    Args:\n    s (str): The input string to encode.\n\n    Returns:\n    str: The encoded string.\n    \"\"\"\n    # Split string into groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group unless the group has fewer than 3 elements\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \n    Args:\n    s (str): The input string to decode.\n\n    Returns:\n    str: The decoded string.\n    \"\"\"\n    # Split string into groups of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse the cycling for each group\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test cases\ndef test_cyclic_encoding_decoding():\n    test_cases = [\n        (\"abcdefg\", \"bcdefga\"),  # Normal case\n        (\"abc\", \"bca\"),          # Exact group of 3\n        (\"ab\", \"ab\"),            # Less than 3 characters\n        (\"a\", \"a\"),              # Single character\n        (\"\", \"\"),                # Empty string\n        (\"abcdefghijk\", \"bcdefghijak\"),  # Longer string\n    ]\n    \n    for original, encoded in test_cases:\n        assert encode_cyclic(original) == encoded, f\"Failed encoding for {original}\"\n        assert decode_cyclic(encoded) == original, f\"Failed decoding for {encoded}\"\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_cyclic_encoding_decoding()"}
{"task_id": "HumanEval/37", "entry_point": "sort_even", "completion": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices\n    are equal to the values of the even indices of l, but sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    >>> sort_even([10, 1, 2, 3, 4, 5])\n    [2, 1, 10, 3, 4, 5]\n    >>> sort_even([8, 7, 6, 5, 4, 3, 2, 1])\n    [2, 7, 4, 5, 6, 3, 8, 1]\n    >>> sort_even([])\n    []\n    >>> sort_even([1])\n    [1]\n    >>> sort_even([2, 4, 6, 8, 10])\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    # Extract even indexed elements\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even indexed elements\n    even_indices_sorted = sorted(even_indices)\n    \n    # Create a new list to hold the result\n    result = l[:]  # Start with a copy of the original list\n    \n    # Place sorted even indexed elements back into their positions\n    for i, sorted_value in enumerate(even_indices_sorted):\n        result[i * 2] = sorted_value  # Even indices are 0, 2, 4, ...\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "entry_point": "triples_sum_to_zero", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    >>> triples_sum_to_zero([-1, 0, 1, 2, -1, -4])\n    True\n    >>> triples_sum_to_zero([0, 0, 0])\n    False\n    >>> triples_sum_to_zero([1, 2, -2, -1, 0])\n    True\n    \"\"\"\n    # Remove duplicates and sort the list\n    l = sorted(set(l))\n    \n    n = len(l)\n    \n    # Iterate through the list\n    for i in range(n):\n        # Use two pointers to find the other two numbers\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/43", "entry_point": "pairs_sum_to_zero", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    >>> pairs_sum_to_zero([])\n    False\n    >>> pairs_sum_to_zero([-1, 1])\n    True\n    >>> pairs_sum_to_zero([-1, 2, 1, -2])\n    True\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/41", "entry_point": "car_race_collision", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Parameters:\n    n (int): The number of cars in each direction (left to right and right to left).\n\n    Returns:\n    int: The total number of collisions.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # The total number of collisions is n squared\n    return n * n\n\n# Testing the function\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    \n    try:\n        car_race_collision(-1)\n    except ValueError:\n        pass  # Expected behavior\n\n    try:\n        car_race_collision(\"a\")\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_car_race_collision()"}
{"task_id": "HumanEval/39", "entry_point": "prime_fib", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci_generator():\n    \"\"\"Generate Fibonacci numbers indefinitely.\"\"\"\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th Fibonacci number that is also prime.\n    \n    :param n: The index of the prime Fibonacci number to return (1-based).\n    :return: The n-th prime Fibonacci number.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    prime_fib_count = 0\n    for fib in fibonacci_generator():\n        if is_prime(fib):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return fib\n\n# Testing the function with the provided test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/45", "entry_point": "triangle_area", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side (base) and height, return the area of a triangle.\n    \n    The area is calculated using the formula: area = 0.5 * base * height.\n    \n    Parameters:\n    a (float): The length of the base of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle.\n    \n    Raises:\n    ValueError: If either a or h is not positive.\n    \n    Examples:\n    >>> triangle_area(5, 3)\n    7.5\n    >>> triangle_area(10, 2)\n    10.0\n    >>> triangle_area(0, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base and height must be positive numbers.\n    >>> triangle_area(5, -3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base and height must be positive numbers.\n    \"\"\"\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    return 0.5 * a * h\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/42", "entry_point": "incr_list", "completion": "def incr_list(l: list) -> list:\n    \"\"\"Return a list with elements incremented by 1.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        list: A new list with each element incremented by 1.\n\n    Raises:\n        ValueError: If the input is not a list or contains non-integer elements.\n\n    Examples:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    for item in l:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    return [item + 1 for item in l]"}
{"task_id": "HumanEval/44", "entry_point": "change_base", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    Parameters:\n    x (int): The number to convert.\n    base (int): The base to convert to (must be between 2 and 9).\n    \n    Returns:\n    str: The string representation of the number in the new base.\n    \n    Raises:\n    ValueError: If base is not between 2 and 9.\n    \n    Examples:\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return '0'\n    \n    result = []\n    negative = x < 0\n    x = abs(x)\n    \n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n    \n    if negative:\n        result.append('-')\n    \n    # The digits are collected in reverse order\n    return ''.join(reversed(result))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert change_base(8, 3) == '22'\n    assert change_base(8, 2) == '1000'\n    assert change_base(7, 2) == '111'\n    assert change_base(0, 2) == '0'\n    assert change_base(9, 3) == '100'\n    assert change_base(15, 8) == '17'\n    \n    try:\n        change_base(10, 10)  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"Base must be between 2 and 9.\"\n    \n    try:\n        change_base(10, 1)  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"Base must be between 2 and 9.\"\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/48", "entry_point": "is_palindrome", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string is a palindrome.\n    \n    A palindrome is a string that reads the same forwards and backwards.\n    \n    Args:\n        text (str): The string to check.\n        \n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \n    Examples:\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    >>> is_palindrome('A man a plan a canal Panama')\n    True\n    >>> is_palindrome('No lemon, no melon')\n    True\n    >>> is_palindrome('Was it a car or a cat I saw?')\n    True\n    >>> is_palindrome('Hello, World!')\n    False\n    \"\"\"\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_text == normalized_text[::-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/47", "entry_point": "median", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \n    If the list is empty, raises a ValueError.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>> median([1])\n    1\n    >>> median([])\n    Traceback (most recent call last):\n        ...\n    ValueError: The list is empty\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:  # Odd length\n        return sorted_list[n // 2]\n    else:  # Even length\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/49", "entry_point": "modp", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    Args:\n        n (int): The exponent.\n        p (int): The modulus, must be greater than 0.\n    \n    Returns:\n        int: The result of 2^n mod p.\n    \n    Raises:\n        ValueError: If p is less than or equal to 0.\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p <= 0:\n        raise ValueError(\"Modulus p must be greater than 0.\")\n    \n    return pow(2, n, p)\n\n# Testing the function with the provided examples and additional cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    print(modp(10, 1000))  # Expected: 24 (2^10 = 1024, 1024 % 1000 = 24)\n    print(modp(20, 100))   # Expected: 76 (2^20 = 1048576, 1048576 % 100 = 76)\n    print(modp(50, 7))     # Expected: 4 (2^50 % 7 = 4)\n    print(modp(1, 1))      # Expected: 0 (2^1 % 1 = 0)"}
{"task_id": "HumanEval/51", "entry_point": "remove_vowels", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \n    Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive).\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    # Define a set of vowels (both lowercase and uppercase)\n    vowels = set('aeiouAEIOU')\n    \n    # Use a list comprehension to filter out vowels\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "entry_point": "below_threshold", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    Args:\n        l (list): A list of numbers to check.\n        t (int): The threshold value.\n    \n    Returns:\n        bool: True if all numbers in l are below t, False otherwise.\n    \n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    >>> below_threshold([], 10)\n    True\n    >>> below_threshold([5, 3, 2], 6)\n    True\n    >>> below_threshold([5, 3, 2], 2)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(below_threshold([1, 2, 4, 10], 100))  # Expected: True\n    print(below_threshold([1, 20, 4, 10], 5))   # Expected: False\n    \n    # Additional test cases\n    print(below_threshold([], 10))               # Expected: True (empty list)\n    print(below_threshold([5, 3, 2], 6))         # Expected: True (all below 6)\n    print(below_threshold([5, 3, 2], 2))         # Expected: False (not all below 2)\n    print(below_threshold([-1, -2, -3], 0))      # Expected: True (all negative numbers below 0)\n    print(below_threshold([1, 2, 3], 1))         # Expected: False (1 is not below 1)"}
{"task_id": "HumanEval/50", "entry_point": "decode_shift", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns an encoded string by shifting every character by 5 in the alphabet.\n    \n    Parameters:\n    s (str): The input string to encode.\n    \n    Returns:\n    str: The encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s if ch.isalpha() and ch.islower()])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function. Returns the decoded string.\n    \n    Parameters:\n    s (str): The input string to decode.\n    \n    Returns:\n    str: The decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') - 5) % 26) + ord('a')) for ch in s if ch.isalpha() and ch.islower()])\n\n\n# Test cases\ndef test_shift_functions():\n    # Test encoding\n    original = \"hello\"\n    encoded = encode_shift(original)\n    assert encoded == \"mjqqt\", f\"Expected 'mjqqt' but got '{encoded}'\"\n\n    # Test decoding\n    decoded = decode_shift(encoded)\n    assert decoded == original, f\"Expected '{original}' but got '{decoded}'\"\n\n    # Test with empty string\n    assert encode_shift(\"\") == \"\", \"Expected '' but got non-empty string\"\n    assert decode_shift(\"\") == \"\", \"Expected '' but got non-empty string\"\n\n    # Test with non-lowercase characters\n    assert encode_shift(\"Hello World!\") == \"\", \"Expected '' but got non-empty string\"\n    assert decode_shift(\"Mjqqt Btwqi!\") == \"\", \"Expected '' but got non-empty string\"\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_shift_functions()"}
{"task_id": "HumanEval/46", "entry_point": "fib4", "completion": "def fib4(n: int) -> int:\n    \"\"\"Compute the n-th element of the Fib4 number sequence.\n    \n    The Fib4 sequence is defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) for n >= 4.\n    \n    Args:\n        n (int): The index of the Fib4 sequence to compute.\n    \n    Returns:\n        int: The n-th element of the Fib4 sequence.\n    \n    Examples:\n        >>> fib4(5)\n        4\n        >>> fib4(6)\n        8\n        >>> fib4(7)\n        14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four values\n    fib_values = [0, 0, 2, 0]\n    \n    # Compute fib4(n) iteratively\n    for i in range(4, n + 1):\n        next_value = fib_values[0] + fib_values[1] + fib_values[2] + fib_values[3]\n        # Update the list to keep only the last four values\n        fib_values = [fib_values[1], fib_values[2], fib_values[3], next_value]\n    \n    return fib_values[3]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    assert fib4(5) == 4\n    assert fib4(6) == 8\n    assert fib4(7) == 14\n    assert fib4(8) == 26\n    assert fib4(9) == 48\n    assert fib4(10) == 88\n    assert fib4(11) == 162\n    assert fib4(12) == 298\n    assert fib4(13) == 546\n    assert fib4(14) == 1006\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/53", "entry_point": "add", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n\n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n\n# Test cases to validate the functionality of the add function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert add(0, 0) == 0, \"Test case 1 failed\"\n    assert add(-1, 1) == 0, \"Test case 2 failed\"\n    assert add(-5, -5) == -10, \"Test case 3 failed\"\n    assert add(100, 200) == 300, \"Test case 4 failed\"\n    assert add(1, 1) == 2, \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/54", "entry_point": "same_chars", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    This function checks if both input strings contain the same unique characters,\n    regardless of their frequency.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n\n# Testing the function with the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/56", "entry_point": "correct_bracketing", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" \n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    \n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        \n        # If balance goes negative, there are unmatched closing brackets\n        if balance < 0:\n            return False\n    \n    # At the end, balance should be zero for all brackets to be matched\n    return balance == 0\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "entry_point": "fib", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2) for n > 1\n    \n    Args:\n        n (int): The index of the Fibonacci number to return.\n        \n    Returns:\n        int: The n-th Fibonacci number.\n        \n    Raises:\n        ValueError: If n is negative.\n    \n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(0)\n    0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the functionality of the fib function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert fib(0) == 0, \"Test case fib(0) failed\"\n    assert fib(1) == 1, \"Test case fib(1) failed\"\n    assert fib(2) == 1, \"Test case fib(2) failed\"\n    assert fib(3) == 2, \"Test case fib(3) failed\"\n    assert fib(4) == 3, \"Test case fib(4) failed\"\n    assert fib(5) == 5, \"Test case fib(5) failed\"\n    assert fib(6) == 8, \"Test case fib(6) failed\"\n    assert fib(7) == 13, \"Test case fib(7) failed\"\n    assert fib(8) == 21, \"Test case fib(8) failed\"\n    assert fib(9) == 34, \"Test case fib(9) failed\"\n    assert fib(10) == 55, \"Test case fib(10) failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/57", "entry_point": "monotonic", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    A list is considered monotonically increasing if each element is less than or equal to the next.\n    A list is considered monotonically decreasing if each element is greater than or equal to the next.\n    \n    Args:\n        l (list): A list of comparable elements.\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([1, 1, 1])\n    True\n    >>> monotonic([1, 2, 2, 3])\n    True\n    >>> monotonic([3, 2, 2, 1])\n    True\n    \"\"\"\n    if not l:  # An empty list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/58", "entry_point": "common", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    >>> common([], [1, 2, 3])\n    []\n    >>> common([1, 2, 3], [])\n    []\n    >>> common([1, 2, 2, 3], [2, 2, 3, 4])\n    [2, 3]\n    >>> common([1, 2, 3], [4, 5, 6])\n    []\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Return sorted list of common elements\n    return sorted(common_elements)\n\n# If you want to run the tests, you can use the following code:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/59", "entry_point": "largest_prime_factor", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    >>> largest_prime_factor(600851475143)\n    6857\n    >>> largest_prime_factor(49)\n    7\n    >>> largest_prime_factor(15)\n    5\n    \"\"\"\n    # Start with the smallest prime factor\n    largest_factor = None\n    \n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Running the docstring tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/60", "entry_point": "sum_to_n", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the sum (inclusive).\n        \n    Returns:\n        int: The sum of all integers from 1 to n.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n\n# Test cases to validate the functionality of the sum_to_n function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_to_n(0) == 0, \"Test case failed: sum_to_n(0) should raise ValueError\"\n    try:\n        sum_to_n(-5)\n    except ValueError:\n        print(\"Passed: sum_to_n(-5) raises ValueError\")\n    \n    try:\n        sum_to_n(\"10\")\n    except ValueError:\n        print(\"Passed: sum_to_n('10') raises ValueError\")\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/61", "entry_point": "correct_bracketing", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" \n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    >>> correct_bracketing(\")(\")\n    False\n    >>> correct_bracketing(\"((()))\")\n    True\n    >>> correct_bracketing(\"(()\") \n    False\n    >>> correct_bracketing(\"\") \n    True\n    \"\"\"\n    if not isinstance(brackets, str):\n        raise TypeError(\"Input must be a string.\")\n\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance goes negative, we have a closing bracket without a matching opening bracket\n        if balance < 0:\n            return False\n\n    # At the end, balance should be zero for the brackets to be correctly balanced\n    return balance == 0\n\n# Running the test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/62", "entry_point": "derivative", "completion": "def derivative(xs: list) -> list:\n    \"\"\"Calculate the derivative of a polynomial represented by its coefficients.\n    \n    Args:\n        xs (list): A list of coefficients where the index represents the power of x.\n    \n    Returns:\n        list: A list of coefficients representing the derivative of the polynomial.\n    \n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n        >>> derivative([5])  # Derivative of a constant is 0\n        []\n        >>> derivative([])  # Empty polynomial\n        []\n    \"\"\"\n    if not xs:\n        return []\n    \n    # Calculate the derivative coefficients\n    derivative_coeffs = [i * coeff for i, coeff in enumerate(xs) if i > 0]\n    \n    return derivative_coeffs\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Test case 1 failed\"\n    assert derivative([1, 2, 3]) == [2, 6], \"Test case 2 failed\"\n    assert derivative([5]) == [], \"Test case 3 failed\"  # Derivative of a constant is 0\n    assert derivative([]) == [], \"Test case 4 failed\"  # Empty polynomial\n    assert derivative([0, 0, 0]) == [], \"Test case 5 failed\"  # Derivative of zero polynomial\n    assert derivative([0, 1, 2]) == [1, 4], \"Test case 6 failed\"  # Derivative of x + 2x^2\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/63", "entry_point": "fibfib", "completion": "def fibfib(n: int) -> int:\n    \"\"\"Compute the n-th element of the FibFib number sequence.\n    \n    The FibFib sequence is defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n >= 3.\n    \n    Args:\n        n (int): The index of the FibFib sequence to compute.\n        \n    Returns:\n        int: The n-th FibFib number.\n        \n    Raises:\n        ValueError: If n is a negative integer.\n    \n    Examples:\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three FibFib numbers\n    fibfib_numbers = [0, 0, 1]\n    \n    # Compute the FibFib numbers iteratively\n    for i in range(3, n + 1):\n        next_fibfib = fibfib_numbers[i - 1] + fibfib_numbers[i - 2] + fibfib_numbers[i - 3]\n        fibfib_numbers.append(next_fibfib)\n    \n    return fibfib_numbers[n]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert fibfib(0) == 0\n    assert fibfib(1) == 0\n    assert fibfib(2) == 1\n    assert fibfib(3) == 1\n    assert fibfib(4) == 2\n    assert fibfib(5) == 4\n    assert fibfib(6) == 7\n    assert fibfib(7) == 13\n    assert fibfib(8) == 24\n    assert fibfib(9) == 44\n    assert fibfib(10) == 81\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/65", "entry_point": "circular_shift", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 0)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift\n    if effective_shift == 0:\n        return str_x  # No shift needed\n    else:\n        return str_x[-effective_shift:] + str_x[:-effective_shift]\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/64", "entry_point": "vowels_count", "completion": "def vowels_count(s):\n    \"\"\"Count the number of vowels in a given string.\n    \n    Vowels are defined as 'a', 'e', 'i', 'o', 'u', and 'y' only counts\n    as a vowel if it is at the end of the word.\n    \n    Args:\n        s (str): The input string.\n        \n    Returns:\n        int: The number of vowels in the string.\n    \n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Convert the string to lowercase for case insensitive comparison\n    s = s.lower()\n    count = 0\n    length = len(s)\n    \n    for i, char in enumerate(s):\n        if char in 'aeiou':\n            count += 1\n        elif char == 'y' and i == length - 1:\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/67", "entry_point": "fruit_distribution", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Calculate the number of mango fruits in a basket given the number of apples and oranges.\n\n    Parameters:\n    s (str): A string representing the number of apples and oranges in the format \"X apples and Y oranges\".\n    n (int): The total number of fruits in the basket.\n\n    Returns:\n    int: The number of mango fruits in the basket.\n\n    Raises:\n    ValueError: If the input string does not contain valid numbers for apples and oranges.\n    \"\"\"\n    try:\n        # Split the input string to extract the numbers of apples and oranges\n        parts = s.split()\n        apples = int(parts[0])  # First part is the number of apples\n        oranges = int(parts[2])  # Third part is the number of oranges\n\n        # Calculate the number of mangoes\n        mangoes = n - apples - oranges\n        \n        return mangoes\n    except (IndexError, ValueError) as e:\n        raise ValueError(\"Input string must be in the format 'X apples and Y oranges' with valid integers.\") from e\n\n# Test cases\ndef test_fruit_distribution():\n    assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n    assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n    assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n    assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19\n    assert fruit_distribution(\"10 apples and 10 oranges\", 50) == 30\n    assert fruit_distribution(\"1 apples and 0 oranges\", 1) == 0\n    assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fruit_distribution()"}
{"task_id": "HumanEval/66", "entry_point": "digitSum", "completion": "def digitSum(s):\n    \"\"\"Calculate the sum of ASCII values of uppercase characters in the input string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The sum of ASCII values of uppercase characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    total = 0\n    for char in s:\n        if 'A' <= char <= 'Z':  # Check if the character is uppercase\n            total += ord(char)  # Add the ASCII value of the uppercase character\n\n    return total\n\n# Test cases to validate the functionality of the digitSum function\ndef test_digitSum():\n    assert digitSum(\"\") == 0, \"Test case 1 failed\"\n    assert digitSum(\"abAB\") == 131, \"Test case 2 failed\"\n    assert digitSum(\"abcCd\") == 67, \"Test case 3 failed\"\n    assert digitSum(\"helloE\") == 69, \"Test case 4 failed\"\n    assert digitSum(\"woArBld\") == 131, \"Test case 5 failed\"\n    assert digitSum(\"aAaaaXa\") == 153, \"Test case 6 failed\"\n    assert digitSum(\"ABC\") == 65 + 66 + 67, \"Test case 7 failed\"  # 198\n    assert digitSum(\"xyz\") == 0, \"Test case 8 failed\"  # No uppercase letters\n    assert digitSum(\"1234\") == 0, \"Test case 9 failed\"  # No letters at all\n    assert digitSum(\"!@#$%^&*()\") == 0, \"Test case 10 failed\"  # No letters at all\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_digitSum()"}
{"task_id": "HumanEval/69", "entry_point": "search", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exists, return -1.\n    \n    Parameters:\n    lst (list): A non-empty list of positive integers.\n    \n    Returns:\n    int: The greatest integer meeting the criteria or -1 if none exists.\n    '''\n    from collections import Counter\n    \n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result variable\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for num, freq in frequency.items():\n        # Check if the number meets the criteria\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result\n\n# Test cases to validate the functionality of the search function\ndef test_search():\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Test case 1 failed\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Test case 2 failed\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Test case 3 failed\"\n    assert search([1, 1, 1, 1]) == 1, \"Test case 4 failed\"\n    assert search([2, 2, 2, 3, 3]) == 2, \"Test case 5 failed\"\n    assert search([1]) == 1, \"Test case 6 failed\"\n    assert search([3, 3, 3, 2, 2, 1]) == 3, \"Test case 7 failed\"\n    assert search([1, 2, 3, 4, 5]) == -1, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_search()"}
{"task_id": "HumanEval/68", "entry_point": "pluck", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    this function plucks one of the nodes and returns it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node is returned in a list, [ smallest_value, its index ].\n    If there are no even values or the given array is empty, return [].\n\n    Parameters:\n    arr (list): A list of non-negative integers representing the nodes.\n\n    Returns:\n    list: A list containing the smallest even value and its index, or an empty list if no even values exist.\n    \"\"\"\n    smallest_even = float('inf')  # Initialize to infinity\n    smallest_index = -1  # Initialize index to -1 (indicating not found)\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:  # Check if it's the smallest even found\n                smallest_even = value\n                smallest_index = index\n\n    # If we found an even number, return it with its index\n    if smallest_index != -1:\n        return [smallest_even, smallest_index]\n    else:\n        return []  # Return empty list if no even number was found\n\n# Test cases to validate the functionality of the pluck function\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1], \"Test case 1 failed\"\n    assert pluck([1, 2, 3]) == [2, 1], \"Test case 2 failed\"\n    assert pluck([]) == [], \"Test case 3 failed\"\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], \"Test case 4 failed\"\n    assert pluck([1, 3, 5]) == [], \"Test case 5 failed\"  # No even numbers\n    assert pluck([2, 2, 2]) == [2, 0], \"Test case 6 failed\"  # All even, first index\n    assert pluck([1, 3, 4, 2, 6]) == [2, 3], \"Test case 7 failed\"  # Multiple evens, smallest index\n    assert pluck([10, 20, 30, 40]) == [10, 0], \"Test case 8 failed\"  # All even, first index\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_pluck()"}
{"task_id": "HumanEval/70", "entry_point": "strange_sort_list", "completion": "def strange_sort_list(lst):\n    '''\n    Given a list of integers, return the list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    # Sort the list\n    sorted_lst = sorted(lst)\n    result = []\n    \n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Alternate between minimum and maximum\n    while left <= right:\n        if left == right:  # If both pointers meet, add the last element\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])  # Add minimum\n            result.append(sorted_lst[right])  # Add maximum\n        left += 1\n        right -= 1\n    \n    return result\n\n# Test cases\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3], \"Test case 1 failed\"\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5], \"Test case 2 failed\"\n    assert strange_sort_list([]) == [], \"Test case 3 failed\"\n    assert strange_sort_list([10, 20, 30, 40, 50]) == [10, 50, 20, 40, 30], \"Test case 4 failed\"\n    assert strange_sort_list([1, 3, 2, 4, 5]) == [1, 5, 2, 4, 3], \"Test case 5 failed\"\n    assert strange_sort_list([1]) == [1], \"Test case 6 failed\"\n    assert strange_sort_list([1, 2]) == [1, 2], \"Test case 7 failed\"\n    assert strange_sort_list([2, 1]) == [1, 2], \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_strange_sort_list()"}
{"task_id": "HumanEval/72", "entry_point": "will_it_fly", "completion": "def will_it_fly(q, w):\n    '''\n    Determines if an object represented by a list q will fly based on two conditions:\n    1. The list must be a palindrome (balanced).\n    2. The sum of the elements in the list must be less than or equal to the maximum weight w.\n\n    Parameters:\n    q (list): A list of integers representing the object.\n    w (int): The maximum possible weight.\n\n    Returns:\n    bool: True if the object will fly, False otherwise.\n    '''\n    # Check if the list is a palindrome\n    is_balanced = (q == q[::-1])\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to w\n    weight_check = (total_weight <= w)\n    \n    # The object will fly if both conditions are met\n    return is_balanced and weight_check\n\n# Test cases to validate the function\ndef test_will_it_fly():\n    assert will_it_fly([1, 2], 5) == False, \"Test Case 1 Failed\"\n    assert will_it_fly([3, 2, 3], 1) == False, \"Test Case 2 Failed\"\n    assert will_it_fly([3, 2, 3], 9) == True, \"Test Case 3 Failed\"\n    assert will_it_fly([3], 5) == True, \"Test Case 4 Failed\"\n    assert will_it_fly([], 0) == True, \"Test Case 5 Failed\"  # Empty list is considered balanced\n    assert will_it_fly([1, 2, 1], 5) == True, \"Test Case 6 Failed\"  # Palindrome and weight check\n    assert will_it_fly([1, 2, 3], 6) == False, \"Test Case 7 Failed\"  # Not a palindrome\n    assert will_it_fly([5, 5, 5], 15) == True, \"Test Case 8 Failed\"  # Palindrome and weight check\n    assert will_it_fly([5, 5, 5], 14) == False, \"Test Case 9 Failed\"  # Palindrome but exceeds weight\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_will_it_fly()"}
{"task_id": "HumanEval/73", "entry_point": "smallest_change", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The minimum number of changes required to make the array palindromic.\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from the start and end moving towards the center\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes\n\n# Test cases to validate the functionality\ndef test_smallest_change():\n    assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4, \"Test case 1 failed\"\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1, \"Test case 2 failed\"\n    assert smallest_change([1, 2, 3, 2, 1]) == 0, \"Test case 3 failed\"\n    assert smallest_change([1, 1, 1, 1]) == 0, \"Test case 4 failed\"\n    assert smallest_change([1, 2, 3, 4]) == 2, \"Test case 5 failed\"\n    assert smallest_change([]) == 0, \"Test case 6 failed\"  # Edge case: empty array\n    assert smallest_change([1]) == 0, \"Test case 7 failed\"  # Edge case: single element\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_smallest_change()"}
{"task_id": "HumanEval/71", "entry_point": "triangle_area", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check for valid triangle\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return round(area, 2)\n\n# Test cases\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00, \"Test case 1 failed\"\n    assert triangle_area(1, 2, 10) == -1, \"Test case 2 failed\"\n    assert triangle_area(5, 5, 5) == 10.83, \"Test case 3 failed\"  # Equilateral triangle\n    assert triangle_area(7, 8, 9) == 26.83, \"Test case 4 failed\"  # Valid triangle\n    assert triangle_area(0, 4, 5) == -1, \"Test case 5 failed\"      # Invalid triangle (zero side)\n    assert triangle_area(-1, 4, 5) == -1, \"Test case 6 failed\"     # Invalid triangle (negative side)\n    assert triangle_area(3, 3, 3) == 3.90, \"Test case 7 failed\"    # Equilateral triangle\n    assert triangle_area(10, 10, 10) == 43.30, \"Test case 8 failed\" # Equilateral triangle\n\n    print(\"All test cases passed!\")\n\n# Run tests\ntest_triangle_area()"}
{"task_id": "HumanEval/74", "entry_point": "total_match", "completion": "def total_match(lst1, lst2):\n    '''\n    Returns the list with fewer total characters in its strings.\n    If both lists have the same total number of characters, returns the first list.\n\n    Parameters:\n    lst1 (list of str): The first list of strings.\n    lst2 (list of str): The second list of strings.\n\n    Returns:\n    list: The list with fewer total characters, or the first list if they are equal.\n    \n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Calculate total characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare total characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1  # If equal, return the first list\n\n# Test cases\ndef test_total_match():\n    assert total_match([], []) == []\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']\n    assert total_match(['abc'], ['de', 'f']) == ['abc']\n    assert total_match(['hello'], ['world']) == ['hello']  # Same length, returns first list\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_total_match()"}
{"task_id": "HumanEval/75", "entry_point": "is_multiply_prime", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\n    \n    Args:\n        a (int): The number to check, must be less than 100.\n    \n    Returns:\n        bool: True if a is the product of 3 prime numbers, False otherwise.\n    \"\"\"\n    if a >= 100:\n        raise ValueError(\"Input must be less than 100.\")\n    \n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:  # No need to check further if product exceeds a\n                    break\n    return False\n\n# Test cases\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True, \"Test case 1 failed\"\n    assert is_multiply_prime(60) == True, \"Test case 2 failed\"  # 2 * 3 * 10 (not valid), but 3 * 5 * 4 (not valid)\n    assert is_multiply_prime(28) == False, \"Test case 3 failed\"  # 28 = 2 * 2 * 7 (not valid)\n    assert is_multiply_prime(42) == True, \"Test case 4 failed\"  # 2 * 3 * 7\n    assert is_multiply_prime(1) == False, \"Test case 5 failed\"   # 1 cannot be expressed as a product of primes\n    assert is_multiply_prime(97) == False, \"Test case 6 failed\"  # 97 is prime, not a product of three primes\n    assert is_multiply_prime(0) == False, \"Test case 7 failed\"   # 0 cannot be expressed as a product of primes\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_is_multiply_prime()"}
{"task_id": "HumanEval/76", "entry_point": "is_simple_power", "completion": "def is_simple_power(x, n):\n    \"\"\"Check if x is a simple power of n, meaning there exists an integer k such that n**k = x.\"\"\"\n    \n    # Edge case: if n is less than or equal to 1\n    if n <= 1:\n        return x == 1  # Only 1 is a power of 1 or any number <= 1\n    \n    # Edge case: if x is less than 1\n    if x < 1:\n        return False\n    \n    k = 0\n    while True:\n        power = n ** k\n        if power == x:\n            return True\n        elif power > x:\n            return False\n        k += 1\n\n# Test cases to validate the function\ndef test_is_simple_power():\n    assert is_simple_power(1, 4) == True\n    assert is_simple_power(2, 2) == True\n    assert is_simple_power(8, 2) == True\n    assert is_simple_power(3, 2) == False\n    assert is_simple_power(3, 1) == False\n    assert is_simple_power(5, 3) == False\n    assert is_simple_power(16, 4) == True\n    assert is_simple_power(27, 3) == True\n    assert is_simple_power(0, 2) == False\n    assert is_simple_power(1, 1) == True\n    assert is_simple_power(10, 2) == False\n    assert is_simple_power(64, 4) == True\n    assert is_simple_power(81, 3) == False\n\n# Run the tests\ntest_is_simple_power()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/77", "entry_point": "iscube", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root and round it to the nearest integer\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded value equals the original number\n    return cube_root ** 3 == abs(a)\n\n# Test cases\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-8) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    assert iscube(27) == True, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()"}
{"task_id": "HumanEval/78", "entry_point": "hex_key", "completion": "def hex_key(num):\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\n    \n    Hexadecimal digits that are prime: 2, 3, 5, 7, B (11), D (13).\n    \n    Args:\n        num (str): A string representing a hexadecimal number.\n        \n    Returns:\n        int: The count of prime hexadecimal digits.\n    \"\"\"\n    # Set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime hexadecimal digits\n    count = sum(1 for char in num if char in prime_hex_digits)\n    \n    return count\n\n# Test cases\ndef run_tests():\n    test_cases = {\n        \"AB\": 1,\n        \"1077E\": 2,\n        \"ABED1A33\": 4,\n        \"123456789ABCDEF0\": 6,\n        \"2020\": 2,\n        \"\": 0,  # Edge case: empty string\n        \"000000\": 0,  # No prime digits\n        \"B2D3\": 4,  # All prime digits\n        \"123456789\": 0,  # No prime hexadecimal digits\n        \"A1C3F5\": 2,  # Only 3 and 5 are prime\n    }\n    \n    for input_str, expected in test_cases.items():\n        result = hex_key(input_str)\n        assert result == expected, f\"Test failed for input '{input_str}': expected {expected}, got {result}\"\n    \n    print(\"All tests passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "HumanEval/79", "entry_point": "decimal_to_binary", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to binary format with 'db' prefix and suffix.\n    \n    Args:\n        decimal (int): A non-negative integer to convert to binary.\n    \n    Returns:\n        str: A string representing the binary format with 'db' at both ends.\n    \n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \n    Examples:\n        decimal_to_binary(15)   # returns \"db1111db\"\n        decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert decimal to binary and format the output\n    binary_representation = bin(decimal)[2:]  # Remove the '0b' prefix\n    return f\"db{binary_representation}db\"\n\n# Test cases\ndef test_decimal_to_binary():\n    assert decimal_to_binary(0) == \"db0db\", \"Test case 1 failed\"\n    assert decimal_to_binary(1) == \"db1db\", \"Test case 2 failed\"\n    assert decimal_to_binary(2) == \"db10db\", \"Test case 3 failed\"\n    assert decimal_to_binary(3) == \"db11db\", \"Test case 4 failed\"\n    assert decimal_to_binary(4) == \"db100db\", \"Test case 5 failed\"\n    assert decimal_to_binary(15) == \"db1111db\", \"Test case 6 failed\"\n    assert decimal_to_binary(32) == \"db100000db\", \"Test case 7 failed\"\n    assert decimal_to_binary(255) == \"db11111111db\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_decimal_to_binary()"}
{"task_id": "HumanEval/80", "entry_point": "is_happy", "completion": "def is_happy(s):\n    \"\"\"Check if the string is happy.\n    \n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Args:\n        s (str): The input string to check.\n        \n    Returns:\n        bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Get the current group of 3 characters\n        group = s[i:i+3]\n        # Check if all characters in the group are distinct\n        if len(set(group)) < 3:\n            return False\n            \n    return True\n\n# Test cases to validate the function\ndef test_is_happy():\n    assert is_happy(\"a\") == False, \"Test case 1 failed\"\n    assert is_happy(\"aa\") == False, \"Test case 2 failed\"\n    assert is_happy(\"abcd\") == True, \"Test case 3 failed\"\n    assert is_happy(\"aabb\") == False, \"Test case 4 failed\"\n    assert is_happy(\"adb\") == True, \"Test case 5 failed\"\n    assert is_happy(\"xyy\") == False, \"Test case 6 failed\"\n    assert is_happy(\"xyzxyz\") == True, \"Test case 7 failed\"\n    assert is_happy(\"abcabc\") == True, \"Test case 8 failed\"\n    assert is_happy(\"aaa\") == False, \"Test case 9 failed\"\n    assert is_happy(\"abcde\") == True, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_happy()"}
{"task_id": "HumanEval/82", "entry_point": "prime_length", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Return True if the length of the string is a prime number, False otherwise.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    assert prime_length('Hello') == True, \"Test case 1 failed\"\n    assert prime_length('abcdcba') == True, \"Test case 2 failed\"\n    assert prime_length('kittens') == True, \"Test case 3 failed\"\n    assert prime_length('orange') == False, \"Test case 4 failed\"\n    assert prime_length('') == False, \"Test case 5 failed\"  # Length 0 is not prime\n    assert prime_length('a') == True, \"Test case 6 failed\"  # Length 1 is not prime\n    assert prime_length('ab') == False, \"Test case 7 failed\"  # Length 2 is prime\n    assert prime_length('abc') == True, \"Test case 8 failed\"  # Length 3 is prime\n    assert prime_length('abcd') == False, \"Test case 9 failed\"  # Length 4 is not prime\n    assert prime_length('abcde') == True, \"Test case 10 failed\"  # Length 5 is prime\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/85", "entry_point": "add", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of even elements at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    if not lst:\n        raise ValueError(\"The list should not be empty.\")\n    \n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 1 and value % 2 == 0:  # Check if index is odd and value is even\n            total += value\n            \n    return total\n\n# Test cases\ndef test_add():\n    assert add([4, 2, 6, 7]) == 2, \"Test case 1 failed\"\n    assert add([1, 2, 3, 4, 5]) == 0, \"Test case 2 failed\"  # No even numbers at odd indices\n    assert add([0, 1, 2, 3, 4, 5]) == 4, \"Test case 3 failed\"  # 2 at index 2 (even) and 4 at index 4 (even)\n    assert add([10, 1, 20, 3, 30, 5]) == 50, \"Test case 4 failed\"  # 20 at index 2 and 30 at index 4\n    assert add([1, 3, 5, 7]) == 0, \"Test case 5 failed\"  # No even numbers at odd indices\n    assert add([2]) == 0, \"Test case 6 failed\"  # Single element, no odd index\n    assert add([1, 2]) == 0, \"Test case 7 failed\"  # Only one odd index, which is even\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_add()"}
{"task_id": "HumanEval/84", "entry_point": "solve", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not (0 <= N <= 10000):\n        raise ValueError(\"N must be between 0 and 10000 inclusive.\")\n    \n    # Step 1: Convert N to string and sum its digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Test cases to validate the functionality of the solve function\ndef test_solve():\n    assert solve(1000) == \"1\", \"Test case 1 failed\"\n    assert solve(150) == \"110\", \"Test case 2 failed\"\n    assert solve(147) == \"1100\", \"Test case 3 failed\"\n    assert solve(0) == \"0\", \"Test case 4 failed\"  # Edge case for 0\n    assert solve(9999) == \"36\", \"Test case 5 failed\"  # 9+9+9+9 = 36, binary is 100100\n    assert solve(1234) == \"11\", \"Test case 6 failed\"  # 1+2+3+4 = 10, binary is 1010\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solve()"}
{"task_id": "HumanEval/81", "entry_point": "numerical_letter_grade", "completion": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs into corresponding letter grades based on a defined scale.\n    \n    Args:\n        grades (list of float): A list of GPAs to convert.\n        \n    Returns:\n        list of str: A list of letter grades corresponding to the GPAs.\n    \n    Raises:\n        ValueError: If any GPA in the input list is not a float or is out of the valid range (0.0 to 4.0).\n    \"\"\"\n    \n    # Define the grading scale\n    grade_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (-0.1, 'E')  # GPA below 0.0 is considered as E\n    ]\n    \n    letter_grades = []\n    \n    for gpa in grades:\n        # Validate GPA\n        if not isinstance(gpa, (int, float)) or gpa < 0.0 or gpa > 4.0:\n            raise ValueError(f\"Invalid GPA value: {gpa}. GPA must be between 0.0 and 4.0.\")\n        \n        # Determine the letter grade\n        for threshold, letter in grade_scale:\n            if gpa >= threshold:\n                letter_grades.append(letter)\n                break\n    \n    return letter_grades\n\n# Test cases\ndef test_numerical_letter_grade():\n    assert numerical_letter_grade([4.0, 3.0, 1.7, 2.0, 3.5]) == ['A+', 'B+', 'C-', 'C+', 'A-']\n    assert numerical_letter_grade([3.8, 2.5, 0.0, 1.0]) == ['A', 'B', 'D-', 'D+']\n    assert numerical_letter_grade([2.3, 3.9, 1.5]) == ['B-', 'A', 'C-']\n    assert numerical_letter_grade([0.0]) == ['E']\n    \n    try:\n        numerical_letter_grade([4.5])  # Invalid GPA\n    except ValueError as e:\n        assert str(e) == \"Invalid GPA value: 4.5. GPA must be between 0.0 and 4.0.\"\n    \n    try:\n        numerical_letter_grade(['A'])  # Invalid type\n    except ValueError as e:\n        assert str(e) == \"Invalid GPA value: A. GPA must be between 0.0 and 4.0.\"\n    \n    print(\"All tests passed!\")\n\n# Run tests\ntest_numerical_letter_grade()"}
{"task_id": "HumanEval/86", "entry_point": "anti_shuffle", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words\n    are replaced by a new word with characters arranged in ascending order\n    based on ASCII value. The order of words and blank spaces in the sentence\n    is preserved.\n\n    Parameters:\n    s (str): The input string to be processed.\n\n    Returns:\n    str: The ordered version of the input string.\n    \"\"\"\n    # Split the string into words while preserving spaces\n    words = s.split(' ')\n    \n    # Sort characters in each word\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words back with spaces\n    return ' '.join(sorted_words)\n\n# Test cases to validate the functionality of the anti_shuffle function\ndef test_anti_shuffle():\n    assert anti_shuffle('Hi') == 'Hi', \"Test case 1 failed\"\n    assert anti_shuffle('hello') == 'ehllo', \"Test case 2 failed\"\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor', \"Test case 3 failed\"\n    assert anti_shuffle('a b c') == 'a b c', \"Test case 4 failed\"\n    assert anti_shuffle('abc def ghi') == 'abc def ghi', \"Test case 5 failed\"\n    assert anti_shuffle('   ') == '   ', \"Test case 6 failed\"  # Only spaces\n    assert anti_shuffle('a b c d e') == 'a b c d e', \"Test case 7 failed\"  # Single letters\n    assert anti_shuffle('z y x') == 'x y z', \"Test case 8 failed\"  # Reverse order\n    assert anti_shuffle('abc  def') == 'abc  def', \"Test case 9 failed\"  # Multiple spaces\n    assert anti_shuffle('!@# $%^ &*()') == '!@# $%^ &*()', \"Test case 10 failed\"  # Special characters\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_anti_shuffle()"}
{"task_id": "HumanEval/83", "entry_point": "starts_one_ends", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers to consider.\n    \n    Returns:\n    int: The count of n-digit positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    if n == 1:\n        return 1  # The only 1-digit number is '1'\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_one = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    end_with_one = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    start_and_end_with_one = 10 ** (n - 2)\n    \n    # Total count\n    total_count = start_with_one + end_with_one - start_and_end_with_one\n    \n    return total_count\n\n# Test cases\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only '1'\n    assert starts_one_ends(2) == 18  # '10' to '19' (10) + '1' (11) + '21' to '91' (9)\n    assert starts_one_ends(3) == 180  # '100' to '199' (100) + '101', '111', ..., '191' (10) + '201' to '901' (90)\n    assert starts_one_ends(4) == 1800  # '1000' to '1999' (1000) + '1001', ..., '1991' (100) + '2001' to '9001' (900)\n    assert starts_one_ends(5) == 18000  # '10000' to '19999' (10000) + '10001', ..., '19991' (1000) + '20001' to '90001' (9000)\n    \n    print(\"All test cases passed!\")\n\n# Run tests\ntest_starts_one_ends()"}
{"task_id": "HumanEval/87", "entry_point": "get_row", "completion": "def get_row(lst, x):\n    \"\"\"\n    Find all occurrences of integer x in a 2D list and return their coordinates.\n    \n    Parameters:\n    lst (list of list of int): A 2D list where each row may have a different number of columns.\n    x (int): The integer to search for in the 2D list.\n    \n    Returns:\n    list of tuple: A list of tuples where each tuple represents the (row, column) coordinates of x.\n    \"\"\"\n    coordinates = []\n    \n    # Iterate through each row and its index\n    for row_index, row in enumerate(lst):\n        # Iterate through each element in the row and its index\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates by row (ascending) and then by column (descending)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases\ndef test_get_row():\n    assert get_row([\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)], \"Test Case 1 Failed\"\n    \n    assert get_row([], 1) == [], \"Test Case 2 Failed\"\n    \n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)], \"Test Case 3 Failed\"\n    \n    assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 1]], 1) == [(0, 0), (2, 2)], \"Test Case 4 Failed\"\n    \n    assert get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)], \"Test Case 5 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_get_row()"}
{"task_id": "HumanEval/88", "entry_point": "sort_array", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting.\n    The array will be sorted in ascending order if the sum of the first and last index values is odd,\n    or in descending order if the sum is even.\n\n    Note:\n    * The original array is not modified.\n\n    Parameters:\n    array (list): A list of non-negative integers.\n\n    Returns:\n    list: A new sorted list based on the specified conditions.\n    \n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # Handle empty array case\n        return []\n\n    # Calculate the sum of the first and last elements\n    first_element = array[0]\n    last_element = array[-1]\n    total_sum = first_element + last_element\n\n    # Sort the array based on the sum being odd or even\n    if total_sum % 2 == 0:\n        # Even sum: sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # Odd sum: sort in ascending order\n        return sorted(array)\n\n# Test cases to validate the functionality of the sort_array function\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 3, 5, 7]) == [1, 3, 5, 7]  # Odd sum (1 + 7 = 8)\n    assert sort_array([10, 20, 30, 40]) == [40, 30, 20, 10]  # Even sum (10 + 40 = 50)\n    assert sort_array([9, 1, 8, 2]) == [1, 2, 8, 9]  # Odd sum (9 + 2 = 11)\n    assert sort_array([0, 0, 0]) == [0, 0, 0]  # All zeros, even sum (0 + 0 = 0)\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sort_array()"}
{"task_id": "HumanEval/90", "entry_point": "next_smallest", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the second smallest unique element from the list of integers.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int or None: The second smallest unique element, or None if it does not exist.\n    \n    Examples:\n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n    # Remove duplicates by converting the list to a set\n    unique_elements = set(lst)\n    \n    # If there are less than 2 unique elements, return None\n    if len(unique_elements) < 2:\n        return None\n    \n    # Convert the set back to a sorted list\n    sorted_unique_elements = sorted(unique_elements)\n    \n    # Return the second smallest element\n    return sorted_unique_elements[1]\n\n# Test cases\nif __name__ == \"__main__\":\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([3, 3, 2, 1]) == 2\n    assert next_smallest([10, 20, 10, 30]) == 20\n    assert next_smallest([1, 2, 2, 3, 3]) == 2\n    assert next_smallest([5, 5, 5]) == None\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/91", "entry_point": "is_bored", "completion": "def is_bored(S):\n    \"\"\"\n    Count the number of sentences that start with the word \"I\".\n    \n    A sentence is defined as a sequence of characters ending with '.', '?', or '!'.\n    \n    Parameters:\n    S (str): The input string containing sentences.\n    \n    Returns:\n    int: The count of sentences that start with \"I\".\n    \n    Examples:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_bored(\"I am bored! Are you bored? I think I am.\")\n    2\n    >>> is_bored(\"This is a test. I hope it works! I am excited.\")\n    2\n    >>> is_bored(\"No sentences here\")\n    0\n    \"\"\"\n    # Split the string into sentences using the specified delimiters\n    import re\n    sentences = re.split(r'[.!?]', S)\n    \n    # Count sentences that start with \"I\"\n    count = 0\n    for sentence in sentences:\n        stripped_sentence = sentence.strip()  # Remove leading/trailing whitespace\n        if stripped_sentence.lower().startswith(\"i\"):\n            count += 1\n            \n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running test cases\n    print(is_bored(\"Hello world\"))  # Expected output: 0\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Expected output: 1\n    print(is_bored(\"I am bored! Are you bored? I think I am.\"))  # Expected output: 2\n    print(is_bored(\"This is a test. I hope it works! I am excited.\"))  # Expected output: 2\n    print(is_bored(\"No sentences here\"))  # Expected output: 0\n    print(is_bored(\"I am here. I am there. I am everywhere!\"))  # Expected output: 3"}
{"task_id": "HumanEval/89", "entry_point": "encrypt", "completion": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating each letter down the alphabet by 4 places.\n    \n    Args:\n        s (str): The input string to be encrypted.\n        \n    Returns:\n        str: The encrypted string with letters shifted down by 4 places.\n    \"\"\"\n    encrypted = []\n    \n    for char in s:\n        if char.isalpha():  # Check if the character is a letter\n            # Calculate the new character with rotation\n            shift = ord(char) + 4\n            \n            # Wrap around if it goes past 'z'\n            if char.islower():\n                if shift > ord('z'):\n                    shift -= 26\n            elif char.isupper():\n                if shift > ord('Z'):\n                    shift -= 26\n            \n            encrypted.append(chr(shift))\n        else:\n            # Non-alphabet characters remain unchanged\n            encrypted.append(char)\n    \n    return ''.join(encrypted)\n\n# Test cases to validate the functionality of the encrypt function\ndef test_encrypt():\n    assert encrypt('hi') == 'lm', \"Test case 1 failed\"\n    assert encrypt('asdfghjkl') == 'ewhjklnop', \"Test case 2 failed\"\n    assert encrypt('gf') == 'kj', \"Test case 3 failed\"\n    assert encrypt('et') == 'ix', \"Test case 4 failed\"\n    assert encrypt('Hello World!') == 'Lipps Asvph!', \"Test case 5 failed\"\n    assert encrypt('xyz') == 'bcd', \"Test case 6 failed\"\n    assert encrypt('') == '', \"Test case 7 failed\"\n    assert encrypt('1234!@#$') == '1234!@#$', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_encrypt()"}
{"task_id": "HumanEval/92", "entry_point": "any_int", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False in any other cases.\n    \n    Examples:\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases to validate the functionality of the any_int function\ndef test_any_int():\n    assert any_int(5, 2, 7) == True, \"Test case 1 failed\"\n    assert any_int(3, 2, 2) == False, \"Test case 2 failed\"\n    assert any_int(3, -2, 1) == True, \"Test case 3 failed\"\n    assert any_int(3.6, -2.2, 2) == False, \"Test case 4 failed\"\n    assert any_int(0, 0, 0) == True, \"Test case 5 failed\"  # 0 + 0 = 0\n    assert any_int(1, 1, 2) == True, \"Test case 6 failed\"  # 1 + 1 = 2\n    assert any_int(1, 2, 3) == True, \"Test case 7 failed\"  # 1 + 2 = 3\n    assert any_int(1, 2, 4) == False, \"Test case 8 failed\" # 1 + 2 != 4\n    assert any_int(-1, -1, -2) == True, \"Test case 9 failed\" # -1 + -1 = -2\n    assert any_int(1, 2, '3') == False, \"Test case 10 failed\" # Non-integer input\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_any_int()"}
{"task_id": "HumanEval/93", "entry_point": "encode", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping the case of all letters\n    and replacing all vowels with the letter that appears 2 places\n    ahead in the English alphabet.\n\n    Parameters:\n    message (str): The message to encode.\n\n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            swapped_char = char.swapcase()\n            # Replace vowel if it is one\n            if swapped_char in vowel_replacement:\n                swapped_char = vowel_replacement[swapped_char]\n            encoded_message.append(swapped_char)\n        else:\n            # If it's not a letter, just append it as is\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running test cases\n    print(encode('test'))  # Expected: 'TGST'\n    print(encode('This is a message'))  # Expected: 'tHKS KS C MGSSCGG'\n    print(encode('Hello World'))  # Expected: 'hGNNQ WQTKD'\n    print(encode('Python Programming'))  # Expected: 'pKTHON PRgRMMING'\n    print(encode('AEIOU'))  # Expected: 'CGKQW'\n    print(encode('aeiou'))  # Expected: 'cgkqw'\n    print(encode('1234!@#$'))  # Expected: '1234!@#$' (non-letter characters should remain unchanged)"}
{"task_id": "HumanEval/95", "entry_point": "check_dict_case", "completion": "def check_dict_case(input_dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n\n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are either lower case or upper case strings, \n          False otherwise.\n\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags for lower and upper case\n    all_lower = True\n    all_upper = True\n\n    for key in input_dict.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Check if the key is lower case\n        if key.islower():\n            all_upper = False\n        # Check if the key is upper case\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False  # Mixed case or non-alphabetic characters\n\n    return all_lower or all_upper\n\n# Test cases to validate the functionality of the function\ndef test_check_dict_case():\n    assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True\n    assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False\n    assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False\n    assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False\n    assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True\n    assert check_dict_case({}) == False  # Empty dictionary\n    assert check_dict_case({\"HELLO\": \"world\", \"TEST\": \"case\"}) == True\n    assert check_dict_case({\"hello\": \"world\", \"test\": \"case\"}) == True\n    assert check_dict_case({\"Hello\": \"world\"}) == False  # Mixed case\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_check_dict_case()"}
{"task_id": "HumanEval/97", "entry_point": "multiply", "completion": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n    \n    Returns:\n        int: The product of the unit digits of a and b.\n    \n    Examples:\n        multiply(148, 412) should return 16.\n        multiply(19, 28) should return 72.\n        multiply(2020, 1851) should return 0.\n        multiply(14, -15) should return 20.\n    \"\"\"\n    # Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product\n\n# Test cases to validate the function\ndef test_multiply():\n    assert multiply(148, 412) == 16, \"Test case 1 failed\"\n    assert multiply(19, 28) == 72, \"Test case 2 failed\"\n    assert multiply(2020, 1851) == 0, \"Test case 3 failed\"\n    assert multiply(14, -15) == 20, \"Test case 4 failed\"\n    assert multiply(-7, 3) == 21, \"Test case 5 failed\"\n    assert multiply(0, 5) == 0, \"Test case 6 failed\"\n    assert multiply(-9, -9) == 81, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_multiply()"}
{"task_id": "HumanEval/96", "entry_point": "count_up_to", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return a list of prime numbers less than n.\"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\n# Test cases\ndef test_count_up_to():\n    assert count_up_to(5) == [2, 3]\n    assert count_up_to(11) == [2, 3, 5, 7]\n    assert count_up_to(0) == []\n    assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n    assert count_up_to(1) == []\n    assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n    \n    # Additional test cases\n    assert count_up_to(2) == []  # No primes less than 2\n    assert count_up_to(3) == [2]  # Only 2 is prime and less than 3\n    assert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_count_up_to()"}
{"task_id": "HumanEval/98", "entry_point": "count_upper", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    Parameters:\n    s (str): The input string to be analyzed.\n    \n    Returns:\n    int: The count of uppercase vowels at even indices.\n    \n    Examples:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Iterate over the string, checking only even indices\n    for i in range(0, len(s), 2):  # Step by 2 to get even indices\n        if s[i] in uppercase_vowels:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_upper function\ndef test_count_upper():\n    assert count_upper('aBCdEf') == 1, \"Test case 1 failed\"\n    assert count_upper('abcdefg') == 0, \"Test case 2 failed\"\n    assert count_upper('dBBE') == 0, \"Test case 3 failed\"\n    assert count_upper('AEIOU') == 3, \"Test case 4 failed\"  # A at index 0, I at index 2, U at index 4\n    assert count_upper('A1E2I3O4U') == 3, \"Test case 5 failed\"  # A at index 0, I at index 4, U at index 8\n    assert count_upper('') == 0, \"Test case 6 failed\"  # Empty string\n    assert count_upper('bBcCdDeE') == 1, \"Test case 7 failed\"  # E at index 6\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_upper()"}
{"task_id": "HumanEval/100", "entry_point": "make_a_pile", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    stones = []\n    current_stones = n\n    \n    for i in range(n):\n        stones.append(current_stones)\n        # Determine the next number of stones based on the parity of n\n        if n % 2 == 0:  # n is even\n            current_stones += 2\n        else:           # n is odd\n            current_stones += 2\n    \n    return stones\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid cases\n    print(make_a_pile(3))  # Expected: [3, 5, 7]\n    print(make_a_pile(4))  # Expected: [4, 6, 8, 10]\n    print(make_a_pile(1))  # Expected: [1]\n    \n    # Edge case\n    try:\n        print(make_a_pile(0))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected: Input must be a positive integer.\n    \n    try:\n        print(make_a_pile(-5))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected: Input must be a positive integer."}
{"task_id": "HumanEval/99", "entry_point": "closest_integer", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"0.5\")\n    1\n    >>> closest_integer(\"-0.5\")\n    -1\n    '''\n    try:\n        # Convert the input string to a float\n        num = float(value)\n        \n        # Use round to get the closest integer\n        rounded = round(num)\n        \n        # Check if the number is equidistant from two integers\n        if abs(num - rounded) == 0.5:\n            # If equidistant, round away from zero\n            if num > 0:\n                return rounded + 1\n            else:\n                return rounded - 1\n        else:\n            return rounded\n    except ValueError:\n        raise ValueError(\"Input must be a string representing a number.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the test cases\n    test_cases = [\n        (\"10\", 10),\n        (\"15.3\", 15),\n        (\"14.5\", 15),\n        (\"-14.5\", -15),\n        (\"0.5\", 1),\n        (\"-0.5\", -1),\n        (\"-1.7\", -2),\n        (\"2.2\", 2),\n        (\"3.5\", 4),\n        (\"-3.5\", -4),\n    ]\n    \n    for value, expected in test_cases:\n        result = closest_integer(value)\n        assert result == expected, f\"Test failed for {value}: expected {expected}, got {result}\"\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/101", "entry_point": "words_string", "completion": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into a list of words.\n\n    Parameters:\n    s (str): The input string containing words separated by commas or spaces.\n\n    Returns:\n    list: A list of words extracted from the input string.\n    \n    Examples:\n    >>> words_string(\"Hi, my name is John\")\n    ['Hi', 'my', 'name', 'is', 'John']\n    >>> words_string(\"One, two, three, four, five, six\")\n    ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n    # Split the string by commas and spaces, then flatten the result\n    words = [word.strip() for part in s.split(',') for word in part.split()]\n    return words\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    # Test case 2\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    # Test case 3: Multiple spaces and commas\n    assert words_string(\"  Hello,   world,  this is  a test  \") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n    # Test case 4: No spaces or commas\n    assert words_string(\"SingleWord\") == [\"SingleWord\"]\n    # Test case 5: Empty string\n    assert words_string(\"\") == []\n    # Test case 6: Only spaces\n    assert words_string(\"     \") == []\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/102", "entry_point": "choose_num", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    Args:\n        x (int): A positive integer.\n        y (int): A positive integer.\n\n    Returns:\n        int: The largest even integer in the range [x, y] or -1 if none exists.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(x, int) and isinstance(y, int)) or x <= 0 or y <= 0:\n        raise ValueError(\"Both x and y must be positive integers.\")\n\n    # Determine the range\n    start = min(x, y)\n    end = max(x, y)\n\n    # Find the largest even number in the range\n    for num in range(end, start - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1\n\n# Test cases\ndef test_choose_num():\n    assert choose_num(12, 15) == 14, \"Test case 1 failed\"\n    assert choose_num(13, 12) == -1, \"Test case 2 failed\"\n    assert choose_num(10, 20) == 20, \"Test case 3 failed\"\n    assert choose_num(1, 1) == -1, \"Test case 4 failed\"\n    assert choose_num(2, 2) == 2, \"Test case 5 failed\"\n    assert choose_num(5, 10) == 10, \"Test case 6 failed\"\n    assert choose_num(8, 8) == 8, \"Test case 7 failed\"\n    assert choose_num(0, 5) == -1, \"Test case 8 failed\"  # Edge case: 0 is not positive\n    assert choose_num(5, 0) == -1, \"Test case 9 failed\"  # Edge case: 0 is not positive\n    assert choose_num(3, 7) == 6, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_choose_num()"}
{"task_id": "HumanEval/104", "entry_point": "unique_digits", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that don't have any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(num):\n        \"\"\"Check if the number has any even digit.\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    # Filter numbers that do not have any even digits\n    result = [num for num in x if not has_even_digit(num)]\n    \n    # Sort the result in increasing order\n    return sorted(result)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    print(unique_digits([15, 33, 1422, 1]))  # Expected output: [1, 15, 33]\n    \n    # Test case 2\n    print(unique_digits([152, 323, 1422, 10]))  # Expected output: []\n    \n    # Additional test cases\n    print(unique_digits([1, 3, 5, 7, 9]))  # Expected output: [1, 3, 5, 7, 9]\n    print(unique_digits([2, 4, 6, 8]))  # Expected output: []\n    print(unique_digits([11, 13, 15, 17, 19, 21]))  # Expected output: [11, 13, 15, 17, 19, 21]\n    print(unique_digits([123, 135, 147, 159]))  # Expected output: [135, 159]"}
{"task_id": "HumanEval/103", "entry_point": "rounded_avg", "completion": "def rounded_avg(n, m):\n    \"\"\"Compute the average of integers from n to m (inclusive), round it,\n    and convert it to binary. Return -1 if n > m.\n    \n    Args:\n        n (int): The starting integer.\n        m (int): The ending integer.\n    \n    Returns:\n        str or int: The binary representation of the rounded average or -1 if n > m.\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1  # Total numbers from n to m\n    \n    # Calculate the average and round it\n    average = total_sum / count\n    rounded_average = round(average)\n    \n    # Convert to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n\n# Test cases\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"  # Average is 3\n    assert rounded_avg(7, 5) == -1      # n > m\n    assert rounded_avg(10, 20) == \"0b1111\"  # Average is 15\n    assert rounded_avg(20, 33) == \"0b11010\"  # Average is 26\n    assert rounded_avg(0, 0) == \"0b0\"  # Average is 0\n    assert rounded_avg(1, 1) == \"0b1\"  # Average is 1\n    assert rounded_avg(2, 2) == \"0b10\"  # Average is 2\n    assert rounded_avg(1, 10) == \"0b101\"  # Average is 5.5, rounded to 6\n    assert rounded_avg(5, 5) == \"0b101\"  # Average is 5\n\n# Run the tests\ntest_rounded_avg()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/107", "entry_point": "even_odd_palindrome", "completion": "def is_palindrome(num):\n    \"\"\"Check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Parameters:\n    n (int): A positive integer (1 <= n <= 1000)\n\n    Returns:\n    tuple: A tuple containing the count of even and odd palindromes respectively.\n    \"\"\"\n    if not (1 <= n <= 1000):\n        raise ValueError(\"Input must be a positive integer between 1 and 1000.\")\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2), \"Test case 1 failed\"\n    assert even_odd_palindrome(12) == (4, 6), \"Test case 2 failed\"\n    assert even_odd_palindrome(1) == (0, 1), \"Test case 3 failed\"\n    assert even_odd_palindrome(10) == (4, 5), \"Test case 4 failed\"\n    assert even_odd_palindrome(100) == (9, 45), \"Test case 5 failed\"\n    assert even_odd_palindrome(1000) == (90, 405), \"Test case 6 failed\"\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_even_odd_palindrome()"}
{"task_id": "HumanEval/105", "entry_point": "by_length", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    list: A list of strings representing the names of the integers in reverse order.\n    \"\"\"\n    # Mapping of integers to their corresponding names\n    number_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only integers between 1 and 9\n    filtered = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered.sort()\n    \n    # Reverse the sorted array\n    filtered.reverse()\n    \n    # Map the integers to their corresponding names\n    result = [number_to_name[num] for num in filtered]\n    \n    return result\n\n# Test cases\ndef test_by_length():\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    assert by_length([]) == []\n    assert by_length([1, -1, 55]) == [\"One\"]\n    assert by_length([10, 11, 12]) == []\n    assert by_length([3, 3, 3, 3]) == [\"Three\", \"Three\", \"Three\", \"Three\"]\n    assert by_length([5, 2, 9, 1, 0, -5]) == [\"Nine\", \"Five\", \"Two\", \"One\"]\n    assert by_length([7, 8, 9, 10, 11, 12]) == [\"Nine\", \"Eight\", \"Seven\"]\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_by_length()"}
{"task_id": "HumanEval/108", "entry_point": "count_nums", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of integers in the array whose sum of digits is greater than 0.\n    \n    Parameters:\n    arr (list of int): A list of integers.\n    \n    Returns:\n    int: The count of integers with a sum of digits > 0.\n    \n    If a number is negative, its first signed digit will be negative.\n    \n    Examples:\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of digits of an integer.\"\"\"\n        # Convert the number to string and handle the sign\n        str_n = str(n)\n        # Initialize sum\n        digit_sum = 0\n        \n        # Iterate through each character in the string representation\n        for i, char in enumerate(str_n):\n            if char.isdigit():\n                digit_sum += int(char)\n            elif i == 0 and char == '-':\n                digit_sum -= 1  # First digit is negative\n        \n        return digit_sum\n    \n    count = 0\n    for number in arr:\n        if sum_of_digits(number) > 0:\n            count += 1\n            \n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([-123, 456, 0]) == 1  # Only 456 has a sum of digits > 0\n    assert count_nums([-1, -2, -3]) == 0  # All negative numbers\n    assert count_nums([10, -10, 20]) == 2  # 10 and 20 have sum of digits > 0\n    assert count_nums([-10, -20, -30]) == 0  # All negative sums\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/106", "entry_point": "f", "completion": "def factorial(num):\n    \"\"\"Calculate the factorial of a non-negative integer num.\"\"\"\n    if num < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result\n\ndef f(n):\n    \"\"\"Return a list of size n where the value at index i is:\n    - the factorial of i if i is even,\n    - the sum of numbers from 1 to i if i is odd.\n    \n    Args:\n        n (int): The size of the list to generate.\n    \n    Returns:\n        list: A list of calculated values based on the index.\n    \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i is even\n            result.append(factorial(i))\n        else:  # i is odd\n            result.append(i * (i + 1) // 2)  # Sum of first i numbers\n    return result\n\n# Test cases\ndef test_f():\n    assert f(1) == [1]  # 1 is odd, sum from 1 to 1 is 1\n    assert f(2) == [1, 2]  # 1 is odd, 2 is even, factorial of 2 is 2\n    assert f(3) == [1, 2, 6]  # 1 is odd, 2 is even, 3 is odd, sum from 1 to 3 is 6\n    assert f(4) == [1, 2, 6, 24]  # 1 is odd, 2 is even, 3 is odd, 4 is even, factorial of 4 is 24\n    assert f(5) == [1, 2, 6, 24, 15]  # 1, 2, 6, 24, sum from 1 to 5 is 15\n    assert f(6) == [1, 2, 6, 24, 15, 720]  # 720 is factorial of 6\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_f()"}
{"task_id": "HumanEval/109", "entry_point": "move_one_ball", "completion": "def move_one_ball(arr):\n    \"\"\"Determine if the array can be sorted in non-decreasing order by right shifts.\"\"\"\n    if not arr:  # If the array is empty\n        return True\n    \n    n = len(arr)\n    break_count = 0\n    \n    for i in range(n):\n        # Check if the current element is greater than the next element\n        if arr[i] > arr[(i + 1) % n]:\n            break_count += 1\n            \n        # If we find more than one break, return False\n        if break_count > 1:\n            return False\n            \n    return True\n\n# Test cases to validate the solution\ndef test_move_one_ball():\n    assert move_one_ball([3, 4, 5, 1, 2]) == True, \"Test case 1 failed\"\n    assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 2 failed\"\n    assert move_one_ball([]) == True, \"Test case 3 failed\"  # Empty array\n    assert move_one_ball([1]) == True, \"Test case 4 failed\"  # Single element\n    assert move_one_ball([2, 3, 4, 5, 1]) == True, \"Test case 5 failed\"  # One break\n    assert move_one_ball([1, 2, 3, 4, 5]) == True, \"Test case 6 failed\"  # Already sorted\n    assert move_one_ball([5, 1, 2, 3, 4]) == True, \"Test case 7 failed\"  # One break at the start\n    assert move_one_ball([5, 4, 3, 2, 1]) == False, \"Test case 8 failed\"  # More than one break\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_move_one_ball()"}
{"task_id": "HumanEval/110", "entry_point": "exchange", "completion": "def exchange(lst1, lst2):\n    \"\"\"Determines if it's possible to exchange elements between two lists\n    to make all elements of lst1 even.\n    \n    Args:\n        lst1 (list): The first list of numbers.\n        lst2 (list): The second list of numbers.\n    \n    Returns:\n        str: \"YES\" if lst1 can be made all even, \"NO\" otherwise.\n    \"\"\"\n    # Count odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count even numbers in lst2\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If we have enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count <= even_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases to validate the functionality of the exchange function\ndef test_exchange():\n    assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\", \"Test case 1 failed\"\n    assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\", \"Test case 2 failed\"\n    assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\", \"Test case 3 failed\"\n    assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\", \"Test case 4 failed\"\n    assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\", \"Test case 5 failed\"\n    assert exchange([1, 1, 1], [2, 2, 2]) == \"YES\", \"Test case 6 failed\"\n    assert exchange([1, 1, 1], [1, 1, 1]) == \"NO\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_exchange()"}
{"task_id": "HumanEval/112", "entry_point": "reverse_delete", "completion": "def reverse_delete(s, c):\n    \"\"\"Remove characters from string s that are in string c and check if the result is a palindrome.\n    \n    Args:\n        s (str): The original string from which characters will be removed.\n        c (str): The string containing characters to be removed from s.\n    \n    Returns:\n        tuple: A tuple containing the modified string and a boolean indicating if it is a palindrome.\n    \"\"\"\n    # Create a set of characters to remove for faster lookup\n    chars_to_remove = set(c)\n    \n    # Remove characters from s that are in chars_to_remove\n    result = ''.join(char for char in s if char not in chars_to_remove)\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome\n\n# Test cases to validate the functionality of the reverse_delete function\ndef test_reverse_delete():\n    assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False), \"Test case 1 failed\"\n    assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False), \"Test case 2 failed\"\n    assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True), \"Test case 3 failed\"\n    assert reverse_delete(\"hello\", \"lo\") == ('he', False), \"Test case 4 failed\"\n    assert reverse_delete(\"racecar\", \"xyz\") == ('racecar', True), \"Test case 5 failed\"\n    assert reverse_delete(\"\", \"abc\") == ('', True), \"Test case 6 failed\"  # Empty string is a palindrome\n    assert reverse_delete(\"aabbcc\", \"abc\") == ('', True), \"Test case 7 failed\"  # All characters removed\n    assert reverse_delete(\"a\", \"a\") == ('', True), \"Test case 8 failed\"  # Single character removed\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_delete()"}
{"task_id": "HumanEval/113", "entry_point": "odd_count", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3', \"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    \n    for string in lst:\n        # Count odd digits\n        odd_count = sum(1 for char in string if char in '13579')\n        \n        # Create the formatted string\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(odd_count(['1234567']))  # Expected: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    print(odd_count(['3', \"11111111\"]))  # Expected: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \n    # Additional test cases\n    print(odd_count(['24680']))  # Expected: [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]\n    print(odd_count(['13579', '2468', '0']))  # Expected: [\"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]\n    print(odd_count(['']))  # Expected: [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"}
{"task_id": "HumanEval/111", "entry_point": "histogram", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    if not isinstance(test, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Split the input string into letters\n    letters = test.split()\n    \n    # Dictionary to count occurrences\n    count_dict = {}\n    \n    # Count occurrences of each letter\n    for letter in letters:\n        if letter.isalpha() and len(letter) == 1:  # Ensure it's a single lowercase letter\n            count_dict[letter] = count_dict.get(letter, 0) + 1\n    \n    # Find the maximum count\n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    \n    # Create a result dictionary for letters with the maximum count\n    result = {letter: count for letter, count in count_dict.items() if count == max_count}\n    \n    return result\n\n# Test cases\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}\n    assert histogram('a a b b c c') == {'a': 2, 'b': 2, 'c': 2}\n    assert histogram('x y z x y z x') == {'x': 3}\n    assert histogram('m n o p q r s t u v w x y z') == {'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_histogram()"}
{"task_id": "HumanEval/114", "entry_point": "minSubArraySum", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\n    :param nums: List[int] - List of integers\n    :return: int - Minimum sum of any non-empty sub-array\n\n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input array must not be empty.\")\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n\n# Test cases\ndef test_minSubArraySum():\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1, \"Test case 1 failed\"\n    assert minSubArraySum([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert minSubArraySum([-2, -3, -1, -5]) == -11, \"Test case 3 failed\"\n    assert minSubArraySum([1, 2, 3, -6, 4, 5]) == -6, \"Test case 4 failed\"\n    assert minSubArraySum([5, 4, 3, 2, 1]) == 1, \"Test case 5 failed\"\n    assert minSubArraySum([-1, 2, -3, 4, -5]) == -6, \"Test case 6 failed\"\n    assert minSubArraySum([0, 0, 0]) == 0, \"Test case 7 failed\"\n    assert minSubArraySum([-1]) == -1, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_minSubArraySum()"}
{"task_id": "HumanEval/117", "entry_point": "select_words", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from \n    string s that contain exactly n consonants, in the order they appear in s.\n    \n    Args:\n    s (str): The input string containing words.\n    n (int): The number of consonants to match.\n    \n    Returns:\n    list: A list of words containing exactly n consonants.\n    \"\"\"\n    if not s:  # Check if the string is empty\n        return []\n    \n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for char in word if char in consonants)\n    \n    # Filter words that have exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n\n# Test cases to validate the functionality of the select_words function\ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    assert select_words(\"\", 1) == []  # Edge case: empty string\n    assert select_words(\"a e i o u\", 0) == []  # No consonants\n    assert select_words(\"abc def ghi jkl\", 1) == [\"abc\", \"def\", \"ghi\", \"jkl\"]  # Each has 1 consonant\n    assert select_words(\"This is a test\", 2) == [\"This\", \"test\"]  # \"This\" and \"test\" have 2 consonants\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_select_words()"}
{"task_id": "HumanEval/116", "entry_point": "sort_array", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation\n    in ascending order. For similar number of ones, sorts based on decimal value.\n\n    Parameters:\n    arr (list): A list of non-negative integers.\n\n    Returns:\n    list: A sorted list of integers.\n\n    Examples:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4, 5]\n    >>> sort_array([0, 1, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    >>> sort_array([3, 1, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    # Validate input\n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements in the array must be non-negative integers.\")\n\n    # Sort the array based on the number of ones in binary representation and then by value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    assert sort_array([3, 1, 2, 4]) == [1, 2, 3, 4]\n    assert sort_array([7, 3, 5, 1]) == [1, 3, 5, 7]\n    assert sort_array([8, 4, 2, 1]) == [1, 2, 4, 8]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/115", "entry_point": "max_fill", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    Calculate the number of times buckets need to be lowered to empty the wells.\n\n    Parameters:\n    grid (list of list of int): A rectangular grid representing wells (1 for water, 0 for empty).\n    capacity (int): The capacity of each bucket.\n\n    Returns:\n    int: The number of times buckets need to be lowered.\n    \"\"\"\n    total_water = sum(sum(row) for row in grid)  # Count total units of water (1s)\n    \n    if total_water == 0:\n        return 0  # No water to extract\n    \n    # Calculate the number of times buckets need to be lowered\n    times_lowered = (total_water + capacity - 1) // capacity\n    return times_lowered\n\n# Test cases to validate the function\ndef test_max_fill():\n    assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert max_fill([[0,0,0], [0,0,0]], 5) == 0\n    assert max_fill([[1,1,1], [1,1,1]], 3) == 4  # 6 units of water, capacity 3 -> 2 times + 1 for the remainder\n    assert max_fill([[1,0,1], [1,1,1]], 1) == 5  # 5 units of water, capacity 1 -> 5 times\n    assert max_fill([[1,1,1], [0,0,0]], 10) == 1  # 3 units of water, capacity 10 -> 1 time\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_max_fill()"}
{"task_id": "HumanEval/119", "entry_point": "match_parens", "completion": "def match_parens(lst):\n    '''\n    Check if two strings of parentheses can be concatenated to form a balanced string.\n\n    Parameters:\n    lst (list): A list containing two strings of parentheses.\n\n    Returns:\n    str: 'Yes' if a good string can be formed, 'No' otherwise.\n    '''\n    if len(lst) != 2 or not all(isinstance(s, str) for s in lst):\n        raise ValueError(\"Input must be a list of two strings.\")\n\n    s1, s2 = lst[0], lst[1]\n\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:  # More closing than opening at any point\n                return False\n        return balance == 0  # Must be balanced at the end\n\n    # Check both concatenation orders\n    return 'Yes' if (is_good(s1 + s2) or is_good(s2 + s1)) else 'No'\n\n\n# Test cases\ndef test_match_parens():\n    assert match_parens(['()(', ')']) == 'Yes', \"Test case 1 failed\"\n    assert match_parens([')', ')']) == 'No', \"Test case 2 failed\"\n    assert match_parens(['((', '))']) == 'No', \"Test case 3 failed\"\n    assert match_parens(['(())', '()']) == 'Yes', \"Test case 4 failed\"\n    assert match_parens(['', '']) == 'Yes', \"Test case 5 failed\"\n    assert match_parens(['(', ')']) == 'Yes', \"Test case 6 failed\"\n    assert match_parens(['(((', ')))']) == 'No', \"Test case 7 failed\"\n    assert match_parens(['(()', '())']) == 'Yes', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_match_parens()"}
{"task_id": "HumanEval/118", "entry_point": "get_closest_vowel", "completion": "def get_closest_vowel(word):\n    \"\"\"Find the closest vowel that stands between two consonants from the right side of the word.\n    \n    Args:\n        word (str): The input word to search for vowels.\n        \n    Returns:\n        str: The closest vowel found between two consonants, or an empty string if none is found.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    last_consonant = None\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        char = word[i]\n        \n        if char.isalpha():  # Ensure we are only dealing with letters\n            if char in vowels:\n                # If we have seen a consonant before this vowel\n                if last_consonant is not None:\n                    return char  # Return the vowel found between consonants\n            else:\n                # It's a consonant\n                last_consonant = char\n    \n    return \"\"  # Return empty string if no vowel found between consonants\n\n# Test cases to validate the function\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\", \"Test case 1 failed\"\n    assert get_closest_vowel(\"FULL\") == \"U\", \"Test case 2 failed\"\n    assert get_closest_vowel(\"quick\") == \"\", \"Test case 3 failed\"\n    assert get_closest_vowel(\"ab\") == \"\", \"Test case 4 failed\"\n    assert get_closest_vowel(\"aBcDeF\") == \"e\", \"Test case 5 failed\"\n    assert get_closest_vowel(\"xyz\") == \"\", \"Test case 6 failed\"\n    assert get_closest_vowel(\"aEIoU\") == \"\", \"Test case 7 failed\"\n    assert get_closest_vowel(\"cAb\") == \"A\", \"Test case 8 failed\"\n    assert get_closest_vowel(\"cA\") == \"\", \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_get_closest_vowel()"}
{"task_id": "HumanEval/121", "entry_point": "solution", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Args:\n        lst (list): A non-empty list of integers.\n    \n    Returns:\n        int: The sum of odd elements at even positions.\n    \n    Examples:\n        solution([5, 8, 7, 1]) ==> 12\n        solution([3, 3, 3, 3, 3]) ==> 9\n        solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The list should not be empty.\")\n    \n    total_sum = 0\n    \n    for index in range(0, len(lst), 2):  # Iterate over even indices\n        if lst[index] % 2 != 0:  # Check if the element is odd\n            total_sum += lst[index]  # Add to sum if it's odd\n    \n    return total_sum\n\n# Test cases to validate the solution\ndef test_solution():\n    assert solution([5, 8, 7, 1]) == 12, \"Test case 1 failed\"\n    assert solution([3, 3, 3, 3, 3]) == 9, \"Test case 2 failed\"\n    assert solution([30, 13, 24, 321]) == 0, \"Test case 3 failed\"\n    assert solution([1, 2, 3, 4, 5]) == 6, \"Test case 4 failed\"  # 1 + 5\n    assert solution([1]) == 1, \"Test case 5 failed\"  # Single odd element\n    assert solution([2]) == 0, \"Test case 6 failed\"  # Single even element\n    assert solution([1, 2, 3, 4, 5, 6, 7]) == 8, \"Test case 7 failed\"  # 1 + 7\n    assert solution([-1, 2, -3, 4, -5]) == -6, \"Test case 8 failed\"  # -1 + -5\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solution()"}
{"task_id": "HumanEval/120", "entry_point": "maximum", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Parameters:\n    arr (list of int): The input array of integers.\n    k (int): The number of maximum elements to return.\n\n    Returns:\n    list of int: A sorted list of the maximum k numbers in arr.\n\n    Example:\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"arr must be a list of integers.\")\n    if not isinstance(k, int) or k < 0 or k > len(arr):\n        raise ValueError(\"k must be an integer in the range [0, len(arr)].\")\n\n    # If k is 0, return an empty list\n    if k == 0:\n        return []\n\n    # Sort the array in descending order and take the first k elements\n    max_elements = sorted(arr, reverse=True)[:k]\n\n    # Sort the result in ascending order before returning\n    return sorted(max_elements)\n\n# Test cases\ndef test_maximum():\n    assert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert maximum([4, -4, 4], 2) == [4, 4]\n    assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]\n    assert maximum([5, 5, 5, 5], 2) == [5, 5]\n    assert maximum([-1, -2, -3, -4], 2) == [-2, -1]\n    assert maximum([1000, -1000, 0], 2) == [0, 1000]\n    assert maximum([1], 1) == [1]\n    assert maximum([], 0) == []\n\n    print(\"All test cases passed.\")\n\n# Run the test cases\ntest_maximum()"}
{"task_id": "HumanEval/123", "entry_point": "get_odd_collatz", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in the Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. Returned list is sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \n    Parameters:\n    n (int): A positive integer to generate the Collatz sequence.\n\n    Returns:\n    List[int]: A sorted list of odd numbers in the Collatz sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    \n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    \n    collatz_sequence.append(1)  # Append the last term which is 1\n    \n    # Filter odd numbers and sort the result\n    odd_numbers = sorted(num for num in collatz_sequence if num % 2 != 0)\n    \n    return odd_numbers\n\n# Test cases\ndef test_get_odd_collatz():\n    assert get_odd_collatz(1) == [1], \"Test case 1 failed\"\n    assert get_odd_collatz(2) == [1], \"Test case 2 failed\"\n    assert get_odd_collatz(3) == [1, 3], \"Test case 3 failed\"\n    assert get_odd_collatz(4) == [1], \"Test case 4 failed\"\n    assert get_odd_collatz(5) == [1, 5], \"Test case 5 failed\"\n    assert get_odd_collatz(6) == [1, 3], \"Test case 6 failed\"\n    assert get_odd_collatz(7) == [1, 3, 7], \"Test case 7 failed\"\n    assert get_odd_collatz(8) == [1], \"Test case 8 failed\"\n    assert get_odd_collatz(9) == [1, 3, 9], \"Test case 9 failed\"\n    assert get_odd_collatz(10) == [1, 3], \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_get_odd_collatz()"}
{"task_id": "HumanEval/122", "entry_point": "add_elements", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Validate input\n    if not arr or k < 1 or k > len(arr):\n        raise ValueError(\"Invalid input: Ensure arr is non-empty and 1 <= k <= len(arr)\")\n\n    total_sum = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:  # Check if the element has at most two digits\n            total_sum += arr[i]\n\n    return total_sum\n\n# Test cases\ndef test_add_elements():\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24, \"Test case 1 failed\"\n    assert add_elements([1, 2, 3, 4, 5], 5) == 15, \"Test case 2 failed\"  # All elements are valid\n    assert add_elements([-10, 100, 50, 0, 99], 3) == 40, \"Test case 3 failed\"  # -10 + 0 + 50\n    assert add_elements([200, 300, 400], 3) == 0, \"Test case 4 failed\"  # No valid elements\n    assert add_elements([10, -20, 30, -40, 50], 2) == -10, \"Test case 5 failed\"  # 10 + -20\n    assert add_elements([0], 1) == 0, \"Test case 6 failed\"  # Single element case\n    assert add_elements([99, -99, 100, -100], 4) == 0, \"Test case 7 failed\"  # 99 + -99 + 0\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_add_elements()"}
{"task_id": "HumanEval/124", "entry_point": "valid_date", "completion": "def valid_date(date):\n    \"\"\"Validates a given date string in the format mm-dd-yyyy.\n    \n    Args:\n        date (str): The date string to validate.\n    \n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date is in the correct format\n    if len(parts) != 3:\n        return False\n    \n    # Extract month, day, and year\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False  # In case of non-integer values\n    \n    # Check month validity\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day validity based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:  # 31 days\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:  # 30 days\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:  # February\n        if day < 1 or day > 29:\n            return False\n        # Check for leap year\n        if day == 29:\n            if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n                return False\n    \n    return True\n\n# Test cases\ndef test_valid_date():\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('02-29-2020') == True  # Leap year\n    assert valid_date('02-29-2019') == False  # Not a leap year\n    assert valid_date('04-31-2020') == False  # April has 30 days\n    assert valid_date('12-31-2020') == True  # Valid end of year\n    assert valid_date('01-01-2021') == True  # Valid start of year\n    assert valid_date('00-01-2021') == False  # Invalid month\n    assert valid_date('01-32-2021') == False  # Invalid day\n    assert valid_date('13-01-2021') == False  # Invalid month\n    assert valid_date('01-01-20a1') == False  # Invalid year format\n\n# Run tests\ntest_valid_date()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/125", "entry_point": "split_words", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, \n    if no whitespaces exists in the text you should split on commas ',' \n    if no commas exists you should return the number of lower-case letters \n    with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e 3 \n    '''\n    \n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # Count lowercase letters in odd positions\n    else:\n        odd_count = sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n        return odd_count\n\n# Test cases\ndef test_split_words():\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"abcdef\") == 3\n    assert split_words(\"a b c d e f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert split_words(\"a,b,c,d,e,f\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    assert split_words(\"abc\") == 1  # Only 'b' is in odd position\n    assert split_words(\"xyz\") == 2  # 'y' and 'z' are in odd positions\n    assert split_words(\"\") == 0  # Empty string case\n    assert split_words(\"12345\") == 0  # No lowercase letters\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_split_words()"}
{"task_id": "HumanEval/126", "entry_point": "is_sorted", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Check for duplicates using a set\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    \n    # Check if the list is sorted\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True\n\n# Test cases\ndef test_is_sorted():\n    assert is_sorted([5]) == True\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([1, 3, 2, 4, 5]) == False\n    assert is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n    assert is_sorted([1, 2, 2, 3, 3, 4]) == True\n    assert is_sorted([1, 2, 2, 2, 3, 4]) == False\n    assert is_sorted([]) == True  # An empty list is considered sorted\n    assert is_sorted([1, 1, 2]) == False  # Duplicate at the start\n    assert is_sorted([1, 2, 3, 4, 5, 5]) == False  # Duplicate at the end\n\n# Run the tests\ntest_is_sorted()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/128", "entry_point": "prod_signs", "completion": "def prod_signs(arr):\n    \"\"\"\n    Calculate the sum of magnitudes of integers multiplied by the product of all signs\n    of each number in the array.\n\n    Parameters:\n    arr (list of int): The input array of integers.\n\n    Returns:\n    int or None: The computed value or None for an empty array.\n    \"\"\"\n    if not arr:  # Check for empty array\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1  # Positive sign\n        elif num < 0:\n            product_of_signs *= -1  # Negative sign\n        else:\n            product_of_signs *= 0  # Zero sign\n\n        sum_of_magnitudes += abs(num)  # Sum of magnitudes\n\n    return product_of_signs * sum_of_magnitudes\n\n# Test cases\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))  # Expected output: -9\n    print(prod_signs([0, 1]))          # Expected output: 0\n    print(prod_signs([]))               # Expected output: None\n    print(prod_signs([-1, -2, -3]))    # Expected output: -6\n    print(prod_signs([1, 2, 3]))        # Expected output: 6\n    print(prod_signs([0, -1, 2]))       # Expected output: 0\n    print(prod_signs([1, 0, -1]))       # Expected output: 0"}
{"task_id": "HumanEval/129", "entry_point": "minPath", "completion": "def minPath(grid, k):\n    \"\"\"\n    Find the minimum path of length k in the grid.\n    \n    Args:\n    grid: List[List[int]] - A 2D grid with unique integers from 1 to N*N.\n    k: int - The length of the path to find.\n    \n    Returns:\n    List[int] - The ordered list of values on the cells that the minimum path goes through.\n    \"\"\"\n    from collections import deque\n    \n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\n    min_path = None\n    \n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()  # Backtrack\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n    \n    return min_path\n\n# Test cases\ndef test_minPath():\n    assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert minPath([[1, 2], [3, 4]], 2) == [1, 1]\n    assert minPath([[1, 3], [2, 4]], 2) == [1, 1]\n    assert minPath([[1]], 1) == [1]  # Edge case with a single cell grid\n\ntest_minPath()\nprint(\"All test cases passed!\")"}
{"task_id": "HumanEval/131", "entry_point": "digits", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    Args:\n        n (int): A positive integer.\n    \n    Returns:\n        int: The product of the odd digits or 0 if there are no odd digits.\n    \n    Examples:\n        digits(1)  == 1\n        digits(4)  == 0\n        digits(235) == 15\n    \"\"\"\n    if n <= 0 or not isinstance(n, int):\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        digit_value = int(digit)\n        if digit_value % 2 != 0:  # Check if the digit is odd\n            product *= digit_value\n            has_odd = True\n    \n    return product if has_odd else 0\n\n# Test cases\ndef test_digits():\n    assert digits(1) == 1, \"Test case 1 failed\"\n    assert digits(4) == 0, \"Test case 2 failed\"\n    assert digits(235) == 15, \"Test case 3 failed\"\n    assert digits(123456789) == 945, \"Test case 4 failed\"  # 1 * 3 * 5 * 7 * 9\n    assert digits(24680) == 0, \"Test case 5 failed\"  # All even\n    assert digits(13579) == 945, \"Test case 6 failed\"  # 1 * 3 * 5 * 7 * 9\n    assert digits(0) == 0, \"Test case 7 failed\"  # Edge case, should raise ValueError\n    assert digits(-123)  # Edge case, should raise ValueError\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntry:\n    test_digits()\nexcept ValueError as e:\n    print(e)"}
{"task_id": "HumanEval/134", "entry_point": "check_if_last_char_is_a_letter", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Strip trailing spaces\n    stripped_txt = txt.rstrip()\n    \n    # Get the last character\n    last_char = stripped_txt[-1]\n    \n    # Check if the last character is a letter and not part of a word\n    if last_char.isalpha() and (len(stripped_txt) == 1 or stripped_txt[-2] == ' '):\n        return True\n    \n    return False\n\n# Test cases\ndef run_tests():\n    assert check_if_last_char_is_a_letter(\"apple pie\") == False, \"Test Case 1 Failed\"\n    assert check_if_last_char_is_a_letter(\"apple pi e\") == True, \"Test Case 2 Failed\"\n    assert check_if_last_char_is_a_letter(\"apple pi e \") == False, \"Test Case 3 Failed\"\n    assert check_if_last_char_is_a_letter(\"\") == False, \"Test Case 4 Failed\"\n    assert check_if_last_char_is_a_letter(\"hello!\") == False, \"Test Case 5 Failed\"\n    assert check_if_last_char_is_a_letter(\"hello \") == False, \"Test Case 6 Failed\"\n    assert check_if_last_char_is_a_letter(\"a\") == True, \"Test Case 7 Failed\"\n    assert check_if_last_char_is_a_letter(\"a \") == False, \"Test Case 8 Failed\"\n    assert check_if_last_char_is_a_letter(\"test test\") == False, \"Test Case 9 Failed\"\n    assert check_if_last_char_is_a_letter(\"test test e\") == True, \"Test Case 10 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "HumanEval/127", "entry_point": "intersection", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n    \n    # Check if there is an intersection\n    if start_intersection > end_intersection:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length_of_intersection = end_intersection - start_intersection\n    \n    # Check if the length is prime\n    if is_prime(length_of_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Expected: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Expected: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Expected: \"YES\"\nprint(intersection((1, 5), (5, 10)))  # Expected: \"NO\"\nprint(intersection((1, 3), (2, 4)))  # Expected: \"NO\"\nprint(intersection((1, 3), (3, 5)))  # Expected: \"NO\"\nprint(intersection((1, 3), (1, 3)))  # Expected: \"NO\"\nprint(intersection((1, 4), (2, 3)))  # Expected: \"YES\""}
{"task_id": "HumanEval/132", "entry_point": "is_nested", "completion": "def is_nested(string):\n    '''\n    Check if the input string of square brackets contains a valid subsequence\n    where at least one bracket in the subsequence is nested.\n\n    Parameters:\n    string (str): A string containing only square brackets.\n\n    Returns:\n    bool: True if there is at least one nested bracket, False otherwise.\n    '''\n    stack = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # Check if we have a nested structure\n                if len(stack) > 0:  # There is at least one opening bracket before this closing bracket\n                    nested_found = True\n            else:\n                # Unmatched closing bracket\n                return False\n\n    # If we have unmatched opening brackets, it's not valid\n    if stack:\n        return False\n\n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/130", "entry_point": "tri", "completion": "def tri(n):\n    \"\"\"Generate the first n + 1 numbers of the Tribonacci sequence.\n    \n    The Tribonacci sequence is defined as follows:\n    - tri(1) = 3\n    - tri(n) = 1 + n / 2, if n is even.\n    - tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \n    Args:\n        n (int): A non-negative integer representing the number of terms to generate.\n    \n    Returns:\n        list: A list containing the first n + 1 numbers of the Tribonacci sequence.\n    \n    Raises:\n        ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Initialize the list to store the sequence\n    tribonacci_sequence = []\n    \n    # Calculate the sequence\n    for i in range(n + 1):\n        if i == 1:\n            tribonacci_sequence.append(3)\n        elif i % 2 == 0:  # Even case\n            tribonacci_sequence.append(1 + i / 2)\n        else:  # Odd case\n            # For odd n, we need to calculate tri(n - 1), tri(n - 2), and tri(n + 1)\n            if i - 1 < len(tribonacci_sequence):\n                tri_n_minus_1 = tribonacci_sequence[i - 1]\n            else:\n                tri_n_minus_1 = tri(i - 1)\n                \n            if i - 2 < len(tribonacci_sequence):\n                tri_n_minus_2 = tribonacci_sequence[i - 2]\n            else:\n                tri_n_minus_2 = tri(i - 2)\n                \n            if i + 1 < len(tribonacci_sequence):\n                tri_n_plus_1 = tribonacci_sequence[i + 1]\n            else:\n                tri_n_plus_1 = tri(i + 1)\n                \n            tribonacci_sequence.append(tri_n_minus_1 + tri_n_minus_2 + tri_n_plus_1)\n    \n    return tribonacci_sequence\n\n# Test cases\ndef test_tri():\n    assert tri(0) == [1]  # Only tri(0) = 1\n    assert tri(1) == [1, 3]  # tri(0) = 1, tri(1) = 3\n    assert tri(2) == [1, 3, 2]  # tri(2) = 2\n    assert tri(3) == [1, 3, 2, 8]  # tri(3) = 8\n    assert tri(4) == [1, 3, 2, 8, 3]  # tri(4) = 3\n    assert tri(5) == [1, 3, 2, 8, 3, 14]  # tri(5) = 14\n    print(\"All tests passed.\")\n\n# Run tests\ntest_tri()"}
{"task_id": "HumanEval/133", "entry_point": "sum_squares", "completion": "import math\nfrom typing import List, Union\n\ndef sum_squares(lst: List[Union[int, float]]) -> int:\n    \"\"\"Returns the sum of squared numbers in the given list after rounding each element up to the nearest integer.\n    \n    Args:\n        lst (List[Union[int, float]]): A list of numbers (integers or floats).\n        \n    Returns:\n        int: The sum of the squares of the rounded numbers.\n        \n    Raises:\n        ValueError: If the input is not a list or contains non-numeric values.\n    \n    Examples:\n        >>> sum_squares([1, 2, 3])\n        14\n        >>> sum_squares([1, 4, 9])\n        98\n        >>> sum_squares([1, 3, 5, 7])\n        84\n        >>> sum_squares([1.4, 4.2, 0])\n        29\n        >>> sum_squares([-2.4, 1, 1])\n        6\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    total = 0\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"All elements in the list must be numbers.\")\n        rounded_num = math.ceil(num)\n        total += rounded_num ** 2\n    \n    return total\n\n# Test cases\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3], 14),\n        ([1, 4, 9], 98),\n        ([1, 3, 5, 7], 84),\n        ([1.4, 4.2, 0], 29),\n        ([-2.4, 1, 1], 6),\n        ([0, -1.5, 2.3], 10),  # Additional test case\n        ([3.7, 2.1, -4.8], 38)  # Additional test case\n    ]\n    \n    for i, (input_data, expected) in enumerate(test_cases):\n        result = sum_squares(input_data)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/135", "entry_point": "can_arrange", "completion": "def can_arrange(arr):\n    \"\"\"Returns the largest index of an element which is not greater than or equal\n    to the element immediately preceding it. If no such element exists, returns -1.\n    \n    Args:\n        arr (list): A list of unique integers.\n    \n    Returns:\n        int: The largest index of the element that meets the condition, or -1 if none exists.\n    \n    Examples:\n        can_arrange([1, 2, 4, 3, 5]) -> 3\n        can_arrange([1, 2, 3]) -> -1\n    \"\"\"\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    if len(arr) < 2:\n        return -1  # Not enough elements to compare\n\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:  # Check if current element is less than the previous one\n            largest_index = i  # Update the largest index found\n\n    return largest_index\n\n# Test cases\ndef test_can_arrange():\n    assert can_arrange([1, 2, 4, 3, 5]) == 3, \"Test case 1 failed\"\n    assert can_arrange([1, 2, 3]) == -1, \"Test case 2 failed\"\n    assert can_arrange([5, 4, 3, 2, 1]) == 0, \"Test case 3 failed\"  # All elements are decreasing\n    assert can_arrange([1, 3, 2, 4]) == 2, \"Test case 4 failed\"  # 2 is less than 3\n    assert can_arrange([1]) == -1, \"Test case 5 failed\"  # Single element\n    assert can_arrange([]) == -1, \"Test case 6 failed\"  # Empty list\n    assert can_arrange([1, 2, 3, 4, 5]) == -1, \"Test case 7 failed\"  # All elements are increasing\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_can_arrange()"}
{"task_id": "HumanEval/136", "entry_point": "largest_smallest_integers", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:  # Check for negative integers\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:  # Check for positive integers\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Test cases\ndef test_largest_smallest_integers():\n    assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([0]) == (None, None)\n    assert largest_smallest_integers([-1, -2, -3, 1, 2, 3]) == (-1, 1)\n    assert largest_smallest_integers([-5, -3, -1, 0, 2, 4]) == (-1, 2)\n    assert largest_smallest_integers([-10, -20, -30]) == (-10, None)\n    assert largest_smallest_integers([10, 20, 30]) == (None, 10)\n    assert largest_smallest_integers([-1, 0, 1]) == (-1, 1)\n    assert largest_smallest_integers([-1, -2, 0]) == (-1, None)\n\n# Run the tests\ntest_largest_smallest_integers()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/137", "entry_point": "compare_one", "completion": "def normalize_value(value):\n    \"\"\"\n    Normalize the input value to a float if it's a string representation of a number.\n    Handles both '.' and ',' as decimal separators.\n    \"\"\"\n    if isinstance(value, str):\n        # Replace ',' with '.' for float conversion\n        value = value.replace(',', '.')\n        try:\n            return float(value)\n        except ValueError:\n            raise ValueError(f\"Invalid string representation of a number: {value}\")\n    return float(value) if isinstance(value, (int, float)) else value\n\ndef compare_one(a, b):\n    \"\"\"\n    Compare two values (integers, floats, or strings representing real numbers)\n    and return the larger value in its original type. Return None if they are equal.\n    \n    Parameters:\n    a (int, float, str): First value to compare.\n    b (int, float, str): Second value to compare.\n    \n    Returns:\n    int, float, str, or None: The larger value or None if they are equal.\n    \"\"\"\n    try:\n        norm_a = normalize_value(a)\n        norm_b = normalize_value(b)\n    except ValueError as e:\n        return str(e)  # Return error message as string if conversion fails\n\n    if norm_a == norm_b:\n        return None\n    \n    return a if norm_a > norm_b else b\n\n# Test cases\ndef run_tests():\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(1, \"2,3\") == \"2,3\"\n    assert compare_one(\"5,1\", \"6\") == \"6\"\n    assert compare_one(\"1\", 1) is None\n    assert compare_one(\"3.5\", \"3.5\") is None\n    assert compare_one(\"3,5\", \"3.5\") == \"3.5\"\n    assert compare_one(\"3.5\", \"3,5\") == \"3.5\"\n    assert compare_one(10, \"10\") is None\n    assert compare_one(\"10.0\", 10) is None\n    assert compare_one(\"invalid\", 10) == \"Invalid string representation of a number: invalid\"\n\n    print(\"All tests passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "HumanEval/140", "entry_point": "fix_spaces", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    Parameters:\n    text (str): The input string to be processed.\n    \n    Returns:\n    str: The modified string with spaces replaced as specified.\n    \"\"\"\n    # Replace all spaces with underscores\n    text_with_underscores = text.replace(' ', '_')\n    \n    # Replace more than 2 consecutive underscores with a single hyphen\n    # We use regex to find occurrences of more than 2 underscores\n    result = re.sub(r'(_{2,})', '-', text_with_underscores)\n    \n    return result\n\n# Test cases to validate the functionality of the fix_spaces function\ndef test_fix_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\n    assert fix_spaces(\"   Leading spaces\") == \"-Leading_spaces\"\n    assert fix_spaces(\"Trailing spaces   \") == \"Trailing_spaces-\"\n    assert fix_spaces(\"Multiple    spaces   here\") == \"Multiple- spaces- here\"\n    assert fix_spaces(\"NoSpaces\") == \"NoSpaces\"\n    assert fix_spaces(\"\") == \"\"\n    assert fix_spaces(\"   \") == \"-\"\n    assert fix_spaces(\"A   B   C\") == \"A-B-C\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fix_spaces()"}
{"task_id": "HumanEval/138", "entry_point": "is_equal_to_sum_even", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Args:\n        n (int): The number to evaluate.\n        \n    Returns:\n        bool: True if n can be expressed as the sum of 4 positive even numbers, False otherwise.\n    \n    Examples:\n        is_equal_to_sum_even(4) == False\n        is_equal_to_sum_even(6) == False\n        is_equal_to_sum_even(8) == True\n        is_equal_to_sum_even(10) == True\n        is_equal_to_sum_even(12) == True\n        is_equal_to_sum_even(14) == True\n        is_equal_to_sum_even(15) == False\n    \"\"\"\n    # Check if n is less than 8\n    if n < 8:\n        return False\n    # Check if n is odd\n    if n % 2 != 0:\n        return False\n    # If n is even and at least 8, it can be expressed as the sum of 4 positive even numbers\n    return True"}
{"task_id": "HumanEval/139", "entry_point": "special_factorial", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a given integer n.\n    \n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    Args:\n        n (int): A positive integer for which to calculate the Brazilian factorial.\n\n    Returns:\n        int: The Brazilian factorial of n.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \n    Examples:\n        >>> special_factorial(4)\n        288\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer greater than 0.\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test\n    print(special_factorial(4))  # Expected output: 288\n\n    # Test case 2: Edge case with n = 1\n    print(special_factorial(1))  # Expected output: 1\n\n    # Test case 3: Edge case with n = 2\n    print(special_factorial(2))  # Expected output: 2\n\n    # Test case 4: Edge case with n = 3\n    print(special_factorial(3))  # Expected output: 12\n\n    # Test case 5: Error case with n = 0\n    try:\n        print(special_factorial(0))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a positive integer greater than 0.\n\n    # Test case 6: Error case with negative input\n    try:\n        print(special_factorial(-5))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a positive integer greater than 0.\n\n    # Test case 7: Error case with non-integer input\n    try:\n        print(special_factorial(3.5))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a positive integer greater than 0."}
{"task_id": "HumanEval/94", "entry_point": "skjkasdkd", "completion": ""}
{"task_id": "HumanEval/143", "entry_point": "words_in_sentence", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a string representing a sentence, return a string that contains the words\n    from the original sentence whose lengths are prime numbers.\n    \n    Parameters:\n    sentence (str): The input sentence containing words separated by spaces.\n    \n    Returns:\n    str: A string of words whose lengths are prime numbers, in the same order as the original.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words based on prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered words into a single string\n    return ' '.join(prime_length_words)\n\n# Test cases\ndef test_words_in_sentence():\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert words_in_sentence(\"hello world\") == \"world\"\n    assert words_in_sentence(\"a b c d e f g\") == \"a b c d e f g\"  # All single-letter words\n    assert words_in_sentence(\"prime numbers are fun\") == \"are\"\n    assert words_in_sentence(\"one two three four five six\") == \"one two\"\n    assert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the fox the\"\n    assert words_in_sentence(\"\") == \"\"  # Edge case: empty string\n    assert words_in_sentence(\"a\") == \"a\"  # Single character, which is prime\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_words_in_sentence()"}
{"task_id": "HumanEval/142", "entry_point": "sum_squares", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. It squares the integer entry if its index is a \n    multiple of 3 and cubes the integer entry if its index is a multiple of 4 and not a \n    multiple of 3. The function returns the sum of all modified entries.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int: The sum of the modified entries.\n    \n    Examples:\n    For lst = [1, 2, 3] the output should be 6\n    For lst = [] the output should be 0\n    For lst = [-1, -5, 2, -1, -5] the output should be -126\n    \"\"\"\n    total_sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2  # Square if index is a multiple of 3\n        elif index % 4 == 0:\n            total_sum += value ** 3  # Cube if index is a multiple of 4 and not a multiple of 3\n        else:\n            total_sum += value  # Keep the value unchanged if not a multiple of 3 or 4\n    \n    return total_sum\n\n# Test cases\ndef test_sum_squares():\n    assert sum_squares([1, 2, 3]) == 6, \"Test case 1 failed\"\n    assert sum_squares([]) == 0, \"Test case 2 failed\"\n    assert sum_squares([-1, -5, 2, -1, -5]) == -126, \"Test case 3 failed\"\n    assert sum_squares([0, 0, 0, 0, 0]) == 0, \"Test case 4 failed\"\n    assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 1**2 + 2 + 3**2 + 4**3 + 5 + 6**2 + 7 + 8**3, \"Test case 5 failed\"\n    assert sum_squares([10, 20, 30, 40, 50, 60, 70, 80]) == 10**2 + 20 + 30**2 + 40**3 + 50 + 60**2 + 70 + 80**3, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_squares()"}
{"task_id": "HumanEval/144", "entry_point": "simplify", "completion": "def simplify(x, n):\n    \"\"\"Simplifies the expression x * n where x and n are fractions in string format.\n    \n    Args:\n        x (str): A string representation of the first fraction in the format 'numerator/denominator'.\n        n (str): A string representation of the second fraction in the format 'numerator/denominator'.\n    \n    Returns:\n        bool: True if the product of the fractions is a whole number, False otherwise.\n    \"\"\"\n    # Parse the fractions\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    # (x_numerator / x_denominator) * (n_numerator / n_denominator) = (x_numerator * n_numerator) / (x_denominator * n_denominator)\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n    \n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0\n\n# Test cases\ndef test_simplify():\n    assert simplify(\"1/5\", \"5/1\") == True, \"Test case 1 failed\"\n    assert simplify(\"1/6\", \"2/1\") == False, \"Test case 2 failed\"\n    assert simplify(\"7/10\", \"10/2\") == False, \"Test case 3 failed\"\n    assert simplify(\"3/4\", \"4/3\") == True, \"Test case 4 failed\"\n    assert simplify(\"1/2\", \"2/1\") == True, \"Test case 5 failed\"\n    assert simplify(\"1/3\", \"3/1\") == True, \"Test case 6 failed\"\n    assert simplify(\"5/2\", \"2/5\") == True, \"Test case 7 failed\"\n    assert simplify(\"1/8\", \"8/1\") == True, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_simplify()"}
{"task_id": "HumanEval/141", "entry_point": "file_name_check", "completion": "def file_name_check(file_name):\n    \"\"\"Check if the given file name is valid based on specific criteria.\n    \n    A file's name is considered valid if:\n    - There are no more than three digits in the name.\n    - There is exactly one dot in the name.\n    - The part before the dot is not empty and starts with a letter.\n    - The part after the dot is one of ['txt', 'exe', 'dll'].\n    \n    Args:\n        file_name (str): The name of the file to check.\n    \n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name is empty or does not start with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check for valid extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if extension not in valid_extensions:\n        return 'No'\n    \n    # Count digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Test cases to validate the function\ndef test_file_name_check():\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"1example.dll\") == 'No'  # Starts with a digit\n    assert file_name_check(\"example1.txt\") == 'Yes'  # Valid case with one digit\n    assert file_name_check(\"example123.txt\") == 'Yes'  # Valid case with three digits\n    assert file_name_check(\"example1234.txt\") == 'No'  # More than three digits\n    assert file_name_check(\".hiddenfile.txt\") == 'No'  # Name is empty before dot\n    assert file_name_check(\"example.\") == 'No'  # No extension after dot\n    assert file_name_check(\"example.invalid\") == 'No'  # Invalid extension\n    assert file_name_check(\"example.exe\") == 'Yes'  # Valid case with exe extension\n    assert file_name_check(\"test123.dll\") == 'Yes'  # Valid case with digits\n    assert file_name_check(\"test..txt\") == 'No'  # More than one dot\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_file_name_check()"}
{"task_id": "HumanEval/145", "entry_point": "order_by_points", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of an integer n.\n    This function handles both positive and negative integers.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index\n    in the original list.\n\n    Parameters:\n    nums (list): A list of integers to be sorted.\n\n    Returns:\n    list: A new list sorted by the sum of digits.\n    \n    Examples:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with positive and negative numbers\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    \n    # Test case 2: Empty list\n    assert order_by_points([]) == []\n    \n    # Test case 3: All positive numbers\n    assert order_by_points([10, 2, 3, 4, 5]) == [2, 3, 4, 5, 10]\n    \n    # Test case 4: All negative numbers\n    assert order_by_points([-10, -2, -3, -4, -5]) == [-2, -3, -4, -5, -10]\n    \n    # Test case 5: Mixed numbers\n    assert order_by_points([-10, 2, 3, -4, 5]) == [-4, 2, 3, 5, -10]\n    \n    # Test case 6: Numbers with the same digit sum\n    assert order_by_points([12, 21, 3, 30]) == [3, 12, 21, 30]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/146", "entry_point": "specialFilter", "completion": "def specialFilter(nums):\n    \"\"\"Returns the count of numbers in the input list that are greater than 10\n    and have both first and last digits as odd.\n    \n    Args:\n        nums (list): A list of integers.\n        \n    Returns:\n        int: The count of numbers meeting the criteria.\n        \n    Examples:\n        specialFilter([15, -73, 14, -15]) => 1 \n        specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    if not isinstance(nums, list):\n        raise ValueError(\"Input must be a list of numbers.\")\n    \n    count = 0\n    \n    for num in nums:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n        \n        if num > 10:\n            str_num = str(abs(num))  # Convert to string and take absolute value\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            \n            if first_digit % 2 == 1 and last_digit % 2 == 1:  # Check if both are odd\n                count += 1\n                \n    return count\n\n# Test cases\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1, \"Test case 1 failed\"\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2, \"Test case 2 failed\"\n    assert specialFilter([11, 13, 19, 21]) == 4, \"Test case 3 failed\"\n    assert specialFilter([10, 12, 14, 16]) == 0, \"Test case 4 failed\"\n    assert specialFilter([31, 41, 51, 61]) == 4, \"Test case 5 failed\"\n    assert specialFilter([]) == 0, \"Test case 6 failed\"  # Empty list\n    assert specialFilter([-11, -13, -15]) == 0, \"Test case 7 failed\"  # All negative\n    assert specialFilter([100, 101, 102]) == 1, \"Test case 8 failed\"  # Only 101 meets criteria\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_specialFilter()"}
{"task_id": "HumanEval/147", "entry_point": "get_max_triples", "completion": "def get_max_triples(n):\n    \"\"\"\n    Calculate the number of valid triples (a[i], a[j], a[k]) such that\n    a[i] + a[j] + a[k] is a multiple of 3, where a[i] = i * i - i + 1.\n\n    Parameters:\n    n (int): The length of the array.\n\n    Returns:\n    int: The number of valid triples.\n    \"\"\"\n    # Step 1: Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Step 2: Count occurrences of each remainder when divided by 3\n    count = [0, 0, 0]\n    for value in a:\n        count[value % 3] += 1\n    \n    # Step 3: Calculate the number of valid triples\n    total_triples = 0\n    \n    # Case 1: All three numbers have remainder 0\n    if count[0] >= 3:\n        total_triples += count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    \n    # Case 2: All three numbers have remainder 1\n    if count[1] >= 3:\n        total_triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    # Case 3: All three numbers have remainder 2\n    if count[2] >= 3:\n        total_triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    \n    # Case 4: One number from each remainder\n    total_triples += count[0] * count[1] * count[2]\n    \n    return total_triples\n\n# Test cases to validate the implementation\ndef test_get_max_triples():\n    assert get_max_triples(5) == 1, \"Test case 1 failed\"\n    assert get_max_triples(6) == 4, \"Test case 2 failed\"\n    assert get_max_triples(7) == 8, \"Test case 3 failed\"\n    assert get_max_triples(10) == 20, \"Test case 4 failed\"\n    assert get_max_triples(0) == 0, \"Test case 5 failed\"  # Edge case: n = 0\n    assert get_max_triples(1) == 0, \"Test case 6 failed\"  # Edge case: n = 1\n    assert get_max_triples(2) == 0, \"Test case 7 failed\"  # Edge case: n = 2\n    assert get_max_triples(3) == 1, \"Test case 8 failed\"  # Edge case: n = 3\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_get_max_triples()"}
{"task_id": "HumanEval/149", "entry_point": "sorted_list_sum", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings, removes strings with odd lengths,\n    and returns the remaining strings sorted by length and alphabetically.\n\n    Parameters:\n    lst (list of str): A list of strings.\n\n    Returns:\n    list of str: A sorted list of strings with even lengths.\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n\n# Test cases to validate the functionality of the sorted_list_sum function\ndef test_sorted_list_sum():\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"hello\", \"world\", \"hi\", \"there\"]) == [\"hello\", \"world\"]\n    assert sorted_list_sum([\"apple\", \"banana\", \"kiwi\", \"pear\"]) == [\"banana\", \"kiwi\", \"pear\"]\n    assert sorted_list_sum([\"\", \"a\", \"bb\", \"ccc\", \"dddd\"]) == [\"bb\", \"dddd\"]\n    assert sorted_list_sum([\"test\", \"word\", \"python\", \"code\"]) == [\"code\", \"test\", \"word\"]\n    assert sorted_list_sum([]) == []  # Test with an empty list\n    assert sorted_list_sum([\"single\"]) == []  # Test with a single odd-length string\n    assert sorted_list_sum([\"even\", \"lengths\", \"are\", \"great\"]) == [\"are\", \"even\", \"great\"]\n\n# Run the test cases\ntest_sorted_list_sum()\n\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/148", "entry_point": "bf", "completion": "def bf(planet1, planet2):\n    '''\n    Returns a tuple of planets located between the orbits of planet1 and planet2.\n    \n    Parameters:\n    planet1 (str): The name of the first planet.\n    planet2 (str): The name of the second planet.\n    \n    Returns:\n    tuple: A tuple containing the names of the planets between planet1 and planet2,\n           sorted by proximity to the Sun. Returns an empty tuple if either planet name is invalid.\n    '''\n    \n    # List of planets in order from the Sun\n    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n    \n    # Validate input\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Extract the planets in between\n    in_between_planets = planets[index1 + 1:index2]\n    \n    return tuple(in_between_planets)\n\n# Test cases\ndef test_bf():\n    assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\n    assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)\n    assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    assert bf(\"Venus\", \"Mars\") == (\"Earth\",)\n    assert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    assert bf(\"Pluto\", \"Earth\") == ()  # Invalid planet\n    assert bf(\"Earth\", \"Pluto\") == ()  # Invalid planet\n    assert bf(\"Earth\", \"Earth\") == ()  # Same planet\n    assert bf(\"Mercury\", \"Mercury\") == ()  # Same planet\n\n# Run tests\ntest_bf()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/150", "entry_point": "x_or_y", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\n\n    Args:\n    n (int): The number to check for primality.\n    x (any): The value to return if n is prime.\n    y (any): The value to return if n is not prime.\n\n    Returns:\n    any: x if n is prime, y otherwise.\n\n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert x_or_y(7, 34, 12) == 34, \"Test case 1 failed\"\n    assert x_or_y(15, 8, 5) == 5, \"Test case 2 failed\"\n    assert x_or_y(2, 100, 200) == 100, \"Test case 3 failed\"  # 2 is prime\n    assert x_or_y(1, 10, 20) == 20, \"Test case 4 failed\"    # 1 is not prime\n    assert x_or_y(11, 'prime', 'not prime') == 'prime', \"Test case 5 failed\"  # 11 is prime\n    assert x_or_y(4, 'yes', 'no') == 'no', \"Test case 6 failed\"  # 4 is not prime\n    assert x_or_y(13, 0, -1) == 0, \"Test case 7 failed\"  # 13 is prime\n    assert x_or_y(9, 1, -1) == -1, \"Test case 8 failed\"  # 9 is not prime\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/152", "entry_point": "compare", "completion": "def compare(game, guess):\n    \"\"\"\n    Compares the actual game scores with the guessed scores and returns an array\n    of the absolute differences. If the guess is correct, the difference is 0.\n\n    Parameters:\n    game (list of int): The actual scores of the matches.\n    guess (list of int): The guessed scores of the matches.\n\n    Returns:\n    list of int: A list containing the absolute differences between the actual scores\n                 and the guessed scores.\n    \n    Raises:\n    ValueError: If the lengths of the game and guess lists are not equal.\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"The length of game and guess lists must be equal.\")\n\n    # Calculate the absolute differences\n    differences = [abs(g - a) for a, g in zip(game, guess)]\n    \n    return differences\n\n# Test cases to validate the functionality of the compare function\ndef test_compare():\n    assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]\n    assert compare([10, 20, 30], [10, 20, 30]) == [0, 0, 0]\n    assert compare([1, 1, 1], [2, 2, 2]) == [1, 1, 1]\n    assert compare([5, 10, 15], [0, 0, 0]) == [5, 10, 15]\n    \n    # Test with empty lists\n    assert compare([], []) == []\n    \n    # Test with one element lists\n    assert compare([5], [5]) == [0]\n    assert compare([5], [3]) == [2]\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_compare()"}
{"task_id": "HumanEval/151", "entry_point": "double_the_difference", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    if not lst:  # Check if the list is empty\n        return 0\n    \n    total_sum = 0  # Initialize the sum of squares\n    \n    for num in lst:\n        if isinstance(num, int) and num >= 0:  # Check if num is a non-negative integer\n            if num % 2 != 0:  # Check if the number is odd\n                total_sum += num ** 2  # Add the square of the odd number to the total sum\n    \n    return total_sum  # Return the final sum\n\n# Test cases\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10, \"Test case 1 failed\"\n    assert double_the_difference([-1, -2, 0]) == 0, \"Test case 2 failed\"\n    assert double_the_difference([9, -2]) == 81, \"Test case 3 failed\"\n    assert double_the_difference([0]) == 0, \"Test case 4 failed\"\n    assert double_the_difference([]) == 0, \"Test case 5 failed\"\n    assert double_the_difference([1, 2, 3, 4, 5]) == 35, \"Test case 6 failed\"  # 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\n    assert double_the_difference([2, 4, 6]) == 0, \"Test case 7 failed\"  # No odd numbers\n    assert double_the_difference([-3, -5, 7]) == 49, \"Test case 8 failed\"  # 7^2 = 49\n    assert double_the_difference([3.5, 5, 7]) == 74, \"Test case 9 failed\"  # 5^2 + 7^2 = 25 + 49 = 74\n    assert double_the_difference([1, 2, 'a', None, 3]) == 10, \"Test case 10 failed\"  # 1^2 + 3^2 = 1 + 9 = 10\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_double_the_difference()"}
{"task_id": "HumanEval/153", "entry_point": "Strongest_Extension", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Find the strongest extension based on the strength defined by the number of \n    uppercase and lowercase letters in the extension's name.\n\n    Parameters:\n    class_name (str): The name of the class.\n    extensions (list): A list of extension names.\n\n    Returns:\n    str: The strongest extension in the format ClassName.StrongestExtensionName.\n    \"\"\"\n    strongest_extension = None\n    max_strength = float('-inf')  # Start with the lowest possible strength\n\n    for extension in extensions:\n        # Calculate CAP and SM\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        \n        # Calculate strength\n        strength = CAP - SM\n        \n        # Update strongest extension if this one is stronger\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    # Return the result in the specified format\n    return f\"{class_name}.{strongest_extension}\" if strongest_extension else None\n\n# Test cases\ndef test_Strongest_Extension():\n    assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('Test', ['abc', 'XYZ', 'aBcD']) == 'Test.XYZ'\n    assert Strongest_Extension('Example', ['a', 'B', 'C', 'D']) == 'Example.D'\n    assert Strongest_Extension('Empty', []) == 'Empty.None'  # Edge case with no extensions\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Strongest_Extension()"}
{"task_id": "HumanEval/154", "entry_point": "cycpattern_check", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring of the first word.\n\n    Parameters:\n    a (str): The first word.\n    b (str): The second word.\n\n    Returns:\n    bool: True if the second word or any of its rotations is a substring of the first word, False otherwise.\n    \n    Examples:\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    # Create a string that contains all rotations of b\n    b_rotations = b + b\n    # Check if a contains any rotation of b\n    return b in b_rotations and len(b) <= len(a)\n\n# Test cases to validate the function\ndef test_cycpattern_check():\n    assert cycpattern_check(\"abcd\", \"abd\") == False\n    assert cycpattern_check(\"hello\", \"ell\") == True\n    assert cycpattern_check(\"whassup\", \"psus\") == False\n    assert cycpattern_check(\"abab\", \"baa\") == True\n    assert cycpattern_check(\"efef\", \"eeff\") == False\n    assert cycpattern_check(\"himenss\", \"simen\") == True\n    assert cycpattern_check(\"abcde\", \"cde\") == True\n    assert cycpattern_check(\"abcde\", \"eabc\") == True\n    assert cycpattern_check(\"abcde\", \"fgh\") == False\n    assert cycpattern_check(\"\", \"\") == True  # Edge case: both strings are empty\n    assert cycpattern_check(\"abc\", \"\") == True  # Edge case: second string is empty\n    assert cycpattern_check(\"\", \"a\") == False  # Edge case: first string is empty\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_cycpattern_check()"}
{"task_id": "HumanEval/155", "entry_point": "even_odd_count", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): The integer to analyze.\n\n    Returns:\n        tuple: A tuple containing two integers: (count_of_even_digits, count_of_odd_digits)\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to its absolute value and then to a string\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each character in the string representation of the number\n    for char in num_str:\n        digit = int(char)  # Convert character back to integer\n        if digit % 2 == 0:\n            even_count += 1  # Increment even count\n        else:\n            odd_count += 1   # Increment odd count\n    \n    return (even_count, odd_count)\n\n# Test cases to validate the functionality of the even_odd_count function\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1), \"Test case -12 failed\"\n    assert even_odd_count(123) == (1, 2), \"Test case 123 failed\"\n    assert even_odd_count(0) == (1, 0), \"Test case 0 failed\"\n    assert even_odd_count(2468) == (4, 0), \"Test case 2468 failed\"\n    assert even_odd_count(13579) == (0, 5), \"Test case 13579 failed\"\n    assert even_odd_count(-24680) == (5, 0), \"Test case -24680 failed\"\n    assert even_odd_count(-111) == (0, 3), \"Test case -111 failed\"\n    assert even_odd_count(1001) == (2, 2), \"Test case 1001 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_even_odd_count()"}
{"task_id": "HumanEval/158", "entry_point": "find_max", "completion": "def find_max(words):\n    \"\"\"\n    Returns the word with the maximum number of unique characters from a list of strings.\n    If multiple words have the same maximum number of unique characters, the one that comes first\n    in lexicographical order is returned.\n\n    :param words: List of strings\n    :return: String with maximum unique characters or an empty string if the list is empty\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = set(word)  # Get unique characters\n        unique_count = len(unique_chars)  # Count of unique characters\n\n        # Check if this word has more unique characters or is lexicographically smaller\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < max_word):\n            max_word = word\n            max_unique_count = unique_count\n\n    return max_word\n\n# Test cases\ndef test_find_max():\n    assert find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    assert find_max([]) == \"\"  # Test with an empty list\n    assert find_max([\"abc\", \"def\", \"ghi\"]) == \"abc\"  # All have same unique count\n    assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\"  # banana has more unique characters\n    assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"  # All single characters, returns first\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_find_max()"}
{"task_id": "HumanEval/157", "entry_point": "right_angle_triangle", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    \n    A right-angled triangle is a triangle in which one angle is a right angle (90 degrees).\n    \n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n    \n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to identify the longest side\n    sides = sorted([a, b, c])\n    \n    # Check if the sum of the squares of the two shorter sides equals the square of the longest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True, \"Test case 1 failed\"\n    assert right_angle_triangle(5, 12, 13) == True, \"Test case 2 failed\"\n    assert right_angle_triangle(1, 1, 1) == False, \"Test case 3 failed\"\n    assert right_angle_triangle(1, 2, 3) == False, \"Test case 4 failed\"\n    assert right_angle_triangle(8, 6, 10) == True, \"Test case 5 failed\"\n    assert right_angle_triangle(0, 4, 5) == False, \"Test case 6 failed\"  # Invalid triangle\n    assert right_angle_triangle(-3, 4, 5) == False, \"Test case 7 failed\"  # Invalid triangle\n    assert right_angle_triangle(7, 24, 25) == True, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_right_angle_triangle()"}
{"task_id": "HumanEval/156", "entry_point": "int_to_mini_roman", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= number <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Input must be between 1 and 1000 inclusive.\")\n\n    # Mapping of integers to Roman numerals\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = []\n    \n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    \n    # Additional test cases\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(4) == 'iv'\n    assert int_to_mini_roman(5) == 'v'\n    assert int_to_mini_roman(9) == 'ix'\n    assert int_to_mini_roman(10) == 'x'\n    assert int_to_mini_roman(1000) == 'm'\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/162", "entry_point": "string_to_md5", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    >>> string_to_md5('') is None\n    >>> string_to_md5('Python') == '3b3b3c4c3c3c3c3c3c3c3c3c3c3c3c3c'\n    >>> string_to_md5('OpenAI') == 'f3b3b3c4c3c3c3c3c3c3c3c3c3c3c3c'\n    \"\"\"\n    if text == \"\":\n        return None\n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode('utf-8'))\n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/160", "entry_point": "do_algebra", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Validate input lengths\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be one less than the length of operand list.\")\n    \n    if len(operand) < 2:\n        raise ValueError(\"Operand list must contain at least two elements.\")\n    \n    # Construct the expression\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    # Evaluate the expression\n    try:\n        result = eval(expression)\n    except Exception as e:\n        raise ValueError(f\"Error evaluating expression: {e}\")\n    \n    return result\n\n# Test cases\ndef test_do_algebra():\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['*', '+'], [2, 3, 4]) == 10  # 2 * 3 + 4\n    assert do_algebra(['-', '/'], [10, 2, 2]) == 3  # 10 - 2 / 2\n    assert do_algebra(['+', '**'], [2, 3, 2]) == 11  # 2 + 3 ** 2\n    assert do_algebra(['//', '+'], [10, 3, 2]) == 5  # 10 // 3 + 2\n    \n    print(\"All tests passed!\")\n\n# Run tests\ntest_do_algebra()"}
{"task_id": "HumanEval/161", "entry_point": "solve", "completion": "def solve(s):\n    \"\"\"Process the input string s according to the specified rules.\n    \n    If the string contains letters, reverse the case of each letter.\n    If the string contains no letters, reverse the entire string.\n    \n    Args:\n        s (str): The input string to process.\n        \n    Returns:\n        str: The processed string with cases reversed or the entire string reversed.\n    \n    Examples:\n        solve(\"1234\")  # returns \"4321\"\n        solve(\"ab\")    # returns \"AB\"\n        solve(\"#a@C\")  # returns \"#A@c\"\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Check if there are any letters in the string\n    has_letters = any(c.isalpha() for c in s)\n    \n    if has_letters:\n        # Reverse case for letters\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # Reverse the entire string\n        result = s[::-1]\n    \n    return result\n\n# Test cases\ndef test_solve():\n    assert solve(\"1234\") == \"4321\", \"Test case 1 failed\"\n    assert solve(\"ab\") == \"AB\", \"Test case 2 failed\"\n    assert solve(\"#a@C\") == \"#A@c\", \"Test case 3 failed\"\n    assert solve(\"Hello World!\") == \"hELLO wORLD!\", \"Test case 4 failed\"\n    assert solve(\"1234!@#$\") == \"4321#$@!\", \"Test case 5 failed\"\n    assert solve(\"\") == \"\", \"Test case 6 failed\"\n    assert solve(\"!@#$%^&*()\") == \")(*&^%$#@!\", \"Test case 7 failed\"\n    assert solve(\"aBcDeFg\") == \"AbCdEfG\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_solve()"}
{"task_id": "HumanEval/159", "entry_point": "eat", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Parameters:\n    @number : int\n        The number of carrots that you have eaten.\n    @need : int\n        The number of carrots that you need to eat.\n    @remaining : int\n        The number of remaining carrots that exist in stock.\n    \n    Returns:\n    list\n        A list containing the total number of eaten carrots after your meals and the number of carrots left after your meals.\n    \n    Constraints:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n    \"\"\"\n    \n    # Calculate how many more carrots are needed\n    additional_needed = need - (remaining + number)\n    \n    if additional_needed <= 0:\n        # If we have enough carrots to meet the need\n        total_eaten = number + need\n        remaining_after_meal = remaining\n    else:\n        # If we do not have enough carrots\n        total_eaten = number + remaining\n        remaining_after_meal = 0\n    \n    return [total_eaten, remaining_after_meal]\n\n# Test cases to validate the functionality of the eat function\ndef test_eat():\n    assert eat(5, 6, 10) == [11, 4], \"Test case 1 failed\"\n    assert eat(4, 8, 9) == [12, 1], \"Test case 2 failed\"\n    assert eat(1, 10, 10) == [11, 0], \"Test case 3 failed\"\n    assert eat(2, 11, 5) == [7, 0], \"Test case 4 failed\"\n    assert eat(0, 0, 0) == [0, 0], \"Test case 5 failed\"\n    assert eat(1000, 0, 0) == [1000, 0], \"Test case 6 failed\"\n    assert eat(0, 1000, 1000) == [1000, 0], \"Test case 7 failed\"\n    assert eat(500, 500, 500) == [1000, 0], \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_eat()"}
{"task_id": "HumanEval/163", "entry_point": "generate_integers", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \n    Parameters:\n    a (int): A positive integer.\n    b (int): A positive integer.\n    \n    Returns:\n    List[int]: A list of even integers between a and b, inclusive.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(a, int) and isinstance(b, int)) or a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b must be positive integers.\")\n    \n    # Determine the range\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Generate the list of even integers\n    even_integers = [i for i in range(start, end + 1) if i % 2 == 0]\n    \n    return even_integers\n\n# Test cases\ndef test_generate_integers():\n    assert generate_integers(2, 8) == [2, 4, 6, 8], \"Test case 1 failed\"\n    assert generate_integers(8, 2) == [2, 4, 6, 8], \"Test case 2 failed\"\n    assert generate_integers(10, 14) == [10, 12, 14], \"Test case 3 failed\"\n    assert generate_integers(1, 1) == [], \"Test case 4 failed\"\n    assert generate_integers(3, 3) == [], \"Test case 5 failed\"\n    assert generate_integers(0, 5) == [], \"Test case 6 failed\"\n    assert generate_integers(5, 0) == [], \"Test case 7 failed\"\n    assert generate_integers(4, 4) == [4], \"Test case 8 failed\"\n    assert generate_integers(1, 10) == [2, 4, 6, 8, 10], \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_generate_integers()"}
