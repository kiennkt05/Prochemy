{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDA') == 'KDA'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdef') == ''\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 5: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW 123'\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('123abc!@#XYZ') == 'XYZ'\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses the vowels in the given string while keeping the other characters in their original positions.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\"\")\n    ''\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(next(vowel_iter))  # Replace with the next reversed vowel\n        else:\n            result.append(char)  # Keep the consonant or other character\n    \n    return ''.join(result)\n\n# Test cases\nif __name__ == \"__main__\":\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"racecar\") == \"racecar\"  # Palindrome case\n    assert reverse_vowels(\"\") == \"\"  # Empty string case\n    assert reverse_vowels(\"bcd\") == \"bcd\"  # No vowels case\n    assert reverse_vowels(\"A man, a plan, a canal: Panama\") == \"A man, a plan, a canal: Panama\"  # Mixed case with punctuation\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"\n    assert count_tuplex((None, None, 1, 2), None) == 2, \"Test Case 5 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if K is a valid index for the tuples\n    if any(len(tup) <= K for tup in test_list):\n        raise IndexError(f\"K={K} is out of bounds for the tuples in the list.\")\n\n    product = 1\n    for tup in test_list:\n        product *= tup[K]\n    \n    return product", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, else return None\n    return profit if profit > 0 else None", "result": "failed: ", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if not sublist:  # Check if the sublist is empty\n            raise ValueError(\"All sublists must contain at least one element.\")\n        first_elements.append(sublist[0])  # Append the first element of the sublist\n    \n    return first_elements", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n or if n, r, or p are negative.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    if n < 0 or r < 0 or p <= 0:\n        raise ValueError(\"n, r must be non-negative and p must be positive.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    return (numerator * mod_inverse(denominator, p)) % p\n\n# Test cases\nif __name__ == \"__main__\":\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 1) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    try:\n        ncr_modp(5, 6, 7)  # Should raise ValueError\n    except ValueError:\n        pass  # Expected behavior\n    try:\n        ncr_modp(-1, 2, 7)  # Should raise ValueError\n    except ValueError:\n        pass  # Expected behavior\n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Examples:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    >>> remove_splchar('Hello, World! 2023')\n    'HelloWorld2023'\n    >>> remove_splchar('1234567890')\n    '1234567890'\n    >>> remove_splchar('!@#$%^&*()')\n    ''\n    >>> remove_splchar('')\n    ''\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Use a list comprehension to filter out non-alphanumeric characters\n    return ''.join(char for char in text if char.isalnum())\n\n# Test cases\nif __name__ == \"__main__\":\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('') == ''\n    assert remove_splchar('abc123!@#') == 'abc123'\n    \n    print(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n    \"\"\"\n    if x == y == z:\n        return 3  # All three numbers are equal\n    elif x == y or y == z or x == z:\n        return 2  # Two numbers are equal\n    else:\n        return 0  # All numbers are different", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Update the prefix by comparing with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, no need to check further\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['single']) == 'single'\n    assert longest_common_prefix(['same', 'same', 'same']) == 'same'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Start with the first element as the maximum\n    for num in arr:\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n    return max_val", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return (0-indexed).\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Update the prefix by comparing with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, no need to check further\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_longest_prefix()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Update the prefix by comparing with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, no need to check further\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['single']) == 'single'\n    assert longest_common_prefix(['same', 'same', 'same']) == 'same'\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Test cases to validate the function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we return 0\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"  # Negative input\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"  # Negative input\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"  # Both negative\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_gcd()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    max_length = 0\n\n    # Build the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return max_length\n\n# Test cases\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0        # No common substring\nassert longest_common_substring('', 'abc') == 0           # One string is empty\nassert longest_common_substring('abc', '') == 0           # One string is empty\nassert longest_common_substring('', '') == 0              # Both strings are empty\nassert longest_common_substring('abcdxyz', 'xyzabcd') == 4  # 'abcd' is the longest common substring\nassert longest_common_substring('a', 'a') == 1            # Single character match\nassert longest_common_substring('a', 'b') == 0            # Single character no match\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: A new 2D list representing the rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid 2D list or if the rows are not of equal length.\n    \"\"\"\n    # Check if the input is a valid 2D list\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a 2D list (list of lists).\")\n    \n    if len(matrix) == 0 or any(len(row) != len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    # Rotate the matrix\n    n = len(matrix)\n    rotated = [[0] * n for _ in range(n)]  # Create a new n x n matrix\n\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == \\\n           [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    # Testing error handling\n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n    try:\n        rotate_matrix(\"not a matrix\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a 2D list (list of lists).\"\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_rotate_matrix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n\n    Example:\n    >>> longest_common_subsequence('abcde', 'ace')\n    3\n    \"\"\"\n    # Edge case: if either string is empty, the LCS is 0\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n# Test cases to validate the implementation\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3\n    assert longest_common_subsequence('abc', 'abc') == 3\n    assert longest_common_subsequence('abc', 'def') == 0\n    assert longest_common_subsequence('', 'abc') == 0\n    assert longest_common_subsequence('abc', '') == 0\n    assert longest_common_subsequence('a', 'a') == 1\n    assert longest_common_subsequence('a', 'b') == 0\n    assert longest_common_subsequence('abcdef', 'acf') == 3\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4\n    assert longest_common_subsequence('ABCBDAB', 'BDCAB') == 5\n\n# Run the test cases\ntest_longest_common_subsequence()\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
