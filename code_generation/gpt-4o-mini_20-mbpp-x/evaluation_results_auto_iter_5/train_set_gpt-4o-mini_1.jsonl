{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\nassert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\nassert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\nassert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\nassert profit_amount(2000, 2500) == 500.0, \"Test case 4 failed\"\nassert profit_amount(500, 600) == 100.0, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to remove all lowercase letters\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('HelloWorld') == 'HW'\n    assert remove_lowercase('Python3.8') == 'P3.'\n    assert remove_lowercase('123abcXYZ') == '123XYZ'\n    assert remove_lowercase('') == ''  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # No lowercase letters\n    assert remove_lowercase('lowercase') == ''  # All lowercase letters\n\n    try:\n        remove_lowercase(123)  # Invalid input type\n    except ValueError as e:\n        assert str(e) == \"Input must be a string.\"\n\n# Run the test cases\ntest_remove_lowercase()\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    TypeError: If the input is not a list of lists.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    result = []\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each item in the input must be a list.\")\n        if not sublist:\n            raise ValueError(\"Sublists must not be empty.\")\n        result.append(sublist[0])\n    \n    return result"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the multiplied values.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    return list(map(lambda x: x * n, nums))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10]\n    \n    # Test case 3\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]\n    \n    # Test case 4\n    assert ntimes_list([10], 10) == [100]\n    \n    # Test case 5\n    assert ntimes_list([], 5) == []\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of value in tuplex.\n\n    Raises:\n    TypeError: If tuplex is not a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 1) == 1, \"Test Case 5 Failed\"\n    assert count_tuplex((1, 2, 2, 2, 3), 2) == 3, \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Test cases\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 3, 4), (5, 6, 7), (8, 9, 10)], 1) == 162, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list is empty.\", \"Test case 4 failed\"\n    \n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        assert str(e) == \"Index 2 is out of bounds for tuple (1, 2).\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n\n    Examples:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"LeetCode\")\n    'Leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\" \")\n    ' '\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Reconstruct the string with reversed vowels\n    result = []\n    vowel_index = 0\n    \n    for char in str1:\n        if char in vowels:\n            result.append(vowel_list[vowel_index])\n            vowel_index += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"LeetCode\") == \"Leotcede\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\" \") == \" \"\n    assert reverse_vowels(\"\") == \"\"\n    assert reverse_vowels(\"racecar\") == \"recacar\"\n    assert reverse_vowels(\"1234\") == \"1234\"\n    assert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\"\n    assert reverse_vowels(\"a quick brown fox jumps over the lazy dog\") == \"e qick brawn fox jomps uver thi lezy deg\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3).\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    >>> test_three_equal(1, 1, 1)\n    3\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count equal numbers\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n\n    # If all three are equal, we should return 3, otherwise return the count of pairs\n    return 3 if equal_count == 3 else equal_count\n\n# Test cases\nif __name__ == \"__main__\":\n    assert test_three_equal(1, 1, 1) == 3\n    assert test_three_equal(1, 1, 2) == 2\n    assert test_three_equal(1, 2, 3) == 0\n    assert test_three_equal(2, 2, 2) == 3\n    assert test_three_equal(2, 2, 3) == 2\n    assert test_three_equal(1, 1, 1) == 3\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n\n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    result = (numerator * mod_inverse(denominator, p)) % p\n\n    return result\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6\nassert ncr_modp(5, 2, 7) == 3\nassert ncr_modp(10, 5, 100) == 10\nassert ncr_modp(0, 0, 10) == 1  # 0C0 is 1\nassert ncr_modp(5, 0, 10) == 1  # 5C0 is 1\nassert ncr_modp(5, 5, 10) == 1  # 5C5 is 1\nassert ncr_modp(10, 3, 17) == 120  # 10C3 % 17\nassert ncr_modp(10, 11, 13) == 0  # 10C11 is 0\nassert ncr_modp(100, 50, 1000000007) == 333333336  # Large case\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('No special chars!') == 'Nospecialchars'\n    assert remove_splchar('Spaces    and tabs\\tshould be removed.') == 'Spacesandtabsshouldberemoved'\n    assert remove_splchar('Special characters: !@#$%^&*()') == ''\n    assert remove_splchar('Mixed123!@#Text') == 'Mixed123Text'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as a reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix until it matches the start of the string\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: The GCD of the two numbers\n\n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test case\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert gcd(54, 24) == 6, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD of 0 and 0 is undefined, but we return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    \n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n    \n    return transposed\n\n# Test cases\ndef test_rotate_matrix():\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix([[1]]) == [[1]]\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    assert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == \\\n           [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n    \n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string or empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix until it matches the start of the string\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if all elements in the list are integers\n    for item in arr:\n        if not isinstance(item, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Initialize max_value with the first element\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([10, 20, 30, 40, 50]) == 50\n    assert max_value([5]) == 5\n    assert max_value([1, 3, 2, 5, 4]) == 5\n\n    # Edge cases\n    try:\n        print(max_value([]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty.\n\n    try:\n        print(max_value(\"not a list\"))  # Should raise TypeError\n    except TypeError as e:\n        print(e)  # Expected output: Input must be a list.\n\n    try:\n        print(max_value([1, 2, 'three']))  # Should raise TypeError\n    except TypeError as e:\n        print(e)  # Expected output: All elements in the list must be integers.\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \n    Example:\n    >>> longest_common_substring('abcdef', 'zcdemf')\n    3\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return max_length\n\n# Test cases\nif __name__ == \"__main__\":\n    assert longest_common_substring('abcdef', 'zcdemf') == 3\n    assert longest_common_substring('hello', 'yell') == 3\n    assert longest_common_substring('abc', 'abc') == 3\n    assert longest_common_substring('abc', 'def') == 0\n    assert longest_common_substring('', 'abc') == 0\n    assert longest_common_substring('abc', '') == 0\n    assert longest_common_substring('', '') == 0\n    assert longest_common_substring('a', 'a') == 1\n    assert longest_common_substring('a', 'b') == 0\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as a reference\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Compare the prefix with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3\nassert longest_common_subsequence('abc', 'abc') == 3\nassert longest_common_subsequence('abc', 'def') == 0\nassert longest_common_subsequence('abcde', 'abc') == 3\nassert longest_common_subsequence('', 'abc') == 0\nassert longest_common_subsequence('abc', '') == 0\nassert longest_common_subsequence('', '') == 0\nassert longest_common_subsequence('a', 'a') == 1\nassert longest_common_subsequence('a', 'b') == 0\n\nprint(\"All test cases passed!\")"}
