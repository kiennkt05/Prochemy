{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase letters removed.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    \n    return result\n\n# Test case to validate the function\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\n# Additional test cases\nprint(remove_lowercase('HelloWorld'))  # Expected: 'HW'\nprint(remove_lowercase('Python3.8'))   # Expected: 'P3.'\nprint(remove_lowercase('123abcXYZ'))    # Expected: '123XYZ'\nprint(remove_lowercase(''))              # Expected: ''\nprint(remove_lowercase('ALLUPPERCASE'))  # Expected: 'ALLUPPERCASE'\n\n# Uncomment the line below to test error handling\n# print(remove_lowercase(123))  # This should raise a ValueError", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Test the function with the provided assertion\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n\n# Additional test cases\nprint(count_tuplex((1, 2, 3, 1, 1, 4), 1))  # Should return 3\nprint(count_tuplex((1, 2, 3, 4, 5), 6))     # Should return 0\nprint(count_tuplex((), 1))                   # Should return 0\nprint(count_tuplex((1, 2, 3), 2))            # Should return 1", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Create an iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string by replacing vowels with reversed ones\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the function\nassert reverse_vowels(\"Python\") == \"Python\"  # No vowels to reverse\nassert reverse_vowels(\"hello\") == \"holle\"    # 'e' and 'o' are reversed\nassert reverse_vowels(\"leetcode\") == \"leotcede\"  # 'e', 'e', 'o' are reversed\nassert reverse_vowels(\"aA\") == \"Aa\"          # 'a' and 'A' are reversed\nassert reverse_vowels(\"\") == \"\"               # Empty string should return empty\n\n# Additional test cases\nassert reverse_vowels(\"racecar\") == \"racecar\"  # Palindrome with vowels\nassert reverse_vowels(\"1234\") == \"1234\"        # No vowels, should remain unchanged\nassert reverse_vowels(\"!@#$%^&*()\") == \"!@#$%^&*()\"  # Special characters, should remain unchanged\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of lists): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:  # This checks if the sublist has at least one element\n            first_elements.append(sublist[0])  # Append the first element to the result list\n        else:\n            first_elements.append(None)  # Append None if the sublist is empty\n    \n    return first_elements\n\n# Test the function with the provided test case\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\n# Additional test cases\nprint(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))  # Expected: [1, 3, 6]\nprint(Extract([[10], [20, 30], [], [40, 50]]))      # Expected: [10, 20, None, 40]\nprint(Extract([[], [], []]))                         # Expected: [None, None, None]\nprint(Extract([[1]]))                                # Expected: [1]", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \n    Example:\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    \n    return cleaned_text\n\n# Test the function with the provided test case\nassert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n\n# Additional test cases\nassert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\nassert remove_splchar('1234567890') == '1234567890'\nassert remove_splchar('') == ''\nassert remove_splchar('NoSpecialChars') == 'NoSpecialChars'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the function\nassert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\nassert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\nassert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\nassert profit_amount(500, 700) == 200.0, \"Test case 4 failed\"\nassert profit_amount(0, 100) == 100.0, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among x, y, and z\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Compare the integers and count the equal ones\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 for each pair)\n    return count\n\n# Test cases to validate the function\nassert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\nassert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\nassert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\nassert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\nassert test_three_equal(5, 5, 3) == 2, \"Test case 5 failed\"\nassert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: Test case 2 failed", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"The first argument must be a list of numbers.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be a number.\")\n    \n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    \n    return result\n\n# Test cases\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([0, 1, 2], 5) == [0, 5, 10]\nassert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]\nassert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Function to find the product of the Kth index in the given tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the Kth index.\n    K (int): The index of the elements to multiply.\n    \n    Returns:\n    int: The product of the elements at the Kth index.\n    \n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the Kth element to the product\n        product *= tup[K]\n    \n    return product\n\n# Test cases to validate the function\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665  # 7 * 5 * 19 = 665\nassert find_k_product([(2, 4, 6), (1, 3, 5), (8, 9, 10)], 1) == 108  # 4 * 3 * 9 = 108\nassert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15  # 1 * 3 * 5 = 15\n\n# Additional test cases\ntry:\n    print(find_k_product([], 0))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_k_product([(1, 2)], 2))  # Should raise IndexError\nexcept IndexError as e:\n    print(e)", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorials % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # If r is greater than n, return 0\n    if r > n:\n        return 0\n    \n    # Precompute factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    \n    return result\n\n# Test the function with the provided test case\nassert ncr_modp(10, 2, 13) == 6\n\n# Additional test cases\nassert ncr_modp(5, 2, 7) == 3  # 5C2 % 7 = 10 % 7 = 3\nassert ncr_modp(10, 3, 5) == 0  # 10C3 % 5 = 120 % 5 = 0\nassert ncr_modp(6, 3, 13) == 6   # 6C3 % 13 = 20 % 13 = 7\nassert ncr_modp(0, 0, 10) == 1   # 0C0 % 10 = 1\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, return it\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Function to find the maximum value in a list of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum integer in the list.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not arr:\n        raise ValueError(\"The input list is empty. Please provide a list with integers.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases\nassert max_value([1, 2, 3, 4, 5]) == 5  # Expected output: 5\nassert max_value([-1, -2, -3, -4, -5]) == -1  # Expected output: -1\nassert max_value([10, 20, 30, 40, 50]) == 50  # Expected output: 50\nassert max_value([5]) == 5  # Expected output: 5\nassert max_value([1, 3, 2, 5, 4]) == 5  # Expected output: 5\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return (0-indexed).\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Iterative calculation of Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update a and b to the next Fibonacci numbers\n    \n    return b  # b is now the n-th Fibonacci number\n\n# Test cases to validate the function\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(6) == 8\nassert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34\nassert fibonacci(10) == 55\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_prefix(['throne', 'throne']) == 'throne'\nassert longest_prefix([]) == ''\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix(['']) == ''\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Test the function with the provided test case\nassert gcd(48, 18) == 6\n\n# Additional test cases\nassert gcd(56, 98) == 14  # GCD of 56 and 98\nassert gcd(101, 10) == 1   # GCD of a prime number and a non-multiple\nassert gcd(0, 5) == 5      # GCD of 0 and a number\nassert gcd(5, 0) == 5      # GCD of a number and 0\nassert gcd(0, 0) == 0      # GCD of 0 and 0 (conventionally defined as 0)\n\nprint(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, we can return early\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return matrix  # Return the empty matrix as is\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    \n    # Step 2: Reverse each row\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    result = rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert result == [[7, 4, 1], [8, 5, 2], [9, 6, 3]], f\"Test case 1 failed: {result}\"\n\n    # Test case 2: Empty matrix\n    result = rotate_matrix([])\n    assert result == [], \"Test case 2 failed: Expected empty matrix\"\n\n    # Test case 3: Single element matrix\n    result = rotate_matrix([[1]])\n    assert result == [[1]], \"Test case 3 failed: Expected [[1]]\"\n\n    # Test case 4: 2x2 matrix\n    result = rotate_matrix([[1, 2], [3, 4]])\n    assert result == [[3, 1], [4, 2]], \"Test case 4 failed: Expected [[3, 1], [4, 2]]\"\n\n    # Test case 5: 3x3 matrix\n    result = rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert result == [[7, 4, 1], [8, 5, 2], [9, 6, 3]], \"Test case 5 failed: Expected [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\"\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    # Edge case: if either string is empty, the longest common substring is 0\n    if not s1 or not s2:\n        return 0\n    \n    # Initialize the 2D array for dynamic programming\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    max_length = 0  # Variable to keep track of the maximum length found\n    \n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length  # Return the length of the longest common substring\n\n# Test cases\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3  # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0  # No common substring\nassert longest_common_substring('', 'abc') == 0  # One string is empty\nassert longest_common_substring('abc', '') == 0  # One string is empty\nassert longest_common_substring('abcde', 'abc') == 3  # 'abc' is the longest common substring\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Test cases\nassert longest_common_subsequence('abcde', 'ace') == 3  # 'ace' is the LCS\nassert longest_common_subsequence('abc', 'abc') == 3    # 'abc' is the LCS\nassert longest_common_subsequence('abc', 'def') == 0     # No common subsequence\nassert longest_common_subsequence('a', 'a') == 1          # Single character match\nassert longest_common_subsequence('a', 'b') == 0          # No match\nassert longest_common_subsequence('', 'abc') == 0         # Empty string\nassert longest_common_subsequence('abc', '') == 0         # Empty string\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
