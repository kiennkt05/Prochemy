{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters (a-z) with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the correctness of the solution\nif __name__ == \"__main__\":\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAJSI') == 'KDAJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Mixed case with numbers and symbols\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ'\n    \n    # Test case 5: Empty string\n    assert remove_lowercase('') == ''\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract the vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Create an iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string by replacing vowels with the reversed ones\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the correctness of the solution\nassert reverse_vowels(\"Python\") == \"Python\"  # No vowels to reverse\nassert reverse_vowels(\"hello\") == \"holle\"    # 'e' and 'o' are reversed\nassert reverse_vowels(\"leetcode\") == \"leotcede\"  # 'e's and 'o' are reversed\nassert reverse_vowels(\"aA\") == \"Aa\"            # 'a' and 'A' are reversed\nassert reverse_vowels(\"racecar\") == \"racecar\"  # Palindrome, should remain the same\nassert reverse_vowels(\"\") == \"\"                 # Empty string should return empty\nassert reverse_vowels(\"1234\") == \"1234\"        # No vowels, should return the same string\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Check if there is a profit\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the function\nassert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\nassert profit_amount(1500, 1600) == 100, \"Test case 2 failed\"\nassert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\nassert profit_amount(2000, 2500) == 500, \"Test case 4 failed\"\nassert profit_amount(500, 600) == 100, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the correctness of the function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('No special chars!') == 'Nospecialchars'\n    assert remove_splchar('Spaces    and tabs\\tshould be removed.') == 'Spacesandtabsshouldberemoved'\n    assert remove_splchar('Special characters: !@#$%^&*()') == ''\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among x, y, and z\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check if x is equal to y\n    if x == y:\n        count += 1\n    \n    # Check if y is equal to z\n    if y == z:\n        count += 1\n    \n    # Check if x is equal to z\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we counted them twice, so we need to adjust\n    if x == y == z:\n        return 3  # All three are equal\n    \n    return count  # Return the count of equal pairs\n\n# Test cases to validate the function\nassert test_three_equal(1, 1, 1) == 3  # All three are equal\nassert test_three_equal(1, 2, 1) == 2  # Two are equal (1 and 1)\nassert test_three_equal(1, 2, 3) == 0  # No numbers are equal\nassert test_three_equal(2, 2, 3) == 2  # Two are equal (2 and 2)\nassert test_three_equal(3, 3, 3) == 3  # All three are equal\nassert test_three_equal(5, 5, 5) == 3  # All three are equal\nassert test_three_equal(4, 4, 4) == 3  # All three are equal\nassert test_three_equal(1, 1, 2) == 2  # Two are equal (1 and 1)\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Append the first element of the sublist to the result list\n            first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test cases to validate the correctness of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n    assert Extract([[10, 20], [30], [40, 50, 60]]) == [10, 30, 40], \"Test case 2 failed\"\n    assert Extract([[], [1, 2], [3]]) == [1, 3], \"Test case 3 failed\"  # Handling empty sublist\n    assert Extract([[], [], []]) == [], \"Test case 4 failed\"  # All sublists are empty\n    assert Extract([[1]]) == [1], \"Test case 5 failed\"  # Single element sublist\n    assert Extract([]) == [], \"Test case 6 failed\"  # Empty list\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the kth index in the given tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the kth elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the kth elements from each tuple.\n\n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    # Extract the kth elements from each tuple\n    kth_elements = [t[K] for t in test_list]\n    \n    # Calculate the product of the extracted elements\n    product = reduce(operator.mul, kth_elements, 1)\n    \n    return product\n\n# Test cases to validate the solution\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\nassert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96, \"Test case 2 failed\"\nassert find_k_product([(10, 20), (30, 40), (50, 60)], 0) == 15000, \"Test case 3 failed\"\nassert find_k_product([(1, 2, 3), (4, 5, 6)], 1) == 10, \"Test case 4 failed\"\nassert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test case to validate the function\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases for further validation\nassert ntimes_list([0, 1, 2], 5) == [0, 5, 10]  # Testing with zero\nassert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]  # Testing with negative numbers\nassert ntimes_list([10, 20, 30], 0) == [0, 0, 0]  # Testing with zero multiplier\nassert ntimes_list([], 3) == []  # Testing with an empty list\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # If r is greater than n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6, \"Test case failed!\"\nprint(\"Test case passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases to validate the solution\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\nassert rotate_matrix([[1]]) == [[1]]  # Single element matrix\nassert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]  # 2x2 matrix\nassert rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == \\\n    [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]  # 4x4 matrix\nassert rotate_matrix([]) == []  # Empty matrix", "result": "failed: list index out of range", "passed": false}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a is the GCD\n\n# Test the function with the provided assertion\nassert gcd(48, 18) == 6\n\n# Additional test cases to validate the function\ndef test_gcd():\n    assert gcd(54, 24) == 6  # GCD of 54 and 24 is 6\n    assert gcd(101, 10) == 1  # GCD of 101 and 10 is 1 (they are coprime)\n    assert gcd(0, 5) == 5  # GCD of 0 and 5 is 5\n    assert gcd(5, 0) == 5  # GCD of 5 and 0 is 5\n    assert gcd(0, 0) == 0  # GCD of 0 and 0 is conventionally defined as 0\n\n# Run the test cases\ntest_gcd()\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for s in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while not s.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['throne', 'throne']) == 'throne'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list starting from the second string\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by removing the last character\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['throne', 'throne']) == 'throne'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    # Use the count method of the tuple to find the number of occurrences of the value\n    return tuplex.count(value)\n\n# Test cases to validate the correctness of the function\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\nassert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test case 2 failed\"\nassert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test case 3 failed\"\nassert count_tuplex((), 1) == 0, \"Test case 4 failed\"  # Empty tuple\nassert count_tuplex((5, 5, 5, 5, 5), 5) == 5, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Function to find the maximum value in a list of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum integer in the list.\n    \n    Raises:\n    ValueError: If the list is empty.\n    \"\"\"\n    # Check if the list is empty and raise an error if it is\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Use the built-in max function to find the maximum value\n    return max(arr)\n\n# Test cases to validate the correctness of the max_value function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive integers\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    \n    # Test case 2: Including negative integers\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    \n    # Test case 3: Mixed positive and negative integers\n    assert max_value([-1, 0, 1, 2, 3]) == 3, \"Test case 3 failed\"\n    \n    # Test case 4: Single element list\n    assert max_value([42]) == 42, \"Test case 4 failed\"\n    \n    # Test case 5: List with all identical elements\n    assert max_value([7, 7, 7, 7]) == 7, \"Test case 5 failed\"\n    \n    # Test case 6: Empty list should raise ValueError\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    # Handle the base cases\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b  # b now holds the n-th Fibonacci number\n\n# Test cases to validate the correctness of the solution\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, increment the length of the common substring\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length if needed\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the solution\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0        # No common substring\nassert longest_common_substring('abcdxyz', 'xyzabcd') == 4  # 'abcd' is the longest common substring\nassert longest_common_substring('', 'abc') == 0            # Empty string case\nassert longest_common_substring('abc', '') == 0            # Empty string case\nassert longest_common_substring('', '') == 0               # Both strings empty", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\nassert longest_prefix(['throne', 'dungeon']) == ''\nassert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\nassert longest_prefix([]) == ''\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix(['']) == ''\nassert longest_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list starting from the second string\n    for s in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while not s.startswith(prefix):\n            # Shorten the prefix by removing the last character\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['throne', 'throne']) == 'throne'\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Get the lengths of both strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to validate the solution\nassert longest_common_subsequence('abcde', 'ace') == 3  # 'ace' is the LCS\nassert longest_common_subsequence('abc', 'abc') == 3    # 'abc' is the LCS\nassert longest_common_subsequence('abc', 'def') == 0    # No common subsequence\nassert longest_common_subsequence('abcdgh', 'aedfhr') == 3  # 'adh' is the LCS\nassert longest_common_subsequence('aggtab', 'gxtxayb') == 4  # 'gtab' is the LCS\nassert longest_common_subsequence('', 'abc') == 0          # Empty string case\nassert longest_common_subsequence('abc', '') == 0          # Empty string case", "result": "passed", "passed": true}
