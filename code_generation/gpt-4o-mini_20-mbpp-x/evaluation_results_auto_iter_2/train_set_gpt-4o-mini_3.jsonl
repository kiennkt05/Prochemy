{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test case to validate the functionality\nassert profit_amount(1500, 1200) == None, \"Test case failed: Expected None for no profit\"\nassert profit_amount(1500, 1800) == 300, \"Test case failed: Expected profit of 300\"\nassert profit_amount(1000, 1000) == None, \"Test case failed: Expected None for no profit\"\n\n# If the assertions pass, we can print a success message\nprint(\"All test cases passed successfully.\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Function to find the product of the elements at the kth index in the given tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n    \n    Returns:\n    int: The product of the elements at the kth index.\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Multiply the product by the element at the kth index of the tuple\n        product *= tup[K]\n    \n    return product\n\n# Test case to validate the function\nassert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n\n# If the assertion passes, we can print a success message\nprint(\"Test case passed successfully!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123', \"Test Case 1 Failed\"\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023', \"Test Case 2 Failed\"\n    assert remove_splchar('1234567890') == '1234567890', \"Test Case 3 Failed\"\n    assert remove_splchar('') == '', \"Test Case 4 Failed\"\n    assert remove_splchar('!@#$%^&*()') == '', \"Test Case 5 Failed\"\n    assert remove_splchar('abcDEF123') == 'abcDEF123', \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Execute the test function\ntest_remove_splchar()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test the function with the provided assertion\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# If the assertion passes, print a success message\nprint(\"Function works correctly!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    # Use the count method of the tuple to find the number of occurrences of the value\n    return tuplex.count(value)\n\n# Test case to validate the functionality of the count_tuplex function\nif __name__ == \"__main__\":\n    # Example test case\n    result = count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    print(result)  # Expected output: 3\n\n    # Additional test cases\n    assert count_tuplex((1, 2, 3, 1, 1, 4), 1) == 3  # 1 appears 3 times\n    assert count_tuplex((5, 5, 5, 5, 5), 5) == 5      # 5 appears 5 times\n    assert count_tuplex((1, 2, 3), 4) == 0            # 4 does not appear\n    assert count_tuplex((), 1) == 0                   # Empty tuple, should return 0\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test the function with the provided assertion\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\n# If the assertion passes, we can print a success message\nprint(\"Function works correctly, lowercase letters removed.\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Use a list comprehension to get the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1\n    result = Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    print(result)  # Expected output: [1, 3, 6]\n\n    # Test case 2: Handling empty sublists\n    result = Extract([[1, 2], [], [6, 7, 8, 9]])\n    print(result)  # Expected output: [1, 6]\n\n    # Test case 3: All sublists are empty\n    result = Extract([[], [], []])\n    print(result)  # Expected output: []\n\n    # Test case 4: Single sublist\n    result = Extract([[42]])\n    print(result)  # Expected output: [42]\n\n    # Test case 5: Mixed empty and non-empty sublists\n    result = Extract([[], [1], [2, 3], [], [4]])\n    print(result)  # Expected output: [1, 2, 4]"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using the formula nCr = n! / (r! * (n - r)!)\n    and modular arithmetic.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6\n\n# Additional test cases\nprint(ncr_modp(5, 2, 7))  # Expected output: 3\nprint(ncr_modp(10, 3, 13)) # Expected output: 4\nprint(ncr_modp(20, 10, 1000)) # Expected output: 576"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Create a list to hold the vowels found in the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Initialize an index to track the position in the vowel_list\n    vowel_index = len(vowel_list) - 1\n    \n    # Convert the string to a list to allow modification\n    str_list = list(str1)\n    \n    # Iterate through the string and replace vowels with reversed ones\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            # Replace the vowel with the corresponding one from the reversed list\n            str_list[i] = vowel_list[vowel_index]\n            vowel_index -= 1  # Move to the next vowel in the reversed list\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality\nassert reverse_vowels(\"Python\") == \"Python\"  # No vowels to reverse\nassert reverse_vowels(\"hello\") == \"holle\"    # 'e' and 'o' are reversed\nassert reverse_vowels(\"leetcode\") == \"leotcede\"  # 'e's and 'o' are reversed\nassert reverse_vowels(\"aA\") == \"Aa\"            # 'a' and 'A' are reversed\nassert reverse_vowels(\"racecar\") == \"racecar\"  # Palindrome, should remain the same\n\n# Demonstration of function execution\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    result = reverse_vowels(test_string)\n    print(f\"Original: {test_string} -> Reversed Vowels: {result}\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among x, y, and z\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check if x is equal to y\n    if x == y:\n        count += 1\n    \n    # Check if y is equal to z\n    if y == z:\n        count += 1\n    \n    # Check if x is equal to z\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we counted them twice, so we need to adjust\n    if count == 3:\n        return 3  # All three are equal\n    elif count == 2:\n        return 2  # Two are equal\n    else:\n        return 0  # No numbers are equal\n\n# Test cases to validate the functionality of the function\nassert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\nassert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\nassert test_three_equal(1, 2, 2) == 2, \"Test case 3 failed\"\nassert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\nassert test_three_equal(2, 2, 2) == 3, \"Test case 5 failed\"\nassert test_three_equal(5, 5, 5) == 3, \"Test case 6 failed\"\nassert test_three_equal(5, 5, 6) == 2, \"Test case 7 failed\"\nassert test_three_equal(5, 6, 6) == 2, \"Test case 8 failed\"\nassert test_three_equal(7, 8, 9) == 0, \"Test case 9 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test case to validate the functionality\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n# If the assertion passes, the function works as expected.\nprint(\"Matrix rotated successfully.\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n\n# Additional test cases\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    # Ensure that a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Apply the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    \n    return a  # When b is 0, a contains the GCD\n\n# Test case\nassert gcd(48, 18) == 6  # This should pass without any assertion error\n\n# Additional test cases for validation\nassert gcd(56, 98) == 14  # GCD of 56 and 98 is 14\nassert gcd(101, 10) == 1   # GCD of 101 and 10 is 1 (they are coprime)\nassert gcd(0, 5) == 5      # GCD of 0 and 5 is 5\nassert gcd(5, 0) == 5      # GCD of 5 and 0 is 5\nassert gcd(0, 0) == 0      # GCD of 0 and 0 is defined as 0\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n\n# Additional test cases\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix is empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix([]) == ''\nassert longest_prefix(['']) == ''\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Function to find the maximum value in a list of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum integer in the list.\n    \n    Raises:\n    ValueError: If the list is empty.\n    \"\"\"\n    # Check if the list is empty and raise an error if it is\n    if not arr:\n        raise ValueError(\"The list is empty. Cannot determine maximum value.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of the max_value function\nassert max_value([1, 2, 3, 4, 5]) == 5  # Expected output: 5\nassert max_value([-1, -2, -3, -4, -5]) == -1  # Expected output: -1\nassert max_value([10, 20, 30, 40, 50]) == 50  # Expected output: 50\nassert max_value([5]) == 5  # Expected output: 5\nassert max_value([1, 3, 2, 5, 4]) == 5  # Expected output: 5\n\n# Uncomment the following line to test the ValueError for an empty list\n# print(max_value([]))  # This should raise a ValueError"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    # Handle the base cases\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b  # b now holds the n-th Fibonacci number\n\n# Test cases to validate the functionality of the fibonacci function\nif __name__ == \"__main__\":\n    # Test cases\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n\n# Additional test cases\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['throne', 'dungeon']) == ''\nassert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\nassert longest_common_prefix([]) == ''\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Iterate through each character of both strings\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, update the dp array\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                # Update max_length if we found a longer substring\n                max_length = max(max_length, dp[i][j])\n            else:\n                # If characters do not match, set the length to 0\n                dp[i][j] = 0\n    \n    return max_length\n\n# Test cases to validate the functionality of the code\nassert longest_common_substring('abcdef', 'zcdemf') == 3  # 'cde' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'xyz') == 0        # No common substring\nassert longest_common_substring('abcdxyz', 'xyzabcd') == 4 # 'abcd' is the longest common substring\nassert longest_common_substring('', 'abc') == 0           # Empty string case\nassert longest_common_substring('abc', '') == 0           # Empty string case\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the table in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return table[m][n]\n\n# Test cases to validate the functionality\nassert longest_common_subsequence('abcde', 'ace') == 3  # 'ace' is the LCS\nassert longest_common_subsequence('abc', 'abc') == 3    # 'abc' is the LCS\nassert longest_common_subsequence('abc', 'def') == 0     # No common subsequence\nassert longest_common_subsequence('abcdgh', 'aedfhr') == 3  # 'adh' is the LCS\nassert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4  # 'GTAB' is the LCS\n\nprint(\"All test cases passed!\")"}
