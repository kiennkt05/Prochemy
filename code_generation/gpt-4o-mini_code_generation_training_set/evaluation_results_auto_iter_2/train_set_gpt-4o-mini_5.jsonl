{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([-1, -2, -3])\n    3\n    >>> count_negative_numbers([])\n    0\n    >>> count_negative_numbers([0, 1, 2, 3])\n    0\n    >>> count_negative_numbers([-1, 0, 1])\n    1\n    \"\"\"\n    return sum(1 for num in nums if num < 0)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0\n    \n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test with a normal list of numbers\n    assert calculate_mean([1.0, 2.0, 3.0, 4.0, 5.0]) == 3.0\n    # Test with negative numbers\n    assert calculate_mean([-1.0, -2.0, -3.0]) == -2.0\n    # Test with a mix of positive and negative numbers\n    assert calculate_mean([-1.0, 0.0, 1.0]) == 0.0\n    # Test with a single number\n    assert calculate_mean([5.0]) == 5.0\n    # Test with an empty list\n    assert calculate_mean([]) == 0.0\n    # Test with floating point precision\n    assert abs(calculate_mean([1.1, 2.2, 3.3]) - 2.2) < 1e-9\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple occurrences\n    assert count_elements([1, 2, 3, 4, 2, 2], 2) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Target not in the list\n    assert count_elements([1, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Target is the only element in the list\n    assert count_elements([5], 5) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Empty list\n    assert count_elements([], 1) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: All elements are the target\n    assert count_elements([7, 7, 7, 7], 7) == 4, \"Test case 5 failed\"\n    \n    # Test case 6: Negative numbers\n    assert count_elements([-1, -2, -3, -1, -1], -1) == 3, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    This function takes a list of strings and returns a list of strings that are duplicates.\n    \n    :param strings: List of strings to check for duplicates\n    :return: List of duplicate strings\n    \"\"\"\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count each string in the input list\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # Extract strings that have a count greater than 1\n    duplicates = [string for string, count in count_dict.items() if count > 1]\n    \n    return duplicates\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with duplicates\n    assert find_duplicates([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]) == [\"apple\", \"banana\"]\n    \n    # Test case 2: No duplicates\n    assert find_duplicates([\"apple\", \"banana\", \"orange\"]) == []\n    \n    # Test case 3: All duplicates\n    assert find_duplicates([\"apple\", \"apple\", \"apple\"]) == [\"apple\"]\n    \n    # Test case 4: Mixed case sensitivity\n    assert find_duplicates([\"Apple\", \"apple\", \"APPLE\"]) == []\n    \n    # Test case 5: Empty list\n    assert find_duplicates([]) == []\n    \n    # Test case 6: Special characters\n    assert find_duplicates([\"!@#\", \"!@#\", \"abc\", \"abc\", \"123\"]) == [\"!@#\", \"abc\"]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive zeros\n    current_count = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_count += 1  # Increment the count for consecutive zeros\n        else:\n            max_count = max(max_count, current_count)  # Update max count if needed\n            current_count = 0  # Reset current count if a non-zero is encountered\n\n    # Final check in case the list ends with zeros\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Test cases to validate the implementation\ndef test_count_consecutive_zeros():\n    assert count_consecutive_zeros([0, 0, 1, 0, 0, 0, 2, 0]) == 3  # Three consecutive zeros\n    assert count_consecutive_zeros([1, 2, 3]) == 0  # No zeros\n    assert count_consecutive_zeros([0, 0, 0, 0]) == 4  # All zeros\n    assert count_consecutive_zeros([]) == 0  # Empty list\n    assert count_consecutive_zeros([1, 0, 0, 1, 0, 0, 0, 0]) == 4  # Four consecutive zeros at the end\n    assert count_consecutive_zeros([0, 1, 0, 0, 0, 1, 0]) == 3  # Three consecutive zeros in the middle\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_consecutive_zeros()"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of integers from 0 to n.\n    \n    Args:\n    nums (List[int]): A list of unique integers in the range [0, n].\n    \n    Returns:\n    int: The missing integer in the range.\n    \"\"\"\n    n = len(nums)\n    # Calculate the expected sum of numbers from 0 to n\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(nums)\n    # The missing number is the difference between expected and actual sum\n    return expected_sum - actual_sum\n\n# Test cases to validate the implementation\ndef test_find_missing_number():\n    assert find_missing_number([0, 1, 2, 3, 5]) == 4  # Missing 4\n    assert find_missing_number([3, 0, 1]) == 2          # Missing 2\n    assert find_missing_number([9,6,4,2,3,5,7,0,1]) == 8  # Missing 8\n    assert find_missing_number([0]) == 1                  # Missing 1\n    assert find_missing_number([]) == 0                   # Missing 0 in an empty list\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_missing_number()"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers and returns the sum of all negative numbers in the list.\n\n    :param numbers: List of integers\n    :return: Sum of negative integers\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n            \n    return negative_sum\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1: A mix of positive and negative numbers\n    assert sum_negative_numbers([1, -2, 3, -4, 5]) == -6, \"Test case 1 failed\"\n    \n    # Test case 2: All positive numbers\n    assert sum_negative_numbers([1, 2, 3, 4, 5]) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: All negative numbers\n    assert sum_negative_numbers([-1, -2, -3, -4, -5]) == -15, \"Test case 3 failed\"\n    \n    # Test case 4: No numbers\n    assert sum_negative_numbers([]) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Mixed numbers with zero\n    assert sum_negative_numbers([-1, 0, 1, -2, 2]) == -3, \"Test case 5 failed\"\n    \n    # Test case 6: Large numbers\n    assert sum_negative_numbers([-1000, 1000, -500, 500]) == -1500, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to list and return\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with duplicates\n    assert find_duplicates([1.0, 2.0, 3.0, 2.0, 1.0]) == [1.0, 2.0]\n    \n    # Test case 2: No duplicates\n    assert find_duplicates([1.0, 2.0, 3.0]) == []\n    \n    # Test case 3: All duplicates\n    assert find_duplicates([1.0, 1.0, 1.0]) == [1.0]\n    \n    # Test case 4: Mixed types of duplicates\n    assert find_duplicates([1.0, 2.0, 1.0, 3.0, 2.0, 4.0]) == [1.0, 2.0]\n    \n    # Test case 5: Empty list\n    assert find_duplicates([]) == []\n    \n    # Test case 6: Large numbers\n    assert find_duplicates([1e10, 1e10, 2e10, 3e10, 2e10]) == [1e10, 2e10]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    return n * n\n\n# Test cases to validate the implementation\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    assert car_race_collision(100) == 10000, \"Test case 100 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_car_race_collision()"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    \"\"\"\n    This function takes a list of integers (0s and 1s) and returns the maximum number of consecutive 1's.\n    \n    :param nums: List[int] - A list containing only 0s and 1s.\n    :return: int - The maximum count of consecutive 1's in the list.\n    \"\"\"\n    max_count = 0  # Variable to keep track of the maximum count of consecutive 1's\n    current_count = 0  # Variable to count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment the count if the current number is 1\n            max_count = max(max_count, current_count)  # Update max_count if current_count is greater\n        else:\n            current_count = 0  # Reset current_count if the number is 0\n\n    return max_count  # Return the maximum count of consecutive 1's\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with mixed 0s and 1s\n    assert find_max_consecutive_ones([1, 1, 0, 1, 1, 1]) == 3\n    # Test case 2: All 1s\n    assert find_max_consecutive_ones([1, 1, 1, 1]) == 4\n    # Test case 3: All 0s\n    assert find_max_consecutive_ones([0, 0, 0, 0]) == 0\n    # Test case 4: Alternating 0s and 1s\n    assert find_max_consecutive_ones([1, 0, 1, 0, 1]) == 1\n    # Test case 5: Leading and trailing 1s\n    assert find_max_consecutive_ones([1, 1, 0, 0, 1, 1, 1]) == 3\n    # Test case 6: Empty list\n    assert find_max_consecutive_ones([]) == 0\n    # Test case 7: Single element list\n    assert find_max_consecutive_ones([1]) == 1\n    assert find_max_consecutive_ones([0]) == 0\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 0)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate its digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # Calculate effective shift\n    effective_shift = shift % num_digits if num_digits > 0 else 0\n    \n    # If effective shift is 0, return the original string\n    if effective_shift == 0:\n        return str_x\n    \n    # Perform the circular shift\n    shifted = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False\n    \n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:  # No need to check further if product exceeds a\n                    break\n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True, because 2 * 3 * 5 = 30\nprint(is_multiply_prime(60))  # True, because 2 * 3 * 10 (10 is not prime, so False)\nprint(is_multiply_prime(42))  # True, because 2 * 3 * 7 = 42\nprint(is_multiply_prime(1))   # False, no product of primes can be 1\nprint(is_multiply_prime(97))  # False, 97 is prime but not a product of three primes\nprint(is_multiply_prime(100)) # False, 100 is not less than 100\nprint(is_multiply_prime(70))  # True, because 2 * 5 * 7 = 70"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix is a palindrome, we take the prefix before it\n            prefix = string[:i]\n            # Append the reverse of the prefix to the original string\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('race') == 'racecar'\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('ab') == 'aba'\n    assert make_palindrome('abc') == 'abcba'\n    assert make_palindrome('abcd') == 'abcba'\n    assert make_palindrome('level') == 'level'\n    assert make_palindrome('deified') == 'deified'\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation\n\n# Test cases to validate the implementation\ndef test_solve():\n    assert solve(1000) == \"1\", \"Test case 1 failed\"\n    assert solve(150) == \"110\", \"Test case 2 failed\"\n    assert solve(147) == \"1100\", \"Test case 3 failed\"\n    assert solve(0) == \"0\", \"Test case 4 failed\"  # Edge case for N = 0\n    assert solve(9999) == \"36\", \"Test case 5 failed\"  # Edge case for N = 9999\n    assert solve(1234) == \"110\", \"Test case 6 failed\"  # Normal case\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solve()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Function to determine if an integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    '''\n    # Calculate the cube root of the absolute value of a\n    n = round(abs(a) ** (1/3))\n    \n    # Check if n cubed is equal to the absolute value of a\n    return n**3 == abs(a)\n\n# Test cases to validate the implementation\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-27) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    assert iscube(8) == True, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping the case of all letters\n    and replacing all vowels with the letter that appears 2 places\n    ahead in the English alphabet.\n\n    Parameters:\n    message (str): The input message to encode.\n\n    Returns:\n    str: The encoded message.\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacements = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            swapped_char = char.swapcase()\n            # Replace vowel if it is one\n            if swapped_char in vowel_replacements:\n                swapped_char = vowel_replacements[swapped_char]\n            encoded_message.append(swapped_char)\n        else:\n            # If it's not a letter, keep it as is\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test case 1\n    print(encode('test'))  # Expected output: 'TGST'\n    \n    # Test case 2\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'\n    \n    # Additional test cases\n    print(encode('Hello World'))  # Expected output: 'hGNNQ WQTKD'\n    print(encode('Python Programming'))  # Expected output: 'pYTHON PRQJRMKNG'\n    print(encode('AEIOUaeiou'))  # Expected output: 'CGKQWcgkqw'\n    print(encode('1234!@#$'))  # Expected output: '1234!@#$' (non-letter characters remain unchanged)"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import bisect\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    The polynomial is defined as:\n    f(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    \n    The function returns a single root, guaranteed to exist due to the \n    constraints of the input. The input list xs must have an even number \n    of coefficients and the largest non-zero coefficient guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Define a function that we want to find the root for\n    def f(x):\n        return poly(xs, x)\n    \n    # Use the bisection method to find a root\n    # We can start with a reasonable interval, e.g., [-10, 10]\n    root = bisect(f, -10, 10)\n    return root\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Linear polynomial\n    assert round(find_zero([1, 2]), 2) == -0.5, \"Test case 1 failed\"\n    \n    # Test case 2: Cubic polynomial with known roots\n    assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0, \"Test case 2 failed\"\n    \n    # Test case 3: Quadratic polynomial with a double root\n    assert round(find_zero([1, 0, -1]), 2) == 1.0, \"Test case 3 failed\"  # f(x) = x^2 - 1\n    \n    # Test case 4: Higher degree polynomial\n    assert round(find_zero([1, 0, -4, 0, 3]), 2) == 1.0, \"Test case 4 failed\"  # f(x) = x^4 - 4x^2 + 3\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        end_with_1 = 1  # Only the number '1'\n    else:\n        end_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n == 1:\n        start_end_with_1 = 0  # No overlap for n = 1\n    else:\n        start_end_with_1 = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_end_with_1\n    \n    return total_count\n\n# Test cases\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only the number '1'\n    assert starts_one_ends(2) == 19  # 10-19 (start with 1) + 1, 11 (end with 1) - 1 (overlap)\n    assert starts_one_ends(3) == 271  # 100-199 (start with 1) + 101, 111, 121, ..., 191 (end with 1) - 10 (overlap)\n    assert starts_one_ends(4) == 3701  # 1000-1999 (start with 1) + 1001, 1011, ..., 1991 (end with 1) - 100 (overlap)\n    assert starts_one_ends(5) == 47001  # 10000-19999 (start with 1) + 10001, ..., 19991 (end with 1) - 1000 (overlap)\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_starts_one_ends()"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases to validate the implementation\ndef test_skjkasdkd():\n    assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n    assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n    assert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n    assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n    assert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n    assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n    assert skjkasdkd([]) == 0  # Edge case: empty list\n    assert skjkasdkd([4, 6, 8, 10]) == 0  # Edge case: no primes\n\n# Run the test cases\ntest_skjkasdkd()\nprint(\"All test cases passed!\")"}
