{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # n is the length of the list\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number\n\n# Test cases to validate the solution\ndef test_find_missing_number():\n    assert find_missing_number([0, 1, 2, 3, 5]) == 4, \"Test case 1 failed\"\n    assert find_missing_number([3, 0, 1]) == 2, \"Test case 2 failed\"\n    assert find_missing_number([9,6,4,2,3,5,7,0,1]) == 8, \"Test case 3 failed\"\n    assert find_missing_number([0]) == 1, \"Test case 4 failed\"\n    assert find_missing_number([]) == 0, \"Test case 5 failed\"  # Edge case: no numbers, missing is 0\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_missing_number()", "result": "failed: ", "passed": false}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Sums all negative numbers in the provided list of integers.\n\n    Args:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of all negative integers in the list. If there are no negative integers, returns 0.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if it's negative\n    \n    return negative_sum  # Return the total sum of negative numbers", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0\n    \n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)       # Get the count of numbers\n    mean = total_sum / count   # Calculate the mean\n    return mean\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with a normal list of numbers\n    print(calculate_mean([1.0, 2.0, 3.0, 4.0, 5.0]))  # Expected output: 3.0\n    # Test with negative numbers\n    print(calculate_mean([-1.0, -2.0, -3.0]))  # Expected output: -2.0\n    # Test with a mix of positive and negative numbers\n    print(calculate_mean([-1.0, 0.0, 1.0]))  # Expected output: 0.0\n    # Test with an empty list\n    print(calculate_mean([]))  # Expected output: 0.0\n    # Test with a single number\n    print(calculate_mean([10.0]))  # Expected output: 10.0\n    # Test with floating point precision\n    print(calculate_mean([0.1, 0.2, 0.3]))  # Expected output: 0.2", "result": "failed: ", "passed": false}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count each string's occurrences\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # Collect strings that appear more than once\n    duplicates = [string for string, count in count_dict.items() if count > 1]\n    \n    return duplicates\n\n# Test cases to validate the function\ndef test_find_duplicates():\n    # Test case 1: Basic duplicates\n    assert find_duplicates([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]) == [\"apple\", \"banana\"]\n    \n    # Test case 2: No duplicates\n    assert find_duplicates([\"cat\", \"dog\", \"fish\"]) == []\n    \n    # Test case 3: All duplicates\n    assert find_duplicates([\"a\", \"a\", \"a\", \"a\"]) == [\"a\"]\n    \n    # Test case 4: Mixed case sensitivity\n    assert find_duplicates([\"Hello\", \"hello\", \"HELLO\", \"hello\"]) == [\"hello\"]\n    \n    # Test case 5: Empty list\n    assert find_duplicates([]) == []\n    \n    # Test case 6: Special characters\n    assert find_duplicates([\"!@#\", \"!@#\", \"$%^\", \"$%^\", \"!@#\"]) == [\"!@#\", \"$%^\"]\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_duplicates()", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    seen = set()        # To track numbers we have seen\n    duplicates = set()  # To track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to list and return\n\n# Test cases to validate the function\ndef test_find_duplicates():\n    assert find_duplicates([1.0, 2.0, 3.0, 1.0, 2.0]) == [1.0, 2.0]\n    assert find_duplicates([1.5, 2.5, 3.5, 4.5]) == []\n    assert find_duplicates([1.0, 1.0, 1.0, 1.0]) == [1.0]\n    assert find_duplicates([]) == []\n    assert find_duplicates([1.0, 2.0, 3.0, 4.0, 5.0]) == []\n    assert find_duplicates([1.0, 2.0, 2.0, 3.0, 3.0, 3.0]) == [2.0, 3.0]\n    assert find_duplicates([0.1, 0.2, 0.1, 0.3, 0.2]) == [0.1, 0.2]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_duplicates()", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To store the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current count if the number is 1\n        else:\n            max_count = max(max_count, current_count)  # Update max count if needed\n            current_count = 0  # Reset current count for the next streak\n\n    # Final check in case the array ends with a streak of 1's\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Test cases to validate the function\ndef test_find_max_consecutive_ones():\n    assert find_max_consecutive_ones([1, 1, 0, 1, 1, 1]) == 3, \"Test case 1 failed\"\n    assert find_max_consecutive_ones([1, 0, 1, 1, 0, 1]) == 2, \"Test case 2 failed\"\n    assert find_max_consecutive_ones([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert find_max_consecutive_ones([1, 1, 1, 1]) == 4, \"Test case 4 failed\"\n    assert find_max_consecutive_ones([]) == 0, \"Test case 5 failed\"\n    assert find_max_consecutive_ones([0, 1, 1, 0, 1, 1, 1, 0, 1]) == 3, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_max_consecutive_ones()", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current streak of zeros\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current streak is greater\n            current_zeros = 0  # Reset current streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros\n\n# Test cases to validate the function\ndef test_count_consecutive_zeros():\n    assert count_consecutive_zeros([0, 0, 1, 0, 0, 0, 2, 0]) == 3, \"Test case 1 failed\"\n    assert count_consecutive_zeros([1, 2, 3]) == 0, \"Test case 2 failed\"\n    assert count_consecutive_zeros([0, 0, 0, 0]) == 4, \"Test case 3 failed\"\n    assert count_consecutive_zeros([1, 0, 0, 1, 0, 0, 0]) == 3, \"Test case 4 failed\"\n    assert count_consecutive_zeros([]) == 0, \"Test case 5 failed\"\n    assert count_consecutive_zeros([0]) == 1, \"Test case 6 failed\"\n    assert count_consecutive_zeros([1, 2, 0, 0, 0, 3, 0]) == 3, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_consecutive_zeros()", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], chunk_size: int = None) -> List[int]:\n    \"\"\"\n    Reverses the input list in chunks of specified size.\n    \n    Parameters:\n    - data: List[int] - The list of integers to be reversed in chunks.\n    - chunk_size: int - The size of each chunk to reverse. If None, the entire list is reversed.\n    \n    Returns:\n    - List[int] - The list with sublists reversed.\n    \"\"\"\n    if chunk_size is None:\n        return data[::-1]  # Reverse the entire list if no chunk size is provided\n    \n    result = []\n    for i in range(0, len(data), chunk_size):\n        # Reverse the current chunk and add it to the result\n        result.extend(data[i:i + chunk_size][::-1])\n    \n    return result\n\n# Test cases to validate the function\ndef test_reverse_sublists():\n    assert reverse_sublists([1, 2, 3, 4, 5, 6], 2) == [2, 1, 4, 3, 6, 5], \"Test case 1 failed\"\n    assert reverse_sublists([1, 2, 3, 4, 5, 6], 3) == [3, 2, 1, 6, 5, 4], \"Test case 2 failed\"\n    assert reverse_sublists([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 5, 6], \"Test case 3 failed\"\n    assert reverse_sublists([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1], \"Test case 4 failed\"\n    assert reverse_sublists([1, 2, 3], 4) == [3, 2, 1], \"Test case 5 failed\"\n    assert reverse_sublists([], 2) == [], \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_sublists()", "result": "failed: ", "passed": false}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target in the list.\n    \"\"\"\n    count = 0  # Initialize the counter\n    for number in numbers:\n        if number == target:  # Check if the current number is the target\n            count += 1  # Increment the counter if it matches\n    return count  # Return the final count\n\n# Test cases to validate the function\ndef test_count_elements():\n    assert count_elements([1, 2, 3, 4, 5], 3) == 1, \"Test Case 1 Failed\"\n    assert count_elements([1, 2, 3, 4, 5], 6) == 0, \"Test Case 2 Failed\"\n    assert count_elements([1, 1, 1, 1, 1], 1) == 5, \"Test Case 3 Failed\"\n    assert count_elements([], 1) == 0, \"Test Case 4 Failed\"  # Edge case: empty list\n    assert count_elements([1, 2, 3, 2, 1, 2], 2) == 3, \"Test Case 5 Failed\"  # Multiple occurrences\n    assert count_elements([-1, -2, -3, -2, -1], -2) == 2, \"Test Case 6 Failed\"  # Negative numbers\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_elements()", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n        >>> count_negative_numbers([])\n        0\n        >>> count_negative_numbers([-1, -2, -3])\n        3\n        >>> count_negative_numbers([0, 0, 0])\n        0\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    assert count_negative_numbers([-1, 2, -3, 4, -5, 6]) == 3\n    assert count_negative_numbers([1, 2, 3, 4, 5, 6]) == 0\n    assert count_negative_numbers([]) == 0  # Edge case: empty list\n    assert count_negative_numbers([-1, -2, -3]) == 3  # All negative numbers\n    assert count_negative_numbers([0, 0, 0]) == 0  # No negative numbers\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    return n * n  # Total collisions = n (left to right) * n (right to left)\n\n# Test cases to validate the function\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    assert car_race_collision(100) == 10000, \"Test case 100 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_car_race_collision()", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix string is a palindrome, we take the prefix before it\n            prefix = string[:i]\n            # Reverse the prefix and append it to the original string\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is the prefix\n    return string + string[:-1][::-1]  # This handles the case where the string is not a palindrome at all\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 3)\n    '0'\n    >>> circular_shift(7, 0)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If there are no digits, return an empty string\n    if num_digits == 0:\n        return \"\"\n    \n    # Calculate effective shift\n    effective_shift = shift % num_digits\n    \n    # If effective shift is 0, return the original digits\n    if effective_shift == 0:\n        return digits\n    \n    # If shift is greater than the number of digits, return reversed digits\n    if shift >= num_digits:\n        return digits[::-1]\n    \n    # Perform the circular shift\n    return digits[-effective_shift:] + digits[:-effective_shift]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-27) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    assert iscube(8) == True, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import bisect\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    :param xs: List of coefficients [a0, a1, a2, ..., an] for the polynomial\n    :param x: The point at which to evaluate the polynomial\n    :return: The value of the polynomial at x\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    Assumes xs has an even number of coefficients and guarantees a solution.\n    \n    :param xs: List of coefficients of the polynomial\n    :return: A root of the polynomial\n    \"\"\"\n    # Define a function that returns the polynomial value\n    def f(x):\n        return poly(xs, x)\n    \n    # Use the bisection method to find a root\n    # We assume the root is within the range [-10, 10] for simplicity\n    root = bisect(f, -10, 10)\n    return root\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Linear polynomial\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n\n    # Test case 2: Cubic polynomial with known roots\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0\n\n    # Additional test cases\n    print(round(find_zero([1, -3, 2]), 2))  # Expected output: 2.0 (roots are 1 and 2)\n    print(round(find_zero([1, 0, -1]), 2))  # Expected output: 1.0 (roots are -1 and 1)", "result": "failed: No module named 'scipy'", "passed": false}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False\n    \n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:  # No need to check further if product exceeds a\n                    break\n    return False\n\n# Test cases\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True  # 2 * 3 * 5\n    assert is_multiply_prime(60) == True  # 2 * 3 * 10 (10 is not prime, so this should be False)\n    assert is_multiply_prime(42) == True  # 2 * 3 * 7\n    assert is_multiply_prime(70) == True  # 2 * 5 * 7\n    assert is_multiply_prime(1) == False   # No primes can multiply to 1\n    assert is_multiply_prime(2) == False   # Only one prime\n    assert is_multiply_prime(100) == False  # Out of bounds\n    assert is_multiply_prime(99) == False   # No combination of 3 primes gives 99\n    assert is_multiply_prime(15) == False   # 3 * 5, only 2 primes\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_multiply_prime()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Test cases to validate the function\ndef test_solve():\n    assert solve(1000) == \"1\", \"Test case 1 failed\"\n    assert solve(150) == \"110\", \"Test case 2 failed\"\n    assert solve(147) == \"1100\", \"Test case 3 failed\"\n    assert solve(0) == \"0\", \"Test case 4 failed\"  # Edge case for N = 0\n    assert solve(9999) == \"36\", \"Test case 5 failed\"  # Edge case for maximum N\n    assert solve(1234) == \"110\", \"Test case 6 failed\"  # Sum is 10, binary is 1010\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solve()", "result": "failed: Test case 5 failed", "passed": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing \n    all vowels with the letter that appears 2 places ahead in the \n    English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    replacements = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowels:\n            # Replace vowel with the corresponding letter\n            encoded_message.append(replacements[char])\n        else:\n            # Swap case for consonants and non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected: 'TGST'\n    print(encode('This is a message'))  # Expected: 'tHKS KS C MGSSCGG'\n    print(encode('Hello World'))  # Expected: 'hGNNM YQTN'\n    print(encode('Python Programming'))  # Expected: 'pYTHON PRgRAmMING'\n    print(encode('AEIOU'))  # Expected: 'CGKQW'\n    print(encode('aeiou'))  # Expected: 'cGkqw'", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0  # Return 0 if no prime is found\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    if n == 1:\n        # For 1-digit numbers, only the number '1' qualifies\n        return 1\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    end_with_1 = 9 * 10 ** (n - 2)\n    \n    # Count of n-digit numbers starting and ending with '1'\n    start_and_end_with_1 = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return total_count\n\n# Test cases\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only '1'\n    assert starts_one_ends(2) == 18  # 10-19 and 11, 21, ..., 91\n    assert starts_one_ends(3) == 180  # 100-199 and 101, 111, ..., 191, 201, ..., 901\n    assert starts_one_ends(4) == 1800  # 1000-1999 and 1001, ..., 1991, 2001, ..., 9001\n    assert starts_one_ends(5) == 18000  # 10000-19999 and 10001, ..., 19991, 20001, ..., 90001\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_starts_one_ends()", "result": "passed", "passed": true}
