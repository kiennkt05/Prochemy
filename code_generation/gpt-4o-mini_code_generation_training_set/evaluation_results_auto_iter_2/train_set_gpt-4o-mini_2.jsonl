{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([])  # Edge case: empty list\n    0\n    >>> count_negative_numbers([-1, -2, -3])  # All negative numbers\n    3\n    >>> count_negative_numbers([0, 1, 2])  # No negative numbers\n    0\n    >>> count_negative_numbers([-1, 0, 1])  # Mixed with zero\n    1\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    This function takes a list of strings and returns a list of strings that are duplicates.\n    \n    Parameters:\n    strings (List[str]): A list of strings to check for duplicates.\n    \n    Returns:\n    List[str]: A list of duplicate strings found in the input list.\n    \"\"\"\n    # Create a dictionary to count occurrences of each string\n    string_count = {}\n    \n    # Count each string's occurrences\n    for string in strings:\n        if string in string_count:\n            string_count[string] += 1\n        else:\n            string_count[string] = 1\n    \n    # Extract strings that have a count greater than 1 (duplicates)\n    duplicates = [string for string, count in string_count.items() if count > 1]\n    \n    return duplicates\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    test_case_1 = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]\n    print(find_duplicates(test_case_1))  # Expected output: ['apple', 'banana']\n    \n    # Test case 2: No duplicates\n    test_case_2 = [\"cat\", \"dog\", \"fish\"]\n    print(find_duplicates(test_case_2))  # Expected output: []\n    \n    # Test case 3: All duplicates\n    test_case_3 = [\"a\", \"a\", \"a\", \"a\"]\n    print(find_duplicates(test_case_3))  # Expected output: ['a']\n    \n    # Test case 4: Mixed case duplicates\n    test_case_4 = [\"Hello\", \"hello\", \"HELLO\", \"hello\"]\n    print(find_duplicates(test_case_4))  # Expected output: ['hello']\n    \n    # Test case 5: Empty list\n    test_case_5 = []\n    print(find_duplicates(test_case_5))  # Expected output: []"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with multiple occurrences\n    print(count_elements([1, 2, 3, 4, 2, 2, 5], 2))  # Expected output: 3\n\n    # Test case 2: Target not in the list\n    print(count_elements([1, 2, 3, 4, 5], 6))  # Expected output: 0\n\n    # Test case 3: Target is the only element in the list\n    print(count_elements([7], 7))  # Expected output: 1\n\n    # Test case 4: Empty list\n    print(count_elements([], 1))  # Expected output: 0\n\n    # Test case 5: All elements are the target\n    print(count_elements([5, 5, 5, 5], 5))  # Expected output: 4"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Sums all negative numbers in the provided list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of all negative integers in the list. If there are no negative integers, returns 0.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n            \n    return negative_sum\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: A mix of positive and negative numbers\n    print(sum_negative_numbers([1, -2, 3, -4, 5]))  # Expected output: -6 (-2 + -4)\n    \n    # Test case 2: All positive numbers\n    print(sum_negative_numbers([1, 2, 3, 4, 5]))    # Expected output: 0 (no negative numbers)\n    \n    # Test case 3: All negative numbers\n    print(sum_negative_numbers([-1, -2, -3, -4, -5]))  # Expected output: -15 (-1 + -2 + -3 + -4 + -5)\n    \n    # Test case 4: Mixed numbers with zero\n    print(sum_negative_numbers([-1, 0, 1, -2, 2]))   # Expected output: -3 (-1 + -2)\n    \n    # Test case 5: Empty list\n    print(sum_negative_numbers([]))                    # Expected output: 0 (no numbers)"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n    \n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean\n\n# Test cases to verify the function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive numbers\n    print(calculate_mean([1.0, 2.0, 3.0, 4.0, 5.0]))  # Expected output: 3.0\n\n    # Test case 2: Normal case with negative numbers\n    print(calculate_mean([-1.0, -2.0, -3.0]))  # Expected output: -2.0\n\n    # Test case 3: Mixed positive and negative numbers\n    print(calculate_mean([-1.0, 0.0, 1.0]))  # Expected output: 0.0\n\n    # Test case 4: Single number\n    print(calculate_mean([10.0]))  # Expected output: 10.0\n\n    # Test case 5: Empty list\n    print(calculate_mean([]))  # Expected output: 0.0"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_count = 0  # Variable to keep track of the maximum count of consecutive zeros\n    current_count = 0  # Variable to count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_count += 1  # Increment the count if the current number is zero\n        else:\n            max_count = max(max_count, current_count)  # Update max_count if current_count is greater\n            current_count = 0  # Reset current_count if the number is not zero\n\n    # Final check to update max_count in case the list ends with zeros\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: No zeros\n    print(count_consecutive_zeros([1, 2, 3, 4]))  # Expected output: 0\n\n    # Test case 2: Zeros at the beginning\n    print(count_consecutive_zeros([0, 0, 1, 2, 0]))  # Expected output: 2\n\n    # Test case 3: Zeros at the end\n    print(count_consecutive_zeros([1, 2, 0, 0, 0]))  # Expected output: 3\n\n    # Test case 4: Zeros in the middle\n    print(count_consecutive_zeros([1, 0, 0, 2, 0, 0, 0, 3]))  # Expected output: 3\n\n    # Test case 5: All zeros\n    print(count_consecutive_zeros([0, 0, 0, 0]))  # Expected output: 4\n\n    # Test case 6: Mixed numbers with no consecutive zeros\n    print(count_consecutive_zeros([1, 2, 3, 4, 5]))  # Expected output: 0\n\n    # Test case 7: Single zero\n    print(count_consecutive_zeros([0]))  # Expected output: 1\n\n    # Test case 8: Multiple groups of zeros\n    print(count_consecutive_zeros([0, 1, 0, 0, 2, 0, 0, 0, 3]))  # Expected output: 3"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to a list and return\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    print(find_duplicates([1.0, 2.0, 3.0, 2.0, 1.0]))  # Expected output: [1.0, 2.0]\n\n    # Test case 2: No duplicates\n    print(find_duplicates([1.0, 2.0, 3.0]))  # Expected output: []\n\n    # Test case 3: All duplicates\n    print(find_duplicates([1.0, 1.0, 1.0, 1.0]))  # Expected output: [1.0]\n\n    # Test case 4: Mixed numbers\n    print(find_duplicates([1.0, 2.5, 3.5, 2.5, 1.0, 4.0, 4.0]))  # Expected output: [1.0, 2.5, 4.0]\n\n    # Test case 5: Empty list\n    print(find_duplicates([]))  # Expected output: []"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of integers from 0 to n.\n    \n    Args:\n    nums (List[int]): A list of integers containing n distinct numbers in the range [0, n].\n    \n    Returns:\n    int: The missing number in the list.\n    \"\"\"\n    n = len(nums)  # The length of the list is n, meaning numbers should be from 0 to n\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers present in the list\n    \n    # The missing number is the difference between expected and actual sum\n    return expected_sum - actual_sum\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: Missing number is 2\n    print(find_missing_number([0, 1, 3]))  # Output: 2\n    \n    # Test case 2: Missing number is 0\n    print(find_missing_number([1, 2, 3]))  # Output: 0\n    \n    # Test case 3: Missing number is 4\n    print(find_missing_number([0, 1, 2, 3]))  # Output: 4\n    \n    # Test case 4: Missing number is 1\n    print(find_missing_number([0]))  # Output: 1\n    \n    # Test case 5: Missing number is 3\n    print(find_missing_number([0, 1, 2, 4, 5]))  # Output: 3"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], chunk_size: int = None) -> List[int]:\n    \"\"\"\n    Reverses the input list in chunks of a specified size.\n    \n    Parameters:\n    data (List[int]): The list of integers to be reversed in sublists.\n    chunk_size (int): The size of each chunk to reverse. If None, the entire list is reversed.\n    \n    Returns:\n    List[int]: A new list with the specified chunks reversed.\n    \"\"\"\n    if chunk_size is None:\n        # If no chunk size is provided, reverse the entire list\n        return data[::-1]\n    \n    # Initialize the result list\n    result = []\n    \n    # Process the list in chunks\n    for i in range(0, len(data), chunk_size):\n        # Get the current chunk\n        chunk = data[i:i + chunk_size]\n        # Reverse the current chunk and add it to the result\n        result.extend(reversed(chunk))\n    \n    return result\n\n# Test cases to verify the functionality of the reverse_sublists function\nif __name__ == \"__main__\":\n    # Test case 1: Reverse the entire list\n    print(reverse_sublists([1, 2, 3, 4, 5]))  # Expected output: [5, 4, 3, 2, 1]\n    \n    # Test case 2: Reverse in chunks of size 2\n    print(reverse_sublists([1, 2, 3, 4, 5], chunk_size=2))  # Expected output: [2, 1, 4, 3, 5]\n    \n    # Test case 3: Reverse in chunks of size 3\n    print(reverse_sublists([1, 2, 3, 4, 5, 6, 7], chunk_size=3))  # Expected output: [3, 2, 1, 6, 5, 4, 7]\n    \n    # Test case 4: Reverse in chunks of size 4\n    print(reverse_sublists([1, 2, 3, 4, 5, 6, 7, 8], chunk_size=4))  # Expected output: [4, 3, 2, 1, 8, 7, 6, 5]\n    \n    # Test case 5: Reverse with a chunk size larger than the list\n    print(reverse_sublists([1, 2, 3], chunk_size=5))  # Expected output: [3, 2, 1]"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    \"\"\"\n    This function finds the maximum number of consecutive 1's in a binary array.\n    \n    :param nums: List[int] - A list of integers (0s and 1s)\n    :return: int - The maximum count of consecutive 1's\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of consecutive 1's\n    \n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment the count if the number is 1\n        else:\n            max_count = max(max_count, current_count)  # Update max_count if current_count is greater\n            current_count = 0  # Reset current_count when a 0 is encountered\n    \n    # Final check to update max_count in case the array ends with 1's\n    max_count = max(max_count, current_count)\n    \n    return max_count\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with mixed 0s and 1s\n    print(find_max_consecutive_ones([1, 1, 0, 1, 1, 1]))  # Expected output: 3\n\n    # Test case 2: All 1s\n    print(find_max_consecutive_ones([1, 1, 1, 1]))  # Expected output: 4\n\n    # Test case 3: All 0s\n    print(find_max_consecutive_ones([0, 0, 0, 0]))  # Expected output: 0\n\n    # Test case 4: No consecutive 1s\n    print(find_max_consecutive_ones([1, 0, 1, 0, 1]))  # Expected output: 1\n\n    # Test case 5: Mixed with leading and trailing 1s\n    print(find_max_consecutive_ones([1, 1, 0, 0, 1, 1, 1, 0, 1]))  # Expected output: 3\n\n    # Test case 6: Edge case with empty list\n    print(find_max_consecutive_ones([]))  # Expected output: 0"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    return n * n\n\n# Test cases to verify the function\nif __name__ == \"__main__\":\n    # Test case 1: 1 car in each direction\n    print(car_race_collision(1))  # Expected output: 1\n\n    # Test case 2: 2 cars in each direction\n    print(car_race_collision(2))  # Expected output: 4\n\n    # Test case 3: 3 cars in each direction\n    print(car_race_collision(3))  # Expected output: 9\n\n    # Test case 4: 0 cars in each direction\n    print(car_race_collision(0))  # Expected output: 0\n\n    # Test case 5: 10 cars in each direction\n    print(car_race_collision(10))  # Expected output: 100"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom sympy import isprime\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if isprime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Ensure a is within the specified range\n\n    primes = generate_primes(100)  # Generate primes less than 100\n    # Check all combinations of 3 primes\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True  # Found a combination that multiplies to a\n    return False  # No combination found\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    test_cases = [30, 60, 42, 105, 1, 99]\n    for test in test_cases:\n        result = is_multiply_prime(test)\n        print(f'is_multiply_prime({test}) = {result}')"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 2)\n    '45123'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 3)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate its digits\n    str_x = str(x)\n    length = len(str_x)\n    \n    # If the shift is greater than the number of digits, reverse the string\n    if shift >= length:\n        return str_x[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % length\n    \n    # Perform the circular shift\n    shifted = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted\n\n# Running the test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube of some integer.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(iscube(1))    # True, because 1 is 1^3\n    print(iscube(2))    # False, because 2 is not a perfect cube\n    print(iscube(-1))   # True, because -1 is (-1)^3\n    print(iscube(64))   # True, because 64 is 4^3\n    print(iscube(0))    # True, because 0 is 0^3\n    print(iscube(180))  # False, because 180 is not a perfect cube\n    print(iscube(-27))  # True, because -27 is (-3)^3\n    print(iscube(729))  # True, because 729 is 9^3\n    print(iscube(1000)) # True, because 1000 is 10^3"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    >>> make_palindrome('abc')\n    'abcba'\n    \"\"\"\n    # Find the length of the string\n    n = len(string)\n    \n    # Check for the longest palindromic suffix\n    for i in range(n):\n        # Check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, we need to append the reverse of the prefix\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(make_palindrome(''))        # Output: ''\n    print(make_palindrome('cat'))     # Output: 'catac'\n    print(make_palindrome('cata'))    # Output: 'catac'\n    print(make_palindrome('race'))     # Output: 'racecar'\n    print(make_palindrome('a'))       # Output: 'a'\n    print(make_palindrome('ab'))      # Output: 'aba'\n    print(make_palindrome('abc'))     # Output: 'abcba'"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit numbers that start with '1'\n    start_with_1_count = 10**(n - 1)  # From 10^(n-1) to 2*10^(n-1) - 1\n\n    # Count of n-digit numbers that end with '1'\n    end_with_1_count = 10**(n - 1)  # There are 10^(n-1) numbers for each last digit\n\n    # Count of n-digit numbers that start and end with '1'\n    start_and_end_with_1_count = 10**(n - 2) if n > 1 else 1  # Only '1' if n=1\n\n    # Using inclusion-exclusion principle\n    total_count = (start_with_1_count + end_with_1_count - start_and_end_with_1_count)\n\n    return total_count\n\n# Test cases to verify the function\nif __name__ == \"__main__\":\n    # Test cases\n    print(starts_one_ends(1))  # Expected: 1 (only the number 1)\n    print(starts_one_ends(2))  # Expected: 19 (10-19 and 11, 21, ..., 91)\n    print(starts_one_ends(3))  # Expected: 190 (100-199 and 101, 111, ..., 991)\n    print(starts_one_ends(4))  # Expected: 1900 (1000-1999 and 1001, 1011, ..., 1991)\n    print(starts_one_ends(5))  # Expected: 19000 (10000-19999 and 10001, 10011, ..., 19991)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Ensure N is within the specified constraints\n    if not (0 <= N <= 10000):\n        raise ValueError(\"N must be between 0 and 10000 inclusive.\")\n    \n    # Convert N to string to iterate over each digit\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum of digits to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Test cases to verify the function works as expected\nif __name__ == \"__main__\":\n    print(solve(1000))  # Expected output: \"1\"\n    print(solve(150))   # Expected output: \"110\"\n    print(solve(147))   # Expected output: \"1100\"\n    print(solve(0))     # Expected output: \"0\" (sum of digits is 0)\n    print(solve(9999))  # Expected output: \"36\" (sum of digits is 36, which is \"100100\")"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    The polynomial is defined as:\n    f(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    where xs contains the coefficients of the polynomial.\n    \n    Args:\n        xs (list): Coefficients of the polynomial.\n        x (float): The point at which to evaluate the polynomial.\n    \n    Returns:\n        float: The value of the polynomial at x.\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef derivative(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial at point x.\n    \n    Args:\n        xs (list): Coefficients of the polynomial.\n        x (float): The point at which to evaluate the derivative.\n    \n    Returns:\n        float: The value of the derivative at x.\n    \"\"\"\n    return sum(i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, initial_guess: float = 0.0, tolerance: float = 1e-7, max_iterations: int = 1000) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs using the Newton-Raphson method.\n    \n    Args:\n        xs (list): Coefficients of the polynomial (must have an even number of coefficients).\n        initial_guess (float): Initial guess for the root.\n        tolerance (float): Tolerance for convergence.\n        max_iterations (int): Maximum number of iterations to prevent infinite loops.\n    \n    Returns:\n        float: A root of the polynomial.\n    \n    Raises:\n        ValueError: If the number of coefficients is not even or if no root is found.\n    \n    Examples:\n        >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n        -0.5\n        >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n        1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    x = initial_guess\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = derivative(xs, x)\n        \n        if abs(f_prime_x) < tolerance:  # Avoid division by zero\n            raise ValueError(\"Derivative is too small; no root found.\")\n        \n        x_new = x - f_x / f_prime_x\n        \n        if abs(x_new - x) < tolerance:  # Check for convergence\n            return x_new\n        \n        x = x_new\n    \n    raise ValueError(\"Maximum iterations reached; no root found.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0\n    print(round(find_zero([1, 0, -1]), 2))  # Expected output: 1.0 or -1.0 (depending on initial guess)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears 2 places ahead in the English alphabet.\n    \n    Vowels are defined as 'a', 'e', 'i', 'o', 'u' (and their uppercase counterparts).\n    \n    Args:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            if char in vowels:\n                # Replace vowel with the letter 2 places ahead\n                if char.islower():\n                    # Find the new character for lowercase vowels\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    # Find the new character for uppercase vowels\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                encoded_message.append(new_char)\n            else:\n                # Just swap the case for consonants\n                encoded_message.append(char.swapcase())\n        else:\n            # If it's not a letter, keep it as is\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases to verify the functionality of the encode function\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'\n    print(encode('Hello World!'))  # Expected output: 'hELLO wORLD!'\n    print(encode('aeiou'))  # Expected output: 'cGQW'\n    print(encode('AEIOU'))  # Expected output: 'CGQW'\n    print(encode('Python Programming'))  # Expected output: 'pYTHON pRGRMMING'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number was found, return 0\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    print(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\n    print(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\n    print(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\n    print(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\n    print(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\n    print(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7\n    print(skjkasdkd([4, 6, 8, 10]))  # Output: 0 (no primes)"}
