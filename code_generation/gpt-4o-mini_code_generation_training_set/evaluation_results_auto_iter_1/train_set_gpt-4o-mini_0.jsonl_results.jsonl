{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    \"\"\"\n    return sum(1 for num in nums if num < 0)\n\n# You can run the doctests to verify the function works as expected\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    return sum(num for num in numbers if num < 0)", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 or raise an exception based on your preference\n    return sum(numbers) / len(numbers)", "result": "failed: ", "passed": false}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    count = {}\n    duplicates = []\n\n    # Count occurrences of each string\n    for string in strings:\n        if string in count:\n            count[string] += 1\n        else:\n            count[string] = 1\n\n    # Collect strings that appear more than once\n    for string, occurrence in count.items():\n        if occurrence > 1:\n            duplicates.append(string)\n\n    return duplicates", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    seen = set()\n    duplicates = set()\n    \n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n    \n    return list(duplicates)", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # The length of the list is n, meaning numbers are from 0 to n\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number", "result": "failed: ", "passed": false}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    return numbers.count(target)", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_count = 0\n    current_count = 0\n    \n    for num in nums:\n        if num == 0:\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n            \n    return max_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string to work with its digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted_str\n\n# Example usage\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Output: \"21\"\n    print(circular_shift(12, 2))  # Output: \"12\"\n    print(circular_shift(12345, 2))  # Output: \"45123\"\n    print(circular_shift(12345, 5))  # Output: \"54321\"", "result": "failed: ", "passed": false}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    sublist_size = 3\n    result = []\n    \n    for i in range(0, len(data), sublist_size):\n        # Get the current sublist\n        sublist = data[i:i + sublist_size]\n        # Reverse the sublist and add it to the result\n        result.extend(reversed(sublist))\n    \n    return result\n\n# Example usage:\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nreversed_data = reverse_sublists(data)\nprint(reversed_data)  # Output: [3, 2, 1, 6, 5, 4, 9, 8, 7]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom sympy import isprime\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if isprime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False\n    \n    primes = generate_primes(100)\n    \n    # Check combinations of 3 primes\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # Output: True\nprint(is_multiply_prime(28))  # Output: False", "result": "failed: No module named 'sympy'", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To keep track of the maximum count of consecutive ones\n    current_count = 0  # To count the current streak of ones\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment the count if the number is 1\n        else:\n            max_count = max(max_count, current_count)  # Update max_count if needed\n            current_count = 0  # Reset current count if the number is not 1\n\n    # Final check to update max_count in case the array ends with 1s\n    max_count = max(max_count, current_count)\n\n    return max_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary\n    binary_sum = bin(digit_sum)[2:]  # bin() returns a string starting with '0b'\n    \n    # Step 3: Return the binary representation\n    return binary_sum\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # If the string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix that needs to be reversed and appended\n            prefix_to_append = string[:i]\n            # Create the palindrome by appending the reverse of the prefix\n            return string + prefix_to_append[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(make_palindrome(''))        # Output: ''\n    print(make_palindrome('cat'))     # Output: 'catac'\n    print(make_palindrome('cata'))    # Output: 'catac'", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    :param n: The number of cars in each direction.\n    :return: The total number of collisions.\n    \"\"\"\n    # Each car from the left will collide with each car from the right\n    return n * n\n\n# Example usage:\nprint(car_race_collision(3))  # Output: 9", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0  # Return 0 if no prime number is found\n\n# Example usage:\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            if char in vowels:\n                # Replace vowel with the letter 2 places ahead\n                if char.islower():\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                new_char = char.swapcase()  # Swap case for consonants\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)  # Keep non-letter characters unchanged\n\n    return ''.join(encoded_message)\n\n# Example usage\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    The derivative is calculated as:\n    f'(x) = xs[1] + 2 * xs[2] * x + ... + n * xs[n] * x^(n-1)\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Initial guess for the root\n    x0 = 0.0\n    \n    # Newton-Raphson method parameters\n    tolerance = 1e-7\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        f_prime_x0 = derivative(xs, x0)\n        \n        if f_prime_x0 == 0:\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        # Update x using Newton's method\n        x1 = x0 - f_x0 / f_prime_x0\n        \n        # Check for convergence\n        if abs(x1 - x0) < tolerance:\n            return x1\n        \n        x0 = x1\n    \n    raise ValueError(\"Maximum iterations reached. No solution found.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Output: 1.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit numbers starting with 1\n    count_starting_with_1 = 10 ** (n - 1)\n\n    # Count of n-digit numbers ending with 1\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number 1 itself\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n\n    # Count of n-digit numbers starting and ending with 1\n    if n == 1:\n        count_both = 1  # Only the number 1 itself\n    else:\n        count_both = 10 ** (n - 2)\n\n    # Total count using inclusion-exclusion principle\n    total_count = (count_starting_with_1 + count_ending_with_1 - count_both)\n\n    return total_count", "result": "passed", "passed": true}
