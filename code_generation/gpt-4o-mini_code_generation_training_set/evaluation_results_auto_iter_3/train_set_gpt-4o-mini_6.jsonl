{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Sums all negative numbers in the provided list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of all negative integers in the list. If there are no negative integers, returns 0.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through the list of numbers\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if it's negative\n            \n    return negative_sum\n\n# Testing the function with various test cases\ndef test_sum_negative_numbers():\n    # Test cases\n    assert sum_negative_numbers([-1, -2, -3, 4, 5]) == -6, \"Test case 1 failed\"\n    assert sum_negative_numbers([1, 2, 3, 4, 5]) == 0, \"Test case 2 failed\"\n    assert sum_negative_numbers([-1, 2, -3, 4, -5]) == -9, \"Test case 3 failed\"\n    assert sum_negative_numbers([]) == 0, \"Test case 4 failed\"  # Edge case: empty list\n    assert sum_negative_numbers([-10, -20, 30, 40]) == -30, \"Test case 5 failed\"\n    assert sum_negative_numbers([0, 1, -1, -2]) == -3, \"Test case 6 failed\"  # Edge case: includes zero\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_sum_negative_numbers()"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([])  # Edge case: empty list\n    0\n    >>> count_negative_numbers([-1, -2, -3])  # Edge case: all negative\n    3\n    >>> count_negative_numbers([0, 1, 2])  # Edge case: no negatives\n    0\n    \"\"\"\n    # Initialize a counter for negative numbers\n    count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            count += 1\n            \n    return count\n\n# Testing the function with provided examples and additional cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    \"\"\"\n    Reverses the entire list of integers.\n\n    Parameters:\n    data (List[int]): A list of integers to be reversed.\n\n    Returns:\n    List[int]: A new list containing the elements of the input list in reverse order.\n    \"\"\"\n    # Reverse the list using slicing\n    return data[::-1]\n\n# Testing the function\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        ([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]),  # Normal case\n        ([], []),                             # Edge case: empty list\n        ([1], [1]),                           # Edge case: single element\n        ([1, 2], [2, 1]),                    # Edge case: two elements\n        ([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1])  # Even number of elements\n    ]\n\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = reverse_sublists(input_data)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # The length of the list\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number\n\n# Test cases to validate the function\ndef test_find_missing_number():\n    assert find_missing_number([0, 1, 2, 3, 5]) == 4, \"Test case 1 failed\"\n    assert find_missing_number([3, 0, 1]) == 2, \"Test case 2 failed\"\n    assert find_missing_number([9,6,4,2,3,5,7,0,1]) == 8, \"Test case 3 failed\"\n    assert find_missing_number([0]) == 1, \"Test case 4 failed\"\n    assert find_missing_number([]) == 0, \"Test case 5 failed\"  # Edge case: no numbers, missing 0\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_find_missing_number()"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Using the count method of the list to find the number of occurrences\n    return numbers.count(target)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with multiple occurrences\n    print(count_elements([1, 2, 3, 4, 2, 2], 2))  # Expected output: 3\n\n    # Test case 2: Target not in the list\n    print(count_elements([1, 2, 3, 4], 5))  # Expected output: 0\n\n    # Test case 3: Empty list\n    print(count_elements([], 1))  # Expected output: 0\n\n    # Test case 4: Target is the only element in the list\n    print(count_elements([1], 1))  # Expected output: 1\n\n    # Test case 5: All elements are the target\n    print(count_elements([2, 2, 2, 2], 2))  # Expected output: 4\n\n    # Test case 6: Negative numbers\n    print(count_elements([-1, -2, -3, -1, -1], -1))  # Expected output: 3"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    Find and return a list of duplicate strings from the input list.\n\n    Args:\n    strings (List[str]): A list of strings to check for duplicates.\n\n    Returns:\n    List[str]: A list of duplicate strings.\n    \"\"\"\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # Filter and return strings that appear more than once\n    duplicates = [string for string, count in count_dict.items() if count > 1]\n    \n    return duplicates\n\n# Testing the function\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"], [\"apple\", \"banana\"]),\n        ([\"cat\", \"dog\", \"cat\", \"mouse\"], [\"cat\"]),\n        ([\"hello\", \"world\", \"hello\", \"hello\"], [\"hello\"]),\n        ([\"unique\", \"strings\", \"here\"], []),\n        ([], []),  # Edge case: empty list\n        ([\"duplicate\", \"duplicate\", \"duplicate\"], [\"duplicate\"]),  # Edge case: all duplicates\n    ]\n    \n    for i, (input_data, expected) in enumerate(test_cases):\n        result = find_duplicates(input_data)\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean\n\n# Testing the function with various test cases\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        ([1.0, 2.0, 3.0], 2.0),  # Normal case\n        ([10.0, 20.0, 30.0, 40.0], 25.0),  # Another normal case\n        ([5.5, 6.5, 7.5], 6.5),  # Normal case with floats\n        ([], 0.0),  # Edge case: empty list\n        ([0.0, 0.0, 0.0], 0.0),  # Edge case: all zeros\n        ([-1.0, 0.0, 1.0], 0.0),  # Edge case: negative and positive numbers\n    ]\n\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = calculate_mean(input_data)\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To keep track of the maximum count of consecutive ones\n    current_count = 0  # To count the current streak of ones\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment the count if we encounter a 1\n        else:\n            max_count = max(max_count, current_count)  # Update max_count if current streak ends\n            current_count = 0  # Reset current count for the next streak\n\n    # Final check to update max_count in case the array ends with a streak of ones\n    max_count = max(max_count, current_count)\n\n    return max_count"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate numbers, without duplicates in the result.\n    \"\"\"\n    count = {}\n    duplicates = set()\n    \n    # Count occurrences of each number\n    for number in numbers:\n        if number in count:\n            count[number] += 1\n            duplicates.add(number)  # Add to duplicates if it appears again\n        else:\n            count[number] = 1\n    \n    return list(duplicates)\n\n# Testing the function\ndef test_find_duplicates():\n    assert find_duplicates([1.0, 2.0, 3.0, 1.0, 2.0]) == [1.0, 2.0]\n    assert find_duplicates([1.0, 1.0, 1.0]) == [1.0]\n    assert find_duplicates([1.0, 2.0, 3.0]) == []\n    assert find_duplicates([]) == []\n    assert find_duplicates([1.0, 2.0, 2.0, 3.0, 3.0]) == [2.0, 3.0]\n    assert find_duplicates([1.1, 2.2, 3.3, 1.1, 2.2]) == [1.1, 2.2]\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_find_duplicates()"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 0)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate the digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    shift = shift % num_digits  # Handle shifts larger than the number of digits\n    return str_x[-shift:] + str_x[:-shift]\n\n# Testing the function with the provided examples and additional cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root and round it to the nearest integer\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded value equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Testing the function with provided examples and additional cases\ndef test_iscube():\n    test_cases = [\n        (1, True),\n        (2, False),\n        (-1, True),\n        (64, True),\n        (0, True),\n        (180, False),\n        (27, True),   # 3^3\n        (-27, True),  # -3^3\n        (8, True),    # 2^3\n        (-8, True),   # -2^3\n        (1000, True), # 10^3\n        (999, False), # Not a perfect cube\n    ]\n    \n    for a, expected in test_cases:\n        result = iscube(a)\n        assert result == expected, f\"iscube({a}) = {result}, expected {expected}\"\n\n# Run the tests\ntest_iscube()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N < 0 or N > 10000:\n        raise ValueError(\"N must be between 0 and 10000 inclusive.\")\n    \n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Testing the function with provided examples and additional cases\ndef test_solve():\n    test_cases = [\n        (1000, \"1\"),\n        (150, \"110\"),\n        (147, \"1100\"),\n        (0, \"0\"),          # Edge case: sum of digits is 0\n        (9999, \"36\"),      # Edge case: sum of digits is 36 (9+9+9+9)\n        (10000, \"1\"),      # Edge case: sum of digits is 1 (1+0+0+0+0)\n    ]\n    \n    for N, expected in test_cases:\n        result = solve(N)\n        assert result == expected, f\"Test failed for N={N}: expected {expected}, got {result}\"\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_solve()"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears 2 places ahead in the English alphabet.\n    \n    Vowels are defined as 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase).\n    \n    Args:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            if char in vowels:\n                # Replace vowel with the letter 2 places ahead\n                if char.islower():\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                new_char = char.swapcase()  # Swap case for consonants\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)  # Keep non-letter characters unchanged\n\n    return ''.join(encoded_message)\n\n# Testing the function with provided examples and additional cases\nif __name__ == \"__main__\":\n    # Provided test cases\n    print(encode('test'))  # Expected: 'TGST'\n    print(encode('This is a message'))  # Expected: 'tHKS KS C MGSSCGG'\n    \n    # Additional test cases\n    print(encode('Hello World'))  # Expected: 'hELLO wORLD'\n    print(encode('aeiou'))  # Expected: 'cGQW'\n    print(encode('AEIOU'))  # Expected: 'cGQW'\n    print(encode('Python Programming'))  # Expected: 'pYTHON pRGRMMING'\n    print(encode('1234!@#$'))  # Expected: '1234!@#$' (non-letter characters should remain unchanged)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    start_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        end_with_1 = 1  # The only 1-digit number is '1'\n    else:\n        end_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n == 1:\n        start_end_with_1 = 1  # The only 1-digit number is '1'\n    else:\n        start_end_with_1 = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_end_with_1\n    \n    return total_count\n\n# Testing the function\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only '1'\n    assert starts_one_ends(2) == 18  # '10', '11', '12', ..., '19', '21', ..., '91', '11'\n    assert starts_one_ends(3) == 271  # '100' to '199' + '101', '111', ..., '191' + '201', ..., '901'\n    assert starts_one_ends(4) == 3881  # Similar calculation for 4-digit numbers\n    assert starts_one_ends(5) == 38881  # Similar calculation for 5-digit numbers\n    print(\"All tests passed!\")\n\n# Run tests\ntest_starts_one_ends()"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car from the left will collide with each car from the right\n    return n * n  # n cars from left and n cars from right\n\n# Testing the function\ndef test_car_race_collision():\n    # Test cases\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_car_race_collision()"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom sympy import isprime\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if isprime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Ensure a is within the specified range\n\n    primes = generate_primes(100)\n    \n    # Check all combinations of 3 primes\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Testing the function with various cases\nprint(is_multiply_prime(30))  # True, because 2 * 3 * 5 = 30\nprint(is_multiply_prime(60))  # True, because 2 * 3 * 10 is not valid, but 3 * 5 * 4 is not valid either\nprint(is_multiply_prime(28))  # False, because 28 cannot be expressed as a product of 3 primes\nprint(is_multiply_prime(1))   # False, as 1 is not a product of any primes\nprint(is_multiply_prime(97))  # False, as 97 is a prime itself\nprint(is_multiply_prime(105)) # False, as it's greater than 100"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix is a palindrome, take the prefix before it\n            prefix = string[:i]\n            # Append the reverse of the prefix to the original string\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is the prefix\n    return string + string[:-1][::-1]\n\n# Testing the function with provided and additional test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(make_palindrome(''))          # Output: ''\n    print(make_palindrome('cat'))       # Output: 'catac'\n    print(make_palindrome('cata'))      # Output: 'catac'\n    print(make_palindrome('race'))      # Output: 'racecar'\n    print(make_palindrome('a'))         # Output: 'a'\n    print(make_palindrome('ab'))        # Output: 'aba'\n    print(make_palindrome('abc'))       # Output: 'abcba'"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive zeros\n    current_count = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_count += 1  # Increment the count for consecutive zeros\n        else:\n            max_count = max(max_count, current_count)  # Update max_count if needed\n            current_count = 0  # Reset current count for non-zero number\n\n    # Final check in case the list ends with zeros\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 0, 1, 0, 0, 0, 2, 0], 3),  # Three consecutive zeros\n        ([1, 2, 3, 4], 0),              # No zeros\n        ([0, 0, 0, 0], 4),              # All zeros\n        ([1, 0, 0, 0, 1, 0, 0], 3),     # Maximum of three consecutive zeros\n        ([0, 1, 0, 0, 0, 0, 1], 4),     # Maximum of four consecutive zeros\n        ([], 0),                         # Empty list\n        ([1, 2, 3], 0)                  # No zeros\n    ]\n\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = count_consecutive_zeros(input_data)\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/32", "completion": "import math\nimport numpy as np\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Use numpy to find the roots of the polynomial\n    roots = np.roots(xs)\n    \n    # Filter real roots\n    real_roots = [r.real for r in roots if np.isreal(r)]\n    \n    if not real_roots:\n        raise ValueError(\"No real roots found.\")\n    \n    # Return the first real root found\n    return real_roots[0]\n\n# Testing the functions\nif __name__ == \"__main__\":\n    # Test cases\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0\n\n    # Additional test cases\n    print(round(find_zero([1, -3, 2]), 2))  # Expected output: 1.0 (roots are 1, 2)\n    print(round(find_zero([1, 0, -1]), 2))  # Expected output: 1.0 (roots are -1, 1)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0  # Return 0 if no prime is found\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
