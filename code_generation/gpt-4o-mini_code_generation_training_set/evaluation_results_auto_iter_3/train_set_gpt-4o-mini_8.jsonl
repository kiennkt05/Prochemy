{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. If the list is empty, returns 0.0.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0\n    \n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean\n\n# Test cases to validate the functionality of the calculate_mean function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive numbers\n    print(calculate_mean([1.0, 2.0, 3.0, 4.0, 5.0]))  # Expected output: 3.0\n\n    # Test case 2: Normal case with negative and positive numbers\n    print(calculate_mean([-1.0, 0.0, 1.0]))  # Expected output: 0.0\n\n    # Test case 3: Case with all negative numbers\n    print(calculate_mean([-2.0, -4.0, -6.0]))  # Expected output: -4.0\n\n    # Test case 4: Case with a single number\n    print(calculate_mean([10.0]))  # Expected output: 10.0\n\n    # Test case 5: Edge case with an empty list\n    print(calculate_mean([]))  # Expected output: 0.0"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # Length of the list\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Missing number is 2\n    print(find_missing_number([0, 1, 3]))  # Output: 2\n    \n    # Test case 2: Missing number is 0\n    print(find_missing_number([1, 2, 3]))  # Output: 0\n    \n    # Test case 3: Missing number is 4\n    print(find_missing_number([0, 1, 2, 3]))  # Output: 4\n    \n    # Test case 4: Missing number is 1\n    print(find_missing_number([0]))  # Output: 1\n    \n    # Test case 5: Missing number is 3\n    print(find_missing_number([0, 1, 2, 4, 5]))  # Output: 3"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the cumulative sum\n            negative_sum += number\n            \n    # Return the total sum of negative numbers\n    return negative_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed numbers\n    print(sum_negative_numbers([1, -2, 3, -4, 5]))  # Expected output: -6 (-2 + -4)\n    \n    # Test case 2: All positive numbers\n    print(sum_negative_numbers([1, 2, 3, 4, 5]))    # Expected output: 0 (no negative numbers)\n    \n    # Test case 3: All negative numbers\n    print(sum_negative_numbers([-1, -2, -3, -4, -5]))  # Expected output: -15 (-1 + -2 + -3 + -4 + -5)\n    \n    # Test case 4: Empty list\n    print(sum_negative_numbers([]))                    # Expected output: 0 (no numbers)\n    \n    # Test case 5: No negative numbers\n    print(sum_negative_numbers([0, 1, 2, 3]))         # Expected output: 0 (no negative numbers)"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with multiple occurrences\n    print(count_elements([1, 2, 3, 4, 2, 2], 2))  # Expected output: 3\n\n    # Test case 2: Target not in the list\n    print(count_elements([1, 2, 3, 4], 5))  # Expected output: 0\n\n    # Test case 3: Target is the only element in the list\n    print(count_elements([5], 5))  # Expected output: 1\n\n    # Test case 4: Empty list\n    print(count_elements([], 1))  # Expected output: 0\n\n    # Test case 5: All elements are the target\n    print(count_elements([7, 7, 7, 7], 7))  # Expected output: 4\n\n    # Test case 6: Negative numbers\n    print(count_elements([-1, -2, -3, -1, -1], -1))  # Expected output: 3"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    This function takes a list of strings and returns a list of strings that are duplicates.\n    \n    Parameters:\n    strings (List[str]): A list of strings to check for duplicates.\n    \n    Returns:\n    List[str]: A list of duplicate strings.\n    \"\"\"\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count each string's occurrences\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # Extract strings that have a count greater than 1 (duplicates)\n    duplicates = [string for string, count in count_dict.items() if count > 1]\n    \n    return duplicates\n\n# Test cases to validate the functionality of the find_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    print(find_duplicates([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]))  # Expected: ['apple', 'banana']\n    \n    # Test case 2: No duplicates\n    print(find_duplicates([\"cat\", \"dog\", \"fish\"]))  # Expected: []\n    \n    # Test case 3: All duplicates\n    print(find_duplicates([\"a\", \"a\", \"a\", \"a\"]))  # Expected: ['a']\n    \n    # Test case 4: Mixed case sensitivity\n    print(find_duplicates([\"Hello\", \"hello\", \"HELLO\", \"hello\"]))  # Expected: ['hello']\n    \n    # Test case 5: Empty list\n    print(find_duplicates([]))  # Expected: []\n    \n    # Test case 6: Special characters\n    print(find_duplicates([\"!@#\", \"!@#\", \"abc\", \"abc\", \"123\"]))  # Expected: ['!@#', 'abc']"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([])  # Edge case: empty list\n    0\n    >>> count_negative_numbers([-1, -2, -3])  # All negative\n    3\n    >>> count_negative_numbers([0, 1, 2])  # No negatives\n    0\n    >>> count_negative_numbers([-1, 0, 1])  # Mixed with zero\n    1\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            negative_count += 1  # Increment the counter if negative\n    \n    return negative_count  # Return the total count of negative numbers\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_negative_numbers([-1, 2, -3, 4, -5, 6]))  # Expected output: 3\n    print(count_negative_numbers([1, 2, 3, 4, 5, 6]))    # Expected output: 0\n    print(count_negative_numbers([]))                      # Expected output: 0\n    print(count_negative_numbers([-1, -2, -3]))           # Expected output: 3\n    print(count_negative_numbers([0, 1, 2]))               # Expected output: 0\n    print(count_negative_numbers([-1, 0, 1]))              # Expected output: 1"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], chunk_size: int) -> List[int]:\n    \"\"\"\n    Reverses the elements of the input list in chunks of specified size.\n\n    Parameters:\n    data (List[int]): The list of integers to be processed.\n    chunk_size (int): The size of the chunks to reverse.\n\n    Returns:\n    List[int]: A new list with the elements reversed in chunks.\n    \"\"\"\n    if chunk_size <= 0:\n        raise ValueError(\"Chunk size must be a positive integer.\")\n    \n    result = []\n    \n    # Iterate over the list in steps of chunk_size\n    for i in range(0, len(data), chunk_size):\n        # Get the current chunk\n        chunk = data[i:i + chunk_size]\n        # Reverse the current chunk and add to the result\n        result.extend(reversed(chunk))\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple chunks\n    print(reverse_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))  # Expected: [3, 2, 1, 6, 5, 4, 9, 8, 7]\n    \n    # Test case 2: List length not a multiple of chunk size\n    print(reverse_sublists([1, 2, 3, 4, 5], 2))  # Expected: [2, 1, 4, 3, 5]\n    \n    # Test case 3: Single element\n    print(reverse_sublists([42], 1))  # Expected: [42]\n    \n    # Test case 4: Empty list\n    print(reverse_sublists([], 3))  # Expected: []\n    \n    # Test case 5: Chunk size greater than list length\n    print(reverse_sublists([1, 2, 3], 5))  # Expected: [3, 2, 1]\n    \n    # Test case 6: Invalid chunk size\n    try:\n        print(reverse_sublists([1, 2, 3], 0))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected: \"Chunk size must be a positive integer.\""}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To keep track of the maximum number of consecutive 1s\n    current_count = 0  # To count the current streak of 1s\n    \n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current streak of 1s\n        else:\n            max_count = max(max_count, current_count)  # Update max if current streak is greater\n            current_count = 0  # Reset current streak since we hit a 0\n    \n    # Final check in case the array ends with a streak of 1s\n    max_count = max(max_count, current_count)\n    \n    return max_count  # Return the maximum count of consecutive 1s"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current zero streak\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current is greater\n            current_zeros = 0  # Reset current zero streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: No zeros\n    print(count_consecutive_zeros([1, 2, 3, 4]))  # Expected output: 0\n\n    # Test case 2: All zeros\n    print(count_consecutive_zeros([0, 0, 0, 0]))  # Expected output: 4\n\n    # Test case 3: Mixed numbers with consecutive zeros\n    print(count_consecutive_zeros([1, 0, 0, 2, 0, 0, 0, 3]))  # Expected output: 3\n\n    # Test case 4: Zeros at the beginning and end\n    print(count_consecutive_zeros([0, 0, 1, 2, 0, 0]))  # Expected output: 2\n\n    # Test case 5: Single zero\n    print(count_consecutive_zeros([1, 0, 2]))  # Expected output: 1\n\n    # Test case 6: No elements\n    print(count_consecutive_zeros([]))  # Expected output: 0"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to a list and return\n\n# Test cases to validate the functionality of the find_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    print(find_duplicates([1.0, 2.0, 3.0, 2.0, 1.0]))  # Expected output: [1.0, 2.0]\n\n    # Test case 2: No duplicates\n    print(find_duplicates([1.0, 2.0, 3.0]))  # Expected output: []\n\n    # Test case 3: All duplicates\n    print(find_duplicates([1.0, 1.0, 1.0, 1.0]))  # Expected output: [1.0]\n\n    # Test case 4: Mixed types of duplicates\n    print(find_duplicates([1.0, 2.0, 3.0, 2.0, 3.0, 4.0]))  # Expected output: [2.0, 3.0]\n\n    # Test case 5: Empty list\n    print(find_duplicates([]))  # Expected output: []\n\n    # Test case 6: Duplicates with negative numbers\n    print(find_duplicates([-1.0, -2.0, -1.0, -3.0, -2.0]))  # Expected output: [-1.0, -2.0]"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shifting the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 3)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate its digits\n    str_x = str(x)\n    length = len(str_x)\n    \n    # If the shift is greater than the number of digits, reverse the string\n    if shift >= length:\n        return str_x[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % length\n    \n    # Perform the circular shift\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted_str\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n    \n    Args:\n    n (int): The number of cars in each direction (left to right and right to left).\n    \n    Returns:\n    int: The total number of collisions.\n    \n    Each car moving left to right will collide with each car moving right to left.\n    Therefore, the total number of collisions is n * n.\n    \"\"\"\n    # The total number of collisions is the product of the number of cars in each direction\n    return n * n\n\n# Test cases to validate the functionality of the car_race_collision function\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    assert car_race_collision(100) == 10000, \"Test case 100 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_car_race_collision()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the functionality of the iscube function\nif __name__ == \"__main__\":\n    print(iscube(1))    # True\n    print(iscube(2))    # False\n    print(iscube(-1))   # True\n    print(iscube(64))   # True\n    print(iscube(0))    # True\n    print(iscube(180))  # False\n    print(iscube(-27))  # True\n    print(iscube(729))  # True\n    print(iscube(-729)) # True"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string the reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # If the string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the length of the string\n    n = len(string)\n    \n    # Check for the longest palindromic suffix\n    for i in range(n):\n        # Check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, we take the prefix before this suffix\n            prefix = string[:i]\n            # Reverse the prefix and append it to the original string\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]\n\n# Test cases to validate the functionality of the make_palindrome function\nif __name__ == \"__main__\":\n    print(make_palindrome(''))          # Expected: ''\n    print(make_palindrome('cat'))       # Expected: 'catac'\n    print(make_palindrome('cata'))      # Expected: 'catac'\n    print(make_palindrome('race'))      # Expected: 'racecar'\n    print(make_palindrome('a'))         # Expected: 'a'\n    print(make_palindrome('ab'))        # Expected: 'aba'\n    print(make_palindrome('abc'))       # Expected: 'abcba'\n    print(make_palindrome('abcd'))      # Expected: 'abcba'"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint: a must be less than 100\n    \n    primes = generate_primes(100)\n    \n    # Check all combinations of 3 primes\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True, because 2 * 3 * 5 = 30\nprint(is_multiply_prime(60))  # True, because 2 * 3 * 10 is not valid, but 3 * 5 * 2 = 30\nprint(is_multiply_prime(42))  # True, because 2 * 3 * 7 = 42\nprint(is_multiply_prime(1))   # False, no product of primes can equal 1\nprint(is_multiply_prime(100)) # False, out of bounds\nprint(is_multiply_prime(77))  # False, no combination of 3 primes gives 77"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Test cases to validate the functionality of the solve function\ndef test_solve():\n    assert solve(1000) == \"1\", \"Test case 1 failed\"\n    assert solve(150) == \"110\", \"Test case 2 failed\"\n    assert solve(147) == \"1100\", \"Test case 3 failed\"\n    assert solve(0) == \"0\", \"Test case 4 failed\"  # Edge case: sum of digits is 0\n    assert solve(9999) == \"36\", \"Test case 5 failed\"  # 9+9+9+9 = 36, binary is 100100\n    assert solve(1234) == \"10\", \"Test case 6 failed\"  # 1+2+3+4 = 10, binary is 1010\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_solve()"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears two places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacements = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    # Initialize an empty list to build the encoded message\n    encoded_message = []\n    \n    # Iterate through each character in the message\n    for char in message:\n        if char in vowel_replacements:\n            # Replace vowel with the corresponding letter\n            encoded_message.append(vowel_replacements[char])\n        else:\n            # Swap the case of the character\n            encoded_message.append(char.swapcase())\n    \n    # Join the list into a single string and return\n    return ''.join(encoded_message)\n\n# Test cases to validate the functionality of the encode function\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'\n    print(encode('Hello World'))  # Expected output: 'hGNNQ wQRLD'\n    print(encode('Python Programming'))  # Expected output: 'pYTHON prOGrAMMING'\n    print(encode('AEIOU'))  # Expected output: 'CGKQW'"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import bisect\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    The polynomial is defined as:\n    p(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    \n    The function returns a single root of the polynomial, assuming\n    that the input list xs has an even number of coefficients and\n    the largest non-zero coefficient guarantees a solution.\n    \n    Args:\n        xs (list): Coefficients of the polynomial, where the i-th element\n                    corresponds to the coefficient of x^i.\n    \n    Returns:\n        float: A root of the polynomial.\n    \n    Examples:\n        >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n        -0.5\n        >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n        1.0\n    \"\"\"\n    # Define a function that will be used to find the root\n    def f(x):\n        return poly(xs, x)\n    \n    # Use the bisection method to find a root\n    # We can start with a reasonable interval, e.g., [-10, 10]\n    root = bisect(f, -10, 10)\n    return root\n\n# Test cases to validate the functionality of the find_zero function\nif __name__ == \"__main__\":\n    # Test case 1: Linear polynomial\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n\n    # Test case 2: Cubic polynomial with known roots\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0\n\n    # Test case 3: Quadratic polynomial with a double root\n    print(round(find_zero([1, -2, 1]), 2))  # Expected output: 1.0\n\n    # Test case 4: Higher degree polynomial\n    print(round(find_zero([1, 0, -4]), 2))  # Expected output: 2.0\n\n    # Test case 5: Polynomial with no real roots (should still find a root)\n    print(round(find_zero([1, 0, 1]), 2))  # Expected output: 0.0 (complex roots, but bisection will find a root)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit numbers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number '1'\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n == 1:\n        count_both = 1  # Only the number '1'\n    else:\n        count_both = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = count_starting_with_1 + count_ending_with_1 - count_both\n    \n    return total_count\n\n# Test cases\nprint(starts_one_ends(1))  # Expected output: 1 (only the number '1')\nprint(starts_one_ends(2))  # Expected output: 18 (11, 21, 31, ..., 91, 10, 11, 12, ..., 19)\nprint(starts_one_ends(3))  # Expected output: 271 (100-199, 101, 111, ..., 191, 201, ..., 901)\nprint(starts_one_ends(4))  # Expected output: 3700\nprint(starts_one_ends(5))  # Expected output: 46000"}
