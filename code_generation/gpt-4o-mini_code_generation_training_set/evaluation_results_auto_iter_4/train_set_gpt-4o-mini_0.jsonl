{"task_id": "auto/0", "completion": "from typing import List\nfrom collections import Counter\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    Find and return a list of duplicate strings from the input list.\n\n    Parameters:\n    strings (List[str]): A list of strings to check for duplicates.\n\n    Returns:\n    List[str]: A list of strings that are duplicates, each appearing only once.\n    \"\"\"\n    # Count occurrences of each string in the list\n    string_counts = Counter(strings)\n    \n    # Extract strings that have a count greater than 1 (duplicates)\n    duplicates = [string for string, count in string_counts.items() if count > 1]\n    \n    return duplicates"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if it's negative\n    \n    return negative_sum  # Return the final sum of negative numbers"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers to be checked.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n        >>> count_negative_numbers([])  # Edge case: empty list\n        0\n        >>> count_negative_numbers([-1, -2, -3])  # All negative\n        3\n        >>> count_negative_numbers([0, 1, 2])  # No negatives\n        0\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            negative_count += 1  # Increment the counter if negative\n    \n    return negative_count  # Return the total count of negative numbers\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    assert count_negative_numbers([-1, 2, -3, 4, -5, 6]) == 3\n    assert count_negative_numbers([1, 2, 3, 4, 5, 6]) == 0\n    assert count_negative_numbers([]) == 0  # Edge case: empty list\n    assert count_negative_numbers([-1, -2, -3]) == 3  # All negative\n    assert count_negative_numbers([0, 1, 2]) == 0  # No negatives\n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers in the list. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert the set of duplicates to a list\n\n# Example usage:\n# numbers = [1.0, 2.0, 3.0, 1.0, 2.0, 4.0]\n# print(find_duplicates(numbers))  # Output: [1.0, 2.0]"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the count of consecutive zeros\n        else:\n            # Update max_zeros if current_zeros is greater\n            if current_zeros > max_zeros:\n                max_zeros = current_zeros\n            current_zeros = 0  # Reset the current count for non-zero numbers\n\n    # Final check in case the list ends with zeros\n    if current_zeros > max_zeros:\n        max_zeros = current_zeros\n\n    return max_zeros"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of integers from 0 to n.\n    \n    Args:\n    nums (List[int]): A list of integers containing n distinct numbers in the range [0, n].\n    \n    Returns:\n    int: The missing number in the list.\n    \"\"\"\n    n = len(nums)  # The length of the list is n, meaning numbers should be from 0 to n\n    expected_sum = n * (n + 1) // 2  # Calculate the expected sum using the formula\n    actual_sum = sum(nums)  # Calculate the actual sum of the numbers in the list\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    return missing_number"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], chunk_size: int) -> List[int]:\n    \"\"\"\n    Reverses the elements of the input list in chunks of specified size.\n\n    Parameters:\n    data (List[int]): The list of integers to be processed.\n    chunk_size (int): The size of each chunk to reverse.\n\n    Returns:\n    List[int]: A new list with the elements reversed in chunks.\n    \"\"\"\n    if chunk_size <= 0:\n        raise ValueError(\"Chunk size must be a positive integer.\")\n    \n    reversed_list = []\n    \n    # Process the list in chunks\n    for i in range(0, len(data), chunk_size):\n        # Get the current chunk\n        chunk = data[i:i + chunk_size]\n        # Reverse the current chunk and add to the result\n        reversed_list.extend(reversed(chunk))\n    \n    return reversed_list"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To keep track of the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment the count for consecutive 1's\n        else:\n            max_count = max(max_count, current_count)  # Update max count if needed\n            current_count = 0  # Reset current count for 1's\n\n    # Final check in case the array ends with 1's\n    max_count = max(max_count, current_count)\n\n    return max_count"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each direction (left to right and right to left).\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # The total number of collisions is the product of the number of cars in each direction\n    total_collisions = n * n\n    return total_collisions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a few examples\n    print(car_race_collision(0))  # Expected output: 0\n    print(car_race_collision(1))  # Expected output: 1\n    print(car_race_collision(2))  # Expected output: 4\n    print(car_race_collision(3))  # Expected output: 9"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root and round it to the nearest integer\n    n = round(abs(a) ** (1/3))\n    \n    # Check if n^3 or (-n)^3 equals a\n    return n**3 == a or (-n)**3 == a\n\n# Test cases to validate the function\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-27) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # If the input string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the length of the string\n    n = len(string)\n    \n    # Check for the longest palindromic suffix\n    for i in range(n):\n        # Check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, we need to append the reverse of the prefix before this suffix\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the entire string is non-palindromic\n    # In this case, we append the entire string reversed (except the last character)\n    return string + string[-2::-1]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(make_palindrome(''))        # Expected: ''\n    print(make_palindrome('cat'))     # Expected: 'catac'\n    print(make_palindrome('cata'))    # Expected: 'catac'\n    print(make_palindrome('race'))     # Expected: 'racecar'\n    print(make_palindrome('a'))       # Expected: 'a'\n    print(make_palindrome('ab'))      # Expected: 'aba'\n    print(make_palindrome('abc'))     # Expected: 'abcba'"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary\n    binary_sum = bin(digit_sum)[2:]  # bin() returns a string starting with '0b', we slice it off\n    \n    # Step 3: Return the binary representation\n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string to manipulate its digits\n    str_x = str(x)\n    length = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= length:\n        return str_x[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % length\n    \n    # Perform the circular shift\n    if effective_shift == 0:\n        return str_x  # No shift needed\n    else:\n        # Shift the string\n        return str_x[-effective_shift:] + str_x[:-effective_shift]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Expected: '21'\n    print(circular_shift(12, 2))  # Expected: '12'\n    print(circular_shift(12345, 1))  # Expected: '51234'\n    print(circular_shift(12345, 5))  # Expected: '54321'\n    print(circular_shift(12345, 6))  # Expected: '54321'"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint: a must be less than 100\n\n    primes = generate_primes(100)  # Generate all primes less than 100\n    prime_count = len(primes)\n\n    # Check all combinations of three primes\n    for i in range(prime_count):\n        for j in range(i, prime_count):\n            for k in range(j, prime_count):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:\n                    break  # No need to check further if product exceeds a\n\n    return False  # No combination found\n\n# Example usage\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(60))  # Should return True (2 * 3 * 10, but 10 is not prime)\nprint(is_multiply_prime(1))   # Should return False\nprint(is_multiply_prime(97))  # Should return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping case of all letters and replacing\n    all vowels with the letter that appears 2 places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel and swap case\n            encoded_message.append(vowel_replacement[char])\n        else:\n            # Swap case for non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    return ''.join(encoded_message)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    :param xs: List of coefficients [a0, a1, a2, ..., an] for the polynomial\n               a0 + a1*x + a2*x^2 + ... + an*x^n\n    :param x: The point at which to evaluate the polynomial\n    :return: The value of the polynomial at x\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    Assumes xs has an even number of coefficients and the largest\n    non-zero coefficient guarantees a solution.\n    \n    :param xs: List of coefficients of the polynomial\n    :return: A root of the polynomial\n    :raises ValueError: If the input does not have an even number of coefficients\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Define the function to find the root\n    def f(x):\n        return poly(xs, x)\n    \n    # Initial bounds for the bisection method\n    lower_bound = -1000  # Arbitrary large negative number\n    upper_bound = 1000   # Arbitrary large positive number\n    \n    # Check if there is a sign change in the initial bounds\n    if f(lower_bound) * f(upper_bound) > 0:\n        raise ValueError(\"The function must have opposite signs at the bounds.\")\n    \n    # Bisection method\n    while upper_bound - lower_bound > 1e-7:  # Precision threshold\n        midpoint = (lower_bound + upper_bound) / 2\n        if f(midpoint) == 0:\n            return midpoint  # Found exact root\n        elif f(lower_bound) * f(midpoint) < 0:\n            upper_bound = midpoint  # Root is in the left half\n        else:\n            lower_bound = midpoint  # Root is in the right half\n    \n    return (lower_bound + upper_bound) / 2  # Return the midpoint as the root\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1)(x - 2)(x - 3)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers to consider.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    count_ending_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers starting and ending with '1'\n    count_starting_and_ending_with_1 = 10 ** (n - 2) if n > 1 else 0\n    \n    # Total count using inclusion-exclusion principle\n    total_count = (count_starting_with_1 + count_ending_with_1 - \n                   count_starting_and_ending_with_1)\n    \n    return total_count\n\n# Example usage:\nprint(starts_one_ends(1))  # Output: 1 (only the number 1)\nprint(starts_one_ends(2))  # Output: 18 (10-19 and 11, 21, ..., 91)\nprint(starts_one_ends(3))  # Output: 198 (100-199 and 101, 111, ..., 191, 201, ..., 901)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
