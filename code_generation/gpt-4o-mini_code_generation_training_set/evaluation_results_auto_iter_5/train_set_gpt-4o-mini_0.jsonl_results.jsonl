{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        int: The count of negative integers in the list.\n\n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([])  # Edge case: empty list\n    0\n    >>> count_negative_numbers([-1, -2, -3])  # Edge case: all negative\n    3\n    >>> count_negative_numbers([0, 1, 2])  # Edge case: no negatives\n    0\n    >>> count_negative_numbers([-1, 0, 1])  # Mixed case\n    1\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count\n\n# If you want to run the test cases, you can use the following code:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list. Returns 0 if there are no negative numbers.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if negative\n    \n    return negative_sum  # Return the final sum of negative numbers", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # List to store duplicates\n    duplicates = []\n    \n    # Collect duplicates maintaining the order of first appearance\n    for string in strings:\n        if count_dict[string] > 1 and string not in duplicates:\n            duplicates.append(string)\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\n    print(find_duplicates(example_strings))  # Output: ['apple', 'banana']", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # The length of the list is n\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums = [0, 1, 2, 4, 5]  # Example list with a missing number 3\n    print(find_missing_number(nums))  # Output: 3", "result": "failed: ", "passed": false}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers in the list. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers in the list\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean", "result": "failed: ", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate numbers found in the input list, \n                 each appearing only once.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to list and return\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_numbers = [1.0, 2.5, 3.0, 2.5, 4.0, 1.0, 5.0, 3.0]\n    print(find_duplicates(example_numbers))  # Output: [1.0, 2.5, 3.0]", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive zeros\n    current_count = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_count += 1  # Increment current count if the number is zero\n        else:\n            # Update max_count if current_count is greater\n            if current_count > max_count:\n                max_count = current_count\n            current_count = 0  # Reset current count if the number is not zero\n\n    # Final check in case the list ends with zeros\n    if current_count > max_count:\n        max_count = current_count\n\n    return max_count\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_list = [1, 0, 0, 2, 0, 0, 0, 3, 0]\n    print(count_consecutive_zeros(test_list))  # Output: 3", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    \"\"\"\n    Reverses the order of elements in the provided list of integers.\n\n    Parameters:\n    data (List[int]): A list of integers to be reversed.\n\n    Returns:\n    List[int]: A new list containing the elements of 'data' in reverse order.\n    \"\"\"\n    # Reverse the list using slicing\n    reversed_data = data[::-1]\n    return reversed_data\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_data = [1, 2, 3, 4, 5]\n    print(reverse_sublists(sample_data))  # Output: [5, 4, 3, 2, 1]", "result": "failed: ", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To store the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current count if we see a 1\n        else:\n            max_count = max(max_count, current_count)  # Update max count if current is greater\n            current_count = 0  # Reset current count for the next sequence\n\n    # Final check in case the array ends with 1's\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(find_max_consecutive_ones([1, 1, 0, 1, 1, 1]))  # Output: 3\n    print(find_max_consecutive_ones([1, 0, 1, 1, 0, 1]))  # Output: 2\n    print(find_max_consecutive_ones([0, 0, 0]))            # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube of some integer.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [1, 2, -1, 64, 0, 180, -64, 27, -27, 8, -8]\n    for case in test_cases:\n        print(f\"iscube({case}) ==> {iscube(case)}\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # If the input string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        # Check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, take the prefix before this suffix and reverse it\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the entire string is non-palindromic\n    # In this case, we will append the entire string reversed\n    return string + string[::-1]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(make_palindrome(''))        # Expected: ''\n    print(make_palindrome('cat'))     # Expected: 'catac'\n    print(make_palindrome('cata'))    # Expected: 'catac'\n    print(make_palindrome('race'))     # Expected: 'racecar'\n    print(make_palindrome('a'))       # Expected: 'a'\n    print(make_palindrome('ab'))      # Expected: 'aba'\n    print(make_palindrome('abc'))     # Expected: 'abcba'", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 2)\n    '45123'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(-123, 1)\n    '-321'\n    \"\"\"\n    # Convert the integer to a string\n    str_x = str(x)\n    \n    # Handle negative numbers\n    is_negative = str_x[0] == '-'\n    if is_negative:\n        str_x = str_x[1:]  # Remove the negative sign for processing\n    \n    # Get the length of the digits\n    length = len(str_x)\n    \n    # Calculate effective shift\n    effective_shift = shift % length if length > 0 else 0\n    \n    if effective_shift == 0:\n        # If no shift is needed, return the original string\n        result = str_x\n    elif shift > length:\n        # If shift is greater than the number of digits, reverse the digits\n        result = str_x[::-1]\n    else:\n        # Perform the circular shift\n        result = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    # Add the negative sign back if the original number was negative\n    if is_negative:\n        result = '-' + result\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each direction (left to right and right to left).\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    total_collisions = n * n\n    return total_collisions\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test with 0 cars\n    print(car_race_collision(0))  # Expected output: 0\n\n    # Test with 1 car in each direction\n    print(car_race_collision(1))  # Expected output: 1\n\n    # Test with 2 cars in each direction\n    print(car_race_collision(2))  # Expected output: 4\n\n    # Test with 3 cars in each direction\n    print(car_race_collision(3))  # Expected output: 9\n\n    # Test with 10 cars in each direction\n    print(car_race_collision(10))  # Expected output: 100", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Ensure a is within the specified range\n\n    primes = generate_primes(100)  # Get all prime numbers less than 100\n    prime_count = len(primes)\n\n    # Check all combinations of three primes\n    for i in range(prime_count):\n        for j in range(i, prime_count):\n            for k in range(j, prime_count):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:\n                    break  # No need to check further if the product exceeds a\n\n    return False  # If no combination found\n\n# Example usage\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(60))  # Should return True (3 * 5 * 4, but 4 is not prime)\nprint(is_multiply_prime(1))   # Should return False\nprint(is_multiply_prime(100))  # Should return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping the case of all letters\n    and replacing all vowels with the letter that appears 2 places\n    ahead of that vowel in the English alphabet.\n\n    Parameters:\n    message (str): The input message to encode.\n\n    Returns:\n    str: The encoded message.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    # Initialize an empty list to build the encoded message\n    encoded_message = []\n    \n    # Iterate through each character in the message\n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel and swap case\n            encoded_message.append(vowel_replacement[char])\n        else:\n            # Swap case for non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    # Join the list into a single string and return\n    return ''.join(encoded_message)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary\n    binary_sum = bin(digit_sum)[2:]  # bin() returns a string starting with '0b', we slice it off\n    \n    # Step 3: Return the binary representation\n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    The polynomial is defined as:\n    f(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef poly_derivative(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \n    The derivative is defined as:\n    f'(x) = xs[1] + 2 * xs[2] * x + ... + n * xs[n] * x^(n-1)\n    \"\"\"\n    return sum(i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, initial_guess: float = 0.0, tolerance: float = 1e-7, max_iterations: int = 1000) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs using the Newton-Raphson method.\n    \n    Parameters:\n    - xs: List of coefficients of the polynomial.\n    - initial_guess: Initial guess for the root.\n    - tolerance: The acceptable error for the root.\n    - max_iterations: Maximum number of iterations to prevent infinite loops.\n    \n    Returns:\n    A root of the polynomial.\n    \n    Raises:\n    ValueError: If the input list does not have an even number of coefficients.\n    \n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    x = initial_guess\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        \n        if abs(f_x) < tolerance:  # Found a root\n            return x\n        \n        if f_prime_x == 0:  # Avoid division by zero\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        # Newton-Raphson update\n        x = x - f_x / f_prime_x\n    \n    raise ValueError(\"Maximum iterations reached. No solution found.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit integers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n\n    # Count of n-digit integers ending with '1'\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number '1'\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n\n    # Count of n-digit integers both starting and ending with '1'\n    if n == 1:\n        count_both = 1  # Only the number '1'\n    else:\n        count_both = 10 ** (n - 2)\n\n    # Total count using inclusion-exclusion principle\n    total_count = count_starting_with_1 + count_ending_with_1 - count_both\n\n    return total_count\n\n# Example test cases\nprint(starts_one_ends(1))  # Output: 1 (only the number '1')\nprint(starts_one_ends(2))  # Output: 18 (11, 21, 31, ..., 91, 10, 11, ..., 91)\nprint(starts_one_ends(3))  # Output: 271 (100-199, 110, 120, ..., 190, 101, 111, ..., 191)", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7", "result": "passed", "passed": true}
