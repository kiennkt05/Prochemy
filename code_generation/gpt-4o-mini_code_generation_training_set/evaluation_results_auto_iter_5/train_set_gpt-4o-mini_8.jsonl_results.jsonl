{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    \"\"\"\n    Reverses the order of elements in the given list of integers.\n\n    Parameters:\n    data (List[int]): A list of integers to be reversed.\n\n    Returns:\n    List[int]: A new list containing the elements of 'data' in reverse order.\n    \"\"\"\n    # Reverse the list using slicing\n    reversed_data = data[::-1]\n    return reversed_data\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_data = [1, 2, 3, 4, 5]\n    print(reverse_sublists(sample_data))  # Output: [5, 4, 3, 2, 1]", "result": "failed: ", "passed": false}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the cumulative sum\n            negative_sum += number\n            \n    # Return the total sum of negative numbers\n    return negative_sum\n\n# Test cases to validate the function\ndef test_sum_negative_numbers():\n    assert sum_negative_numbers([1, -2, 3, -4, 5]) == -6, \"Test case 1 failed\"\n    assert sum_negative_numbers([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert sum_negative_numbers([1, 2, 3]) == 0, \"Test case 3 failed\"\n    assert sum_negative_numbers([]) == 0, \"Test case 4 failed\"\n    assert sum_negative_numbers([-1, 0, 1]) == -1, \"Test case 5 failed\"\n    assert sum_negative_numbers([-5, -10, 5, 10]) == -15, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_negative_numbers()", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # Length of the list\n    expected_sum = n * (n + 1) // 2  # Sum of numbers from 0 to n\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number", "result": "failed: ", "passed": false}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean", "result": "failed: ", "passed": false}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target in the list.\n    \"\"\"\n    count = 0  # Initialize a counter for occurrences\n    for number in numbers:  # Iterate through each number in the list\n        if number == target:  # Check if the current number matches the target\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the total count\n\n# Test cases to validate the function\ndef test_count_elements():\n    assert count_elements([1, 2, 3, 4, 5], 3) == 1, \"Test Case 1 Failed\"\n    assert count_elements([1, 2, 3, 4, 5], 6) == 0, \"Test Case 2 Failed\"\n    assert count_elements([1, 2, 3, 3, 3, 4, 5], 3) == 3, \"Test Case 3 Failed\"\n    assert count_elements([], 1) == 0, \"Test Case 4 Failed\"  # Edge case: empty list\n    assert count_elements([1, 1, 1, 1, 1], 1) == 5, \"Test Case 5 Failed\"  # All elements match\n    assert count_elements([1, 2, 3, 4, 5], 0) == 0, \"Test Case 6 Failed\"  # Target not in list\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_elements()", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    # Dictionary to count occurrences of each string\n    count = {}\n    # List to store duplicates in order of their first appearance\n    duplicates = []\n    # Set to track already added duplicates\n    seen = set()\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count:\n            count[string] += 1\n        else:\n            count[string] = 1\n    \n    # Identify duplicates\n    for string in strings:\n        if count[string] > 1 and string not in seen:\n            duplicates.append(string)\n            seen.add(string)  # Mark this string as seen\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\n    print(find_duplicates(example_strings))  # Output: ['apple', 'banana']", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers to be checked.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            negative_count += 1  # Increment the counter if negative\n    \n    return negative_count  # Return the total count of negative numbers", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of unique duplicate numbers from the input list.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    List[float]: A list of unique duplicate numbers.\n    \"\"\"\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Count occurrences of each number\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Extract numbers that appear more than once\n    duplicates = [number for number, count in count_dict.items() if count > 1]\n    \n    return duplicates", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current zero streak\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current streak is greater\n            current_zeros = 0  # Reset current streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To keep track of the maximum number of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current streak of 1's\n        else:\n            max_count = max(max_count, current_count)  # Update max if current streak is greater\n            current_count = 0  # Reset current streak\n\n    # Final check in case the array ends with 1's\n    max_count = max(max_count, current_count)\n\n    return max_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 3)\n    '7'\n    \"\"\"\n    # Convert the integer to a string to manipulate its digits\n    str_x = str(x)\n    length = len(str_x)\n    \n    # If the number of digits is 0 (which shouldn't happen for valid input), return ''\n    if length == 0:\n        return ''\n    \n    # Calculate effective shift\n    effective_shift = shift % length\n    \n    # If the effective shift is 0, return the original string\n    if effective_shift == 0:\n        return str_x\n    \n    # If the effective shift is equal to the length, return the reversed string\n    if shift >= length:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    return str_x[-effective_shift:] + str_x[:-effective_shift]\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car from the left to right will collide with each car from right to left\n    total_collisions = n * n\n    return total_collisions\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(car_race_collision(0))  # Expected output: 0 (no cars)\n    print(car_race_collision(1))  # Expected output: 1 (1 car collides with 1 car)\n    print(car_race_collision(2))  # Expected output: 4 (2 cars collide with 2 cars)\n    print(car_race_collision(3))  # Expected output: 9 (3 cars collide with 3 cars)\n    print(car_race_collision(10)) # Expected output: 100 (10 cars collide with 10 cars)", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1, the output should be \"1\".\n        For N = 150, the sum of digits will be 6, the output should be \"110\".\n        For N = 147, the sum of digits will be 12, the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digit_str = str(N)\n    \n    # Step 2: Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in digit_str)\n    \n    # Step 3: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    # Step 4: Return the binary representation of the sum\n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # Edge case: if the string is empty, return it as is\n    if not string:\n        return string\n    \n    # Find the length of the string\n    n = len(string)\n    \n    # Check for the longest palindromic suffix\n    for i in range(n):\n        # Check if the substring from i to the end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, we need to reverse the prefix before this suffix\n            prefix = string[:i]\n            return string + prefix[::-1]  # Append the reversed prefix\n    \n    # If no palindromic suffix is found, the whole string is returned with an empty prefix\n    return string + string[::-1]  # This case should not occur due to the loop\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom sympy import isprime\n\ndef is_multiply_prime(a):\n    \"\"\"Check if the given number is the product of exactly three prime numbers.\n    \n    Args:\n        a (int): The number to check, must be less than 100.\n        \n    Returns:\n        bool: True if a is the product of three prime numbers, False otherwise.\n    \"\"\"\n    if a >= 100:\n        raise ValueError(\"Input must be less than 100.\")\n    \n    # Generate a list of prime numbers less than 100\n    primes = [i for i in range(2, 100) if isprime(i)]\n    \n    # Check all combinations of three primes\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Test cases\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True  # 2 * 3 * 5\n    assert is_multiply_prime(42) == True  # 2 * 3 * 7\n    assert is_multiply_prime(70) == True  # 2 * 5 * 7\n    assert is_multiply_prime(60) == True  # 2 * 3 * 10 (not valid, but 2 * 5 * 3 is)\n    assert is_multiply_prime(1) == False   # No product of three primes\n    assert is_multiply_prime(2) == False   # Only one prime\n    assert is_multiply_prime(100) == False  # Out of bounds\n    assert is_multiply_prime(15) == False   # 3 * 5 (only two primes)\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_multiply_prime()", "result": "failed: No module named 'sympy'", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-27) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping the case of all letters\n    and replacing all vowels with the letter that appears two places\n    ahead in the English alphabet.\n\n    Parameters:\n    message (str): The input message to encode.\n\n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel with the corresponding letter\n            encoded_message.append(vowel_replacement[char])\n        else:\n            # Swap case for non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    # Join the list into a single string and return\n    return ''.join(encoded_message)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n    assert encode('Hello World') == 'hGNNQ wQRLD'\n    assert encode('Python Programming') == 'pYTHON prOGrAMMING'\n    assert encode('AEIOU') == 'CGKQW'\n    assert encode('aeiou') == 'cgkqw'\n    assert encode('') == ''\n    assert encode('a') == 'C'\n    assert encode('A') == 'C'\n    \n    print(\"All test cases passed!\")", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial.\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list, lower_bound: float = -1000, upper_bound: float = 1000, tolerance: float = 1e-7) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs using the bisection method.\n    \n    Parameters:\n    - xs: List of coefficients of the polynomial.\n    - lower_bound: The lower bound of the interval to search for a root.\n    - upper_bound: The upper bound of the interval to search for a root.\n    - tolerance: The acceptable error for the root finding.\n    \n    Returns:\n    A root of the polynomial.\n    \n    Raises:\n    ValueError: If the input list does not have an even number of coefficients.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Ensure the function changes signs over the interval\n    if poly(xs, lower_bound) * poly(xs, upper_bound) > 0:\n        raise ValueError(\"The function must change signs over the interval [lower_bound, upper_bound].\")\n    \n    while (upper_bound - lower_bound) > tolerance:\n        midpoint = (lower_bound + upper_bound) / 2\n        if poly(xs, midpoint) == 0:\n            return midpoint  # Found exact root\n        elif poly(xs, lower_bound) * poly(xs, midpoint) < 0:\n            upper_bound = midpoint  # Root is in the left half\n        else:\n            lower_bound = midpoint  # Root is in the right half\n    \n    return (lower_bound + upper_bound) / 2  # Return the midpoint as the root\n\n# Test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n    \n    # Count of n-digit numbers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number '1'\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n > 1:\n        count_both = 10 ** (n - 2)\n    else:\n        count_both = 0\n    \n    # Total count using inclusion-exclusion principle\n    total_count = count_starting_with_1 + count_ending_with_1 - count_both\n    \n    return total_count\n\n# Example usage\nprint(starts_one_ends(1))  # Output: 1 (only the number '1')\nprint(starts_one_ends(2))  # Output: 18 (11, 21, 31, ..., 91, 10, 11, 12, ..., 19)\nprint(starts_one_ends(3))  # Output: 271 (100-199, 101, 111, ..., 191, 210-910)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7", "result": "passed", "passed": true}
