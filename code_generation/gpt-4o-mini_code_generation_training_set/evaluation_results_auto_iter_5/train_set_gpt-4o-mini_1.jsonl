{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    >>> count_negative_numbers([-1, -2, -3, -4, -5])\n    5\n    >>> count_negative_numbers([])\n    0\n    >>> count_negative_numbers([0, 1, 2, 3])\n    0\n    >>> count_negative_numbers([-1, 0, 1])\n    1\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count\n\n# If you want to run the tests, you can use the following code:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Sums all negative numbers in the provided list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of all negative integers in the list. If there are no negative integers, returns 0.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n            \n    return negative_sum\n\n# Test cases to validate the function\ndef test_sum_negative_numbers():\n    assert sum_negative_numbers([1, -2, 3, -4, 5]) == -6, \"Test case 1 failed\"\n    assert sum_negative_numbers([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert sum_negative_numbers([1, 2, 3]) == 0, \"Test case 3 failed\"\n    assert sum_negative_numbers([]) == 0, \"Test case 4 failed\"\n    assert sum_negative_numbers([-5, 5, -10, 10]) == -15, \"Test case 5 failed\"\n    assert sum_negative_numbers([-1, 0, 1]) == -1, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_negative_numbers()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    \"\"\"\n    Reverses the entire list of integers.\n\n    Parameters:\n    data (List[int]): A list of integers to be reversed.\n\n    Returns:\n    List[int]: A new list containing the elements of 'data' in reverse order.\n    \"\"\"\n    # Return the reversed list\n    return data[::-1]"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    n = len(nums)  # Length of the list\n    expected_sum = n * (n + 1) // 2  # Sum of first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number\n    return missing_number\n\n# Example usage:\n# nums = [0, 1, 2, 4] should return 3\nprint(find_missing_number([0, 1, 2, 4]))  # Output: 3"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    max_count = 0  # To store the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n\n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current count for consecutive 1's\n        else:\n            max_count = max(max_count, current_count)  # Update max count if needed\n            current_count = 0  # Reset current count for 0\n\n    # Final check in case the array ends with a sequence of 1's\n    max_count = max(max_count, current_count)\n\n    return max_count"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current zero streak\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current streak is greater\n            current_zeros = 0  # Reset current streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    # Dictionary to hold the count of each string\n    count_dict = {}\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # List to hold the duplicates\n    duplicates = []\n    \n    # Collect strings that have a count greater than 1\n    for string, count in count_dict.items():\n        if count > 1:\n            duplicates.append(string)\n    \n    return duplicates\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\n    print(find_duplicates(example_strings))  # Output: ['apple', 'banana']"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to list and return"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root and round it to the nearest integer\n    cube_root = round(a ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the original number\n    return cube_root ** 3 == a\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [1, 2, -1, 64, 0, 180]\n    results = {case: iscube(case) for case in test_cases}\n    print(results)"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix starting from index i is a palindrome\n            # Take the prefix before this suffix and reverse it\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix found, the whole string is not a palindrome\n    return string + string[:-1][::-1]  # This handles the case where the string is not a palindrome at all\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations_with_replacement\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint: a must be less than 100\n    \n    primes = generate_primes(100)\n    \n    # Check combinations of three primes (with replacement)\n    for combo in combinations_with_replacement(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n\n# Example test cases\nprint(is_multiply_prime(30))  # True, because 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # True, because 60 = 2 * 3 * 10 (10 is not prime, so False)\nprint(is_multiply_prime(1))   # False, as 1 cannot be expressed as a product of primes\nprint(is_multiply_prime(97))  # False, as 97 is prime and cannot be expressed as a product of three primes"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary\n    binary_sum = bin(digit_sum)[2:]  # bin() returns a string starting with '0b', we slice it off\n    \n    # Step 3: Return the binary representation\n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n\n    Args:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    total_collisions = n * n\n    return total_collisions\n\n# Example usage\nif __name__ == \"__main__\":\n    print(car_race_collision(3))  # Output: 9\n    print(car_race_collision(5))  # Output: 25"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string to manipulate digits\n    str_x = str(x)\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    shift = shift % num_digits  # Handle cases where shift is larger than num_digits\n    return str_x[-shift:] + str_x[:-shift]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Expected: '21'\n    print(circular_shift(12, 2))  # Expected: '12'\n    print(circular_shift(12345, 1))  # Expected: '51234'\n    print(circular_shift(12345, 5))  # Expected: '54321'\n    print(circular_shift(12345, 6))  # Expected: '54321'"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef poly_derivative(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    The derivative is calculated as: xs[1] + 2*xs[2]*x + ... + n*xs[n]*x^(n-1)\n    \"\"\"\n    return sum(i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, initial_guess: float = 0.0, tolerance: float = 1e-7, max_iterations: int = 1000) -> float:\n    \"\"\" \n    Find x such that poly(x) = 0 using the Newton-Raphson method.\n    xs are coefficients of a polynomial.\n    find_zero returns only one zero point, even if there are many.\n    The input list xs must have an even number of coefficients and the largest non-zero coefficient guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    x = initial_guess\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        \n        if f_prime_x == 0:  # Avoid division by zero\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        x_new = x - f_x / f_prime_x\n        \n        if abs(x_new - x) < tolerance:  # Check for convergence\n            return x_new\n        \n        x = x_new\n    \n    raise ValueError(\"Maximum iterations reached. No solution found.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x should return -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1)(x - 2)(x - 3) should return 1.0\n    print(round(find_zero([1, 0, -4]), 2))  # x^2 - 4 should return 2.0\n    print(round(find_zero([1, 0, 0, -1]), 2))  # x^3 - 1 should return 1.0"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears 2 places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            swapped_case = char.swapcase()\n            # Replace vowel if it is one\n            if swapped_case in vowel_replacement:\n                encoded_message.append(vowel_replacement[swapped_case])\n            else:\n                encoded_message.append(swapped_case)\n        else:\n            # If it's not a letter, we can choose to ignore it or keep it as is\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit integers\n    total_n_digit = 9 * (10 ** (n - 1))\n\n    # Count of n-digit integers starting with '1'\n    start_with_one = 10 ** (n - 1)\n\n    # Count of n-digit integers ending with '1'\n    if n == 1:\n        end_with_one = 1  # Only the number '1'\n    else:\n        end_with_one = 9 * (10 ** (n - 2))\n\n    # Count of n-digit integers both starting and ending with '1'\n    if n == 1:\n        both = 1  # Only the number '1'\n    else:\n        both = 10 ** (n - 2)\n\n    # Using inclusion-exclusion principle\n    result = start_with_one + end_with_one - both\n    return result\n\n# Example usage\nprint(starts_one_ends(1))  # Output: 1 (only the number '1')\nprint(starts_one_ends(2))  # Output: 18 (10, 11, 12, ..., 19, 21, ..., 91)\nprint(starts_one_ends(3))  # Output: 180 (100-199, 110, 120, ..., 190, 201, ..., 901)"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3], 10),\n        ([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1], 25),\n        ([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3], 13),\n        ([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6], 11),\n        ([0, 81, 12, 3, 1, 21], 3),\n        ([0, 8, 1, 2, 1, 7], 7),\n    ]\n    \n    for i, (lst, expected) in enumerate(test_cases):\n        result = skjkasdkd(lst)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
