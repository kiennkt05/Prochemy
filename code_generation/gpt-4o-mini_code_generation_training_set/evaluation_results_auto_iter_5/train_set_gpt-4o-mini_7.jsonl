{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        int: The count of negative integers in the list.\n\n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n        >>> count_negative_numbers([])  # Edge case: empty list\n        0\n        >>> count_negative_numbers([-1, -2, -3])  # All negative\n        3\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of target in numbers.\n    \"\"\"\n    count = 0  # Initialize a counter for occurrences\n    for number in numbers:  # Iterate through each number in the list\n        if number == target:  # Check if the current number matches the target\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the total count of occurrences"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of floating-point numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if negative\n    \n    return negative_sum  # Return the final sum of negative numbers\n\n# Test Cases\ndef test_sum_negative_numbers():\n    assert sum_negative_numbers([-1, -2, -3, 4, 5]) == -6, \"Test Case 1 Failed\"\n    assert sum_negative_numbers([1, 2, 3, 4, 5]) == 0, \"Test Case 2 Failed\"\n    assert sum_negative_numbers([]) == 0, \"Test Case 3 Failed\"\n    assert sum_negative_numbers([-1, 1, -1, 1]) == -2, \"Test Case 4 Failed\"\n    assert sum_negative_numbers([-10, -20, 30, 40]) == -30, \"Test Case 5 Failed\"\n    assert sum_negative_numbers([-5, -5, -5]) == -15, \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_negative_numbers()"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers which may include zeros.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current zero streak\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current streak is greater\n            current_zeros = 0  # Reset current streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_consecutive_zeros([1, 0, 0, 2, 0, 0, 0, 3]))  # Output: 3\n    print(count_consecutive_zeros([0, 0, 0, 0]))  # Output: 4\n    print(count_consecutive_zeros([1, 2, 3]))  # Output: 0\n    print(count_consecutive_zeros([]))  # Output: 0"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of integers from 0 to n.\n    \n    Args:\n    nums (List[int]): A list of unique integers in the range [0, n].\n    \n    Returns:\n    int: The missing integer in the range [0, n].\n    \"\"\"\n    n = len(nums)  # The length of the list represents the range 0 to n\n    expected_sum = n * (n + 1) // 2  # Sum of the first n natural numbers\n    actual_sum = sum(nums)  # Sum of the numbers present in the list\n    \n    # The missing number is the difference between expected and actual sums\n    missing_number = expected_sum - actual_sum\n    return missing_number\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(find_missing_number([0, 1, 2, 3, 5]))  # Output: 4\n    print(find_missing_number([1, 2, 3, 4, 5]))  # Output: 0\n    print(find_missing_number([0]))                # Output: 1\n    print(find_missing_number([]))                 # Output: 0"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of duplicate floating-point numbers, each appearing only once.\n    \"\"\"\n    seen = set()        # Set to track numbers that have been seen\n    duplicates = set()  # Set to track duplicate numbers\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to a list and return\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_numbers = [1.0, 2.5, 3.0, 2.5, 1.0, 4.0, 5.0, 3.0]\n    print(find_duplicates(sample_numbers))  # Output: [1.0, 2.5, 3.0]"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    \"\"\"\n    Function to find the maximum number of consecutive 1's in a binary array.\n    \n    Args:\n    nums (List[int]): A list of integers (0s and 1s).\n    \n    Returns:\n    int: The maximum number of consecutive 1's.\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive 1's\n    current_count = 0  # To count the current streak of 1's\n    \n    for num in nums:\n        if num == 1:\n            current_count += 1  # Increment current streak if the number is 1\n        else:\n            max_count = max(max_count, current_count)  # Update max if current streak ends\n            current_count = 0  # Reset current streak\n    \n    # Final check in case the array ends with 1's\n    max_count = max(max_count, current_count)\n    \n    return max_count\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(find_max_consecutive_ones([1, 1, 0, 1, 1, 1]))  # Expected output: 3\n    print(find_max_consecutive_ones([1, 0, 1, 1, 0, 1]))  # Expected output: 2\n    print(find_max_consecutive_ones([0, 0, 0]))            # Expected output: 0\n    print(find_max_consecutive_ones([1, 1, 1, 1]))         # Expected output: 4\n    print(find_max_consecutive_ones([]))                    # Expected output: 0"}
{"task_id": "auto/0", "completion": "from typing import List\nfrom collections import Counter\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    Find and return a list of duplicate strings from the input list.\n    \n    Parameters:\n    strings (List[str]): A list of strings to check for duplicates.\n    \n    Returns:\n    List[str]: A list of duplicate strings, each appearing only once.\n    \"\"\"\n    # Count occurrences of each string in the list\n    string_count = Counter(strings)\n    \n    # Extract strings that appear more than once\n    duplicates = [string for string, count in string_count.items() if count > 1]\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\n    print(find_duplicates(example_strings))  # Output: ['apple', 'banana']"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [1, 2, -1, 64, 0, 180, -27, 729, 8, -8]\n    for case in test_cases:\n        print(f\"iscube({case}) ==> {iscube(case)}\")"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving towards each other.\n\n    Args:\n    n (int): The number of cars moving left to right and the number of cars moving right to left.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right can collide with each car moving right to left\n    # Therefore, the total number of collisions is n * n\n    return n * n\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a few examples\n    print(car_race_collision(0))  # Expected output: 0 (no cars)\n    print(car_race_collision(1))  # Expected output: 1 (one collision)\n    print(car_race_collision(2))  # Expected output: 4 (two cars each way)\n    print(car_race_collision(3))  # Expected output: 9 (three cars each way)"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef longest_palindromic_suffix(string: str) -> str:\n    \"\"\" Find the longest palindromic suffix of the given string. \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:]\n    return \"\"\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:  # Handle empty string case\n        return ''\n    \n    # Find the longest palindromic suffix\n    palindromic_suffix = longest_palindromic_suffix(string)\n    prefix = string[:-len(palindromic_suffix)]  # Get the non-palindromic prefix\n    return string + prefix[::-1]  # Append the reverse of the prefix\n\n# Example usage\nif __name__ == \"__main__\":\n    print(make_palindrome('cat'))  # Output: 'catac'\n    print(make_palindrome('cata'))  # Output: 'catac'\n    print(make_palindrome(''))  # Output: ''"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(-123, 1)\n    '-312'\n    >>> circular_shift(-123, 3)\n    '-321'\n    >>> circular_shift(12345, 7)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string and handle negative sign\n    is_negative = x < 0\n    str_x = str(abs(x))\n    num_digits = len(str_x)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift >= num_digits:\n        result = str_x[::-1]\n    else:\n        # Perform the circular shift\n        result = str_x[-shift:] + str_x[:-shift]\n    \n    # Add the negative sign back if the original number was negative\n    if is_negative:\n        result = '-' + result\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Expected: '21'\n    print(circular_shift(12, 2))  # Expected: '12'\n    print(circular_shift(-123, 1)) # Expected: '-312'\n    print(circular_shift(-123, 3)) # Expected: '-321'\n    print(circular_shift(12345, 7)) # Expected: '54321'"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    Returns only one root, assuming the input has an even number of coefficients\n    and the largest non-zero coefficient guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Define a function to find the root using the bisection method\n    def bisection_method(f, a, b, tol=1e-7):\n        if f(a) * f(b) >= 0:\n            raise ValueError(\"The function must have different signs at the endpoints a and b.\")\n        \n        while (b - a) / 2.0 > tol:\n            midpoint = (a + b) / 2.0\n            if f(midpoint) == 0:\n                return midpoint\n            elif f(a) * f(midpoint) < 0:\n                b = midpoint\n            else:\n                a = midpoint\n        return (a + b) / 2.0\n\n    # Create a polynomial function from the coefficients\n    def polynomial_function(x):\n        return poly(xs, x)\n\n    # Initial guesses for the root (can be adjusted based on the polynomial)\n    a, b = -10, 10  # Adjust the range as necessary\n    return bisection_method(polynomial_function, a, b)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Output: 1.0"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Ensure N is within the specified constraints\n    if not (0 <= N <= 10000):\n        raise ValueError(\"N must be between 0 and 10000 inclusive.\")\n    \n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and return it as a string\n    return bin(digit_sum)[2:]  # [2:] to remove the '0b' prefix\n\n# Example usage\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers to consider.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit integers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit integers ending with '1'\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number '1'\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n    \n    # Total count, adjusting for overlap when n = 1\n    total_count = count_starting_with_1 + count_ending_with_1\n    \n    if n == 1:\n        total_count -= 1  # Adjust for double counting the number '1'\n    \n    return total_count"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Ensure a is within the specified range\n\n    primes = generate_primes(100)  # Get all primes less than 100\n    prime_count = len(primes)\n\n    # Check all combinations of three primes\n    for i in range(prime_count):\n        for j in range(i, prime_count):\n            for k in range(j, prime_count):\n                product = primes[i] * primes[j] * primes[k]\n                if product == a:\n                    return True\n                if product > a:  # No need to check further if product exceeds a\n                    break\n\n    return False  # No combination found\n\n# Example usage\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(28))  # Should return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes the given message by swapping case and replacing vowels.\n    \n    Vowels are replaced with the letter that appears two places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input string to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to build the encoded message\n    encoded_message = []\n    \n    # Iterate through each character in the message\n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel with its corresponding letter\n            encoded_message.append(vowel_replacement[char])\n        else:\n            # Swap case for non-vowel characters\n            encoded_message.append(char.swapcase())\n    \n    # Join the list into a single string and return\n    return ''.join(encoded_message)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(encode('test'))  # Output: 'TGST'\n    print(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number was found, return 0 or handle as needed\n    if largest_prime is None:\n        return 0  # or raise an exception based on requirements\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Example test cases\nprint(largest_prime_digit_sum([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(largest_prime_digit_sum([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(largest_prime_digit_sum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(largest_prime_digit_sum([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(largest_prime_digit_sum([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(largest_prime_digit_sum([0, 8, 1, 2, 1, 7]))  # Output: 7"}
