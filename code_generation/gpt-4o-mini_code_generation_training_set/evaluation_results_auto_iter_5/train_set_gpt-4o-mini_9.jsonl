{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n        >>> count_negative_numbers([])\n        0\n        >>> count_negative_numbers([-1, -2, -3])\n        3\n        >>> count_negative_numbers([0, 1, 2])\n        0\n    \"\"\"\n    # Initialize a counter for negative numbers\n    negative_count = 0\n    \n    # Iterate through the list and count negative numbers\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n            \n    return negative_count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    # Calculate the length of the list\n    n = len(nums)\n    \n    # Calculate the expected sum of numbers from 0 to n\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(nums)\n    \n    # The missing number is the difference between expected and actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(find_missing_number([3, 0, 1]))  # Output: 2\n    print(find_missing_number([0, 1]))      # Output: 2\n    print(find_missing_number([9,6,4,2,3,5,7,0,1]))  # Output: 8"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target in the list.\n    \"\"\"\n    # Use the list's count method to find the number of occurrences of target\n    return numbers.count(target)\n\n# Test cases to validate the functionality of the count_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with multiple occurrences\n    print(count_elements([1, 2, 3, 4, 2, 2, 5], 2))  # Expected output: 3\n\n    # Test case 2: Target not in the list\n    print(count_elements([1, 2, 3, 4, 5], 6))  # Expected output: 0\n\n    # Test case 3: Target is the only element in the list\n    print(count_elements([7], 7))  # Expected output: 1\n\n    # Test case 4: Empty list\n    print(count_elements([], 1))  # Expected output: 0\n\n    # Test case 5: All elements are the target\n    print(count_elements([5, 5, 5, 5], 5))  # Expected output: 4"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # List to store duplicates maintaining the order of first appearance\n    duplicates = []\n    \n    # Collect duplicates\n    for string in strings:\n        if count_dict[string] > 1 and string not in duplicates:\n            duplicates.append(string)\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    test_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"grape\"]\n    print(find_duplicates(test_strings))  # Output: ['apple', 'banana']"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Calculate the sum of all negative numbers in the given list.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the cumulative sum\n            negative_sum += number\n            \n    return negative_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed numbers\n    print(sum_negative_numbers([1, -2, 3, -4, 5]))  # Expected output: -6 (-2 + -4)\n    \n    # Test case 2: All positive numbers\n    print(sum_negative_numbers([1, 2, 3, 4, 5]))  # Expected output: 0 (no negative numbers)\n    \n    # Test case 3: All negative numbers\n    print(sum_negative_numbers([-1, -2, -3, -4, -5]))  # Expected output: -15 (-1 + -2 + -3 + -4 + -5)\n    \n    # Test case 4: Empty list\n    print(sum_negative_numbers([]))  # Expected output: 0 (no numbers to sum)\n    \n    # Test case 5: No negative numbers\n    print(sum_negative_numbers([0, 1, 2, 3]))  # Expected output: 0 (no negative numbers)"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers in the list. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    max_zeros = 0  # To keep track of the maximum number of consecutive zeros\n    current_zeros = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_zeros += 1  # Increment the current zero streak\n        else:\n            max_zeros = max(max_zeros, current_zeros)  # Update max if current streak is greater\n            current_zeros = 0  # Reset current streak\n\n    # Final check in case the list ends with zeros\n    max_zeros = max(max_zeros, current_zeros)\n\n    return max_zeros\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(count_consecutive_zeros([1, 0, 0, 2, 0, 0, 0, 3]))  # Output: 3\n    print(count_consecutive_zeros([0, 0, 0, 0]))  # Output: 4\n    print(count_consecutive_zeros([1, 2, 3]))  # Output: 0\n    print(count_consecutive_zeros([]))  # Output: 0"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    # Initialize counters for current and maximum consecutive ones\n    max_count = 0\n    current_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num == 1:\n            # Increment current count if the number is 1\n            current_count += 1\n        else:\n            # Update max count if current count is greater\n            max_count = max(max_count, current_count)\n            # Reset current count for the next sequence\n            current_count = 0\n    \n    # Final check to update max count in case the list ends with 1s\n    max_count = max(max_count, current_count)\n    \n    return max_count\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(find_max_consecutive_ones([1, 1, 0, 1, 1, 1]))  # Output: 3\n    print(find_max_consecutive_ones([1, 0, 1, 1, 0, 1]))  # Output: 2\n    print(find_max_consecutive_ones([0, 0, 0]))            # Output: 0\n    print(find_max_consecutive_ones([1, 1, 1, 1, 1]))      # Output: 5\n    print(find_max_consecutive_ones([]))                    # Output: 0"}
{"task_id": "auto/4", "completion": "from typing import List\nfrom collections import Counter\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n    \n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: A list of unique duplicate numbers.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Extract numbers that appear more than once\n    duplicates = [num for num, count in number_counts.items() if count > 1]\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_numbers = [1.0, 2.5, 3.0, 2.5, 4.0, 1.0, 5.0]\n    print(find_duplicates(sample_numbers))  # Output: [1.0, 2.5]"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], sublist_length: int) -> List[int]:\n    \"\"\"\n    Reverses every contiguous sublist of a specified length in the input list.\n\n    Parameters:\n    data (List[int]): The list of integers to process.\n    sublist_length (int): The length of the sublists to reverse.\n\n    Returns:\n    List[int]: A new list with the specified sublists reversed.\n    \"\"\"\n    if sublist_length <= 0:\n        raise ValueError(\"Sublist length must be a positive integer.\")\n    \n    result = []\n    for i in range(0, len(data), sublist_length):\n        # Get the current sublist\n        sublist = data[i:i + sublist_length]\n        # Reverse the sublist and add to the result\n        result.extend(reversed(sublist))\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_data = [1, 2, 3, 4, 5]\n    sublist_length = 2\n    reversed_data = reverse_sublists(example_data, sublist_length)\n    print(reversed_data)  # Output: [2, 1, 4, 3, 5]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix starting from index i is a palindrome,\n            # we need to append the reverse of the prefix before this suffix\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the entire string is non-palindromic\n    # In this case, we would append the entire string reversed\n    return string + string[::-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(make_palindrome(''))        # Output: ''\n    print(make_palindrome('cat'))     # Output: 'catac'\n    print(make_palindrome('cata'))    # Output: 'catac'\n    print(make_palindrome('race'))     # Output: 'racecar'\n    print(make_palindrome('a'))       # Output: 'a'\n    print(make_palindrome('ab'))      # Output: 'aba'"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube of some integer.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [1, 2, -1, 64, 0, 180, -64, 27, -27, 8, -8]\n    for case in test_cases:\n        print(f\"iscube({case}) ==> {iscube(case)}\")"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving towards each other on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction (left to right and right to left).\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    total_collisions = n * n\n    return total_collisions\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test case 1: 1 car in each direction\n    print(car_race_collision(1))  # Expected output: 1\n\n    # Test case 2: 2 cars in each direction\n    print(car_race_collision(2))  # Expected output: 4\n\n    # Test case 3: 3 cars in each direction\n    print(car_race_collision(3))  # Expected output: 9\n\n    # Test case 4: 0 cars in each direction\n    print(car_race_collision(0))  # Expected output: 0"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial at x.\n    \n    The polynomial is defined as:\n    p(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs.\n    \n    Parameters:\n    xs (list): Coefficients of the polynomial, must have an even number of coefficients.\n    \n    Returns:\n    float: A root of the polynomial p(x) = 0.\n    \n    Raises:\n    ValueError: If the number of coefficients is not even or if the coefficients are not valid.\n    \n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Define a function that represents the polynomial\n    def polynomial_function(x):\n        return poly(xs, x)\n    \n    # Use fsolve to find a root, starting from an initial guess (e.g., x=0)\n    root = fsolve(polynomial_function, 0)[0]\n    \n    return root\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Output: 1.0"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears two places ahead in the \n    English alphabet.\n\n    Parameters:\n    message (str): The input message to encode.\n\n    Returns:\n    str: The encoded message.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char.isalpha():  # Check if the character is a letter\n            # Swap case\n            swapped_case = char.swapcase()\n            # Replace vowel if it is one\n            if swapped_case in vowel_replacement:\n                encoded_message.append(vowel_replacement[swapped_case])\n            else:\n                encoded_message.append(swapped_case)\n        else:\n            # If it's not a letter, we keep it as is (e.g., spaces)\n            encoded_message.append(char)\n    \n    # Join the list into a single string and return\n    return ''.join(encoded_message)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected output: 'TGST'\n    print(encode('This is a message'))  # Expected output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 2)\n    '45123'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(-12345, 2)\n    '-45123'\n    >>> circular_shift(0, 1)\n    '0'\n    \"\"\"\n    # Convert the integer to a string\n    str_x = str(x)\n    \n    # Handle negative numbers\n    is_negative = str_x[0] == '-'\n    if is_negative:\n        str_x = str_x[1:]  # Remove the negative sign for processing\n    \n    # Get the length of the digits\n    length = len(str_x)\n    \n    # Calculate effective shift\n    effective_shift = shift % length if length > 0 else 0\n    \n    if effective_shift == 0:\n        result = str_x  # No shift needed\n    elif effective_shift >= length:\n        result = str_x[::-1]  # Reverse the digits\n    else:\n        # Perform the circular shift\n        result = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    # Add the negative sign back if necessary\n    if is_negative:\n        result = '-' + result\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0  # No n-digit numbers if n is less than 1\n\n    # Count of n-digit numbers that start with '1'\n    start_with_1 = 10**(n - 1)  # 1 followed by (n-1) digits (0-9)\n\n    # Count of n-digit numbers that end with '1'\n    end_with_1 = 9 * (10**(n - 2)) if n > 1 else 1  # 1 at the end, first digit (1-9), (n-2) digits (0-9)\n\n    # Count of n-digit numbers that start and end with '1'\n    start_and_end_with_1 = 10**(n - 2) if n > 1 else 1  # 1 at start and end, (n-2) digits (0-9)\n\n    # Total count using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n\n    return total_count\n\n# Example test cases\nprint(starts_one_ends(1))  # Output: 1 (only the number 1)\nprint(starts_one_ends(2))  # Output: 18 (10, 11, 12, ..., 19, 21, 31, ..., 91)\nprint(starts_one_ends(3))  # Output: 271 (100-199, 101, 111, ..., 191, 201, ..., 901)"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False  # Constraint: a must be less than 100\n\n    primes = generate_primes(100)\n    \n    # Check all combinations of three primes\n    from itertools import combinations\n    for prime_combination in combinations(primes, 3):\n        if prime_combination[0] * prime_combination[1] * prime_combination[2] == a:\n            return True\n            \n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True, because 2 * 3 * 5 = 30\nprint(is_multiply_prime(60))  # True, because 2 * 3 * 10 is not valid, but 3 * 5 * 2 = 30\nprint(is_multiply_prime(28))  # False, no combination of 3 primes gives 28\nprint(is_multiply_prime(1))   # False, as 1 is not a product of primes\nprint(is_multiply_prime(97))  # False, as 97 is prime itself and cannot be a product of 3 primes"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Example test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    # Iterate through the list to find the largest prime\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    # If no prime number is found, return 0 (or handle as needed)\n    if largest_prime is None:\n        return 0\n    \n    # Return the sum of the digits of the largest prime\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
