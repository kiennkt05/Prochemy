{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    >>> product_of_elements([-1, 1, -1, 1])  # Edge case: mixed signs\n    1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list and multiply\n    for number in numbers:\n        product *= number\n        \n    return product\n\n# Test cases to validate the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([]))             # Expected output: 1\n    print(product_of_elements([0, 1, 2]))      # Expected output: 0\n    print(product_of_elements([5]))             # Expected output: 5\n    print(product_of_elements([-1, 1, -1, 1])) # Expected output: 1"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([0, 0, 0])  # Edge case: list of zeros\n    0\n    >>> sum_integers([10, -10, 5, -5])  # Mixed positive and negative\n    0\n    >>> sum_integers([100, 200, 300])  # Large positive numbers\n    600\n    >>> sum_integers([-100, -200, -300])  # Large negative numbers\n    -600\n    \"\"\"\n    # Calculate the sum of the integers in the list using the built-in sum function\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    print(sum_integers([]))  # Expected output: 0\n    print(sum_integers([0, 0, 0]))  # Expected output: 0\n    print(sum_integers([10, -10, 5, -5]))  # Expected output: 0\n    print(sum_integers([100, 200, 300]))  # Expected output: 600\n    print(sum_integers([-100, -200, -300]))  # Expected output: -600"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0  # Return 0 or raise an exception based on requirements\n    \n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    # The maximum difference is the difference between the max and min values\n    return max_value - min_value\n\n# Test cases to validate the functionality of the find_max_difference function\ndef test_find_max_difference():\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4, \"Test case 1 failed\"\n    assert find_max_difference([10, 20, 30, 40]) == 30, \"Test case 2 failed\"\n    assert find_max_difference([-10, -20, -30, -40]) == 30, \"Test case 3 failed\"\n    assert find_max_difference([5]) == 0, \"Test case 4 failed\"  # Only one element\n    assert find_max_difference([]) == 0, \"Test case 5 failed\"  # Empty list\n    assert find_max_difference([1, 1, 1, 1]) == 0, \"Test case 6 failed\"  # All elements are the same\n    assert find_max_difference([1, -1, 2, -2]) == 4, \"Test case 7 failed\"  # Mixed positive and negative\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_max_difference()"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5])\n    5\n    >>> find_repeat([1, 1, 2, 3])\n    1\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    None\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 1, 2, 3])\n    1\n    >>> find_repeat([2, 2, 2, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n    1\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality of the find_repeat function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 4])\n    [2, 1, 4]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = set()  # To track duplicates\n    result = []  # To maintain the order of first occurrence of duplicates\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.add(item)  # Add to duplicates set\n                result.append(item)  # Maintain order of first occurrence\n        else:\n            seen.add(item)  # Mark item as seen\n\n    return result\n\n# Test cases to validate the functionality of the find_duplicates function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    assert find_duplicates([1, 2, 3, 4]) == []\n    assert find_duplicates([]) == []\n    assert find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\n    assert find_duplicates([1, 2, 3, 2, 1, 4, 5, 4]) == [2, 1, 4]\n    assert find_duplicates([1, 2, 3, 4, 5]) == []\n    assert find_duplicates([1, 2, 2, 3, 3, 3, 4]) == [2, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n    \n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\ndef test_unique_elements():\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4], \"Test case 1 failed\"\n    assert unique_elements([5, 5, 5]) == [5], \"Test case 2 failed\"\n    assert unique_elements([]) == [], \"Test case 3 failed\"  # Edge case: empty list\n    assert unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4], \"Test case 4 failed\"  # No duplicates\n    assert unique_elements([1, 1, 2, 2, 3, 3]) == [1, 2, 3], \"Test case 5 failed\"  # All duplicates\n    assert unique_elements([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4], \"Test case 6 failed\"  # Mixed duplicates\n    assert unique_elements([1, 2, 3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5], \"Test case 7 failed\"  # Mixed order\n    assert unique_elements([0, -1, -1, 0, 1]) == [0, -1, 1], \"Test case 8 failed\"  # Negative and zero values\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_unique_elements()"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([0, -1, -1, 0, 2, 2, 3])  # Mixed positive and negative\n    4\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique\n    5\n    >>> count_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])  # Multiple duplicates\n    4\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4\n    assert count_unique_elements([1, 1, 1, 1]) == 1\n    assert count_unique_elements([]) == 0  # Edge case: empty list\n    assert count_unique_elements([0, -1, -1, 0, 2, 2, 3]) == 4  # Mixed positive and negative\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5  # All unique\n    assert count_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4  # Multiple duplicates\n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function preserves the order of the first occurrence of each unique element.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    unique_elements = []\n    seen = set()\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to the set of seen elements\n            unique_elements.append(element)  # Append to the result list\n    \n    return unique_elements\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test cases\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates([1, 2, 1, 2, 1, 2]) == [1, 2]\n    assert remove_duplicates([0, -1, -1, 0, 1]) == [0, -1, 1]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    count = 0  # Initialize a counter for occurrences\n    for element in elements:  # Iterate through each element in the list\n        if element == target:  # Check if the current element matches the target\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the total count of occurrences\n\n# Test cases to validate the functionality of the count_occurrences function\ndef test_count_occurrences():\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    assert count_occurrences([], 1) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4, \"Test case 4 failed\"  # All elements match\n    assert count_occurrences([1, 2, 3, 4, 5], 0) == 0, \"Test case 5 failed\"  # Target not in list\n    assert count_occurrences([1, 2, 3, 4, 5], 1) == 1, \"Test case 6 failed\"  # Target is the first element\n    assert count_occurrences([1, 2, 3, 4, 5], 5) == 1, \"Test case 7 failed\"  # Target is the last element\n    assert count_occurrences([1, 2, 3, 2, 1, 2], 2) == 3, \"Test case 8 failed\"  # Multiple occurrences\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_occurrences()"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to merge.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Examples:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end of the current interval\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            # Move to the next interval\n            current_interval = intervals[i]\n    \n    # Add the last interval\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to validate the functionality of the merge_overlapping_intervals function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    assert merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    \n    # Test case 3: All intervals overlap\n    assert merge_overlapping_intervals([[1, 4], [2, 3], [3, 5]]) == [[1, 5]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1, 2]]) == [[1, 2]]\n    \n    # Test case 5: Empty list\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Intervals with the same start\n    assert merge_overlapping_intervals([[1, 4], [1, 2], [1, 3]]) == [[1, 4]]\n    \n    # Test case 7: Intervals that touch but do not overlap\n    assert merge_overlapping_intervals([[1, 2], [2, 3], [3, 4]]) == [[1, 4]]\n    \n    print(\"All test cases passed!\")"}
