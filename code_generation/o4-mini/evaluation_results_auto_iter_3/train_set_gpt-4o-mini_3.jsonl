{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5, 4])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    None\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5, 5])\n    10\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0  # Edge case: empty list\n    assert sum_integers([10, -10, 5, 5]) == 10\n    \n    # Additional test cases\n    assert sum_integers([100, 200, 300]) == 600\n    assert sum_integers([-5, -5, -5]) == -15\n    assert sum_integers([0, 0, 0]) == 0\n    assert sum_integers([1]) == 1\n    assert sum_integers([-1]) == -1\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function maintains the order of the first occurrences of the elements.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to unique list\n    \n    return unique_elements  # Return the list of unique elements\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    If the list is empty, the product is defined as 1 (multiplicative identity).\n    \n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    \"\"\"\n    product = 1  # Start with the multiplicative identity\n    for number in numbers:\n        product *= number  # Multiply each number to the product\n    return product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([]))             # Expected output: 1\n    print(product_of_elements([0, 1, 2]))      # Expected output: 0\n    print(product_of_elements([5]))             # Expected output: 5"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Provided test cases\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    \n    # Additional test cases\n    assert find_duplicates([1, 2, 3, 4]) == []\n    assert find_duplicates([]) == []\n    assert find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\n    assert find_duplicates([1, 2, 3, 2, 1, 4, 5]) == [2, 1]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([0, 0, 0, 0], 1)\n    0\n    \"\"\"\n    return elements.count(target)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Provided test cases\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    \n    # Additional test cases\n    assert count_occurrences([], 1) == 0  # Empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4  # All elements are the target\n    assert count_occurrences([0, 0, 0, 0], 1) == 0  # Target not in the list\n    assert count_occurrences([1, 2, 3, 4, 5], 2) == 1  # Target appears once\n    assert count_occurrences([1, 2, 3, 2, 2, 4], 2) == 3  # Target appears multiple times\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # If the list is empty, return 0\n        return 0\n    \n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    return max_value - min_value  # Return the difference\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    print(find_max_difference([5]))  # Expected output: 0 (only one element)\n    print(find_max_difference([]))  # Expected output: 0 (empty list)\n    print(find_max_difference([1, -1, 0]))  # Expected output: 2 (1 - (-1) = 2)"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Step 3: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1\n    print(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]))  # Expected: [[1,6],[8,10],[15,18]]\n    \n    # Test case 2\n    print(merge_overlapping_intervals([[1,4],[4,5]]))  # Expected: [[1,5]]\n    \n    # Test case 3\n    print(merge_overlapping_intervals([[1,4],[2,3]]))  # Expected: [[1,4]]\n    \n    # Test case 4\n    print(merge_overlapping_intervals([[1,2],[3,4],[5,6]]))  # Expected: [[1,2],[3,4],[5,6]]\n    \n    # Test case 5\n    print(merge_overlapping_intervals([]))  # Expected: []\n    \n    # Test case 6\n    print(merge_overlapping_intervals([[1,10],[2,3],[4,5],[6,7],[8,9]]))  # Expected: [[1,10]]"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                 # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))   # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5]))   # Expected output: 5\n    print(count_unique_elements([-1, -2, -2, -3, -4]))  # Expected output: 4"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert unique_elements([5, 5, 5]) == [5]\n    \n    # Test case 3: No duplicates\n    assert unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 4: Mixed duplicates\n    assert unique_elements([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    assert unique_elements([]) == []\n    \n    # Test case 6: List with negative numbers\n    assert unique_elements([-1, -2, -2, -3, -1]) == [-1, -2, -3]\n    \n    # Test case 7: List with mixed positive and negative numbers\n    assert unique_elements([1, -1, 2, -2, 1, -1]) == [1, -1, 2, -2]\n    \n    print(\"All test cases passed!\")"}
