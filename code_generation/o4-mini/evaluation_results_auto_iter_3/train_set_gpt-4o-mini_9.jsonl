{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list must not be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestFindMaxDifference(unittest.TestCase):\n    def test_positive_numbers(self):\n        self.assertEqual(find_max_difference([1, 2, 3, 4, 5]), 4)\n        self.assertEqual(find_max_difference([10, 20, 30, 40]), 30)\n\n    def test_negative_numbers(self):\n        self.assertEqual(find_max_difference([-1, -2, -3, -4, -5]), 4)\n        self.assertEqual(find_max_difference([-10, -20, -30, -40]), 30)\n\n    def test_mixed_numbers(self):\n        self.assertEqual(find_max_difference([-10, 0, 10]), 20)\n        self.assertEqual(find_max_difference([-5, 5]), 10)\n\n    def test_single_element(self):\n        self.assertEqual(find_max_difference([42]), 0)\n\n    def test_empty_list(self):\n        with self.assertRaises(ValueError):\n            find_max_difference([])\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n        If there are no repeats, return None.\n        \n        >>> find_repeat([1, 2, 3, 4, 5, 2])\n        2\n        >>> find_repeat([1, 2, 3, 4])\n        None\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n        >>> count_unique_elements([1, 2, 2, 3, 4])\n        4\n        >>> count_unique_elements([1, 1, 1, 1])\n        1\n        >>> count_unique_elements([])\n        0\n        >>> count_unique_elements([-1, 0, 1, -1, 0])\n        3\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestCountUniqueElements(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(count_unique_elements([1, 2, 2, 3, 4]), 4)\n        self.assertEqual(count_unique_elements([1, 1, 1, 1]), 1)\n        self.assertEqual(count_unique_elements([]), 0)\n        self.assertEqual(count_unique_elements([-1, 0, 1, -1, 0]), 3)\n\n    def test_negative_numbers(self):\n        self.assertEqual(count_unique_elements([-1, -2, -2, -3]), 3)\n\n    def test_mixed_numbers(self):\n        self.assertEqual(count_unique_elements([1, -1, 0, 1, -1]), 3)\n\n    def test_large_numbers(self):\n        self.assertEqual(count_unique_elements([1000000, 1000000, 999999]), 2)\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum.\n        \n    Returns:\n        int: The sum of the integers in the list.\n        \n    Raises:\n        ValueError: If the input is not a list of integers.\n        \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Validate input\n    if not isinstance(integers, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(i, int) for i in integers):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Calculate the sum of the integers\n    return sum(integers)\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestSumIntegers(unittest.TestCase):\n    \n    def test_positive_integers(self):\n        self.assertEqual(sum_integers([1, 2, 3]), 6)\n    \n    def test_negative_integers(self):\n        self.assertEqual(sum_integers([-1, -2, -3]), -6)\n    \n    def test_mixed_integers(self):\n        self.assertEqual(sum_integers([-1, 0, 1]), 0)\n        self.assertEqual(sum_integers([-1, -2, 3]), 0)\n    \n    def test_empty_list(self):\n        self.assertEqual(sum_integers([]), 0)\n    \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            sum_integers(\"not a list\")\n        with self.assertRaises(ValueError):\n            sum_integers([1, 2, \"three\"])\n        with self.assertRaises(ValueError):\n            sum_integers([1, 2, None])\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    Args:\n        items (List[int]): A list of integers to check for duplicates.\n        \n    Returns:\n        List[int]: A list of duplicates in the order of their first occurrence.\n    \n    Examples:\n        >>> find_duplicates([1, 2, 3, 1, 2, 4])\n        [1, 2]\n        >>> find_duplicates([5, 5, 5, 6, 7])\n        [5]\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n    \n    return duplicates\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestFindDuplicates(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(find_duplicates([1, 2, 3, 1, 2, 4]), [1, 2])\n        self.assertEqual(find_duplicates([5, 5, 5, 6, 7]), [5])\n    \n    def test_no_duplicates(self):\n        self.assertEqual(find_duplicates([1, 2, 3, 4]), [])\n        self.assertEqual(find_duplicates([]), [])\n    \n    def test_all_duplicates(self):\n        self.assertEqual(find_duplicates([1, 1, 1, 1]), [1])\n        self.assertEqual(find_duplicates([2, 2, 2, 2, 2]), [2])\n    \n    def test_mixed_duplicates(self):\n        self.assertEqual(find_duplicates([1, 2, 3, 1, 4, 2, 5]), [1, 2])\n        self.assertEqual(find_duplicates([3, 3, 4, 5, 4, 3]), [3, 4])\n    \n    def test_large_input(self):\n        self.assertEqual(find_duplicates(list(range(1000)) + list(range(500))), list(range(500)))\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/0", "completion": "from typing import List\nimport unittest\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n        >>> product_of_elements([1, 2, 3, 4])\n        24\n        >>> product_of_elements([-1, -2, -3])\n        -6\n    \"\"\"\n    # Validate input\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    product = 1\n    for number in numbers:\n        product *= number  # Multiply each number to the product\n    \n    return product\n\n# Unit tests for the product_of_elements function\nclass TestProductOfElements(unittest.TestCase):\n    \n    def test_positive_numbers(self):\n        self.assertEqual(product_of_elements([1, 2, 3, 4]), 24)\n    \n    def test_negative_numbers(self):\n        self.assertEqual(product_of_elements([-1, -2, -3]), -6)\n    \n    def test_mixed_numbers(self):\n        self.assertEqual(product_of_elements([-1, 2, -3, 4]), 24)\n    \n    def test_single_element(self):\n        self.assertEqual(product_of_elements([5]), 5)\n    \n    def test_empty_list(self):\n        self.assertEqual(product_of_elements([]), 1)  # Product of an empty list is conventionally 1\n    \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            product_of_elements(\"not a list\")\n        with self.assertRaises(ValueError):\n            product_of_elements([1, 2, \"three\"])\n\n# Run the tests\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Validate input types\n    if not isinstance(elements, list) or not all(isinstance(x, int) for x in elements):\n        raise ValueError(\"elements must be a list of integers.\")\n    if not isinstance(target, int):\n        raise ValueError(\"target must be an integer.\")\n    \n    count = 0\n    for element in elements:\n        if element == target:\n            count += 1\n    return count\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestCountOccurrences(unittest.TestCase):\n    def test_occurrences(self):\n        self.assertEqual(count_occurrences([1, 2, 3, 3, 4], 3), 2)\n        self.assertEqual(count_occurrences([1, 2, 2, 2, 3, 4], 5), 0)\n        self.assertEqual(count_occurrences([], 1), 0)  # Edge case: empty list\n        self.assertEqual(count_occurrences([1, 1, 1, 1], 1), 4)  # All elements match\n        self.assertEqual(count_occurrences([1, 2, 3, 4], 0), 0)  # No matches\n        self.assertEqual(count_occurrences([1, 2, 3, 4], 4), 1)  # Last element match\n\n    def test_invalid_inputs(self):\n        with self.assertRaises(ValueError):\n            count_occurrences(\"not a list\", 1)  # Invalid type for elements\n        with self.assertRaises(ValueError):\n            count_occurrences([1, 2, 3], \"not an int\")  # Invalid type for target\n        with self.assertRaises(ValueError):\n            count_occurrences([1, 2, 3, 4], 1.5)  # Target is not an integer\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to result list\n\n    return unique_elements\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestRemoveDuplicates(unittest.TestCase):\n    def test_remove_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4]), [1, 2, 3, 4])\n        self.assertEqual(remove_duplicates([1, 1, 1, 1, 1]), [1])\n        self.assertEqual(remove_duplicates([1, 2, 3, 4]), [1, 2, 3, 4])\n        self.assertEqual(remove_duplicates([]), [])\n        self.assertEqual(remove_duplicates([5, 5, 5, 6, 7, 7, 8]), [5, 6, 7, 8])\n        self.assertEqual(remove_duplicates([10, 20, 10, 30, 20, 40]), [10, 20, 30, 40])\n        self.assertEqual(remove_duplicates([1, 2, 3, 2, 1, 4, 5]), [1, 2, 3, 4, 5])\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n        intervals (List[List[int]]): A list of intervals to merge.\n        \n    Returns:\n        List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the starting values\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Step 3: Iterate through the sorted intervals\n    for current in intervals:\n        # If merged is empty or there is no overlap, add the current interval\n        if not merged or merged[-1][1] < current[0]:\n            merged.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one in merged\n            merged[-1][1] = max(merged[-1][1], current[1])\n    \n    return merged\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestMergeOverlappingIntervals(unittest.TestCase):\n    def test_merge_intervals(self):\n        self.assertEqual(merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]), [[1,6],[8,10],[15,18]])\n        self.assertEqual(merge_overlapping_intervals([[1,4],[4,5]]), [[1,5]])\n        self.assertEqual(merge_overlapping_intervals([[1,4],[2,3]]), [[1,4]])\n        self.assertEqual(merge_overlapping_intervals([[1,2],[3,4],[5,6]]), [[1,2],[3,4],[5,6]])\n        self.assertEqual(merge_overlapping_intervals([]), [])\n        self.assertEqual(merge_overlapping_intervals([[1,4],[0,4]]), [[0,4]])\n        self.assertEqual(merge_overlapping_intervals([[1,10],[2,3],[4,5],[6,7],[8,9]]), [[1,10]])\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order of their first appearance.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store the unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Testing the function using unittest framework\nimport unittest\n\nclass TestUniqueElements(unittest.TestCase):\n    def test_unique_elements(self):\n        self.assertEqual(unique_elements([1, 2, 2, 3, 4, 4]), [1, 2, 3, 4])\n        self.assertEqual(unique_elements([5, 5, 5]), [5])\n        self.assertEqual(unique_elements([1, 2, 3, 1, 2, 3]), [1, 2, 3])\n        self.assertEqual(unique_elements([]), [])\n        self.assertEqual(unique_elements([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(unique_elements([1, 1, 2, 2, 3, 3, 4]), [1, 2, 3, 4])\n        self.assertEqual(unique_elements([1, 2, 2, 1, 3, 4, 4, 3]), [1, 2, 3, 4])\n\nif __name__ == \"__main__\":\n    unittest.main()"}
