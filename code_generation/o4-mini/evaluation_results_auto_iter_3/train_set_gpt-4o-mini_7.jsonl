{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The product of all integers in the list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([-1, 0, 1])  # Edge case: includes zero with negatives\n    0\n    \"\"\"\n    product = 1  # Start with 1 as the identity for multiplication\n    for number in numbers:\n        product *= number  # Multiply each number to the product\n    return product\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(product_of_elements([1, 2, 3, 4]))  # Expected: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected: -6\n    print(product_of_elements([]))              # Expected: 1\n    print(product_of_elements([5]))             # Expected: 5\n    print(product_of_elements([0, 1, 2]))       # Expected: 0\n    print(product_of_elements([-1, 0, 1]))      # Expected: 0"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 3, 3, 3, 4])\n    [2, 3]\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 1, 1, 1])\n    [1]\n    >>> find_duplicates([1, 2, 3, 4, 5])\n    []\n    >>> find_duplicates([1, 2, 1, 3, 2, 4, 3])\n    [1, 2, 3]\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n    \n    return duplicates\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Raises:\n        ValueError: If the input list is empty.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list must not be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the functionality of the find_max_difference function\ndef test_find_max_difference():\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    assert find_max_difference([5]) == 0  # Only one element, difference is 0\n    assert find_max_difference([1, 1, 1, 1]) == 0  # All elements are the same\n    assert find_max_difference([1, 100, 50, 25]) == 99  # Mixed values\n    assert find_max_difference([0, 0, 0, 0]) == 0  # All zeros\n    assert find_max_difference([-1, 0, 1]) == 2  # Negative and positive values\n    \n    try:\n        find_max_difference([])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"The input list must not be empty.\"\n\n# Run the test cases\ntest_find_max_difference()\n\nprint(\"All tests passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for repeats.\n    \n    Returns:\n        Optional[int]: The first repeated integer or None if no repeats exist.\n    \n    Examples:\n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality of the find_repeat function\ndef test_find_repeat():\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2, \"Test case 1 failed\"\n    assert find_repeat([1, 2, 3, 4]) is None, \"Test case 2 failed\"\n    assert find_repeat([5, 1, 2, 3, 5]) == 5, \"Test case 3 failed\"\n    assert find_repeat([1, 1, 2, 3]) == 1, \"Test case 4 failed\"\n    assert find_repeat([]) is None, \"Test case 5 failed\"  # Edge case: empty list\n    assert find_repeat([1, 2, 3, 4, 5, 1, 2]) == 1, \"Test case 6 failed\"  # First repeat is 1\n    assert find_repeat([10, 20, 30, 10, 20]) == 10, \"Test case 7 failed\"  # First repeat is 10\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is None, \"Test case 8 failed\"  # No repeats\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_repeat()"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5, 6])\n    6\n    >>> count_unique_elements([-1, -2, -2, -3, -4])\n    4\n    \"\"\"\n    # Convert the list to a set to remove duplicates and count unique elements\n    unique_elements = set(lst)\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the count_unique_elements function\ndef test_count_unique_elements():\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4, \"Test case 1 failed\"\n    assert count_unique_elements([1, 1, 1, 1]) == 1, \"Test case 2 failed\"\n    assert count_unique_elements([]) == 0, \"Test case 3 failed\"\n    assert count_unique_elements([5, 5, 5, 5, 5]) == 1, \"Test case 4 failed\"\n    assert count_unique_elements([1, 2, 3, 4, 5, 6]) == 6, \"Test case 5 failed\"\n    assert count_unique_elements([-1, -2, -2, -3, -4]) == 4, \"Test case 6 failed\"\n    assert count_unique_elements([0, 0, 0, 0]) == 1, \"Test case 7 failed\"\n    assert count_unique_elements([1, 2, 3, 1, 2, 3]) == 3, \"Test case 8 failed\"\n    assert count_unique_elements([10, 20, 30, 10, 20]) == 3, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_unique_elements()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # Increment the counter if the current element matches the target\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\ndef test_count_occurrences():\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    assert count_occurrences([], 1) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4, \"Test case 4 failed\"  # All elements match\n    assert count_occurrences([1, 2, 3, 4, 5], 0) == 0, \"Test case 5 failed\"  # Target not in list\n    assert count_occurrences([1, 2, 3, 4, 5], 1) == 1, \"Test case 6 failed\"  # Target is the first element\n    assert count_occurrences([1, 2, 3, 4, 5], 5) == 1, \"Test case 7 failed\"  # Target is the last element\n    assert count_occurrences([1, 2, 3, 2, 1, 2], 2) == 3, \"Test case 8 failed\"  # Multiple occurrences\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_occurrences()"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([0, 0, 0])  # Edge case: list of zeros\n    0\n    >>> sum_integers([10, -10, 5, -5])  # Mixed positive and negative\n    0\n    >>> sum_integers([100, 200, 300])  # Large positive numbers\n    600\n    >>> sum_integers([-100, -200, -300])  # Large negative numbers\n    -600\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0  # Edge case: empty list\n    assert sum_integers([0, 0, 0]) == 0  # Edge case: list of zeros\n    assert sum_integers([10, -10, 5, -5]) == 0  # Mixed positive and negative\n    assert sum_integers([100, 200, 300]) == 600  # Large positive numbers\n    assert sum_integers([-100, -200, -300]) == -600  # Large negative numbers\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\ndef test_unique_elements():\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4], \"Test case 1 failed\"\n    assert unique_elements([5, 5, 5]) == [5], \"Test case 2 failed\"\n    assert unique_elements([]) == [], \"Test case 3 failed\"  # Edge case: empty list\n    assert unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4], \"Test case 4 failed\"  # No duplicates\n    assert unique_elements([1, 1, 2, 2, 3, 3]) == [1, 2, 3], \"Test case 5 failed\"  # All duplicates\n    assert unique_elements([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4], \"Test case 6 failed\"  # Mixed duplicates\n    assert unique_elements([1, 2, 3, 2, 1, 4, 5, 4]) == [1, 2, 3, 4, 5], \"Test case 7 failed\"  # Random order\n    assert unique_elements([0, -1, -1, 0, 1]) == [0, -1, 1], \"Test case 8 failed\"  # Negative and zero values\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_unique_elements()"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers, preserving the order of their first occurrence.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n        [5, 3, 2, 1]\n    \"\"\"\n    unique_elements = []\n    seen = set()  # Set to track seen elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to result list\n    \n    return unique_elements\n\n# Test cases to validate the functionality of the remove_duplicates function\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []  # Edge case: empty list\n    assert remove_duplicates([10]) == [10]  # Edge case: single element\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]  # No duplicates\n    assert remove_duplicates([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4]  # Mixed duplicates\n    assert remove_duplicates([1, -1, 0, 1, -1]) == [1, -1, 0]  # Duplicates with negative and zero\n    assert remove_duplicates([1, 2, 3, 2, 1, 3, 4, 5]) == [1, 2, 3, 4, 5]  # Multiple duplicates\n\n# Run the test cases\ntest_remove_duplicates()\n\nprint(\"All tests passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to be merged.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting values\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end of the current interval\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            # Move to the next interval\n            current_interval = intervals[i]\n    \n    # Don't forget to add the last interval\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to validate the functionality of the merge_overlapping_intervals function\ndef test_merge_overlapping_intervals():\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    assert merge_overlapping_intervals([[1,4],[4,5]]) == [[1,5]]\n    assert merge_overlapping_intervals([[1,4],[2,3]]) == [[1,4]]\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    assert merge_overlapping_intervals([]) == []\n    assert merge_overlapping_intervals([[1,4],[2,3],[5,6],[7,8],[6,7]]) == [[1,4],[5,8]]\n    assert merge_overlapping_intervals([[1,10],[2,3],[4,5],[6,7],[8,9]]) == [[1,10]]\n    assert merge_overlapping_intervals([[1,2],[2,3],[3,4],[4,5]]) == [[1,5]]\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_merge_overlapping_intervals()"}
