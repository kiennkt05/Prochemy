{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 6, 6])\n    2\n    >>> count_unique_elements([-1, -1, 0, 1, 1])\n    3\n    \"\"\"\n    # Convert the list to a set to filter out duplicate elements\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4, \"Test case 1 failed\"\n    assert count_unique_elements([1, 1, 1, 1]) == 1, \"Test case 2 failed\"\n    assert count_unique_elements([]) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert count_unique_elements([5, 5, 5, 5, 6, 6]) == 2, \"Test case 4 failed\"  # Multiple duplicates\n    assert count_unique_elements([-1, -1, 0, 1, 1]) == 3, \"Test case 5 failed\"  # Negative and positive numbers\n    assert count_unique_elements([10, 20, 30, 10, 20]) == 3, \"Test case 6 failed\"  # Mixed duplicates\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5, \"Test case 7 failed\"  # All unique\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    count = {}  # Dictionary to count occurrences of each item\n    duplicates = []  # List to store duplicates in order of first occurrence\n\n    # Count occurrences of each item\n    for item in items:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n    # Collect duplicates based on the count\n    for item in items:\n        if count[item] > 1 and item not in duplicates:\n            duplicates.append(item)\n\n    return duplicates\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    assert find_duplicates([1, 2, 3, 4]) == []\n    assert find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\n    assert find_duplicates([]) == []\n    assert find_duplicates([1, 2, 2, 3, 3, 3, 4, 4]) == [2, 3, 4]\n    assert find_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        raise ValueError(\"The list must contain at least one number.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the function\ndef test_find_max_difference():\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4, \"Test case 1 failed\"\n    assert find_max_difference([10, 20, 30, 40]) == 30, \"Test case 2 failed\"\n    assert find_max_difference([-10, -20, -30, -40]) == 30, \"Test case 3 failed\"\n    assert find_max_difference([5]) == 0, \"Test case 4 failed\"  # Only one element\n    assert find_max_difference([1, 1, 1, 1]) == 0, \"Test case 5 failed\"  # All elements are the same\n    assert find_max_difference([1, -1, 0]) == 2, \"Test case 6 failed\"  # Mixed positive and negative\n    assert find_max_difference([100, 200, 300, 400, 500]) == 400, \"Test case 7 failed\"  # Larger numbers\n    assert find_max_difference([])  # This should raise a ValueError\n\n# Run the test cases\ntry:\n    test_find_max_difference()\n    print(\"All test cases passed!\")\nexcept AssertionError as e:\n    print(e)\nexcept ValueError as e:\n    print(e)"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n        >>> sum_integers([])  # Edge case: empty list\n        0\n        >>> sum_integers([0, 0, 0])  # Edge case: list of zeros\n        0\n        >>> sum_integers([1, -1, 1, -1])  # Edge case: positive and negative cancel out\n        0\n    \"\"\"\n    return sum(integers)  # Using the built-in sum function to calculate the total\n\n# Test cases to verify the correctness of the function\ndef test_sum_integers():\n    assert sum_integers([1, 2, 3]) == 6, \"Test case 1 failed\"\n    assert sum_integers([-1, -2, 3]) == 0, \"Test case 2 failed\"\n    assert sum_integers([]) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert sum_integers([0, 0, 0]) == 0, \"Test case 4 failed\"  # Edge case: list of zeros\n    assert sum_integers([1, -1, 1, -1]) == 0, \"Test case 5 failed\"  # Edge case: positive and negative cancel out\n    assert sum_integers([10, 20, 30]) == 60, \"Test case 6 failed\"  # Regular case\n    assert sum_integers([-10, -20, -30]) == -60, \"Test case 7 failed\"  # Regular case with negatives\n    assert sum_integers([100]) == 100, \"Test case 8 failed\"  # Single positive number\n    assert sum_integers([-100]) == -100, \"Test case 9 failed\"  # Single negative number\n    assert sum_integers([1, 2, -3, 4, -4]) == 0, \"Test case 10 failed\"  # Mixed numbers\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_integers()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers where we want to count occurrences.\n        target (int): The integer whose occurrences we want to count.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the function\ndef test_count_occurrences():\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    assert count_occurrences([], 1) == 0, \"Test case 3 failed\"  # Empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4, \"Test case 4 failed\"  # All elements match\n    assert count_occurrences([1, 2, 3, 4, 5], 0) == 0, \"Test case 5 failed\"  # No match\n    assert count_occurrences([1, 2, 3, 4, 5], 1) == 1, \"Test case 6 failed\"  # One match\n    assert count_occurrences([1, 2, 3, 2, 2, 4], 2) == 3, \"Test case 7 failed\"  # Multiple matches\n    assert count_occurrences([1, 2, 3, 4, 5], 5) == 1, \"Test case 8 failed\"  # Last element match\n    assert count_occurrences([5, 5, 5, 5, 5], 5) == 5, \"Test case 9 failed\"  # All elements match\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_occurrences()"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. If the list is empty, returns 1.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive integers\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    \n    # Test case 2: Normal case with negative integers\n    assert product_of_elements([-1, -2, -3]) == -6\n    \n    # Test case 3: Edge case with an empty list\n    assert product_of_elements([]) == 1\n    \n    # Test case 4: Case with zero in the list\n    assert product_of_elements([0, 1, 2]) == 0\n    \n    # Test case 5: Case with a single positive integer\n    assert product_of_elements([5]) == 5\n    \n    # Test case 6: Case with a single negative integer\n    assert product_of_elements([-5]) == -5\n    \n    # Test case 7: Mixed positive and negative integers\n    assert product_of_elements([-1, 2, -3, 4]) == 24\n    \n    # Test case 8: Large numbers\n    assert product_of_elements([1000, 2000, 3000]) == 6000000000\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" \n    Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements in order\n\n    for element in elements:\n        if element not in seen:  # Check if the element has not been seen\n            seen.add(element)  # Add to seen set\n            unique_list.append(element)  # Append to the unique list\n\n    return unique_list  # Return the list of unique elements\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic case with duplicates\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert unique_elements([5, 5, 5]) == [5]\n    \n    # Test case 3: Multiple duplicates\n    assert unique_elements([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\n    \n    # Test case 4: Empty list\n    assert unique_elements([]) == []\n    \n    # Test case 5: No duplicates\n    assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test case 6: Mixed duplicates and unique\n    assert unique_elements([1, 2, 1, 3, 2, 4, 5, 4]) == [1, 2, 3, 4, 5]\n    \n    # Test case 7: Large input with duplicates\n    assert unique_elements([1] * 1000 + [2] * 1000 + [3] * 1000) == [1, 2, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n        intervals (List[List[int]]): A list of intervals to be merged.\n        \n    Returns:\n        List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one\n        if intervals[i][0] <= current_interval[1]:\n            # Merge them by updating the end of the current interval\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            # Move to the next interval\n            current_interval = intervals[i]\n    \n    # Don't forget to add the last interval\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    \n    # Test case 3: All intervals overlap\n    assert merge_overlapping_intervals([[1,4],[2,3],[3,5]]) == [[1,5]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1,2]]) == [[1,2]]\n    \n    # Test case 5: Empty list of intervals\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Intervals with the same start\n    assert merge_overlapping_intervals([[1,4],[1,2],[1,3]]) == [[1,4]]\n    \n    # Test case 7: Intervals that touch but do not overlap\n    assert merge_overlapping_intervals([[1,2],[2,3],[3,4]]) == [[1,4]]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function maintains the order of the first occurrence of each unique element.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n        [5, 3, 2, 1]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements in order\n\n    for element in elements:\n        if element not in seen:  # Check if the element is already seen\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to the result list\n\n    return unique_elements  # Return the list of unique elements\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic case with duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test case 3: Mixed elements with duplicates\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    \n    # Test case 4: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 5: List with no duplicates\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test case 6: List with negative numbers\n    assert remove_duplicates([-1, -2, -2, -3, -1]) == [-1, -2, -3]\n    \n    # Test case 7: List with mixed positive and negative numbers\n    assert remove_duplicates([-1, 2, -1, 3, 2]) == [-1, 2, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n        If there are no repeats, return None.\n        \n        >>> find_repeat([1, 2, 3, 4, 5, 2])\n        2\n        >>> find_repeat([1, 2, 3, 4])\n        None\n        >>> find_repeat([5, 1, 2, 5, 3, 4])\n        5\n        >>> find_repeat([1, 2, 3, 1, 2, 3])\n        1\n        >>> find_repeat([])\n        None\n        >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\n        1\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2\n    assert find_repeat([1, 2, 3, 4]) is None\n    assert find_repeat([5, 1, 2, 5, 3, 4]) == 5\n    assert find_repeat([1, 2, 3, 1, 2, 3]) == 1\n    assert find_repeat([]) is None\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 1\n    assert find_repeat([10, 20, 30, 40, 10]) == 10\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]) == 2\n\n    print(\"All test cases passed!\")"}
