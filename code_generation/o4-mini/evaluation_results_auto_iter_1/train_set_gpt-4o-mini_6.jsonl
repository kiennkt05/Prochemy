{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 6, 6])\n    2\n    \"\"\"\n    # Using a set to store unique elements\n    unique_elements = set(lst)\n    return len(unique_elements)\n\n# Test cases to verify the functionality of the count_unique_elements function\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4\n    assert count_unique_elements([1, 1, 1, 1]) == 1\n    assert count_unique_elements([]) == 0\n    assert count_unique_elements([5, 5, 5, 5, 6, 6]) == 2\n    assert count_unique_elements([10, 20, 30, 10, 20]) == 3\n    assert count_unique_elements([-1, -1, 0, 1, 1]) == 3\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Raises:\n        ValueError: If the input list is empty.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([0, 1, 2, 3])\n    0\n    >>> product_of_elements([5])\n    5\n    >>> product_of_elements([])\n    Traceback (most recent call last):\n        ...\n    ValueError: The input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for number in numbers:\n        product *= number\n        \n    return product\n\n# Test cases to verify the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    print(product_of_elements([1, 2, 3, 4]))  # Expected output: 24\n    print(product_of_elements([-1, -2, -3]))  # Expected output: -6\n    print(product_of_elements([0, 1, 2, 3]))   # Expected output: 0\n    print(product_of_elements([5]))             # Expected output: 5\n    try:\n        print(product_of_elements([]))          # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty."}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Validate input types\n    if not isinstance(elements, list) or not all(isinstance(x, int) for x in elements):\n        raise ValueError(\"elements must be a list of integers.\")\n    if not isinstance(target, int):\n        raise ValueError(\"target must be an integer.\")\n    \n    # Count occurrences of the target in the list\n    count = 0\n    for element in elements:\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to verify the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    assert count_occurrences([], 1) == 0\n    assert count_occurrences([1, 1, 1, 1], 1) == 4\n    assert count_occurrences([1, 2, 3, 4, 5], 6) == 0\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n        \n    Raises:\n        ValueError: If the input is not a list of integers.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(integers, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    for num in integers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Calculate the sum of the integers\n    return sum(integers)\n\n# Test cases to verify the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    print(sum_integers([]))  # Expected output: 0\n    print(sum_integers([10, 20, 30]))  # Expected output: 60\n    \n    # Testing error handling\n    try:\n        print(sum_integers(\"not a list\"))  # Should raise ValueError\n    except ValueError as e:\n        print(e)\n    \n    try:\n        print(sum_integers([1, 2, \"three\"]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Calculate the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # The maximum difference is the difference between the max and min values\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Output: 30\n    print(find_max_difference([5]))  # Output: 0\n    print(find_max_difference([1, -1, 2, -2]))  # Output: 4"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5, 4])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    \"\"\"\n    seen_numbers = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen_numbers:\n            return number  # Return the first repeated number\n        seen_numbers.add(number)  # Add the number to the set\n    return None  # Return None if no repeats are found\n\n# Test cases to verify the functionality of the find_repeat function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 1])\n    [2, 1]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = []  # To store duplicates\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:  # Only add the first occurrence of the duplicate\n                duplicates.append(item)\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Output: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Output: [5]\n    print(find_duplicates([1, 2, 3, 4]))          # Output: []\n    print(find_duplicates([]))                      # Output: []\n    print(find_duplicates([1, 2, 3, 2, 1, 4, 5, 1]))  # Output: [2, 1]"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    # Using a set to track seen elements and a list to maintain order\n    seen = set()\n    unique_list = []\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)\n            unique_list.append(element)\n    \n    return unique_list\n\n# Test cases to verify the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    print(unique_elements([5, 5, 5]))  # Expected output: [5]\n    \n    # Test case 3: No duplicates\n    print(unique_elements([1, 2, 3, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 4: Mixed duplicates\n    print(unique_elements([1, 2, 1, 3, 2, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    print(unique_elements([]))  # Expected output: []\n    \n    # Test case 6: List with negative numbers\n    print(unique_elements([-1, -2, -2, -3, -4, -4]))  # Expected output: [-1, -2, -3, -4]"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A new list containing only unique integers.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    \"\"\"\n    # Using a set to store unique elements\n    unique_elements = set()\n    result = []\n    \n    for element in elements:\n        if element not in unique_elements:\n            unique_elements.add(element)\n            result.append(element)\n    \n    return result\n\n# Test cases to verify the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 2\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Expected output: [1]\n    \n    # Test case 3\n    print(remove_duplicates([]))  # Expected output: []\n    \n    # Test case 4\n    print(remove_duplicates([5, 3, 5, 2, 3, 1]))  # Expected output: [5, 3, 2, 1]\n    \n    # Test case 5\n    print(remove_duplicates([10, 20, 10, 30, 20, 40]))  # Expected output: [10, 20, 30, 40]"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to be merged.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Examples:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    \"\"\"\n    \n    if not intervals:\n        return []\n    \n    # Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged_intervals = []\n    \n    for current in intervals:\n        # If merged_intervals is empty or there is no overlap, add the current interval\n        if not merged_intervals or merged_intervals[-1][1] < current[0]:\n            merged_intervals.append(current)\n        else:\n            # There is an overlap, so we merge the current interval with the last one\n            merged_intervals[-1][1] = max(merged_intervals[-1][1], current[1])\n    \n    return merged_intervals\n\n# Test cases to verify the functionality of the merge_overlapping_intervals function\nif __name__ == \"__main__\":\n    # Test case 1\n    print(merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]))  # Expected: [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2\n    print(merge_overlapping_intervals([[1, 4], [2, 3]]))  # Expected: [[1, 4]]\n    \n    # Test case 3\n    print(merge_overlapping_intervals([[1, 4], [5, 6]]))  # Expected: [[1, 4], [5, 6]]\n    \n    # Test case 4\n    print(merge_overlapping_intervals([[1, 10], [2, 3], [4, 5], [6, 7]]))  # Expected: [[1, 10]]\n    \n    # Test case 5\n    print(merge_overlapping_intervals([]))  # Expected: []\n    \n    # Test case 6\n    print(merge_overlapping_intervals([[1, 2], [3, 4], [2, 3]]))  # Expected: [[1, 4]]"}
