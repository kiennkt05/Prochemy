{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 6, 6])\n    2\n    >>> count_unique_elements([-1, -1, 0, 1, 1])\n    3\n    \"\"\"\n    # Using a set to find unique elements\n    unique_elements = set(lst)\n    return len(unique_elements)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                  # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 6, 6])) # Expected output: 2\n    print(count_unique_elements([-1, -1, 0, 1, 1]))  # Expected output: 3"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" \n    Given a list of integers, return the first number that is repeated. \n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([1, 1, 2, 3])\n    1\n    >>> find_repeat([5, 6, 7, 5, 8, 9])\n    5\n    >>> find_repeat([])\n    None\n    \"\"\"\n    seen = set()  # To keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the seen set\n    return None  # Return None if no repeats are found\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 1])\n    [2, 1]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = []  # To store duplicates\n\n    for item in items:\n        if item in seen:\n            if item not in duplicates:  # Only add the first occurrence of the duplicate\n                duplicates.append(item)\n        else:\n            seen.add(item)\n\n    return duplicates\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The product of all integers in the list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list and multiply\n    for number in numbers:\n        product *= number\n    \n    return product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24, \"Test case 1 failed\"\n    assert product_of_elements([-1, -2, -3]) == -6, \"Test case 2 failed\"\n    assert product_of_elements([]) == 1, \"Test case 3 failed\"\n    assert product_of_elements([0, 1, 2]) == 0, \"Test case 4 failed\"\n    assert product_of_elements([5]) == 5, \"Test case 5 failed\"\n    assert product_of_elements([-1, 1, -1, 1]) == 1, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_num = max(numbers)\n    min_num = min(numbers)\n    \n    return max_num - min_num\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    # Test case 2\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    # Test case 3\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    # Test case 4\n    assert find_max_difference([5]) == 0  # Only one element, difference is 0\n    # Test case 5\n    assert find_max_difference([1, 1, 1, 1]) == 0  # All elements are the same\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1, 6], [8, 10], [15, 18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1, 5]]\n    >>> merge_overlapping_intervals([[1,4],[2,3]])\n    [[1, 4]]\n    >>> merge_overlapping_intervals([])\n    []\n    >>> merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]])\n    [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    \n    if not intervals:\n        return []\n    \n    # Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = [intervals[0]]  # Start with the first interval\n    \n    for current in intervals[1:]:\n        last_merged = merged[-1]\n        \n        # Check if there is an overlap\n        if current[0] <= last_merged[1]:  # Overlapping intervals\n            last_merged[1] = max(last_merged[1], current[1])  # Merge\n        else:\n            merged.append(current)  # No overlap, add to merged list\n    \n    return merged\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    # List to hold the result\n    result = []\n    \n    for element in elements:\n        # If the element is not in the set, add it to both the set and the result list\n        if element not in unique_elements:\n            unique_elements.add(element)\n            result.append(element)\n    \n    return result\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test cases\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4], \"Test case 1 failed\"\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1], \"Test case 2 failed\"\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1], \"Test case 3 failed\"\n    assert remove_duplicates([]) == [], \"Test case 4 failed\"\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40], \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # Increment the counter if the current element matches the target\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Target appears in an empty list\n    assert count_occurrences([], 1) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Target appears multiple times in a large list\n    assert count_occurrences([1, 1, 1, 1, 1, 1, 1], 1) == 7, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store the unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test cases\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    assert unique_elements([5, 5, 5]) == [5]\n    assert unique_elements([1, 1, 2, 3, 2, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    assert unique_elements([]) == []  # Test with an empty list\n    assert unique_elements([1]) == [1]  # Test with a single element\n    assert unique_elements([1, 2, 3, 1, 2, 3]) == [1, 2, 3]  # Test with repeated elements\n\n    print(\"All tests passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n        \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5])  # Mixed positive and negative\n    5\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(integers, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    for num in integers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Calculate the sum of the integers\n    return sum(integers)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    print(sum_integers([]))  # Expected output: 0\n    print(sum_integers([10, -10, 5]))  # Expected output: 5\n    print(sum_integers([100, 200, 300]))  # Expected output: 600"}
