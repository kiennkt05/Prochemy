{"task_id": "auto/0", "completion": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    \n    Args:\n        word1 (str): The first word to compare.\n        word2 (str): The second word to compare.\n    \n    Returns:\n        bool: True if the words are anagrams, False otherwise.\n    \n    Examples:\n        >>> are_anagrams('listen', 'silent')\n        True\n        >>> are_anagrams('hello', 'world')\n        False\n    \"\"\"\n    # Normalize the words by converting them to lowercase\n    word1 = word1.lower()\n    word2 = word2.lower()\n    \n    # Sort the characters of both words and compare\n    return sorted(word1) == sorted(word2)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(are_anagrams('listen', 'silent'))  # Output: True\n    print(are_anagrams('hello', 'world'))    # Output: False", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    \n    The maximum absolute difference is defined as the difference between the maximum\n    and minimum values in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum absolute difference between any two elements.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4])\n        3\n        >>> find_max_difference([5, 5, 5, 5])\n        0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list must not be empty.\")\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4]))  # Output: 3\n    print(find_max_difference([5, 5, 5, 5]))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for duplicates.\n        \n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \n    Examples:\n        >>> find_duplicate([1, 2, 3, 4])\n        False\n        >>> find_duplicate([1, 2, 3, 4, 2])\n        True\n    \"\"\"\n    # Using a set to track seen numbers\n    seen = set()\n    \n    for number in numbers:\n        # If the number is already in the set, we found a duplicate\n        if number in seen:\n            return True\n        # Otherwise, add the number to the set\n        seen.add(number)\n    \n    # If we finish the loop without finding duplicates, return False\n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4]))  # Output: False\n    print(find_duplicate([1, 2, 3, 4, 2]))  # Output: True", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other.\n    \n    An anagram is a rearrangement of letters of a word to form another word.\n    \n    Args:\n        str1 (str): The first string to compare.\n        str2 (str): The second string to compare.\n        \n    Returns:\n        bool: True if str1 and str2 are anagrams, False otherwise.\n    \n    Examples:\n        >>> is_anagram('listen', 'silent')\n        True\n        >>> is_anagram('triangle', 'integral')\n        True\n        >>> is_anagram('apple', 'pale')\n        False\n    \"\"\"\n    # Normalize the strings by converting them to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    # Sort the characters of both strings and compare\n    return sorted(str1) == sorted(str2)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(is_anagram('listen', 'silent'))  # Output: True\n    print(is_anagram('triangle', 'integral'))  # Output: True\n    print(is_anagram('apple', 'pale'))  # Output: False", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "import re\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    \n    A palindrome is case-insensitive and ignores non-alphanumeric characters.\n    \n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('A man, a plan, a canal: Panama')\n    True\n    >>> is_palindrome('No lemon, no melon')\n    True\n    \"\"\"\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n\n# Example usage\nif __name__ == \"__main__\":\n    test_strings = [\n        'racecar',\n        'hello',\n        'A man, a plan, a canal: Panama',\n        'No lemon, no melon',\n        '12321',\n        '12345'\n    ]\n    \n    for test in test_strings:\n        print(f\"'{test}' is a palindrome: {is_palindrome(test)}\")", "result": "failed: ", "passed": false}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n        \n    Examples:\n        >>> count_unique_numbers([1, 2, 2, 3])\n        3\n        >>> count_unique_numbers([4, 4, 4, 4])\n        1\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Use a set to store unique numbers\n    unique_numbers = set(numbers)\n    \n    # Return the count of unique numbers\n    return len(unique_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_unique_numbers([1, 2, 2, 3]))  # Output: 3\n    print(count_unique_numbers([4, 4, 4, 4]))  # Output: 1\n    print(count_unique_numbers([1, 2, 3, 4, 5]))  # Output: 5", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    \n    Args:\n        numbers (List[int]): A list of integers to check.\n        \n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n        \n    Examples:\n        >>> is_sorted([1, 2, 3])\n        True\n        >>> is_sorted([3, 2, 1])\n        False\n        >>> is_sorted([])\n        True\n        >>> is_sorted([1])\n        True\n    \"\"\"\n    # Check if the list is empty or has one element, which are considered sorted\n    if len(numbers) <= 1:\n        return True\n    \n    # Iterate through the list and check if each element is less than or equal to the next\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n            \n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    print(is_sorted([1, 2, 3]))  # Output: True\n    print(is_sorted([3, 2, 1]))  # Output: False\n    print(is_sorted([]))         # Output: True\n    print(is_sorted([1]))        # Output: True", "result": "passed", "passed": true}
{"task_id": "auto/4", "completion": "from typing import List, Tuple\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    \n    The function finds the minimum and maximum values in the list and returns them as a tuple.\n    \n    >>> max_difference([1, 2, 3, 10, 8])\n    (3, 10)\n    >>> max_difference([-1, -5, -3, 0])\n    (-5, 0)\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list must not be empty.\")\n    \n    # Find the minimum and maximum values in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    return (min_value, max_value)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(max_difference([1, 2, 3, 10, 8]))  # Output: (3, 10)\n    print(max_difference([-1, -5, -3, 0]))   # Output: (-5, 0)", "result": "failed: ", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" \n    Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    \n    Args:\n    numbers (List[int]): A list of unique integers from 1 to n with one missing.\n    n (int): The upper limit of the range (1 to n).\n    \n    Returns:\n    int: The missing number in the list.\n    \n    Examples:\n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    \"\"\"\n    # Calculate the expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(numbers)\n    # The missing number is the difference between the expected sum and the actual sum\n    return expected_sum - actual_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_missing_number([3, 7, 1, 2, 8, 4, 5], 8))  # Output: 6\n    print(find_missing_number([1, 2, 4], 4))              # Output: 3", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The length of the longest contiguous subsequence of consecutive integers.\n    \n    Examples:\n        >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n        3\n        >>> find_longest_sequence([1, 2, 3, 4])\n        4\n        >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n        6\n    \"\"\"\n    if not numbers:\n        return 0\n\n    # Create a set from the list for O(1) lookups\n    num_set = set(numbers)\n    longest_streak = 0\n\n    for number in numbers:\n        # Only check for the start of a sequence\n        if number - 1 not in num_set:\n            current_num = number\n            current_streak = 1\n\n            # Count the length of the sequence\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            # Update the longest streak found\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_longest_sequence([1, 2, 9, 3, 4, 5]))  # Output: 3\n    print(find_longest_sequence([1, 2, 3, 4]))         # Output: 4\n    print(find_longest_sequence([10, 1, 2, 3, 4, 5, 0]))  # Output: 6", "result": "failed: ", "passed": false}
