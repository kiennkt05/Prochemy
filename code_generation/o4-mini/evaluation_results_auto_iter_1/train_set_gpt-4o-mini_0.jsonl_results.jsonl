{"task_id": "auto/4", "completion": "from typing import List, Tuple\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    \n    The function finds the maximum and minimum values in the list and returns them as a tuple.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        Tuple[int, int]: A tuple containing the pair of integers with the maximum difference.\n    \n    Raises:\n        ValueError: If the input list is empty.\n    \n    Examples:\n    >>> max_difference([1, 2, 3, 10, 8])\n    (3, 10)\n    >>> max_difference([-1, -5, -3, 0])\n    (-5, 0)\n    >>> max_difference([5])\n    (5, 5)\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_num = max(numbers)\n    min_num = min(numbers)\n    \n    return (min_num, max_num)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    print(max_difference([1, 2, 3, 10, 8]))  # Expected output: (3, 10)\n    \n    # Test case 2\n    print(max_difference([-1, -5, -3, 0]))  # Expected output: (-5, 0)\n    \n    # Test case 3\n    print(max_difference([5]))  # Expected output: (5, 5)\n    \n    # Test case 4\n    print(max_difference([10, 20, 30, 40, 50]))  # Expected output: (10, 50)\n    \n    # Test case 5\n    print(max_difference([-10, -20, -30, -40, -50]))  # Expected output: (-50, -10)\n    \n    # Test case 6\n    try:\n        print(max_difference([]))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty.", "result": "failed: ", "passed": false}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    \n    Args:\n        numbers (List[int]): A list of integers to check.\n        \n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n        \n    Examples:\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    >>> is_sorted([1, 1, 1])\n    True\n    >>> is_sorted([])\n    True\n    >>> is_sorted([1, 2, 3, 2])\n    False\n    >>> is_sorted([1, 2, '3'])  # This should raise a ValueError\n    \"\"\"\n    \n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are integers\n    for num in numbers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Check if the list is sorted\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    print(is_sorted([1, 2, 3]))  # Expected: True\n    print(is_sorted([3, 2, 1]))  # Expected: False\n    print(is_sorted([1, 1, 1]))  # Expected: True\n    print(is_sorted([]))         # Expected: True\n    print(is_sorted([1, 2, 3, 2]))  # Expected: False\n\n    # Invalid test case\n    try:\n        print(is_sorted([1, 2, '3']))  # Expected: ValueError\n    except ValueError as e:\n        print(e)  # Output the error message", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n        \n    Raises:\n        ValueError: If the input is not a list of integers.\n        \n    Examples:\n    >>> count_unique_numbers([1, 2, 2, 3])\n    3\n    >>> count_unique_numbers([4, 4, 4, 4])\n    1\n    >>> count_unique_numbers([])\n    0\n    >>> count_unique_numbers([1, 2, 3, 4, 5])\n    5\n    >>> count_unique_numbers([-1, -1, 0, 1, 1])\n    3\n    \"\"\"\n    \n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Check if all elements in the list are integers\n    for num in numbers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Use a set to count unique numbers\n    unique_numbers = set(numbers)\n    \n    return len(unique_numbers)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the test cases\n    print(count_unique_numbers([1, 2, 2, 3]))  # Expected output: 3\n    print(count_unique_numbers([4, 4, 4, 4]))  # Expected output: 1\n    print(count_unique_numbers([]))             # Expected output: 0\n    print(count_unique_numbers([1, 2, 3, 4, 5]))  # Expected output: 5\n    print(count_unique_numbers([-1, -1, 0, 1, 1]))  # Expected output: 3", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    \n    The maximum absolute difference is defined as the difference between the maximum\n    and minimum values in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum absolute difference.\n        \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4])\n    3\n    >>> find_max_difference([5, 5, 5, 5])\n    0\n    >>> find_max_difference([-1, -2, -3, -4])\n    3\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([1])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # Handle the case of an empty list\n        return 0\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4]))  # Expected output: 3\n    print(find_max_difference([5, 5, 5, 5]))  # Expected output: 0\n    print(find_max_difference([-1, -2, -3, -4]))  # Expected output: 3\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    print(find_max_difference([1]))  # Expected output: 0\n    print(find_max_difference([]))  # Expected output: 0", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from collections import Counter\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other.\n    \n    An anagram is a rearrangement of letters of a word to form another word.\n    \n    Args:\n        str1 (str): The first string.\n        str2 (str): The second string.\n        \n    Returns:\n        bool: True if str1 and str2 are anagrams, False otherwise.\n    \n    Examples:\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('triangle', 'integral')\n    True\n    >>> is_anagram('apple', 'pale')\n    False\n    >>> is_anagram('Dormitory', 'Dirty room')\n    True\n    >>> is_anagram('The eyes', 'They see')\n    True\n    >>> is_anagram('Hello', 'World')\n    False\n    \"\"\"\n    # Normalize the strings: remove spaces and convert to lowercase\n    str1_normalized = ''.join(str1.lower().split())\n    str2_normalized = ''.join(str2.lower().split())\n    \n    # Count the characters in both strings\n    return Counter(str1_normalized) == Counter(str2_normalized)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(is_anagram('listen', 'silent'))  # True\n    print(is_anagram('triangle', 'integral'))  # True\n    print(is_anagram('apple', 'pale'))  # False\n    print(is_anagram('Dormitory', 'Dirty room'))  # True\n    print(is_anagram('The eyes', 'They see'))  # True\n    print(is_anagram('Hello', 'World'))  # False", "result": "failed: ", "passed": false}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    \n    A palindrome ignores spaces, punctuation, and is case-insensitive.\n    \n    Args:\n        s (str): The string to check.\n        \n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \n    Examples:\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('A man a plan a canal Panama')\n    True\n    >>> is_palindrome('No lemon no melon')\n    True\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('Was it a car or a cat I saw?')\n    True\n    \"\"\"\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_str = ''.join(char.lower() for char in s if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases: List[str] = [\n        'racecar',                      # True\n        'hello',                        # False\n        'A man a plan a canal Panama',  # True\n        'No lemon no melon',            # True\n        '',                             # True (empty string)\n        'Was it a car or a cat I saw?', # True\n        'Not a palindrome',              # False\n        '12321',                        # True (numeric palindrome)\n        '12345',                        # False\n        'Able was I ere I saw Elba'    # True\n    ]\n    \n    for test in test_cases:\n        result = is_palindrome(test)\n        print(f'is_palindrome({repr(test)}) = {result}')", "result": "failed: ", "passed": false}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    \n    Args:\n        word1 (str): The first word to compare.\n        word2 (str): The second word to compare.\n    \n    Returns:\n        bool: True if the words are anagrams, False otherwise.\n    \n    Examples:\n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('hello', 'world')\n    False\n    >>> are_anagrams('triangle', 'integral')\n    True\n    >>> are_anagrams('apple', 'pale')\n    False\n    >>> are_anagrams('anagram', 'nagaram')\n    True\n    >>> are_anagrams('rat', 'car')\n    False\n    >>> are_anagrams('a', 'a')\n    True\n    >>> are_anagrams('', '')\n    True\n    >>> are_anagrams('a', '')\n    False\n    >>> are_anagrams(123, '321')  # This should raise a TypeError\n    \"\"\"\n    \n    # Check if both inputs are strings\n    if not isinstance(word1, str) or not isinstance(word2, str):\n        raise TypeError(\"Both inputs must be strings.\")\n    \n    # Normalize the strings by converting to lowercase and sorting\n    return sorted(word1) == sorted(word2)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    test_cases = [\n        ('listen', 'silent', True),\n        ('hello', 'world', False),\n        ('triangle', 'integral', True),\n        ('apple', 'pale', False),\n        ('anagram', 'nagaram', True),\n        ('rat', 'car', False),\n        ('a', 'a', True),\n        ('', '', True),\n        ('a', '', False),\n    ]\n    \n    for word1, word2, expected in test_cases:\n        result = are_anagrams(word1, word2)\n        assert result == expected, f\"Test failed for {word1} and {word2}: expected {expected}, got {result}\"\n    \n    print(\"All tests passed!\")", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    \n    Args:\n    numbers (List[int]): A list of unique integers from 1 to n with one missing.\n    n (int): The upper limit of the range (1 to n).\n    \n    Returns:\n    int: The missing number.\n    \n    Examples:\n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    \"\"\"\n    # Calculate the expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(numbers)\n    # The missing number is the difference between the expected and actual sums\n    return expected_sum - actual_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1\n    assert find_missing_number([3, 7, 1, 2, 8, 4, 5], 8) == 6\n    # Test case 2\n    assert find_missing_number([1, 2, 4], 4) == 3\n    # Test case 3: Missing number is 5\n    assert find_missing_number([1, 2, 3, 4], 5) == 5\n    # Test case 4: Missing number is 1\n    assert find_missing_number([2, 3, 4, 5], 5) == 1\n    # Test case 5: Missing number is 10\n    assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    int: The length of the longest contiguous subsequence of consecutive integers.\n    \n    Examples:\n    >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n    3\n    >>> find_longest_sequence([1, 2, 3, 4])\n    4\n    >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n    6\n    >>> find_longest_sequence([1, 2, 3, 5, 6, 7, 8])\n    4\n    >>> find_longest_sequence([5, 6, 7, 8, 9, 10])\n    6\n    >>> find_longest_sequence([1])\n    1\n    >>> find_longest_sequence([])\n    0\n    \"\"\"\n    if not numbers:\n        return 0\n\n    numbers.sort()  # Sort the numbers to find consecutive sequences\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1] + 1:  # Check if current number is consecutive\n            current_length += 1\n        elif numbers[i] != numbers[i - 1]:  # Reset if not consecutive and not a duplicate\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)  # Final check for the last sequence\n    return max_length\n\n# Test cases\nif __name__ == \"__main__\":\n    print(find_longest_sequence([1, 2, 9, 3, 4, 5]))  # Output: 3\n    print(find_longest_sequence([1, 2, 3, 4]))        # Output: 4\n    print(find_longest_sequence([10, 1, 2, 3, 4, 5, 0]))  # Output: 6\n    print(find_longest_sequence([1, 2, 3, 5, 6, 7, 8]))  # Output: 4\n    print(find_longest_sequence([5, 6, 7, 8, 9, 10]))  # Output: 6\n    print(find_longest_sequence([1]))                   # Output: 1\n    print(find_longest_sequence([]))                    # Output: 0", "result": "failed: ", "passed": false}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for duplicates.\n    \n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \n    Examples:\n    >>> find_duplicate([1, 2, 3, 4])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 2])\n    True\n    >>> find_duplicate([1, 1, 2, 3])\n    True\n    >>> find_duplicate([])\n    False\n    >>> find_duplicate([5])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 5, 1])\n    True\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert find_duplicate([1, 2, 3, 4]) == False, \"Test case 1 failed\"\n    assert find_duplicate([1, 2, 3, 4, 2]) == True, \"Test case 2 failed\"\n    assert find_duplicate([1, 1, 2, 3]) == True, \"Test case 3 failed\"\n    assert find_duplicate([]) == False, \"Test case 4 failed\"\n    assert find_duplicate([5]) == False, \"Test case 5 failed\"\n    assert find_duplicate([1, 2, 3, 4, 5, 1]) == True, \"Test case 6 failed\"\n    assert find_duplicate([10, 20, 30, 40, 50, 10]) == True, \"Test case 7 failed\"\n    assert find_duplicate([1, 2, 3, 4, 5]) == False, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
