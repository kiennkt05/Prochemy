{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n        >>> product_of_elements([1, 2, 3, 4])\n        24\n        >>> product_of_elements([-1, -2, -3])\n        -6\n        >>> product_of_elements([0, 1, 2, 3])\n        0\n        >>> product_of_elements([5])\n        5\n        >>> product_of_elements([])\n        1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to validate the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    # Test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    assert product_of_elements([-1, -2, -3]) == -6\n    assert product_of_elements([0, 1, 2, 3]) == 0\n    assert product_of_elements([5]) == 5\n    assert product_of_elements([]) == 1  # Product of an empty list is defined as 1\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Calculate the sum of the integers using the built-in sum function\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Test case 1: Sum of positive integers\n    assert sum_integers([1, 2, 3]) == 6, \"Test case 1 failed\"\n    \n    # Test case 2: Sum of negative and positive integers\n    assert sum_integers([-1, -2, 3]) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Sum of all negative integers\n    assert sum_integers([-1, -2, -3]) == -6, \"Test case 3 failed\"\n    \n    # Test case 4: Sum of an empty list\n    assert sum_integers([]) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Sum of a single integer\n    assert sum_integers([5]) == 5, \"Test case 5 failed\"\n    \n    # Test case 6: Sum of mixed integers\n    assert sum_integers([10, -10, 5, -5]) == 0, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique elements in the list.\n    \n    Examples:\n        >>> count_unique_elements([1, 2, 2, 3, 4])\n        4\n        >>> count_unique_elements([1, 1, 1, 1])\n        1\n        >>> count_unique_elements([])\n        0\n        >>> count_unique_elements([5, 5, 5, 5, 5])\n        1\n        >>> count_unique_elements([1, 2, 3, 4, 5, 6])\n        6\n    \"\"\"\n    # Use a set to store unique elements since sets do not allow duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    \n    # Additional test cases\n    print(count_unique_elements([]))                  # Expected output: 0 (empty list)\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Expected output: 1 (all elements are the same)\n    print(count_unique_elements([1, 2, 3, 4, 5, 6])) # Expected output: 6 (all elements are unique)\n    print(count_unique_elements([1, 2, 2, 3, 3, 4])) # Expected output: 4 (1, 2, 3, 4 are unique)"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Raises:\n        ValueError: If the input list is empty.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    \n    # Check if the list is empty and raise an error if it is\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Calculate the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # The maximum difference is the difference between the max and min values\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the functionality of the find_max_difference function\nif __name__ == \"__main__\":\n    # Test with a normal case\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    \n    # Test with negative numbers\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    \n    # Test with mixed positive and negative numbers\n    print(find_max_difference([-10, 0, 10, 20]))  # Expected output: 30\n    \n    # Test with a single element (should raise an error)\n    try:\n        print(find_max_difference([5]))  # Expected output: 0\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty.\n    \n    # Test with an empty list (should raise an error)\n    try:\n        print(find_max_difference([]))  # Expected output: ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty."}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" \n    Given a list of integers, return the first number that is repeated. \n    If there are no repeats, return None.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for repeats.\n    \n    Returns:\n        Optional[int]: The first repeated integer or None if no repeats exist.\n    \n    Examples:\n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n    seen: Dict[int, bool] = {}  # Dictionary to keep track of seen numbers\n    \n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen[number] = True  # Mark the number as seen\n    \n    return None  # Return None if no repeats are found\n\n# Test cases to validate the functionality of the find_repeat function\nif __name__ == \"__main__\":\n    # Test case 1: A list with a repeat\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: A list with no repeats\n    assert find_repeat([1, 2, 3, 4]) is None, \"Test case 2 failed\"\n    \n    # Test case 3: A list with multiple repeats\n    assert find_repeat([1, 2, 3, 2, 4, 5]) == 2, \"Test case 3 failed\"\n    \n    # Test case 4: A list with the first number repeated\n    assert find_repeat([1, 1, 2, 3, 4]) == 1, \"Test case 4 failed\"\n    \n    # Test case 5: An empty list\n    assert find_repeat([]) is None, \"Test case 5 failed\"\n    \n    # Test case 6: A list with all elements the same\n    assert find_repeat([5, 5, 5, 5]) == 5, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    unique_list = []\n    seen = set()\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)\n            unique_list.append(element)\n    \n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    print(unique_elements([5, 5, 5]))  # Expected output: [5]\n    \n    # Test case 3: No duplicates\n    print(unique_elements([1, 2, 3, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 4: Mixed duplicates\n    print(unique_elements([1, 2, 1, 3, 2, 4]))  # Expected output: [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    print(unique_elements([]))  # Expected output: []\n    \n    # Test case 6: List with negative numbers\n    print(unique_elements([-1, -2, -2, -3, -1]))  # Expected output: [-1, -2, -3]\n    \n    # Test case 7: List with a single element\n    print(unique_elements([10]))  # Expected output: [10]"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    Args:\n        items (List[int]): A list of integers to check for duplicates.\n        \n    Returns:\n        List[int]: A list of duplicate integers in the order of their first occurrence.\n    \n    Examples:\n        >>> find_duplicates([1, 2, 3, 1, 2, 4])\n        [1, 2]\n        >>> find_duplicates([5, 5, 5, 6, 7])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    duplicates = []  # List to store duplicates\n\n    for item in items:\n        if item in seen:\n            # If the item is already seen, it's a duplicate\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already added\n        else:\n            seen.add(item)  # Mark the item as seen\n\n    return duplicates  # Return the list of duplicates\n\n# Test cases to validate the functionality of the find_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    \n    # Test case 2: All elements are duplicates\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    \n    # Test case 3: No duplicates\n    assert find_duplicates([1, 2, 3, 4, 5]) == []\n    \n    # Test case 4: Mixed duplicates\n    assert find_duplicates([1, 2, 3, 1, 4, 2, 5]) == [1, 2]\n    \n    # Test case 5: Empty list\n    assert find_duplicates([]) == []\n    \n    # Test case 6: Single element list\n    assert find_duplicates([1]) == []\n    \n    # Test case 7: Large list with duplicates\n    assert find_duplicates([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == [1, 2, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Target appears at the beginning\n    assert count_occurrences([3, 1, 2, 3, 4], 3) == 2, \"Test case 4 failed\"\n    \n    # Test case 5: Target appears at the end\n    assert count_occurrences([1, 2, 3, 4, 3], 3) == 2, \"Test case 5 failed\"\n    \n    # Test case 6: Empty list\n    assert count_occurrences([], 1) == 0, \"Test case 6 failed\"\n    \n    # Test case 7: List with negative numbers\n    assert count_occurrences([-1, -2, -3, -1, -4], -1) == 2, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n        intervals (List[List[int]]): A list of intervals to be merged.\n        \n    Returns:\n        List[List[int]]: A list of merged intervals.\n        \n    Example:\n        >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n        [[1,6],[8,10],[15,18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for next_interval in intervals[1:]:\n        # If the current interval overlaps with the next interval, merge them\n        if current_interval[1] >= next_interval[0]:\n            current_interval[1] = max(current_interval[1], next_interval[1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            current_interval = next_interval\n    \n    # Add the last interval\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to validate the functionality of the merge_overlapping_intervals function\nif __name__ == \"__main__\":\n    # Test case 1: Standard overlapping intervals\n    assert merge_overlapping_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    \n    # Test case 3: Fully overlapping intervals\n    assert merge_overlapping_intervals([[1, 5], [2, 3], [4, 6]]) == [[1, 6]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1, 2]]) == [[1, 2]]\n    \n    # Test case 5: Empty list\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Intervals that touch but do not overlap\n    assert merge_overlapping_intervals([[1, 2], [2, 3], [3, 4]]) == [[1, 4]]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a new list that contains only unique elements.\n    \n    Args:\n    elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 1, 2])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10])\n    [10]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set()\n    \n    # List to hold the result\n    result = []\n    \n    # Iterate through the input list\n    for element in elements:\n        # If the element is not in the set, add it to both the set and the result list\n        if element not in unique_elements:\n            unique_elements.add(element)\n            result.append(element)\n    \n    return result\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test case 3: Mixed duplicates\n    assert remove_duplicates([5, 3, 5, 2, 1, 2]) == [5, 3, 2, 1]\n    \n    # Test case 4: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 5: Single element list\n    assert remove_duplicates([10]) == [10]\n    \n    # Test case 6: List with negative numbers and duplicates\n    assert remove_duplicates([-1, -2, -2, -3, -1]) == [-1, -2, -3]\n    \n    # Test case 7: List with mixed positive and negative numbers\n    assert remove_duplicates([1, -1, 1, -1, 2, -2]) == [1, -1, 2, -2]\n    \n    print(\"All test cases passed!\")"}
