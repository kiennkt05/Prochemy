{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Test with an empty list\n    0\n    >>> sum_integers([10, 20, 30])  # Test with positive integers\n    60\n    >>> sum_integers([-5, 5, 0])  # Test with a mix of negative, positive, and zero\n    0\n    >>> sum_integers([-1, -1, -1, -1])  # Test with all negative integers\n    -4\n    \"\"\"\n    return sum(integers)\n\n# Running the test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The product of all integers in the list.\n\n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([0, 1, 2, 3])\n    0\n    >>> product_of_elements([5])\n    5\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    assert product_of_elements([-1, -2, -3]) == -6\n    assert product_of_elements([0, 1, 2, 3]) == 0\n    assert product_of_elements([5]) == 5\n    assert product_of_elements([]) == 1  # Product of an empty list is defined as 1\n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n    elements (List[int]): A list of integers to search through.\n    target (int): The integer to count occurrences of.\n    \n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([1, 2, 3, 4, 5], 0)\n    0\n    \"\"\"\n    return elements.count(target)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 1, 2])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    # Use a set to store unique elements\n    unique_elements = set(elements)\n    # Convert the set back to a list and return it\n    return list(unique_elements)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(remove_duplicates([1, 2, 2, 3, 4]))  # Expected: [1, 2, 3, 4]\n    print(remove_duplicates([1, 1, 1, 1, 1]))  # Expected: [1]\n    print(remove_duplicates([5, 3, 5, 2, 1, 2]))  # Expected: [1, 2, 3, 5]\n    print(remove_duplicates([]))  # Expected: []\n    print(remove_duplicates([10, 20, 10, 30, 20, 40]))  # Expected: [10, 20, 30, 40]"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    int: The maximum difference between any two elements in the list.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30, -40])\n    30\n    >>> find_max_difference([5])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # Handle empty list case\n        return 0\n    max_value = max(numbers)\n    min_value = min(numbers)\n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected output: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected output: 30\n    print(find_max_difference([-10, -20, -30, -40]))  # Expected output: 30\n    print(find_max_difference([5]))  # Expected output: 0 (only one element)\n    print(find_max_difference([]))  # Expected output: 0 (empty list)"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 3, 3, 3, 4])\n    [2, 3]\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    seen = set()\n    duplicates = []\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            seen.add(item)\n    \n    return duplicates\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(find_duplicates([1, 2, 3, 1, 2, 4]))  # Expected: [1, 2]\n    print(find_duplicates([5, 5, 5, 6, 7]))      # Expected: [5]\n    print(find_duplicates([1, 2, 3, 4]))         # Expected: []\n    print(find_duplicates([1, 2, 2, 3, 3, 3, 4])) # Expected: [2, 3]\n    print(find_duplicates([]))                     # Expected: []"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n    lst (List[int]): A list of integers.\n    \n    Returns:\n    int: The count of unique elements in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    \"\"\"\n    return len(set(lst))\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4\n    assert count_unique_elements([1, 1, 1, 1]) == 1\n    assert count_unique_elements([]) == 0\n    assert count_unique_elements([5, 5, 5, 5, 5]) == 1\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5\n    assert count_unique_elements([1, 2, 2, 3, 3, 4, 4, 5]) == 5\n    assert count_unique_elements([-1, -1, 0, 1, 1]) == 3\n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1,5]]\n    >>> merge_overlapping_intervals([[1,4],[2,3]])\n    [[1,4]]\n    >>> merge_overlapping_intervals([[1,2],[3,4],[5,6]])\n    [[1,2],[3,4],[5,6]]\n    >>> merge_overlapping_intervals([])\n    []\n    \"\"\"\n    if not intervals:\n        return []\n\n    # Step 1: Sort the intervals based on the start time\n    intervals.sort(key=lambda x: x[0])\n    \n    merged = [intervals[0]]  # Start with the first interval\n\n    # Step 2: Iterate through the sorted intervals\n    for current in intervals[1:]:\n        last_merged = merged[-1]\n        \n        # Check if there is an overlap\n        if current[0] <= last_merged[1]:  # Overlapping intervals\n            # Merge the current interval with the last merged interval\n            last_merged[1] = max(last_merged[1], current[1])\n        else:\n            # No overlap, add the current interval to merged list\n            merged.append(current)\n\n    return merged\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5, 4])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return number\n        seen.add(number)\n    return None\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2\n    assert find_repeat([1, 2, 3, 4]) is None\n    assert find_repeat([5, 1, 2, 3, 5, 4]) == 5\n    assert find_repeat([1, 2, 3, 1, 2, 3]) == 1\n    assert find_repeat([]) is None\n    assert find_repeat([1, 2, 3, 4, 5, 1, 2]) == 1\n    assert find_repeat([2, 2, 3, 4, 5]) == 2\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is None\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order. \n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()\n    unique = []\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)\n            unique.append(element)\n    \n    return unique\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))              # Expected: [5]\n    print(unique_elements([1, 2, 3, 1, 2, 3]))    # Expected: [1, 2, 3]\n    print(unique_elements([]))                      # Expected: []\n    print(unique_elements([1, 2, 3, 4, 5]))        # Expected: [1, 2, 3, 4, 5]\n    print(unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5]))  # Expected: [1, 2, 3, 4, 5]"}
