{"task_id": "auto/0", "prompt": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    \"\"\"\n", "entry_point": "product_of_elements", "canonical_solution": "    product = 1\n    for number in numbers:\n        product *= number\n    return product\n", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4]) == 24\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([0, 1, 2, 3]) == 0\n    assert candidate([2, 2, 2]) == 8\n    assert candidate([5, 5, 1]) == 25\n"}
{"task_id": "auto/1", "prompt": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    \"\"\"", "entry_point": "find_max_difference", "canonical_solution": "    if not numbers:\n        return 0\n    return max(numbers) - min(numbers)\n", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 4\n    assert candidate([10, 20, 30, 40]) == 30\n    assert candidate([5, 1, 8, 2, 14]) == 13\n    assert candidate([-5, 0, 5]) == 10\n    assert candidate([100]) == 0\n    assert candidate([]) == 0\n"}
{"task_id": "auto/2", "prompt": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n", "entry_point": "merge_overlapping_intervals", "canonical_solution": "    if not intervals:\n        return []\n\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            last[1] = max(last[1], current[1])\n        else:\n            merged.append(current)\n\n    return merged\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    assert candidate([[1,4],[4,5]]) == [[1,5]]\n    assert candidate([[1,4],[0,4]]) == [[0,4]]\n    assert candidate([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n"}
{"task_id": "auto/3", "prompt": "from typing import Optional, Dict\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    \"\"\"\n", "entry_point": "find_repeat", "canonical_solution": "    seen = set()\n    for num in numbers:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 2]) == 2\n    assert candidate([1, 2, 3, 4, 5, 3, 2]) == 3\n    assert candidate([1, 2, 3, 1]) == 1\n    assert candidate([1, 2, 3]) == None\n    assert candidate([5, 5, 1, 2, 3]) == 5\n"}
{"task_id": "auto/4", "prompt": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    \"\"\"\n", "entry_point": "find_duplicates", "canonical_solution": "    seen = set()\n    duplicates = []\n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)\n        else:\n            seen.add(item)\n    return duplicates\n", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert candidate([5, 5, 5, 6, 7]) == [5]\n    assert candidate([1, 2, 3, 4]) == []\n    assert candidate([7, 8, 9, 8, 7, 10]) == [7, 8]\n    assert candidate([1, 1, 1, 1]) == [1]\n    assert candidate([]) == []\n"}
{"task_id": "auto/5", "prompt": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n", "entry_point": "count_occurrences", "canonical_solution": "    count = 0\n    for elem in elements:\n        if elem == target:\n            count += 1\n    return count\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 3, 4], 3) == 2\n    assert candidate([1, 2, 2, 2, 3, 4], 5) == 0\n    assert candidate([1, 1, 1, 1], 1) == 4\n    assert candidate([], 1) == 0\n    assert candidate([5, 5, 1, 5, 2], 5) == 3\n"}
{"task_id": "auto/6", "prompt": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    \"\"\"\n", "entry_point": "count_unique_elements", "canonical_solution": "    return len(set(lst))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3, 4]) == 4\n    assert candidate([1, 1, 1, 1]) == 1\n    assert candidate([5, 5, 6, 7, 8]) == 4\n    assert candidate([]) == 0\n    assert candidate([10, 10, 10, 11, 12]) == 3\n"}
{"task_id": "auto/7", "prompt": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    \"\"\"\n", "entry_point": "sum_integers", "canonical_solution": "    total = 0\n    for number in integers:\n        total += number\n    return total\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([-1, -2, 3]) == 0\n    assert candidate([5, 0, 5]) == 10\n    assert candidate([]) == 0\n    assert candidate([1, 2, -2]) == 1\n"}
{"task_id": "auto/8", "prompt": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order. \n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    \"\"\"", "entry_point": "unique_elements", "canonical_solution": "    unique = []\n    seen = set()\n    for elem in elements:\n        if elem not in seen:\n            seen.add(elem)\n            unique.append(elem)\n    return unique\n", "test": "\n\nMETADATA = {\n    'author': 'jl',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    assert candidate([5, 5, 5]) == [5]\n    assert candidate([1, 2, 2, 3, 1]) == [1, 2, 3]\n    assert candidate([]) == []\n    assert candidate([10, 20, 10, 30, 20]) == [10, 20, 30]\n"}
{"task_id": "auto/9", "prompt": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    \"\"\"\n", "entry_point": "remove_duplicates", "canonical_solution": "    return list(set(elements))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 1, 1, 1, 1]) == [1]\n    assert candidate([3, 3, 2, 1, 4, 4]) == [1, 2, 3, 4]\n    assert candidate([]) == []\n    assert candidate([5, 4, 3]) == [3, 4, 5]\n"}
