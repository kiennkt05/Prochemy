{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n        >>> sum_integers([])  # Edge case: empty list\n        0\n        >>> sum_integers([10, -10, 5, 5])  # Mixed positive and negative\n        10\n        >>> sum_integers([100, 200, 300])  # Large numbers\n        600\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    \n    # Edge case: empty list\n    assert sum_integers([]) == 0\n    \n    # Mixed positive and negative numbers\n    assert sum_integers([10, -10, 5, 5]) == 10\n    \n    # Large numbers\n    assert sum_integers([100, 200, 300]) == 600\n    \n    # All negative numbers\n    assert sum_integers([-5, -10, -15]) == -30\n    \n    # Single element list\n    assert sum_integers([42]) == 42\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        raise ValueError(\"The list must contain at least one number.\")\n    \n    max_value = max(numbers)  # Find the maximum value in the list\n    min_value = min(numbers)  # Find the minimum value in the list\n    \n    return max_value - min_value  # Return the difference\n\n# Test cases to validate the functionality of the find_max_difference function\ndef test_find_max_difference():\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    assert find_max_difference([5]) == 0  # Only one element, difference is 0\n    assert find_max_difference([1, -1]) == 2  # Difference between 1 and -1\n    assert find_max_difference([0, 0, 0]) == 0  # All elements are the same\n    assert find_max_difference([100, 200, 300, 400, 500]) == 400  # Regular case\n    \n    try:\n        find_max_difference([])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"The list must contain at least one number.\"\n\n# Run the test cases\ntest_find_max_difference()\nprint(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5, 6])\n    6\n    >>> count_unique_elements([-1, -2, -2, -3, -4])\n    4\n    \"\"\"\n    # Using a set to store unique elements\n    unique_elements = set(lst)\n    # The number of unique elements is the size of the set\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    print(count_unique_elements([]))                 # Expected output: 0\n    print(count_unique_elements([5, 5, 5, 5, 5]))   # Expected output: 1\n    print(count_unique_elements([1, 2, 3, 4, 5, 6])) # Expected output: 6\n    print(count_unique_elements([-1, -2, -2, -3, -4])) # Expected output: 4"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    count = 0\n    for element in elements:\n        if element == target:\n            count += 1\n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    \n    # Additional test cases\n    assert count_occurrences([], 1) == 0  # Empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4  # All elements are the target\n    assert count_occurrences([1, 2, 3, 4, 5], 0) == 0  # Target not in list\n    assert count_occurrences([1, 2, 3, 2, 2, 4], 2) == 3  # Multiple occurrences\n    assert count_occurrences([5, 5, 5, 5, 5], 5) == 5  # All elements are the same as target\n    assert count_occurrences([1, 2, 3, 4, 5], 6) == 0  # Target greater than any element\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. Returns 1 for an empty list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    \"\"\"\n    if not numbers:  # Handle the case of an empty list\n        return 1\n    \n    product = 1\n    for number in numbers:\n        product *= number  # Multiply each number to the product\n    \n    return product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    assert product_of_elements([-1, -2, -3]) == -6\n    assert product_of_elements([]) == 1  # Edge case: empty list\n    assert product_of_elements([0, 1, 2]) == 0  # Edge case: includes zero\n    assert product_of_elements([5]) == 5  # Edge case: single element\n    assert product_of_elements([-1, 2, -3, 4]) == 24  # Mixed signs\n    assert product_of_elements([1, -1, 1, -1]) == 1  # Even number of negatives\n    assert product_of_elements([1, 2, 3, 0]) == 0  # Zero in the list\n    assert product_of_elements([10, 20, 30]) == 6000  # Larger numbers\n\n    print(\"All tests passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> unique_elements([1, 1, 2, 2, 3, 3, 4, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected: [5]\n    \n    # Additional test cases\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected: [1, 2, 3]\n    print(unique_elements([]))                    # Expected: []\n    print(unique_elements([1, 2, 3, 4, 5]))      # Expected: [1, 2, 3, 4, 5]\n    print(unique_elements([1, 1, 2, 2, 3, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([1, 2, 2, 3, 1, 4, 4, 5]))  # Expected: [1, 2, 3, 4, 5]"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function maintains the order of the first occurrences of the elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n        [5, 3, 2, 1]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_elements = []  # List to store unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to unique list\n\n    return unique_elements\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All duplicates\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test case 3: Mixed duplicates\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    \n    # Test case 4: No duplicates\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 6: Single element\n    assert remove_duplicates([42]) == [42]\n    \n    # Test case 7: Large input with duplicates\n    assert remove_duplicates([1, 2, 3, 1, 2, 3, 4, 5, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test case 8: Negative numbers\n    assert remove_duplicates([-1, -2, -2, -3, -4]) == [-1, -2, -3, -4]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n    If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\n    1\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10])\n    10\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert find_repeat([1, 2, 3, 4, 5, 2]) == 2\n    assert find_repeat([1, 2, 3, 4]) is None\n    assert find_repeat([5, 1, 2, 3, 5]) == 5\n    assert find_repeat([1, 2, 3, 1, 2, 3]) == 1\n    assert find_repeat([]) is None\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 1\n    assert find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10\n\n    print(\"All tests passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 1, 1, 1])\n    [1]\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 4])\n    [2, 1, 4]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = []  # To store duplicates in order of first occurrence\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already added\n        else:\n            seen.add(item)  # Mark the item as seen\n    \n    return duplicates\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    assert find_duplicates([1, 2, 3, 4]) == []\n    assert find_duplicates([1, 1, 1, 1]) == [1]\n    assert find_duplicates([]) == []\n    assert find_duplicates([1, 2, 3, 2, 1, 4, 5, 4]) == [2, 1, 4]\n    assert find_duplicates([10, 20, 30, 10, 20, 30, 40]) == [10, 20, 30]\n    assert find_duplicates([1, 2, 3, 4, 5]) == []\n    assert find_duplicates([1, 2, 3, 2, 3, 1]) == [2, 3, 1]\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" \n    Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    >>> merge_overlapping_intervals([[1,4],[4,5]])\n    [[1,5]]\n    >>> merge_overlapping_intervals([[1,4],[2,3]])\n    [[1,4]]\n    >>> merge_overlapping_intervals([[1,2],[3,4],[5,6]])\n    [[1,2],[3,4],[5,6]]\n    >>> merge_overlapping_intervals([])\n    []\n    >>> merge_overlapping_intervals([[1,4],[0,4]])\n    [[0,4]]\n    \"\"\"\n    \n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting value\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_start, current_end = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        start, end = intervals[i]\n        \n        # If the current interval overlaps with the merged one, merge them\n        if start <= current_end:\n            current_end = max(current_end, end)  # Extend the end if needed\n        else:\n            # No overlap, add the previous interval to merged list\n            merged.append([current_start, current_end])\n            current_start, current_end = start, end  # Move to the next interval\n    \n    # Add the last interval\n    merged.append([current_start, current_end])\n    \n    return merged\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1, 6], [8, 10], [15, 18]]\n    assert merge_overlapping_intervals([[1,4],[4,5]]) == [[1, 5]]\n    assert merge_overlapping_intervals([[1,4],[2,3]]) == [[1, 4]]\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1, 2], [3, 4], [5, 6]]\n    assert merge_overlapping_intervals([]) == []\n    assert merge_overlapping_intervals([[1,4],[0,4]]) == [[0, 4]]\n    assert merge_overlapping_intervals([[1, 10], [2, 3], [4, 5], [6, 7], [8, 9]]) == [[1, 10]]\n    assert merge_overlapping_intervals([[1, 2], [3, 4], [2, 3], [5, 6], [4, 5]]) == [[1, 2], [3, 6]]\n    \n    print(\"All test cases passed!\")"}
