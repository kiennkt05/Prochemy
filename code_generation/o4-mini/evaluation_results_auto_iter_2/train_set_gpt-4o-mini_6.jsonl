{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(numbers) < 2:\n        return 0  # No difference can be calculated\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4\n    assert find_max_difference([10, 20, 30, 40]) == 30\n    assert find_max_difference([-10, -20, -30, -40]) == 30\n    assert find_max_difference([5]) == 0  # Only one element\n    assert find_max_difference([]) == 0  # Empty list\n    assert find_max_difference([1, 1, 1, 1]) == 0  # All elements are the same\n    assert find_max_difference([1, 100, 50, 25]) == 99  # Mixed values\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. Returns 1 for an empty list.\n    \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list and multiply it to the product\n    for number in numbers:\n        product *= number\n    \n    return product\n\n# Test cases to validate the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    # Test with positive integers\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    # Test with negative integers\n    assert product_of_elements([-1, -2, -3]) == -6\n    # Test with a mix of positive and negative integers\n    assert product_of_elements([-1, 2, -3]) == 6\n    # Test with an empty list\n    assert product_of_elements([]) == 1\n    # Test with a single element\n    assert product_of_elements([5]) == 5\n    # Test with zeros in the list\n    assert product_of_elements([0, 1, 2]) == 0\n    assert product_of_elements([0, 0, 0]) == 0\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n        If there are no repeats, return None.\n        \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 5, 3, 4])\n    5\n    >>> find_repeat([1, 2, 3, 4, 1])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 1, 2, 3])\n    1\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers where we want to count occurrences.\n        target (int): The integer whose occurrences we want to count.\n    \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n        >>> count_occurrences([1, 2, 3, 3, 4], 3)\n        2\n        >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n        0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of the count_occurrences function\nif __name__ == \"__main__\":\n    # Test case 1: Target appears multiple times\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2\n    \n    # Test case 2: Target does not appear in the list\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0\n    \n    # Test case 3: Target appears once\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1\n    \n    # Test case 4: Target appears in an empty list\n    assert count_occurrences([], 1) == 0\n    \n    # Test case 5: Target appears multiple times in a large list\n    assert count_occurrences([1, 1, 1, 1, 1, 1, 1], 1) == 7\n    \n    # Test case 6: Target appears in a list with negative numbers\n    assert count_occurrences([-1, -2, -3, -1, -1], -1) == 3\n    \n    # Test case 7: Target is zero and appears in the list\n    assert count_occurrences([0, 1, 0, 2, 0], 0) == 3\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    assert count_unique_elements([1, 2, 2, 3, 4]) == 4\n    assert count_unique_elements([1, 1, 1, 1]) == 1\n    assert count_unique_elements([]) == 0  # Edge case: empty list\n    assert count_unique_elements([5, 5, 5, 5, 5]) == 1  # All elements are the same\n    assert count_unique_elements([1, 2, 3, 4, 5]) == 5  # All unique elements\n    assert count_unique_elements([-1, -2, -2, -3, -4]) == 4  # Negative numbers\n    assert count_unique_elements([0, 0, 0, 0]) == 1  # All zeros\n    assert count_unique_elements([1, 2, 3, 1, 2, 3]) == 3  # Repeated elements\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function preserves the order of the first occurrence of each unique element.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n        >>> remove_duplicates([1, 2, 2, 3, 4])\n        [1, 2, 3, 4]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n    \"\"\"\n    # Create a set to track seen elements and a list for the result\n    seen = set()\n    unique_elements = []\n    \n    # Iterate through the input list\n    for element in elements:\n        # If the element has not been seen, add it to the result\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_elements.append(element)  # Add to the unique list\n    \n    return unique_elements  # Return the list of unique elements\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test case 3: No duplicates\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 4: Mixed duplicates\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    \n    # Test case 5: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 6: List with negative numbers\n    assert remove_duplicates([-1, -2, -2, -3, -1]) == [-1, -2, -3]\n    \n    # Test case 7: List with mixed positive and negative numbers\n    assert remove_duplicates([-1, 2, -1, 3, 2]) == [-1, 2, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to be summed.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n        >>> sum_integers([1, 2, 3])\n        6\n        >>> sum_integers([-1, -2, 3])\n        0\n    \"\"\"\n    # Calculate the sum of the integers using the built-in sum function\n    return sum(integers)\n\n# Test cases to validate the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Test cases\n    assert sum_integers([1, 2, 3]) == 6, \"Test case 1 failed\"\n    assert sum_integers([-1, -2, 3]) == 0, \"Test case 2 failed\"\n    assert sum_integers([]) == 0, \"Test case 3 failed\"  # Edge case: empty list\n    assert sum_integers([10, 20, 30]) == 60, \"Test case 4 failed\"\n    assert sum_integers([-5, 5, 0]) == 0, \"Test case 5 failed\"\n    assert sum_integers([1, -1, 2, -2, 3]) == 3, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n        >>> unique_elements([1, 2, 2, 3, 4, 4])\n        [1, 2, 3, 4]\n        >>> unique_elements([5, 5, 5])\n        [5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n\n    for element in elements:\n        if element not in seen:  # Check if the element has been seen\n            seen.add(element)  # Add to seen set\n            unique_list.append(element)  # Append to the unique list\n\n    return unique_list  # Return the list of unique elements\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Regular case with duplicates\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert unique_elements([5, 5, 5]) == [5]\n    \n    # Test case 3: No duplicates\n    assert unique_elements([1, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 4: Mixed duplicates\n    assert unique_elements([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4]\n    \n    # Test case 5: Empty list\n    assert unique_elements([]) == []\n    \n    # Test case 6: List with negative numbers\n    assert unique_elements([-1, -2, -2, -3, -1]) == [-1, -2, -3]\n    \n    # Test case 7: List with a single element\n    assert unique_elements([10]) == [10]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" \n    Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    Args:\n    items (List[int]): A list of integers to check for duplicates.\n    \n    Returns:\n    List[int]: A list of duplicates in the order of their first occurrence.\n    \n    Examples:\n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5])\n    [2, 1]\n    \"\"\"\n    seen = set()  # To track seen elements\n    duplicates = []  # To store duplicates in order of first occurrence\n    \n    for item in items:\n        if item in seen:\n            # If the item is already seen, it's a duplicate\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already added\n        else:\n            seen.add(item)  # Mark the item as seen\n    \n    return duplicates\n\n# Test cases to validate the functionality of the find_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic duplicates\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    \n    # Test case 2: All duplicates\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    \n    # Test case 3: No duplicates\n    assert find_duplicates([1, 2, 3, 4]) == []\n    \n    # Test case 4: Multiple duplicates\n    assert find_duplicates([1, 2, 3, 2, 1, 4, 5]) == [2, 1]\n    \n    # Test case 5: Empty list\n    assert find_duplicates([]) == []\n    \n    # Test case 6: Large input with duplicates\n    assert find_duplicates([1, 2, 3, 1, 2, 3, 4, 5, 6, 1]) == [1, 2, 3]\n    \n    # Test case 7: All unique elements\n    assert find_duplicates([10, 20, 30, 40, 50]) == []\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n        intervals (List[List[int]]): A list of intervals to merge.\n        \n    Returns:\n        List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_start, current_end = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        start, end = intervals[i]\n        \n        # Step 3: Check if the current interval overlaps with the merged one\n        if start <= current_end:\n            # Merge the intervals by updating the end time\n            current_end = max(current_end, end)\n        else:\n            # No overlap, add the previous interval to the merged list\n            merged.append([current_start, current_end])\n            # Update to the current interval\n            current_start, current_end = start, end\n    \n    # Add the last interval after the loop\n    merged.append([current_start, current_end])\n    \n    return merged\n\n# Test cases to validate the functionality of the merge_overlapping_intervals function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    \n    # Test case 3: All intervals overlap\n    assert merge_overlapping_intervals([[1,4],[2,3],[3,5]]) == [[1,5]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1,2]]) == [[1,2]]\n    \n    # Test case 5: Empty list of intervals\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Intervals with the same start\n    assert merge_overlapping_intervals([[1,4],[1,2],[1,3]]) == [[1,4]]\n    \n    print(\"All test cases passed!\")"}
