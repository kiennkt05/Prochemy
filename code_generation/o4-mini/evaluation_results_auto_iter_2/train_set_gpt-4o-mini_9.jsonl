{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])  # Edge case: empty list\n    1\n    >>> product_of_elements([0, 1, 2])  # Edge case: includes zero\n    0\n    >>> product_of_elements([5])  # Edge case: single element\n    5\n    >>> product_of_elements([-5, 5])  # Edge case: includes positive and negative\n    -25\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list and multiply\n    for number in numbers:\n        product *= number\n        \n    return product\n\n# Test cases to validate the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    # Normal cases\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    assert product_of_elements([-1, -2, -3]) == -6\n    \n    # Edge cases\n    assert product_of_elements([]) == 1  # Empty list\n    assert product_of_elements([0, 1, 2]) == 0  # Includes zero\n    assert product_of_elements([5]) == 5  # Single element\n    assert product_of_elements([-5, 5]) == -25  # Positive and negative\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated. If there are no repeats, return None.\n    \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 3, 5])\n    5\n    >>> find_repeat([1, 2, 3, 1, 2, 3])\n    1\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\n    1\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10])\n    10\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([])\n    []\n    >>> find_duplicates([1, 1, 2, 2, 3, 3])\n    [1, 2, 3]\n    >>> find_duplicates([1, 2, 3, 2, 1, 4, 5, 4])\n    [2, 1, 4]\n    \"\"\"\n    seen = set()  # To track seen items\n    duplicates = []  # To store duplicates in order of first occurrence\n    \n    for item in items:\n        if item in seen:\n            if item not in duplicates:\n                duplicates.append(item)  # Add to duplicates if not already present\n        else:\n            seen.add(item)  # Mark the item as seen\n    \n    return duplicates\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5, 6])\n    6\n    >>> count_unique_elements([-1, -1, 0, 1, 1])\n    3\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to validate the functionality of the function\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    \n    # Additional test cases\n    print(count_unique_elements([]))                  # Expected output: 0 (empty list)\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Expected output: 1 (all elements are the same)\n    print(count_unique_elements([1, 2, 3, 4, 5, 6])) # Expected output: 6 (all unique)\n    print(count_unique_elements([-1, -1, 0, 1, 1]))  # Expected output: 3 (three unique values)"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n    \n    Returns:\n        int: The number of times the target integer appears in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    >>> count_occurrences([], 1)\n    0\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([1, 2, 3, 4, 5], 0)\n    0\n    >>> count_occurrences([1, 2, 3, 2, 1, 2], 2)\n    3\n    \"\"\"\n    return elements.count(target)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the provided test cases\n    print(count_occurrences([1, 2, 3, 3, 4], 3))  # Expected output: 2\n    print(count_occurrences([1, 2, 2, 2, 3, 4], 5))  # Expected output: 0\n    \n    # Additional test cases\n    print(count_occurrences([], 1))  # Expected output: 0 (empty list)\n    print(count_occurrences([1, 1, 1, 1], 1))  # Expected output: 4 (all elements match)\n    print(count_occurrences([1, 2, 3, 4, 5], 0))  # Expected output: 0 (no match)\n    print(count_occurrences([1, 2, 3, 2, 1, 2], 2))  # Expected output: 3 (multiple matches)"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([0, 0, 0])  # Edge case: list of zeros\n    0\n    >>> sum_integers([1, -1, 1, -1])  # Edge case: alternating positive and negative\n    0\n    >>> sum_integers([100, 200, 300])  # Large positive integers\n    600\n    >>> sum_integers([-100, -200, -300])  # Large negative integers\n    -600\n    \"\"\"\n    return sum(integers)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert sum_integers([1, 2, 3]) == 6\n    assert sum_integers([-1, -2, 3]) == 0\n    assert sum_integers([]) == 0\n    assert sum_integers([0, 0, 0]) == 0\n    assert sum_integers([1, -1, 1, -1]) == 0\n    assert sum_integers([100, 200, 300]) == 600\n    assert sum_integers([-100, -200, -300]) == -600\n    assert sum_integers([1, 2, -3, 4, -5]) == -1  # Mixed integers\n    assert sum_integers([10]) == 10  # Single positive integer\n    assert sum_integers([-10]) == -10  # Single negative integer"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The maximum difference between any two elements in the list.\n    \n    Raises:\n        ValueError: If the list is empty.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4, 5])\n    4\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([-10, -20, -30])\n    20\n    >>> find_max_difference([5])\n    0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    # Normal cases\n    print(find_max_difference([1, 2, 3, 4, 5]))  # Expected: 4\n    print(find_max_difference([10, 20, 30, 40]))  # Expected: 30\n    print(find_max_difference([-10, -20, -30]))   # Expected: 20\n    print(find_max_difference([5]))                # Expected: 0\n\n    # Edge cases\n    try:\n        print(find_max_difference([]))  # Expected: ValueError\n    except ValueError as e:\n        print(e)  # Should print \"The list cannot be empty.\""}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function preserves the order of the first occurrence of each unique element.\n    \n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    seen = set()  # To track unique elements\n    unique_elements = []  # To store the result in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to result list\n\n    return unique_elements\n\n# Test cases to validate the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert remove_duplicates([1, 2, 1, 2, 1, 2]) == [1, 2]\n    assert remove_duplicates([0, -1, -1, 0, 1]) == [0, -1, 1]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_start, current_end = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        start, end = intervals[i]\n        \n        # Step 3: Check if the current interval overlaps with the merged one\n        if start <= current_end:\n            # Merge the intervals by updating the end time\n            current_end = max(current_end, end)\n        else:\n            # No overlap, add the current merged interval to the list\n            merged.append([current_start, current_end])\n            # Update to the current interval\n            current_start, current_end = start, end\n    \n    # Add the last merged interval\n    merged.append([current_start, current_end])\n    \n    return merged\n\n# Test cases to validate the functionality of the code\nif __name__ == \"__main__\":\n    # Normal cases\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    assert merge_overlapping_intervals([[1,4],[4,5]]) == [[1,5]]\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    \n    # Edge cases\n    assert merge_overlapping_intervals([]) == []\n    assert merge_overlapping_intervals([[1,4],[2,3]]) == [[1,4]]\n    assert merge_overlapping_intervals([[1,10],[2,6],[8,10],[15,18]]) == [[1,10],[15,18]]\n    \n    # Cases with single intervals\n    assert merge_overlapping_intervals([[1,2]]) == [[1,2]]\n    assert merge_overlapping_intervals([[5,10]]) == [[5,10]]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared in the input list.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # To track seen elements\n    unique_list = []  # To store the unique elements in order\n\n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Mark this element as seen\n            unique_list.append(element)  # Add to the unique list\n\n    return unique_list\n\n# Test cases to validate the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(unique_elements([1, 2, 2, 3, 4, 4]))  # Expected: [1, 2, 3, 4]\n    print(unique_elements([5, 5, 5]))            # Expected: [5]\n    \n    # Additional test cases\n    print(unique_elements([1, 2, 3, 1, 2, 3]))  # Expected: [1, 2, 3]\n    print(unique_elements([]))                    # Expected: []\n    print(unique_elements([1, 2, 3, 4, 5]))      # Expected: [1, 2, 3, 4, 5]\n    print(unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5]))  # Expected: [1, 2, 3, 4, 5]"}
