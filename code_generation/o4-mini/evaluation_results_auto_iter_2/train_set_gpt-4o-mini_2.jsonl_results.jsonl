{"task_id": "auto/2", "completion": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n        >>> count_unique_numbers([1, 2, 2, 3])\n        3\n        >>> count_unique_numbers([4, 4, 4, 4])\n        1\n    \"\"\"\n    # Use a set to store unique numbers\n    unique_numbers = set(numbers)\n    \n    # Return the count of unique numbers\n    return len(unique_numbers)\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(count_unique_numbers([1, 2, 2, 3]))  # Output: 3\n    print(count_unique_numbers([4, 4, 4, 4]))  # Output: 1\n    print(count_unique_numbers([1, 1, 2, 3, 4, 4, 5]))  # Output: 5", "result": "passed", "passed": true}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    \n    Args:\n        word1 (str): The first word to compare.\n        word2 (str): The second word to compare.\n    \n    Returns:\n        bool: True if the words are anagrams, False otherwise.\n    \n    Examples:\n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('hello', 'world')\n    False\n    \"\"\"\n    # Normalize the words by converting them to lowercase\n    word1 = word1.lower()\n    word2 = word2.lower()\n    \n    # Sort the characters of both words and compare\n    return sorted(word1) == sorted(word2)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(are_anagrams('listen', 'silent'))  # Expected output: True\n    print(are_anagrams('hello', 'world'))    # Expected output: False\n    print(are_anagrams('Triangle', 'Integral'))  # Expected output: True\n    print(are_anagrams('Apple', 'Papel'))     # Expected output: True", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    \n    A palindrome ignores case and spaces. For example, 'A man a plan a canal Panama' is a palindrome.\n    \n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('A man a plan a canal Panama')\n    True\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('No lemon, no melon')\n    True\n    \"\"\"\n    # Normalize the string: convert to lowercase and remove non-alphanumeric characters\n    normalized_str = ''.join(char.lower() for char in s if char.isalnum())\n    \n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(is_palindrome('racecar'))  # True\n    print(is_palindrome('hello'))     # False\n    print(is_palindrome('A man a plan a canal Panama'))  # True\n    print(is_palindrome(''))  # True\n    print(is_palindrome('No lemon, no melon'))  # True", "result": "failed: ", "passed": false}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other.\n    An anagram is a rearrangement of letters of a word to form another word.\n    \n    Args:\n        str1 (str): The first string to compare.\n        str2 (str): The second string to compare.\n    \n    Returns:\n        bool: True if str1 and str2 are anagrams, False otherwise.\n    \n    Examples:\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('triangle', 'integral')\n    True\n    >>> is_anagram('apple', 'pale')\n    False\n    \"\"\"\n    # Normalize the strings by converting them to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    # Sort the characters of both strings and compare\n    return sorted(str1) == sorted(str2)\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(is_anagram('listen', 'silent'))  # True\n    print(is_anagram('triangle', 'integral'))  # True\n    print(is_anagram('apple', 'pale'))  # False", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    \n    The maximum absolute difference is defined as the difference between the maximum\n    and minimum values in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum absolute difference.\n        \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4])\n    3\n    >>> find_max_difference([5, 5, 5, 5])\n    0\n    \"\"\"\n    # Check if the list is empty\n    if not numbers:\n        return 0  # Return 0 for an empty list as there are no elements to compare\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum absolute difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4]))  # Output: 3\n    print(find_max_difference([5, 5, 5, 5]))  # Output: 0\n    print(find_max_difference([-1, -2, -3, -4]))  # Output: 3\n    print(find_max_difference([]))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for duplicates.\n        \n    Returns:\n        bool: True if there is at least one duplicate, False otherwise.\n    \n    Examples:\n    >>> find_duplicate([1, 2, 3, 4])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 2])\n    True\n    \"\"\"\n    seen = set()  # Initialize an empty set to keep track of seen numbers\n    \n    for number in numbers:\n        if number in seen:  # Check if the number is already in the set\n            return True  # Duplicate found\n        seen.add(number)  # Add the number to the set if not seen before\n    \n    return False  # No duplicates found\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4]))  # Output: False\n    print(find_duplicate([1, 2, 3, 4, 2]))  # Output: True", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" \n    Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    \n    Args:\n    numbers (List[int]): A list of unique integers from 1 to n with one missing.\n    n (int): The upper limit of the range (1 to n).\n    \n    Returns:\n    int: The missing number in the range from 1 to n.\n    \n    Examples:\n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    \"\"\"\n    # Calculate the expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(numbers)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List, Tuple\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    \n    The function finds the minimum and maximum values in the list and returns them as a tuple.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        Tuple[int, int]: A tuple containing the pair of integers with the maximum difference.\n        \n    Examples:\n        >>> max_difference([1, 2, 3, 10, 8])\n        (3, 10)\n        >>> max_difference([-1, -5, -3, 0])\n        (-5, 0)\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        raise ValueError(\"The list must contain at least one number.\")\n    \n    # Find the minimum and maximum values in the list\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    return (min_value, max_value)\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(max_difference([1, 2, 3, 10, 8]))  # Output: (3, 10)\n    print(max_difference([-1, -5, -3, 0]))   # Output: (-5, 0)", "result": "failed: ", "passed": false}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    \n    Args:\n        numbers (List[int]): A list of integers to check.\n        \n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n    \n    Examples:\n        >>> is_sorted([1, 2, 3])\n        True\n        >>> is_sorted([3, 2, 1])\n        False\n        >>> is_sorted([1, 1, 2, 2, 3])\n        True\n        >>> is_sorted([])\n        True\n    \"\"\"\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False  # Found an element greater than the next one, not sorted\n    return True  # No elements were found out of order, list is sorted\n\n# Example usage\nif __name__ == \"__main__\":\n    print(is_sorted([1, 2, 3]))  # Output: True\n    print(is_sorted([3, 2, 1]))  # Output: False\n    print(is_sorted([1, 1, 2, 2, 3]))  # Output: True\n    print(is_sorted([]))  # Output: True", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        int: The length of the longest contiguous subsequence of consecutive integers.\n    \n    Examples:\n        >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n        3\n        >>> find_longest_sequence([1, 2, 3, 4])\n        4\n        >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n        6\n    \"\"\"\n    if not numbers:\n        return 0  # Return 0 for an empty list\n\n    # Sort the numbers to find consecutive sequences\n    numbers.sort()\n    \n    max_length = 1  # At least one number means a sequence of length 1\n    current_length = 1  # Start with the first number\n\n    for i in range(1, len(numbers)):\n        # Check if the current number is consecutive to the previous one\n        if numbers[i] == numbers[i - 1] + 1:\n            current_length += 1  # Increase the current sequence length\n        elif numbers[i] != numbers[i - 1]:  # Avoid counting duplicates\n            max_length = max(max_length, current_length)  # Update max length if needed\n            current_length = 1  # Reset current length for a new sequence\n\n    # Final check to update max_length for the last sequence\n    max_length = max(max_length, current_length)\n\n    return max_length", "result": "failed: ", "passed": false}
