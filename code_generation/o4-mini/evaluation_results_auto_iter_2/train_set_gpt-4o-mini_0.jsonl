{"task_id": "auto/0", "completion": "from typing import List\n\ndef product_of_elements(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of all elements in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The product of all integers in the list. If the list is empty, returns 1.\n        \n    Examples:\n    >>> product_of_elements([1, 2, 3, 4])\n    24\n    >>> product_of_elements([-1, -2, -3])\n    -6\n    >>> product_of_elements([])\n    1\n    >>> product_of_elements([0, 1, 2])\n    0\n    >>> product_of_elements([5])\n    5\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity)\n    product = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        product *= number  # Multiply the current product by the number\n    \n    return product  # Return the final product\n\n# Test cases to verify the functionality of the product_of_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with positive integers\n    assert product_of_elements([1, 2, 3, 4]) == 24\n    \n    # Test case 2: Normal case with negative integers\n    assert product_of_elements([-1, -2, -3]) == -6\n    \n    # Test case 3: Edge case with an empty list\n    assert product_of_elements([]) == 1\n    \n    # Test case 4: Case with zero in the list\n    assert product_of_elements([0, 1, 2]) == 0\n    \n    # Test case 5: Single element in the list\n    assert product_of_elements([5]) == 5\n    \n    # Test case 6: Mixed positive and negative integers\n    assert product_of_elements([-1, 2, -3, 4]) == 24\n    \n    # Test case 7: Large numbers\n    assert product_of_elements([1000, 2000, 3000]) == 6000000000\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(items: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a list of duplicates (elements that appear more than once).\n    The duplicates should be returned in the order of their first occurrence in the input list.\n    \n    >>> find_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2]\n    >>> find_duplicates([5, 5, 5, 6, 7])\n    [5]\n    >>> find_duplicates([1, 2, 3, 4])\n    []\n    >>> find_duplicates([1, 2, 2, 3, 3, 4, 4, 5])\n    [2, 3, 4]\n    >>> find_duplicates([])\n    []\n    \"\"\"\n    count = {}\n    duplicates = []\n\n    # Count occurrences of each item\n    for item in items:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n    # Collect duplicates in the order of their first occurrence\n    for item in items:\n        if count[item] > 1 and item not in duplicates:\n            duplicates.append(item)\n\n    return duplicates\n\n# Test cases to verify the functionality and correctness of the generated code\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_duplicates([1, 2, 3, 1, 2, 4]) == [1, 2]\n    assert find_duplicates([5, 5, 5, 6, 7]) == [5]\n    assert find_duplicates([1, 2, 3, 4]) == []\n    assert find_duplicates([1, 2, 2, 3, 3, 4, 4, 5]) == [2, 3, 4]\n    assert find_duplicates([]) == []\n    assert find_duplicates([1, 1, 1, 1]) == [1]\n    assert find_duplicates([1, 2, 3, 2, 1]) == [1, 2]\n    assert find_duplicates([1, 2, 3, 4, 5]) == []\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum difference between any two elements in the list.\n    The difference is defined as the absolute value of the subtraction of one element from another.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum difference between any two elements in the list.\n        \n    Examples:\n        >>> find_max_difference([1, 2, 3, 4, 5])\n        4\n        >>> find_max_difference([10, 20, 30, 40])\n        30\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(numbers) < 2:\n        return 0  # No difference can be calculated\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference\n\n# Test cases to verify the functionality of the code\nif __name__ == \"__main__\":\n    # Test cases\n    assert find_max_difference([1, 2, 3, 4, 5]) == 4, \"Test case 1 failed\"\n    assert find_max_difference([10, 20, 30, 40]) == 30, \"Test case 2 failed\"\n    assert find_max_difference([-10, -20, -30, -40]) == 30, \"Test case 3 failed\"\n    assert find_max_difference([5]) == 0, \"Test case 4 failed\"  # Only one element\n    assert find_max_difference([]) == 0, \"Test case 5 failed\"   # Empty list\n    assert find_max_difference([1, 1, 1, 1]) == 0, \"Test case 6 failed\"  # All elements are the same\n    assert find_max_difference([1, 100, 50, 25]) == 99, \"Test case 7 failed\"  # Mixed values\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/3", "completion": "from typing import Optional, List\n\ndef find_repeat(numbers: List[int]) -> Optional[int]:\n    \"\"\" Given a list of integers, return the first number that is repeated.\n        If there are no repeats, return None.\n        \n    >>> find_repeat([1, 2, 3, 4, 5, 2])\n    2\n    >>> find_repeat([1, 2, 3, 4])\n    None\n    >>> find_repeat([5, 1, 2, 5, 3, 4])\n    5\n    >>> find_repeat([1, 2, 3, 4, 1])\n    1\n    >>> find_repeat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    None\n    >>> find_repeat([])\n    None\n    >>> find_repeat([1, 2, 3, 4, 5, 1, 2, 3])\n    1\n    >>> find_repeat([2, 2, 2, 2])\n    2\n    \"\"\"\n    seen = set()  # Set to keep track of seen numbers\n    for number in numbers:\n        if number in seen:\n            return number  # Return the first repeated number\n        seen.add(number)  # Add the number to the set if not seen\n    return None  # Return None if no repeats found\n\n# Test cases to verify the functionality of the find_repeat function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef sum_integers(integers: List[int]) -> int:\n    \"\"\" Return the sum of all integers in the given list.\n    \n    Args:\n        integers (List[int]): A list of integers to sum up.\n        \n    Returns:\n        int: The sum of the integers in the list.\n    \n    Examples:\n    >>> sum_integers([1, 2, 3])\n    6\n    >>> sum_integers([-1, -2, 3])\n    0\n    >>> sum_integers([])  # Edge case: empty list\n    0\n    >>> sum_integers([10, -10, 5, 5])  # Mixed positive and negative\n    10\n    >>> sum_integers([1])  # Single element\n    1\n    >>> sum_integers([-5, -5, -5])  # All negative numbers\n    -15\n    \"\"\"\n    # Calculate the sum of the integers using the built-in sum function\n    return sum(integers)\n\n# Test cases to verify the functionality of the sum_integers function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(sum_integers([1, 2, 3]))  # Expected output: 6\n    print(sum_integers([-1, -2, 3]))  # Expected output: 0\n    \n    # Additional test cases\n    print(sum_integers([]))  # Expected output: 0 (edge case: empty list)\n    print(sum_integers([10, -10, 5, 5]))  # Expected output: 10\n    print(sum_integers([1]))  # Expected output: 1 (single element)\n    print(sum_integers([-5, -5, -5]))  # Expected output: -15 (all negative)\n    print(sum_integers([0, 0, 0]))  # Expected output: 0 (all zeros)\n    print(sum_integers([100, 200, 300]))  # Expected output: 600 (large numbers)"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_unique_elements(lst: List[int]) -> int:\n    \"\"\" Returns the count of unique elements in the provided list.\n    \n    Args:\n        lst (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_elements([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_elements([1, 1, 1, 1])\n    1\n    >>> count_unique_elements([])  # Edge case: empty list\n    0\n    >>> count_unique_elements([5, 5, 5, 5, 5])  # All elements are the same\n    1\n    >>> count_unique_elements([1, 2, 3, 4, 5])  # All unique elements\n    5\n    >>> count_unique_elements([-1, -2, -2, -3, -4])  # Negative numbers\n    4\n    >>> count_unique_elements([0, 0, 0, 0])  # All zeros\n    1\n    \"\"\"\n    # Convert the list to a set to filter out duplicates\n    unique_elements = set(lst)\n    \n    # Return the number of unique elements\n    return len(unique_elements)\n\n# Test cases to verify the functionality of the function\nif __name__ == \"__main__\":\n    # Running the provided examples\n    print(count_unique_elements([1, 2, 2, 3, 4]))  # Expected output: 4\n    print(count_unique_elements([1, 1, 1, 1]))      # Expected output: 1\n    \n    # Additional test cases\n    print(count_unique_elements([]))                  # Expected output: 0 (edge case)\n    print(count_unique_elements([5, 5, 5, 5, 5]))    # Expected output: 1 (all same)\n    print(count_unique_elements([1, 2, 3, 4, 5]))    # Expected output: 5 (all unique)\n    print(count_unique_elements([-1, -2, -2, -3, -4])) # Expected output: 4 (negative numbers)\n    print(count_unique_elements([0, 0, 0, 0]))        # Expected output: 1 (all zeros)"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef remove_duplicates(elements: List[int]) -> List[int]:\n    \"\"\" Given a list of integers, return a new list that contains only unique elements.\n    \n    This function preserves the order of the first occurrences of the elements.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n        \n    Returns:\n        List[int]: A new list containing only unique integers from the input list.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 1, 1, 1, 1])\n    [1]\n    >>> remove_duplicates([5, 3, 5, 2, 3, 1])\n    [5, 3, 2, 1]\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([10, 20, 10, 30, 20, 40])\n    [10, 20, 30, 40]\n    \"\"\"\n    unique_elements = []\n    seen = set()  # Set to track seen elements\n    \n    for element in elements:\n        if element not in seen:\n            seen.add(element)  # Add to seen set\n            unique_elements.append(element)  # Append to result list\n    \n    return unique_elements\n\n# Test cases to verify the functionality of the remove_duplicates function\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with duplicates\n    assert remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n    \n    # Test case 3: Mixed duplicates\n    assert remove_duplicates([5, 3, 5, 2, 3, 1]) == [5, 3, 2, 1]\n    \n    # Test case 4: Empty list\n    assert remove_duplicates([]) == []\n    \n    # Test case 5: Non-sequential duplicates\n    assert remove_duplicates([10, 20, 10, 30, 20, 40]) == [10, 20, 30, 40]\n    \n    # Test case 6: Large list with duplicates\n    assert remove_duplicates([1, 2, 3, 1, 2, 3, 4, 5, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test case 7: List with negative numbers\n    assert remove_duplicates([-1, -2, -2, -3, -4]) == [-1, -2, -3, -4]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef merge_overlapping_intervals(intervals: List[List[int]]) -> List[List[int]]:\n    \"\"\" Given a list of intervals, merge all overlapping intervals and return the result as a new list.\n    Each interval is represented as a list of two integers [start, end].\n    \n    Args:\n    intervals (List[List[int]]): A list of intervals to be merged.\n    \n    Returns:\n    List[List[int]]: A list of merged intervals.\n    \n    Example:\n    >>> merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]])\n    [[1,6],[8,10],[15,18]]\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not intervals:\n        return []\n    \n    # Step 1: Sort the intervals based on the starting times\n    intervals.sort(key=lambda x: x[0])\n    \n    # Step 2: Initialize a list to hold the merged intervals\n    merged = []\n    \n    # Start with the first interval\n    current_interval = intervals[0]\n    \n    for i in range(1, len(intervals)):\n        # If the current interval overlaps with the next one, merge them\n        if intervals[i][0] <= current_interval[1]:\n            current_interval[1] = max(current_interval[1], intervals[i][1])\n        else:\n            # No overlap, add the current interval to the merged list\n            merged.append(current_interval)\n            current_interval = intervals[i]  # Move to the next interval\n    \n    # Add the last interval after the loop\n    merged.append(current_interval)\n    \n    return merged\n\n# Test cases to verify the functionality of the merge_overlapping_intervals function\nif __name__ == \"__main__\":\n    # Test case 1: Basic overlapping intervals\n    assert merge_overlapping_intervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\n    \n    # Test case 2: No overlapping intervals\n    assert merge_overlapping_intervals([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n    \n    # Test case 3: All intervals overlap\n    assert merge_overlapping_intervals([[1,4],[2,3],[3,5]]) == [[1,5]]\n    \n    # Test case 4: Single interval\n    assert merge_overlapping_intervals([[1,2]]) == [[1,2]]\n    \n    # Test case 5: Empty list of intervals\n    assert merge_overlapping_intervals([]) == []\n    \n    # Test case 6: Intervals with the same start\n    assert merge_overlapping_intervals([[1,4],[1,2],[1,3]]) == [[1,4]]\n    \n    # Test case 7: Intervals that touch but do not overlap\n    assert merge_overlapping_intervals([[1,2],[2,3],[3,4]]) == [[1,4]]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef count_occurrences(elements: List[int], target: int) -> int:\n    \"\"\" Count how many times a target integer appears in a given list of integers.\n    \n    Args:\n        elements (List[int]): A list of integers to search through.\n        target (int): The integer to count occurrences of.\n        \n    Returns:\n        int: The count of occurrences of the target integer in the list.\n    \n    Examples:\n    >>> count_occurrences([1, 2, 3, 3, 4], 3)\n    2\n    >>> count_occurrences([1, 2, 2, 2, 3, 4], 5)\n    0\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for element in elements:\n        # If the current element matches the target, increment the counter\n        if element == target:\n            count += 1\n            \n    return count\n\n# Test cases to verify the functionality of the count_occurrences function\ndef test_count_occurrences():\n    assert count_occurrences([1, 2, 3, 3, 4], 3) == 2, \"Test case 1 failed\"\n    assert count_occurrences([1, 2, 2, 2, 3, 4], 5) == 0, \"Test case 2 failed\"\n    assert count_occurrences([], 1) == 0, \"Test case 3 failed\"  # Empty list\n    assert count_occurrences([1, 1, 1, 1], 1) == 4, \"Test case 4 failed\"  # All elements match\n    assert count_occurrences([1, 2, 3, 4, 5], 6) == 0, \"Test case 5 failed\"  # No matches\n    assert count_occurrences([1, 2, 3, 2, 1, 2], 2) == 3, \"Test case 6 failed\"  # Multiple occurrences\n    assert count_occurrences([0, 0, 0, 0], 0) == 4, \"Test case 7 failed\"  # All zeros\n    assert count_occurrences([1, 2, 3, 4, 5], 1) == 1, \"Test case 8 failed\"  # Single match at start\n    assert count_occurrences([5, 4, 3, 2, 1], 1) == 1, \"Test case 9 failed\"  # Single match at end\n    assert count_occurrences([1, 2, 3, 4, 5], 3) == 1, \"Test case 10 failed\"  # Single match in middle\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_occurrences()"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef unique_elements(elements: List[int]) -> List[int]:\n    \"\"\" Return a list of unique elements from the input list while maintaining their order.\n    \n    Args:\n        elements (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n        List[int]: A list of unique integers in the order they first appeared.\n    \n    Examples:\n    >>> unique_elements([1, 2, 2, 3, 4, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5])\n    [5]\n    >>> unique_elements([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique_elements([])\n    []\n    >>> unique_elements([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    seen = set()  # Set to track seen elements\n    unique_list = []  # List to store unique elements\n    \n    for element in elements:\n        if element not in seen:  # Check if the element has been seen\n            seen.add(element)  # Add to seen set\n            unique_list.append(element)  # Append to the unique list\n    \n    return unique_list  # Return the list of unique elements\n\n# Test cases to verify the functionality of the unique_elements function\nif __name__ == \"__main__\":\n    # Test case 1: Basic case with duplicates\n    assert unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\n    \n    # Test case 2: All elements are the same\n    assert unique_elements([5, 5, 5]) == [5]\n    \n    # Test case 3: Multiple duplicates\n    assert unique_elements([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\n    \n    # Test case 4: Empty list\n    assert unique_elements([]) == []\n    \n    # Test case 5: No duplicates\n    assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \n    # Test case 6: Mixed duplicates and unique\n    assert unique_elements([1, 2, 2, 3, 1, 4, 5, 4]) == [1, 2, 3, 4, 5]\n    \n    # Test case 7: Large input with duplicates\n    assert unique_elements([1] * 1000 + [2] * 1000 + [3] * 1000) == [1, 2, 3]\n    \n    print(\"All test cases passed!\")"}
