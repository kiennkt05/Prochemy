{"task_id": "auto/0", "prompt": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('hello', 'world')\n    False\n    \"\"\"\n", "entry_point": "are_anagrams", "canonical_solution": "    return sorted(word1) == sorted(word2)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('listen', 'silent') == True\n    assert candidate('triangle', 'integral') == True\n    assert candidate('apple', 'pale') == False\n    assert candidate('rat', 'tar') == True\n    assert candidate('evil', 'vile') == True\n    assert candidate('abcd', 'abdc') == True\n    assert candidate('abcd', 'abcd') == True\n    assert candidate('abc', 'cba') == True\n"}
{"task_id": "auto/1", "prompt": "from typing import List\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n", "entry_point": "is_palindrome", "canonical_solution": "    return s == s[::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('level') == True\n    assert candidate('world') == False\n    assert candidate('A man a plan a canal Panama') == False\n    assert candidate('madam') == True\n    assert candidate('12321') == True\n    assert candidate('noon') == True\n    assert candidate('') == True\n"}
{"task_id": "auto/2", "prompt": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    >>> count_unique_numbers([1, 2, 2, 3])\n    3\n    >>> count_unique_numbers([4, 4, 4, 4])\n    1\n    \"\"\"\n", "entry_point": "count_unique_numbers", "canonical_solution": "    unique_numbers = set(numbers)\n    return len(unique_numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'sb',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 2, 3]) == 3\n    assert candidate([4, 4, 4, 4]) == 1\n    assert candidate([1, 1, 1, 2, 2, 3]) == 3\n    assert candidate([10, 20, 30, 30, 20, 10]) == 3\n    assert candidate([7]) == 1\n    assert candidate([]) == 0\n"}
{"task_id": "auto/3", "prompt": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    \"\"\"\n", "entry_point": "is_sorted", "canonical_solution": "    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 2]) == False\n    assert candidate([1, 1, 1]) == True\n    assert candidate([0]) == True\n    assert candidate([]) == True\n    assert candidate([-3, -2, -1, 0]) == True\n    assert candidate([10, 9, 8]) == False\n"}
{"task_id": "auto/4", "prompt": "from typing import List, Tuple\n\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    >>> max_difference([1, 2, 3, 10, 8])\n    (3, 10)\n    >>> max_difference([-1, -5, -3, 0])\n    (-5, 0)\n    \"\"\"\n", "entry_point": "max_difference", "canonical_solution": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return (min_num, max_num)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 10, 8]) == (3, 10)\n    assert candidate([-1, -5, -3, 0]) == (-5, 0)\n    assert candidate([100, 200, 300]) == (100, 300)\n    assert candidate([10, 20, 30, 40]) == (10, 40)\n    assert candidate([5]) == (5, 5)\n"}
{"task_id": "auto/5", "prompt": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    >>> find_duplicate([1, 2, 3, 4])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 2])\n    True\n    \"\"\"\n", "entry_point": "find_duplicate", "canonical_solution": "    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'sd',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 2]) == True\n    assert candidate([10, 20, 30, 40, 10]) == True\n    assert candidate([7, 8, 9, 10]) == False\n    assert candidate([]) == False\n    assert candidate([1]) == False\n"}
{"task_id": "auto/6", "prompt": "from typing import List\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other. An anagram is a rearrangement of letters of a word to form another word.\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('triangle', 'integral')\n    True\n    >>> is_anagram('apple', 'pale')\n    False\n    \"\"\"\n", "entry_point": "is_anagram", "canonical_solution": "    return sorted(str1) == sorted(str2)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate('listen', 'silent') == True\n    assert candidate('triangle', 'integral') == True\n    assert candidate('apple', 'pale') == False\n    assert candidate('binary', 'brainy') == True\n    assert candidate('schoolmaster', 'the classroom') == False\n"}
{"task_id": "auto/7", "prompt": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    >>> find_max_difference([1, 2, 3, 4])\n    3\n    >>> find_max_difference([5, 5, 5, 5])\n    0\n    \"\"\"\n", "entry_point": "find_max_difference", "canonical_solution": "    if not numbers:\n        return 0\n    return max(numbers) - min(numbers)\n", "test": "\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 4\n    assert candidate([-10, 10]) == 20\n    assert candidate([0, 0, 0]) == 0\n    assert candidate([1, 3, 5, 7, 9]) == 8\n    assert candidate([3]) == 0\n"}
{"task_id": "auto/8", "prompt": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    \"\"\"", "entry_point": "find_missing_number", "canonical_solution": "    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([3, 7, 1, 2, 8, 4, 5], 8) == 6\n    assert candidate([1, 2, 4], 4) == 3\n    assert candidate([5, 1, 2, 3, 6], 6) == 4\n    assert candidate([2, 3, 1, 5], 5) == 4\n    assert candidate([1, 2, 3, 5], 5) == 4\n"}
{"task_id": "auto/9", "prompt": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n    3\n    >>> find_longest_sequence([1, 2, 3, 4])\n    4\n    >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n    6\n    \"\"\"\n", "entry_point": "find_longest_sequence", "canonical_solution": "    if not numbers:\n        return 0\n\n    num_set = set(numbers)\n    longest_sequence = 0\n\n    for num in numbers:\n        if num - 1 not in num_set:\n            current_num = num\n            current_sequence_length = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_sequence_length += 1\n\n            longest_sequence = max(longest_sequence, current_sequence_length)\n\n    return longest_sequence\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([1, 2, 9, 3, 4, 5]) == 3\n    assert candidate([1, 2, 3, 4]) == 4\n    assert candidate([10, 1, 2, 3, 5, 4]) == 6\n    assert candidate([]) == 0\n    assert candidate([5]) == 1\n    assert candidate([4, 3, 2, 1]) == 1\n    assert candidate([10, 20, 30, 40, 50]) == 1\n"}
