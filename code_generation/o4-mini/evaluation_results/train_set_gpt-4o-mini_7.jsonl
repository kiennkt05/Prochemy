{"task_id": "auto/0", "completion": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    \n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('hello', 'world')\n    False\n    >>> are_anagrams('triangle', 'integral')\n    True\n    >>> are_anagrams('apple', 'papel')\n    True\n    >>> are_anagrams('rat', 'car')\n    False\n    >>> are_anagrams('', '')\n    True\n    >>> are_anagrams('a', 'a')\n    True\n    >>> are_anagrams('a', 'b')\n    False\n    \"\"\"\n    return sorted(word1) == sorted(word2)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_numbers([1, 2, 2, 3])\n    3\n    >>> count_unique_numbers([4, 4, 4, 4])\n    1\n    >>> count_unique_numbers([])  # Edge case: empty list\n    0\n    >>> count_unique_numbers([1, -1, 0, 1, -1])  # Includes negative and zero\n    3\n    >>> count_unique_numbers([1, 2, 3, 4, 5])  # All unique\n    5\n    >>> count_unique_numbers([1, 1, 1, 1, 1])  # All the same\n    1\n    \"\"\"\n    unique_numbers = set(numbers)  # Create a set from the list to filter unique numbers\n    return len(unique_numbers)      # Return the count of unique numbers\n\n# Test cases\nif __name__ == \"__main__\":\n    print(count_unique_numbers([1, 2, 2, 3]))  # Output: 3\n    print(count_unique_numbers([4, 4, 4, 4]))  # Output: 1\n    print(count_unique_numbers([]))             # Output: 0\n    print(count_unique_numbers([1, -1, 0, 1, -1]))  # Output: 3\n    print(count_unique_numbers([1, 2, 3, 4, 5]))  # Output: 5\n    print(count_unique_numbers([1, 1, 1, 1, 1]))  # Output: 1"}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    \n    Args:\n        numbers (List[int]): A list of integers to check.\n        \n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n    \n    Examples:\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    >>> is_sorted([1, 1, 1])\n    True\n    >>> is_sorted([])\n    True\n    >>> is_sorted([1, 2, 2, 3])\n    True\n    >>> is_sorted([1, 3, 2])\n    False\n    \"\"\"\n    # Check if the list is sorted by comparing each element with the next one\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n\n# Test cases to validate the functionality of the is_sorted function\nif __name__ == \"__main__\":\n    # Running the built-in test cases\n    import doctest\n    doctest.testmod()\n\n    # Additional test cases\n    assert is_sorted([1, 2, 3]) == True\n    assert is_sorted([3, 2, 1]) == False\n    assert is_sorted([1, 1, 1]) == True\n    assert is_sorted([]) == True\n    assert is_sorted([1, 2, 2, 3]) == True\n    assert is_sorted([1, 3, 2]) == False\n    assert is_sorted([-5, -3, -1, 0, 2]) == True\n    assert is_sorted([10, 20, 20, 30, 40]) == True\n    assert is_sorted([5, 4, 3, 2, 1]) == False\n\n    print(\"All test cases passed!\")"}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    \n    The maximum absolute difference is defined as the difference between the maximum\n    and minimum values in the list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The maximum absolute difference.\n    \n    Examples:\n    >>> find_max_difference([1, 2, 3, 4])\n    3\n    >>> find_max_difference([5, 5, 5, 5])\n    0\n    >>> find_max_difference([-1, -2, -3, -4])\n    3\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([1])\n    0\n    >>> find_max_difference([1, -1])\n    2\n    \"\"\"\n    if not numbers:  # Handle empty list case\n        return 0\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    print(find_max_difference([1, 2, 3, 4]))  # Output: 3\n    print(find_max_difference([5, 5, 5, 5]))  # Output: 0\n    print(find_max_difference([-1, -2, -3, -4]))  # Output: 3\n    print(find_max_difference([10, 20, 30, 40]))  # Output: 30\n    print(find_max_difference([1]))  # Output: 0\n    print(find_max_difference([1, -1]))  # Output: 2"}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    \n    Args:\n        s (str): The string to check.\n        \n    Returns:\n        bool: True if s is a palindrome, False otherwise.\n    \n    Examples:\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('A man a plan a canal Panama')\n    True\n    >>> is_palindrome('No lemon, no melon')\n    True\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('Was it a car or a cat I saw?')\n    True\n    \"\"\"\n    # Normalize the string: remove non-alphanumeric characters and convert to lowercase\n    normalized_str = ''.join(char.lower() for char in s if char.isalnum())\n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Running the test cases\n    assert is_palindrome('racecar') == True\n    assert is_palindrome('hello') == False\n    assert is_palindrome('A man a plan a canal Panama') == True\n    assert is_palindrome('No lemon, no melon') == True\n    assert is_palindrome('') == True\n    assert is_palindrome('a') == True\n    assert is_palindrome('Was it a car or a cat I saw?') == True\n    assert is_palindrome('12321') == True\n    assert is_palindrome('12345') == False\n    print(\"All test cases passed!\")"}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    int: The length of the longest contiguous subsequence of consecutive integers.\n    \n    Examples:\n    >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n    3\n    >>> find_longest_sequence([1, 2, 3, 4])\n    4\n    >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n    6\n    >>> find_longest_sequence([1, 2, 3, 5, 6, 7, 8])\n    4\n    >>> find_longest_sequence([5, 6, 7, 8, 1, 2, 3, 4])\n    8\n    >>> find_longest_sequence([])\n    0\n    \"\"\"\n    if not numbers:\n        return 0\n    \n    # Sort the numbers to find consecutive sequences\n    numbers = sorted(set(numbers))  # Use set to remove duplicates\n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1] + 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1  # Reset for the next sequence\n    \n    # Final check for the last sequence\n    max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "auto/4", "completion": "from typing import List, Tuple\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    \n    The function finds the minimum and maximum values in the list and returns them as a tuple.\n    \n    >>> max_difference([1, 2, 3, 10, 8])\n    (3, 10)\n    >>> max_difference([-1, -5, -3, 0])\n    (-5, 0)\n    >>> max_difference([5, 5, 5, 5])\n    (5, 5)\n    >>> max_difference([10])\n    (10, 10)\n    >>> max_difference([-10, -20, -30, -5])\n    (-30, -5)\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list must contain at least one number.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    return (min_value, max_value)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    print(max_difference([1, 2, 3, 10, 8]))  # Expected output: (3, 10)\n    print(max_difference([-1, -5, -3, 0]))   # Expected output: (-5, 0)\n    print(max_difference([5, 5, 5, 5]))      # Expected output: (5, 5)\n    print(max_difference([10]))                # Expected output: (10, 10)\n    print(max_difference([-10, -20, -30, -5])) # Expected output: (-30, -5)"}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    \n    Args:\n    numbers (List[int]): A list of unique integers from 1 to n with one missing.\n    n (int): The upper limit of the range (1 to n).\n    \n    Returns:\n    int: The missing number.\n    \n    Examples:\n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    \"\"\"\n    # Calculate the expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(numbers)\n    # The missing number is the difference between the expected and actual sums\n    return expected_sum - actual_sum\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert find_missing_number([3, 7, 1, 2, 8, 4, 5], 8) == 6\n    assert find_missing_number([1, 2, 4], 4) == 3\n    assert find_missing_number([1], 1) == 2  # Edge case: missing number is 2\n    assert find_missing_number([2, 3, 4, 5], 5) == 1  # Edge case: missing number is 1\n    assert find_missing_number([1, 3], 3) == 2  # Edge case: missing number is 2\n    assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 9], 9) == 8  # Missing number is 8\n    print(\"All test cases passed!\")"}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other. An anagram is a rearrangement of letters of a word to form another word.\n    \n    Args:\n        str1 (str): The first string to compare.\n        str2 (str): The second string to compare.\n    \n    Returns:\n        bool: True if str1 and str2 are anagrams, False otherwise.\n    \n    Examples:\n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('triangle', 'integral')\n    True\n    >>> is_anagram('apple', 'pale')\n    False\n    >>> is_anagram('anagram', 'nagaram')\n    True\n    >>> is_anagram('rat', 'car')\n    False\n    \"\"\"\n    # Normalize the strings by converting them to lowercase\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    # Sort the characters of both strings and compare\n    return sorted(str1) == sorted(str2)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert is_anagram('listen', 'silent') == True\n    assert is_anagram('triangle', 'integral') == True\n    assert is_anagram('apple', 'pale') == False\n    assert is_anagram('anagram', 'nagaram') == True\n    assert is_anagram('rat', 'car') == False\n    assert is_anagram('Dormitory', 'Dirty room') == True  # Ignoring spaces and case\n    assert is_anagram('The Morse Code', 'Here come dots') == True  # Ignoring spaces and case\n    print(\"All test cases passed!\")"}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    \n    Args:\n        numbers (List[int]): A list of integers to check for duplicates.\n    \n    Returns:\n        bool: True if there are duplicates, False otherwise.\n    \n    Examples:\n    >>> find_duplicate([1, 2, 3, 4])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 2])\n    True\n    >>> find_duplicate([1, 1, 2, 3])\n    True\n    >>> find_duplicate([])\n    False\n    >>> find_duplicate([5])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 5, 1])\n    True\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    assert find_duplicate([1, 2, 3, 4]) == False\n    assert find_duplicate([1, 2, 3, 4, 2]) == True\n    assert find_duplicate([1, 1, 2, 3]) == True\n    assert find_duplicate([]) == False\n    assert find_duplicate([5]) == False\n    assert find_duplicate([1, 2, 3, 4, 5, 1]) == True\n    assert find_duplicate([10, 20, 30, 40, 50, 10]) == True\n    assert find_duplicate([1, 2, 3, 4, 5, 6]) == False\n    \n    print(\"All test cases passed!\")"}
