{"task_id": "auto/5", "completion": "from typing import List\n\ndef find_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if there are any duplicate numbers in a list.\n    \n    >>> find_duplicate([1, 2, 3, 4])\n    False\n    >>> find_duplicate([1, 2, 3, 4, 2])\n    True\n    \"\"\"\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the given string is a palindrome (reads the same backward as forward).\n    \n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    >>> is_palindrome('A man a plan a canal Panama')\n    True\n    >>> is_palindrome('No lemon no melon')\n    True\n    >>> is_palindrome('12321')\n    True\n    >>> is_palindrome('12345')\n    False\n    >>> is_palindrome('')\n    True\n    \"\"\"\n    # Normalize the string: remove spaces and convert to lowercase\n    normalized_str = ''.join(s.split()).lower()\n    # Check if the normalized string is equal to its reverse\n    return normalized_str == normalized_str[::-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "auto/0", "completion": "from typing import List\n\ndef are_anagrams(word1: str, word2: str) -> bool:\n    \"\"\" Check if two strings are anagrams. Two words are anagrams if they contain the same letters in a different order.\n    \n    >>> are_anagrams('listen', 'silent')\n    True\n    >>> are_anagrams('hello', 'world')\n    False\n    >>> are_anagrams('triangle', 'integral')\n    True\n    >>> are_anagrams('apple', 'pale')\n    False\n    >>> are_anagrams('', '')\n    True\n    >>> are_anagrams('a', 'a')\n    True\n    >>> are_anagrams('a', 'b')\n    False\n    \"\"\"\n    return sorted(word1) == sorted(word2)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Check if the given list of integers is sorted in ascending order.\n    \n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([3, 2, 1])\n    False\n    >>> is_sorted([1, 1, 1])\n    True\n    >>> is_sorted([])\n    True\n    >>> is_sorted([1])\n    True\n    >>> is_sorted([1, 2, 2, 3])\n    True\n    >>> is_sorted([1, 3, 2])\n    False\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            return False\n    return True\n\n# Running the test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\" Count the number of unique integers in the given list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of unique integers in the list.\n    \n    Examples:\n    >>> count_unique_numbers([1, 2, 2, 3])\n    3\n    >>> count_unique_numbers([4, 4, 4, 4])\n    1\n    >>> count_unique_numbers([])  # Edge case: empty list\n    0\n    >>> count_unique_numbers([1, 1, 1, 1, 1])  # Edge case: all elements are the same\n    1\n    >>> count_unique_numbers([-1, -2, -2, -3, 0])  # Edge case: negative numbers and zero\n    4\n    \"\"\"\n    return len(set(numbers))\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef find_max_difference(numbers: List[int]) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in the list.\n    \n    The maximum absolute difference is defined as the difference between the maximum\n    and minimum values in the list.\n    \n    >>> find_max_difference([1, 2, 3, 4])\n    3\n    >>> find_max_difference([5, 5, 5, 5])\n    0\n    >>> find_max_difference([-1, -2, -3, -4])\n    3\n    >>> find_max_difference([10, 20, 30, 40])\n    30\n    >>> find_max_difference([1])\n    0\n    >>> find_max_difference([])\n    0\n    \"\"\"\n    if not numbers:  # Handle the case of an empty list\n        return 0\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\" Determines if two given strings are anagrams of each other. An anagram is a rearrangement of letters of a word to form another word.\n    \n    >>> is_anagram('listen', 'silent')\n    True\n    >>> is_anagram('triangle', 'integral')\n    True\n    >>> is_anagram('apple', 'pale')\n    False\n    >>> is_anagram('anagram', 'nagaram')\n    True\n    >>> is_anagram('rat', 'car')\n    False\n    >>> is_anagram('', '')\n    True\n    >>> is_anagram('a', 'a')\n    True\n    >>> is_anagram('a', 'b')\n    False\n    \"\"\"\n    # Normalize the strings by removing spaces and converting to lowercase\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    \n    # Sort the characters of both strings and compare\n    return sorted(str1) == sorted(str2)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List, Tuple\n\ndef max_difference(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Given a list of integers, return the pair of integers with the maximum difference.\n    \n    The function returns the pair (min_value, max_value) where:\n    - min_value is the smallest integer in the list\n    - max_value is the largest integer in the list\n    \n    >>> max_difference([1, 2, 3, 10, 8])\n    (3, 10)\n    >>> max_difference([-1, -5, -3, 0])\n    (-5, 0)\n    >>> max_difference([5, 5, 5])\n    (5, 5)\n    >>> max_difference([10])\n    (10, 10)\n    >>> max_difference([])\n    Traceback (most recent call last):\n        ...\n    ValueError: The list must contain at least one number.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list must contain at least one number.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    return (min_value, max_value)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_missing_number(numbers: List[int], n: int) -> int:\n    \"\"\" Given a list of unique integers ranging from 1 to n, where one number is missing, \n    find and return the missing number.\n    \n    >>> find_missing_number([3, 7, 1, 2, 8, 4, 5], 8)\n    6\n    >>> find_missing_number([1, 2, 4], 4)\n    3\n    >>> find_missing_number([1], 2)\n    2\n    >>> find_missing_number([2], 2)\n    1\n    >>> find_missing_number([], 1)\n    1\n    \"\"\"\n    # Calculate the expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the numbers in the list\n    actual_sum = sum(numbers)\n    # The missing number is the difference between the expected sum and the actual sum\n    return expected_sum - actual_sum\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: invalid syntax (<string>, line 10)", "passed": false}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef find_longest_sequence(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, find the length of the longest contiguous subsequence of consecutive integers.\n    \n    >>> find_longest_sequence([1, 2, 9, 3, 4, 5])\n    3\n    >>> find_longest_sequence([1, 2, 3, 4])\n    4\n    >>> find_longest_sequence([10, 1, 2, 3, 4, 5, 0])\n    6\n    >>> find_longest_sequence([1, 2, 3, 4, 5, 6])\n    6\n    >>> find_longest_sequence([1, 2, 2, 3, 4, 5])\n    5\n    >>> find_longest_sequence([])\n    0\n    \"\"\"\n    if not numbers:\n        return 0\n    \n    # Sort the numbers to find consecutive sequences\n    numbers = sorted(set(numbers))  # Use set to remove duplicates and sort\n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1] + 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1  # Reset for the next sequence\n    \n    # Final check for the last sequence\n    max_length = max(max_length, current_length)\n    \n    return max_length\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: ", "passed": false}
