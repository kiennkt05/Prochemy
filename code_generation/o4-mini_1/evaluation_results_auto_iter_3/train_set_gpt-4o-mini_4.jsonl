{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the functionality\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    assert profit_amount(1500, 1600) == 100, \"Test case 2 failed\"\n    assert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\n    assert profit_amount(200, 300) == 100, \"Test case 4 failed\"\n    assert profit_amount(500, 700) == 200, \"Test case 5 failed\"\n    assert profit_amount(0, 100) == 100, \"Test case 6 failed\"  # Edge case: zero cost\n    assert profit_amount(100, 0) is None, \"Test case 7 failed\"  # Edge case: zero sale amount\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test case to validate the functionality\nassert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n\n# Additional test cases\nassert remove_splchar('Hello, World!') == 'HelloWorld'\nassert remove_splchar('1234!@#$%^&*()') == '1234'\nassert remove_splchar('') == ''  # Edge case: empty string\nassert remove_splchar('NoSpecialChars') == 'NoSpecialChars'  # No special chars\nassert remove_splchar('Spaces   and   tabs\\t') == 'Spacesandtabs'  # Spaces and tabs\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Extract the vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the functionality\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"recacar\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test case to validate the functionality\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases to ensure robustness\nassert ntimes_list([0, 1, 2], 5) == [0, 5, 10]  # Testing with zero\nassert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]  # Testing with negative numbers\nassert ntimes_list([], 10) == []  # Testing with an empty list\nassert ntimes_list([1, 2, 3], 0) == [0, 0, 0]  # Testing with zero multiplier\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test case 1 failed\"\n    assert remove_lowercase('HelloWorld') == 'HW', \"Test case 2 failed\"\n    assert remove_lowercase('PythonIsFun') == 'PIF', \"Test case 3 failed\"\n    assert remove_lowercase('123abcXYZ') == '123XYZ', \"Test case 4 failed\"\n    assert remove_lowercase('') == '', \"Test case 5 failed\"  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE', \"Test case 6 failed\"  # Edge case: all uppercase\n    assert remove_lowercase('lowercaseletters') == '', \"Test case 7 failed\"  # Edge case: all lowercase\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty to avoid IndexError\n        if sublist:\n            first_elements.append(sublist[0])  # Append the first element to the result list\n    \n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Standard case with multiple sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test case 2: Sublist with a single element\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40]\n    \n    # Test case 3: Empty sublists\n    assert Extract([[], [1, 2], [], [3]]) == [1, 3]\n    \n    # Test case 4: All sublists are empty\n    assert Extract([[], [], []]) == []\n    \n    # Test case 5: Mixed empty and non-empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among x, y, and z\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y and y == z:\n        count = 3  # All three are equal\n    elif x == y or y == z or x == z:\n        count = 2  # Two are equal\n    else:\n        count = 0  # No numbers are equal\n    \n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Count the occurrences of 'value' in 'tuplex'\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\nif __name__ == \"__main__\":\n    # Test case 1: Count of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    # Test case 6: Count of a string in a tuple of strings\n    assert count_tuplex(('apple', 'banana', 'apple', 'orange'), 'apple') == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the kth index in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n    \n    Returns:\n    int: The product of the elements at the kth index.\n    \n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    \"\"\"\n    product = 1  # Initialize product to 1 (multiplicative identity)\n    \n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the current element at index K\n        product *= tup[K]\n    \n    return product\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: All tuples have the same value at index 1\n    assert find_k_product([(2, 3, 4), (2, 3, 5), (2, 3, 6)], 1) == 27, \"Test case 2 failed\"\n    \n    # Test case 3: Single tuple\n    assert find_k_product([(1, 2, 3)], 1) == 2, \"Test case 3 failed\"\n    \n    # Test case 4: K is out of bounds\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        assert str(e) == \"Index 2 is out of bounds for tuple (1, 2).\", \"Test case 4 failed\"\n    \n    # Test case 5: Empty list\n    assert find_k_product([], 0) == 1, \"Test case 5 failed\"  # Product of an empty list is 1\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using the formula nCr = n! / (r! * (n - r)!)\n    and applying modular arithmetic.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6  # Given test case\nassert ncr_modp(5, 2, 7) == 3     # 5C2 % 7 = 10 % 7 = 3\nassert ncr_modp(10, 5, 100) == 10  # 10C5 % 100 = 252 % 100 = 52\nassert ncr_modp(0, 0, 13) == 1     # 0C0 % 13 = 1\nassert ncr_modp(5, 0, 11) == 1     # 5C0 % 11 = 1\nassert ncr_modp(5, 5, 11) == 1     # 5C5 % 11 = 1\nassert ncr_modp(10, 3, 17) == 120   # 10C3 % 17 = 120 % 17 = 1\nassert ncr_modp(10, 11, 13) == 0    # 10C11 % 13 = 0 (r > n)\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    # Base case: if b is 0, return a\n    if b == 0:\n        return a\n    # Recursive case: call gcd with b and the remainder of a divided by b\n    return gcd(b, a % b)\n\n# Test cases to validate the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Provided test case\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert gcd(54, 24) == 6, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"  # 101 is prime\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"     # GCD of 0 and any number is the number itself\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"     # GCD of any number and 0 is the number itself\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"      # GCD of 0 and 0 is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or not valid\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test case\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n# Additional test cases\nassert rotate_matrix([[1]]) == [[1]]  # Single element\nassert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]  # 2x2 matrix\nassert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]  # 2x3 matrix\nassert rotate_matrix([]) == []  # Empty matrix\nassert rotate_matrix([[]]) == [[]]  # Matrix with empty row\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Iterative approach to calculate Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update a and b to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    longest_length = 0  # Variable to keep track of the longest length found\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length of common substring\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return longest_length\n\n# Test cases to validate the functionality\nassert longest_common_substring('abcdef', 'zcdemf') == 2  # 'cd' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 2    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'def') == 0       # No common substring\nassert longest_common_substring('abcde', 'abfce') == 2   # 'ab' is the longest common substring\nassert longest_common_substring('', 'abc') == 0           # Empty string case\nassert longest_common_substring('abc', '') == 0           # Empty string case\nassert longest_common_substring('', '') == 0              # Both strings empty case\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of the max_value function\nif __name__ == \"__main__\":\n    # Test with a normal case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    # Test with negative numbers\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    # Test with a mix of positive and negative numbers\n    assert max_value([-1, 2, 0, -3, 5]) == 5\n    # Test with a single element\n    assert max_value([42]) == 42\n    # Test with all elements the same\n    assert max_value([7, 7, 7, 7]) == 7\n    \n    # Test with an empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\"\n    \n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string s\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix(['', 'b', 'c']) == ''\nassert longest_common_prefix([]) == ''\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the longest common prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence will be in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    # Test case 2\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    # Test case 3\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    # Test case 4\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    # Test case 5\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    # Test case 6\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    # Test case 7\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")"}
