{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test case to verify the functionality of the remove_splchar function\nassert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n\n# Additional test cases for robustness\nassert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\nassert remove_splchar('Special characters: !@#$%^&*()') == ''\nassert remove_splchar('1234567890') == '1234567890'\nassert remove_splchar('') == ''\nassert remove_splchar('abc123!@#') == 'abc123'\n\nprint(\"All tests passed successfully.\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1200, 1500)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Testing the function with assertions\nassert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\nassert profit_amount(1200, 1500) == 300, \"Test case 2 failed\"\nassert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\nassert profit_amount(800, 1000) == 200, \"Test case 4 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test case to verify the functionality\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\n# Additional test cases\nassert remove_lowercase('HelloWorld') == 'HW'\nassert remove_lowercase('Python3.8') == 'P3.'\nassert remove_lowercase('123abcXYZ') == '123XYZ'\nassert remove_lowercase('') == ''  # Edge case: empty string\nassert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # No lowercase letters\n\nprint(\"All tests passed successfully.\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the specified value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Use the count method of the tuple to count occurrences of the value\n    return tuplex.count(value)\n\n# Testing the function with the provided assertion\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n\n# Additional test cases\nassert count_tuplex((1, 1, 1, 1, 1), 1) == 5  # All elements are 1\nassert count_tuplex((1, 2, 3, 4, 5), 6) == 0  # Value not in tuple\nassert count_tuplex((), 1) == 0  # Empty tuple\nassert count_tuplex((1, 2, 3, 4, 5), 2) == 1  # Value appears once\n\nprint(\"All tests passed successfully.\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    for sublist in lst:\n        # Check if the sublist is empty\n        if not sublist:\n            raise ValueError(\"All sublists must contain at least one element.\")\n        # Append the first element of the sublist to the result list\n        first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test case to verify the functionality of the Extract function\nif __name__ == \"__main__\":\n    # This should return [1, 3, 6]\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Additional test cases\n    assert Extract([[10, 20], [30], [40, 50, 60]]) == [10, 30, 40]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Testing with empty sublist should raise ValueError\n    try:\n        Extract([[1, 2], [], [3, 4]])\n    except ValueError as e:\n        print(e)  # Expected output: \"All sublists must contain at least one element.\""}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Extract the vowels from the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the function\nassert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\nassert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\nassert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\nassert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\nassert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 5 failed\"\nassert reverse_vowels(\"\") == \"\", \"Test case 6 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list 'nums' by 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list containing the results of the multiplication.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"The first argument must be a list of numbers.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be a number.\")\n    \n    # Use map to multiply each element by n\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Test case\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n\n# Additional test cases\nprint(ntimes_list([0, 1, 2], 5))  # Expected: [0, 5, 10]\nprint(ntimes_list([-1, -2, -3], 2))  # Expected: [-2, -4, -6]\nprint(ntimes_list([1.5, 2.5, 3.5], 2))  # Expected: [3.0, 5.0, 7.0]"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among the three inputs.\n    \n    Example:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we return 2\n    if count == 2:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0\n\n# Test cases to validate the function\nassert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\nassert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\nassert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\nassert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\nassert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the Kth index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the Kth index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Extract the Kth elements from each tuple\n    try:\n        kth_elements = [tup[K] for tup in test_list]\n    except IndexError:\n        raise IndexError(f\"K index {K} is out of bounds for the tuples.\")\n\n    # Calculate the product of the Kth elements\n    product = reduce(operator.mul, kth_elements, 1)\n    \n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert find_k_product([(2, 3, 4), (5, 6, 7), (8, 9, 10)], 1) == 162, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    \n    # Edge case: empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 4 failed\"\n    \n    # Edge case: out of bounds index\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        assert str(e) == \"K index 2 is out of bounds for the tuples.\", \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6\nassert ncr_modp(5, 2, 7) == 3\nassert ncr_modp(10, 5, 100) == 10\nassert ncr_modp(0, 0, 10) == 1  # 0C0 is 1\nassert ncr_modp(5, 0, 10) == 1  # nC0 is 1 for any n\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to verify the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string. Returns an empty string if no common prefix exists.\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # The GCD is found in a\n\n# Test case to verify the functionality of the gcd function\nif __name__ == \"__main__\":\n    assert gcd(48, 18) == 6, \"Test case failed!\"\n    assert gcd(56, 98) == 14, \"Test case failed!\"\n    assert gcd(101, 10) == 1, \"Test case failed!\"\n    assert gcd(0, 5) == 5, \"Test case failed!\"\n    assert gcd(5, 0) == 5, \"Test case failed!\"\n    assert gcd(0, 0) == 0, \"Test case failed!\"  # GCD(0, 0) is undefined, but we can handle it as a special case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Input matrix must be non-empty\")\n\n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test case\nif __name__ == \"__main__\":\n    # Test the rotate_matrix function\n    original_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected_output = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Perform the rotation\n    result = rotate_matrix(original_matrix)\n    \n    # Assert to check if the result matches the expected output\n    assert result == expected_output, f\"Expected {expected_output}, but got {result}\"\n    \n    print(\"Test passed! The matrix was rotated correctly.\")"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, update the dp value\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the function\nassert longest_common_substring('abcdef', 'zcdemf') == 2  # 'cd' is the longest common substring\nassert longest_common_substring('hello', 'yell') == 3    # 'ell' is the longest common substring\nassert longest_common_substring('abc', 'def') == 0       # No common substring\nassert longest_common_substring('abcde', 'abfce') == 2    # 'ab' is the longest common substring\nassert longest_common_substring('', 'abc') == 0           # Empty string case\nassert longest_common_substring('abc', '') == 0           # Empty string case\nassert longest_common_substring('', '') == 0              # Both strings are empty\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if all elements in the list are integers\n    for item in arr:\n        if not isinstance(item, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to verify the functionality of the max_value function\nif __name__ == \"__main__\":\n    # Valid test case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([10, 20, 30, 40, 50]) == 50\n    assert max_value([5]) == 5\n    \n    # Edge case: single element\n    assert max_value([100]) == 100\n    \n    # Edge case: empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty.\n    \n    # Edge case: non-integer elements (should raise TypeError)\n    try:\n        max_value([1, 2, 'three', 4])\n    except TypeError as e:\n        print(e)  # Expected output: All elements in the list must be integers.\n    \n    print(\"All tests passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases to validate the functionality\nassert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\nassert longest_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\nassert longest_prefix(['a']) == 'a'\nassert longest_prefix([]) == ''\nassert longest_prefix(['']) == ''\nassert longest_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test case\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n\n# Additional test cases\nassert longest_common_prefix(['dog', 'racecar', 'car']) == ''\nassert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\nassert longest_common_prefix(['a']) == 'a'\nassert longest_common_prefix([]) == ''\nassert longest_common_prefix(['']) == ''\nassert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to validate the function\nassert longest_common_subsequence('abcde', 'ace') == 3  # 'ace' is the LCS\nassert longest_common_subsequence('abc', 'abc') == 3    # 'abc' is the LCS\nassert longest_common_subsequence('abc', 'def') == 0    # No common subsequence\nassert longest_common_subsequence('abcde', 'abc') == 3  # 'abc' is the LCS\nassert longest_common_subsequence('', 'abc') == 0        # Empty string case\nassert longest_common_subsequence('abc', '') == 0        # Empty string case\nassert longest_common_subsequence('', '') == 0           # Both strings empty\n\nprint(\"All test cases passed!\")"}
