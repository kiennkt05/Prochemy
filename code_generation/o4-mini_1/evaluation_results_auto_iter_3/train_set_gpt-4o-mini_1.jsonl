{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\n    assert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\n    assert profit_amount(500, 700) == 200.0, \"Test case 4 failed\"\n    assert profit_amount(0, 100) == 100.0, \"Test case 5 failed\"\n    assert profit_amount(100, 0) is None, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(s: str) -> str:\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the string to a list to allow modifications\n    s_list = list(s)\n    \n    # Collect the indices of the vowels in the string\n    vowel_indices = [i for i, char in enumerate(s_list) if char in vowels]\n    \n    # Extract the vowels from the string\n    vowel_chars = [s_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original list with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        s_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(s_list)\n\n# Test cases to validate the functionality of reverse_vowels\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"racecar\") == \"recacar\", \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers among the three inputs.\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 for each pair)\n    return count\n\n# Test cases\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 4 failed\"\n    assert test_three_equal(3, 3, 3) == 3, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, 1) == 1, \"Test case 7 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with normal cases\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Test with empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]  # Should skip the empty sublist\n    assert Extract([[], [], []]) == []  # All sublists are empty\n    \n    # Test with mixed types\n    assert Extract([[None, 2], [3.5, 4], ['text', 'more text']]) == [None, 3.5, 'text']\n    \n    # Test with a single sublist\n    assert Extract([[42]]) == [42]  # Single sublist with one element\n    assert Extract([[]]) == []  # Single empty sublist\n\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of remove_lowercase\ndef test_remove_lowercase():\n    # Test case 1: Mixed case string\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAHJSI') == 'KDAHJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 5: String with special characters and numbers\n    assert remove_lowercase('K1D@eO!L0O#H$L^AJSI') == 'K1D@L0O#H$L^AJSI'\n    \n    # Test case 6: String with all uppercase letters\n    assert remove_lowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of remove_splchar\ndef test_remove_splchar():\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123', \"Test Case 1 Failed\"\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023', \"Test Case 2 Failed\"\n    assert remove_splchar('1234567890') == '1234567890', \"Test Case 3 Failed\"\n    assert remove_splchar('') == '', \"Test Case 4 Failed\"\n    assert remove_splchar('!@#$%^&*()') == '', \"Test Case 5 Failed\"\n    assert remove_splchar('abc123!@#xyz') == 'abc123xyz', \"Test Case 6 Failed\"\n    assert remove_splchar('Python3.8') == 'Python38', \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the specified value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Validate input type\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n\n    # Count occurrences of the value in the tuple\n    count = tuplex.count(value)\n    return count\n\n# Test cases\ndef test_count_tuplex():\n    # Test with a tuple containing repeated values\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    \n    # Test with a tuple containing no occurrences\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 2 Failed\"\n    \n    # Test with a tuple containing all identical values\n    assert count_tuplex((1, 1, 1, 1), 1) == 4, \"Test Case 3 Failed\"\n    \n    # Test with an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"\n    \n    # Test with a tuple of mixed types\n    assert count_tuplex((1, 'a', 2, 'a', 3), 'a') == 2, \"Test Case 5 Failed\"\n    \n    # Test with a tuple containing None values\n    assert count_tuplex((None, None, 1, 2), None) == 2, \"Test Case 6 Failed\"\n    \n    # Test with a tuple of different types\n    assert count_tuplex((1, 2.0, '2', 2), 2) == 2, \"Test Case 7 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by n using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the results of the multiplication.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic functionality\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2: Multiplying by 0\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test case 4: Empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test case 5: Multiplying by 1 (identity)\n    assert ntimes_list([10, 20, 30], 1) == [10, 20, 30]\n    \n    # Test case 6: Large numbers\n    assert ntimes_list([1000, 2000, 3000], 10) == [10000, 20000, 30000]\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using the formula nCr = n! / (r! * (n - r)!)\n    and modular arithmetic.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Calculate the modular inverse of the denominator\n    denominator_inv = mod_inverse(denominator, p)\n    \n    # Return the result\n    return (numerator * denominator_inv) % p\n\n# Test cases\nassert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\nassert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\nassert ncr_modp(10, 5, 100) == 10, \"Test case 3 failed\"\nassert ncr_modp(0, 0, 13) == 1, \"Test case 4 failed\"  # 0C0 is 1\nassert ncr_modp(5, 0, 7) == 1, \"Test case 5 failed\"  # nC0 is 1\nassert ncr_modp(5, 5, 7) == 1, \"Test case 6 failed\"  # nCn is 1\nassert ncr_modp(10, 3, 11) == 4, \"Test case 7 failed\"  # Additional test case\n\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from each tuple in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element\n        product *= tup[K]\n    \n    return product\n\n# Test cases\ndef test_find_k_product():\n    # Test with the provided example\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96, \"Test case 2 failed\"  # 4 * 3 * 8\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"  # 1 * 3 * 5\n    assert find_k_product([(10, 20), (30, 40)], 1) == 800, \"Test case 4 failed\"  # 20 * 40\n    assert find_k_product([(1, 2, 3)], 2) == 3, \"Test case 5 failed\"  # Single tuple case\n\n    # Edge case: empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 6 failed\"\n\n    # Edge case: index out of bounds\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"Index 2 is out of bounds for tuple (1, 2).\", \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n\n    return prefix\n\n# Test cases\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases\ndef test_fibonacci():\n    \"\"\"\n    Test the fibonacci function with various test cases.\n    \"\"\"\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Edge case: large Fibonacci number\n    assert fibonacci(30) == 832040, \"Test case 30 failed\"\n    \n    # Test for negative input\n    try:\n        fibonacci(-1)\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-negative integer.\", \"Negative input test failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\nif __name__ == \"__main__\":\n    test_fibonacci()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first non-negative integer.\n    b (int): The second non-negative integer.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is negative.\n    \"\"\"\n    # Input validation\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n\n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Testing the gcd function\nif __name__ == \"__main__\":\n    # Test cases\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(0, 0) == 0, \"Test case 5 failed\"  # GCD(0, 0) is often defined as 0\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Input matrix must be a non-empty 2D list.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input matrix must be a non-empty 2D list.\"\n    \n    # Test case 5: Non-square matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    longest_length = 0  # Variable to store the length of the longest common substring\n\n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length\n\n# Test cases to validate the function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Validate input type\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        # Validate that each element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        \n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases\ndef test_max_value():\n    # Test with a normal case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([5]) == 5\n    assert max_value([1, 3, 2, 5, 4]) == 5\n    \n    # Test with edge cases\n    assert max_value([1, 2, 3, 4, 5, 5]) == 5  # Duplicate max value\n    assert max_value([10, 20, 30, 40, 50]) == 50  # All positive numbers\n    assert max_value([-10, -20, -30, -40, -50]) == -10  # All negative numbers\n    \n    # Test with an empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\"\n    \n    # Test with non-list input (should raise TypeError)\n    try:\n        max_value(\"not a list\")\n    except TypeError as e:\n        assert str(e) == \"Input must be a list.\"\n    \n    # Test with non-integer elements (should raise TypeError)\n    try:\n        max_value([1, 2, 'three', 4])\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be integers.\"\n\n# Run the tests\ntest_max_value()\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Calculate the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array from the bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Take the max from left or above\n\n    # The length of the longest common subsequence will be in the bottom-right cell\n    return dp[m][n]\n\n# Test cases to validate the function\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
