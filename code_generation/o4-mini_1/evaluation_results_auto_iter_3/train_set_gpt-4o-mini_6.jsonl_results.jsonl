{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    # Test case 1: Profit scenario\n    assert profit_amount(1500, 1800) == 300, \"Test case 1 failed\"\n    \n    # Test case 2: No profit scenario\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss scenario\n    assert profit_amount(1500, 1200) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Profit with floating point numbers\n    assert profit_amount(1000.50, 1200.75) == 200.25, \"Test case 4 failed\"\n    \n    # Test case 5: Large numbers\n    assert profit_amount(1_000_000, 1_500_000) == 500_000, \"Test case 5 failed\"\n    \n    # Test case 6: Negative sale amount\n    assert profit_amount(1000, -500) is None, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 49)", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n    \n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test with the provided example\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Additional test cases\n    assert ntimes_list([0, 0, 0], 5) == [0, 0, 0]  # Multiplying zeros\n    assert ntimes_list([-1, -2, -3], 2) == [-2, -4, -6]  # Negative numbers\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]  # Multiplying by zero\n    assert ntimes_list([], 5) == []  # Empty list\n    assert ntimes_list([10], 10) == [100]  # Single element list\n\n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_ntimes_list()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 42)", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3)\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we should return 2\n    if count == 2:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(0, 1, 0) == 2, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 58)", "passed": false}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n    \n    Returns:\n    str: A new string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of remove_lowercase\ndef test_remove_lowercase():\n    # Test case 1: Given example\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAJSI') == 'KDAJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Mixed case with special characters\n    assert remove_lowercase('Hello World! 123') == 'HW! 123'\n    \n    # Test case 5: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 6: String with numbers and symbols\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 48)", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(s: str) -> str:\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the string to a list to allow modification\n    s_list = list(s)\n    \n    # Initialize two pointers\n    left, right = 0, len(s_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(s_list)\n\n# Test cases to validate the functionality of reverse_vowels\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test Case 1 Failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test Case 2 Failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test Case 3 Failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test Case 4 Failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test Case 5 Failed\"\n    assert reverse_vowels(\"UOIEA\") == \"AEIOU\", \"Test Case 6 Failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test Case 7 Failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test Case 8 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 60)", "passed": false}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of remove_splchar\ndef test_remove_splchar():\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('abc123!@#xyz') == 'abc123xyz'\n    assert remove_splchar('Python3.8') == 'Python38'\n    assert remove_splchar('Spaces   and    tabs\\t') == 'Spacesandtabs'\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_splchar()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 40)", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    TypeError: If the input is not a list of lists.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of lists.\")\n    \n    result = []\n    \n    for sublist in lst:\n        # Check if each sublist is indeed a list\n        if not isinstance(sublist, list):\n            raise TypeError(\"Each element of the input must be a list.\")\n        \n        # Check if the sublist is not empty\n        if not sublist:\n            raise ValueError(\"Sublists must not be empty.\")\n        \n        # Append the first element of the sublist to the result\n        result.append(sublist[0])\n    \n    return result\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    # Test with normal input\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test with single element sublists\n    assert Extract([[10], [20], [30]]) == [10, 20, 30]\n    \n    # Test with empty sublists (should raise ValueError)\n    try:\n        Extract([[1, 2], [], [6, 7]])\n    except ValueError as e:\n        assert str(e) == \"Sublists must not be empty.\"\n    \n    # Test with non-list input (should raise TypeError)\n    try:\n        Extract(\"not a list\")\n    except TypeError as e:\n        assert str(e) == \"Input must be a list of lists.\"\n    \n    # Test with non-list element in the input (should raise TypeError)\n    try:\n        Extract([[1, 2], \"not a list\", [6, 7]])\n    except TypeError as e:\n        assert str(e) == \"Each element of the input must be a list.\"\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_Extract()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 72)", "passed": false}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Validate input types\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count occurrences of the value in the tuple\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test case 2 failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test case 3 failed\"\n    assert count_tuplex((), 1) == 0, \"Test case 4 failed\"  # Empty tuple\n    assert count_tuplex((None, None, None), None) == 3, \"Test case 5 failed\"  # Counting None\n    assert count_tuplex((1, 2, 3, 4, 5), 1) == 1, \"Test case 6 failed\"  # Single occurrence\n    assert count_tuplex((1, 2, 3, 4, 5), 5) == 1, \"Test case 7 failed\"  # Last element\n    assert count_tuplex((1, 2, 3, 4, 5), 0) == 0, \"Test case 8 failed\"  # Non-existent element\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 1)", "passed": false}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of integers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the product by the Kth element of the tuple\n        product *= tup[K]\n    \n    return product\n\n# Test cases to validate the functionality of the find_k_product function\ndef test_find_k_product():\n    # Test case 1: Normal case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: K is 0 (first index)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 0) == 40, \"Test case 2 failed\"\n    \n    # Test case 3: K is 1 (second index)\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 1) == 162, \"Test case 3 failed\"\n    \n    # Test case 4: Single tuple\n    assert find_k_product([(2, 3, 4)], 1) == 3, \"Test case 4 failed\"\n    \n    # Test case 5: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    # Test case 6: K out of bounds\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for tuple (1, 2).\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 71)", "passed": false}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using the formula nCr = n! / (r! * (n - r)!)\n    and applying modular arithmetic.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # If r is greater than n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Basic test case\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"  # 5C2 % 7 = 10 % 7 = 3\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"  # 10C5 % 100 = 252\n    assert ncr_modp(0, 0, 13) == 1, \"Test case 4 failed\"  # 0C0 % 13 = 1\n    assert ncr_modp(5, 0, 7) == 1, \"Test case 5 failed\"  # 5C0 % 7 = 1\n    assert ncr_modp(5, 5, 7) == 1, \"Test case 6 failed\"  # 5C5 % 7 = 1\n    assert ncr_modp(10, 3, 11) == 1, \"Test case 7 failed\"  # 10C3 % 11 = 120 % 11 = 10\n    assert ncr_modp(10, 11, 13) == 0, \"Test case 8 failed\"  # 10C11 % 13 = 0\n\n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 62)", "passed": false}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return matrix\n    \n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n    \n    # Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    \n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases to validate the functionality of rotate_matrix\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Non-square matrix should raise ValueError\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Edge case: testing a large Fibonacci number\n    assert fibonacci(30) == 832040, \"Test case 30 failed\"\n    \n    # Testing for negative input\n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case for negative input failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of the two numbers\n    \n    Raises:\n    ValueError: If either a or b is not an integer\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    \n    return a\n\n# Test cases to validate the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"  # GCD(0, b) = b\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"  # GCD(a, 0) = a\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we return 0 for this case\n    assert gcd(-48, 18) == 6, \"Test case 7 failed\"  # GCD should be positive\n    assert gcd(48, -18) == 6, \"Test case 8 failed\"  # GCD should be positive\n    assert gcd(-48, -18) == 6, \"Test case 9 failed\"  # GCD should be positive\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Args:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    # Initialize a 2D list with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    longest_length = 0  # Variable to store the length of the longest common substring\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length\n\n# Test cases to validate the functionality of the longest_common_substring function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Check if all elements in the list are integers\n    for item in arr:\n        if not isinstance(item, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Use the built-in max function to find the maximum value\n    return max(arr)\n\n# Test cases to validate the functionality of max_value function\ndef test_max_value():\n    # Test with a normal case\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4, -5]) == -1\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([10]) == 10\n    assert max_value([1, 3, 2, 5, 4]) == 5\n    \n    # Test with edge cases\n    assert max_value([1, 2, 3, 3, 2, 1]) == 3  # Duplicate maximum\n    assert max_value([100, 200, 300]) == 300  # Larger numbers\n    \n    # Test with a single element\n    assert max_value([-10]) == -10  # Single negative number\n    assert max_value([10]) == 10  # Single positive number\n    \n    # Test with an empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\"\n    \n    # Test with non-list input (should raise TypeError)\n    try:\n        max_value(\"not a list\")\n    except TypeError as e:\n        assert str(e) == \"Input must be a list.\"\n    \n    # Test with non-integer elements (should raise TypeError)\n    try:\n        max_value([1, 2, 'three'])\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be integers.\"\n\n# Run the test cases\ntest_max_value()\n\nprint(\"All tests passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Build the dp array from bottom up\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence will be in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Test cases to validate the functionality of the longest_common_subsequence function\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
