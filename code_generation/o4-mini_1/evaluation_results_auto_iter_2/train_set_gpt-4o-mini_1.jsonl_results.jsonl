{"task_id": "auto/0", "completion": "from typing import List\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    \"\"\"\n    Find and return a list of duplicate strings from the input list.\n\n    Args:\n    strings (List[str]): A list of strings to check for duplicates.\n\n    Returns:\n    List[str]: A list of duplicate strings found in the input list.\n    \"\"\"\n    # Dictionary to count occurrences of each string\n    count_dict = {}\n    \n    # Count occurrences of each string\n    for string in strings:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    \n    # Collect strings that have a count greater than 1\n    duplicates = [string for string, count in count_dict.items() if count > 1]\n    \n    return duplicates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]\n    print(find_duplicates(example_strings))  # Output: ['apple', 'banana']", "result": "passed", "passed": true}
{"task_id": "auto/2", "completion": "from typing import List\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Sums all negative numbers in the provided list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    int: The sum of all negative integers in the list. If there are no negative integers, returns 0.\n    \"\"\"\n    # Initialize a variable to hold the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            negative_sum += number  # Add to the sum if it's negative\n    \n    return negative_sum\n\n# Test cases to validate the functionality of the sum_negative_numbers function\ndef test_sum_negative_numbers():\n    assert sum_negative_numbers([-1, -2, -3, 4, 5]) == -6, \"Test case 1 failed\"\n    assert sum_negative_numbers([1, 2, 3, 4, 5]) == 0, \"Test case 2 failed\"\n    assert sum_negative_numbers([-1, 2, -3, -4, 5]) == -8, \"Test case 3 failed\"\n    assert sum_negative_numbers([]) == 0, \"Test case 4 failed\"  # Edge case: empty list\n    assert sum_negative_numbers([-10, -20, 30, 40]) == -30, \"Test case 5 failed\"\n    assert sum_negative_numbers([0, 0, 0]) == 0, \"Test case 6 failed\"  # Edge case: all zeros\n    assert sum_negative_numbers([-1]) == -1, \"Test case 7 failed\"  # Edge case: single negative number\n    assert sum_negative_numbers([1]) == 0, \"Test case 8 failed\"  # Edge case: single positive number\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_sum_negative_numbers()", "result": "passed", "passed": true}
{"task_id": "auto/9", "completion": "from typing import List\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    \n    Args:\n        nums (List[int]): A list of integers.\n        \n    Returns:\n        int: The count of negative integers in the list.\n    \n    Examples:\n        >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n        3\n        >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n        0\n        >>> count_negative_numbers([])\n        0\n        >>> count_negative_numbers([-1, -2, -3, -4])\n        4\n        >>> count_negative_numbers([0, 1, 2, 3])\n        0\n    \"\"\"\n    return sum(1 for num in nums if num < 0)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Mixed numbers with negatives\n    assert count_negative_numbers([-1, 2, -3, 4, -5, 6]) == 3\n    # Test case 2: All positive numbers\n    assert count_negative_numbers([1, 2, 3, 4, 5, 6]) == 0\n    # Test case 3: Empty list\n    assert count_negative_numbers([]) == 0\n    # Test case 4: All negative numbers\n    assert count_negative_numbers([-1, -2, -3, -4]) == 4\n    # Test case 5: List with zero and positive numbers\n    assert count_negative_numbers([0, 1, 2, 3]) == 0\n    # Test case 6: List with a single negative number\n    assert count_negative_numbers([-10]) == 1\n    # Test case 7: List with a single positive number\n    assert count_negative_numbers([10]) == 0\n    # Test case 8: List with both positive and negative numbers\n    assert count_negative_numbers([-1, 0, 1, -2, 2]) == 2\n\n    print(\"All test cases passed!\")", "result": "failed: unterminated triple-quoted string literal (detected at line 70) (<string>, line 32)", "passed": false}
{"task_id": "auto/7", "completion": "from typing import List\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    float: The mean of the numbers. Returns 0.0 if the list is empty.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0  # Return 0.0 for an empty list to avoid division by zero\n\n    total_sum = sum(numbers)  # Calculate the sum of the numbers\n    count = len(numbers)  # Get the count of numbers\n    mean = total_sum / count  # Calculate the mean\n    return mean  # Return the calculated mean", "result": "failed: ", "passed": false}
{"task_id": "auto/1", "completion": "from typing import List\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    \"\"\"\n    Count the maximum number of consecutive zeros in a list of integers.\n\n    Args:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    int: The maximum count of consecutive zeros.\n    \"\"\"\n    max_count = 0  # To keep track of the maximum count of consecutive zeros\n    current_count = 0  # To count the current streak of zeros\n\n    for num in nums:\n        if num == 0:\n            current_count += 1  # Increment the count for consecutive zeros\n        else:\n            max_count = max(max_count, current_count)  # Update max count if needed\n            current_count = 0  # Reset current count if a non-zero is encountered\n\n    # Final check in case the list ends with zeros\n    max_count = max(max_count, current_count)\n\n    return max_count\n\n# Test cases to validate the functionality of the count_consecutive_zeros function\ndef test_count_consecutive_zeros():\n    assert count_consecutive_zeros([0, 0, 1, 0, 0, 0, 2, 0]) == 3, \"Test case 1 failed\"\n    assert count_consecutive_zeros([1, 2, 3]) == 0, \"Test case 2 failed\"\n    assert count_consecutive_zeros([0, 0, 0, 0]) == 4, \"Test case 3 failed\"\n    assert count_consecutive_zeros([]) == 0, \"Test case 4 failed\"\n    assert count_consecutive_zeros([0, 1, 0, 0, 0, 0, 1]) == 4, \"Test case 5 failed\"\n    assert count_consecutive_zeros([1, 0, 0, 1, 0, 0, 0, 0]) == 4, \"Test case 6 failed\"\n    assert count_consecutive_zeros([0, 0, 0, 1, 0, 0]) == 3, \"Test case 7 failed\"\n    assert count_consecutive_zeros([1, 2, 0, 0, 0, 0, 3, 0]) == 4, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_consecutive_zeros()", "result": "passed", "passed": true}
{"task_id": "auto/3", "completion": "from typing import List\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\"\n    Find the missing number in a list of integers from 0 to n.\n    \n    Args:\n    nums (List[int]): A list of integers containing n distinct numbers in the range [0, n].\n    \n    Returns:\n    int: The missing number in the list.\n    \"\"\"\n    n = len(nums)  # The length of the list is n, meaning numbers should be from 0 to n\n    expected_sum = n * (n + 1) // 2  # Calculate the expected sum using the formula\n    actual_sum = sum(nums)  # Calculate the actual sum of the numbers in the list\n    missing_number = expected_sum - actual_sum  # The missing number is the difference\n    return missing_number", "result": "failed: ", "passed": false}
{"task_id": "auto/4", "completion": "from typing import List\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Find and return a list of duplicate numbers from the input list.\n\n    Parameters:\n    numbers (List[float]): A list of floating-point numbers.\n\n    Returns:\n    List[float]: A list of duplicate numbers found in the input list.\n    \"\"\"\n    seen = set()        # Set to track seen numbers\n    duplicates = set()  # Set to track duplicates\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)  # Add to duplicates if already seen\n        else:\n            seen.add(number)        # Add to seen if not seen before\n\n    return list(duplicates)  # Convert duplicates set to list and return\n\n# Example usage:\n# print(find_duplicates([1.0, 2.0, 3.0, 2.0, 4.0, 1.0]))  # Output: [1.0, 2.0]", "result": "passed", "passed": true}
{"task_id": "auto/6", "completion": "from typing import List\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Count the occurrences of a target integer in a list of integers.\n\n    Parameters:\n    numbers (List[int]): A list of integers to search through.\n    target (int): The integer to count in the list.\n\n    Returns:\n    int: The count of occurrences of the target integer in the list.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # If the current number matches the target, increment the counter\n        if number == target:\n            count += 1\n            \n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_numbers = [1, 2, 3, 4, 2, 2, 5]\n    target_value = 2\n    print(f\"The number {target_value} appears {count_elements(sample_numbers, target_value)} times.\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Each car moving left to right will collide with each car moving right to left\n    return n * n\n\n# Test cases to validate the functionality of the car_race_collision function\ndef test_car_race_collision():\n    assert car_race_collision(0) == 0, \"Test case 0 failed\"\n    assert car_race_collision(1) == 1, \"Test case 1 failed\"\n    assert car_race_collision(2) == 4, \"Test case 2 failed\"\n    assert car_race_collision(3) == 9, \"Test case 3 failed\"\n    assert car_race_collision(10) == 100, \"Test case 10 failed\"\n    assert car_race_collision(100) == 10000, \"Test case 100 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_car_race_collision()", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('race')\n    'racecar'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('ab')\n    'aba'\n    >>> make_palindrome('abc')\n    'abcba'\n    \"\"\"\n    # Edge case for empty string\n    if not string:\n        return string\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # If the suffix is a palindrome, we need to append the reverse of the prefix\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the whole string is non-palindromic\n    return string + string[::-1]\n\n# Test cases to validate the functionality\ndef test_make_palindrome():\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('race') == 'racecar'\n    assert make_palindrome('a') == 'a'\n    assert make_palindrome('ab') == 'aba'\n    assert make_palindrome('abc') == 'abcba'\n    assert make_palindrome('level') == 'level'\n    assert make_palindrome('deified') == 'deified'\n    assert make_palindrome('noon') == 'noon'\n    assert make_palindrome('abcd') == 'abcddcba'\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_make_palindrome()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    return cube_root ** 3 == abs(a)\n\n# Test cases to validate the functionality of the iscube function\ndef test_iscube():\n    assert iscube(1) == True, \"Test case 1 failed\"\n    assert iscube(2) == False, \"Test case 2 failed\"\n    assert iscube(-1) == True, \"Test case 3 failed\"\n    assert iscube(64) == True, \"Test case 4 failed\"\n    assert iscube(0) == True, \"Test case 5 failed\"\n    assert iscube(180) == False, \"Test case 6 failed\"\n    assert iscube(-27) == True, \"Test case 7 failed\"\n    assert iscube(729) == True, \"Test case 8 failed\"\n    assert iscube(-729) == True, \"Test case 9 failed\"\n    assert iscube(8) == True, \"Test case 10 failed\"\n    assert iscube(-8) == True, \"Test case 11 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_iscube()", "result": "passed", "passed": true}
{"task_id": "auto/8", "completion": "from typing import List\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    # Initialize counters for current and maximum consecutive ones\n    max_count = 0\n    current_count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        if num == 1:\n            # Increment current count if the number is 1\n            current_count += 1\n        else:\n            # Update max count if current count is greater\n            max_count = max(max_count, current_count)\n            # Reset current count to 0\n            current_count = 0\n    \n    # Final check to update max count in case the array ends with 1s\n    max_count = max(max_count, current_count)\n    \n    return max_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\nfrom math import prod\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers up to a given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False\n    \n    primes = generate_primes(100)\n    \n    # Check all combinations of 3 primes\n    for combo in combinations(primes, 3):\n        if prod(combo) == a:\n            return True\n            \n    return False\n\n# Test cases\ndef test_is_multiply_prime():\n    assert is_multiply_prime(30) == True  # 2 * 3 * 5\n    assert is_multiply_prime(60) == True  # 2 * 3 * 10 (10 is not prime, but 2 * 5 * 3 = 30)\n    assert is_multiply_prime(42) == True  # 2 * 3 * 7\n    assert is_multiply_prime(70) == True  # 2 * 5 * 7\n    assert is_multiply_prime(1) == False   # No primes multiply to 1\n    assert is_multiply_prime(2) == False   # Only one prime\n    assert is_multiply_prime(5) == False   # Only one prime\n    assert is_multiply_prime(100) == False  # Out of bounds\n    assert is_multiply_prime(99) == False   # No combination of 3 primes gives 99\n    assert is_multiply_prime(15) == False   # 3 * 5, only 2 primes\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_is_multiply_prime()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 2)\n    '45123'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(-12345, 2)\n    '-45123'\n    >>> circular_shift(-12345, 5)\n    '-54321'\n    >>> circular_shift(0, 1)\n    '0'\n    >>> circular_shift(7, 3)\n    '7'\n    \"\"\"\n    # Convert the integer to a string and handle negative sign\n    is_negative = x < 0\n    str_x = str(abs(x))\n    num_digits = len(str_x)\n\n    # If shift is greater than the number of digits, reverse the digits\n    if shift >= num_digits:\n        result = str_x[::-1]\n    else:\n        # Perform the circular shift\n        result = str_x[-shift:] + str_x[:-shift]\n\n    # Add the negative sign back if the original number was negative\n    if is_negative:\n        result = '-' + result\n\n    return result\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional test cases\n    assert circular_shift(12, 1) == '21'\n    assert circular_shift(12, 2) == '12'\n    assert circular_shift(12345, 2) == '45123'\n    assert circular_shift(12345, 5) == '54321'\n    assert circular_shift(-12345, 2) == '-45123'\n    assert circular_shift(-12345, 5) == '-54321'\n    assert circular_shift(0, 1) == '0'\n    assert circular_shift(7, 3) == '7'\n    assert circular_shift(987654321, 10) == '123456789'\n    assert circular_shift(987654321, 9) == '987654321'\n    \n    print(\"All tests passed!\")", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    Returns the value of the polynomial.\n    \n    :param xs: List of coefficients [a0, a1, a2, ..., an] for the polynomial\n    :param x: The point at which to evaluate the polynomial\n    :return: The value of the polynomial at x\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef derivative(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial at point x.\n    \n    :param xs: List of coefficients [a0, a1, a2, ..., an] for the polynomial\n    :param x: The point at which to evaluate the derivative\n    :return: The value of the derivative at x\n    \"\"\"\n    return sum(i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, initial_guess: float = 0.0, tolerance: float = 1e-7, max_iterations: int = 1000) -> float:\n    \"\"\"\n    Finds a root of the polynomial defined by coefficients xs using the Newton-Raphson method.\n    \n    :param xs: List of coefficients of the polynomial\n    :param initial_guess: Initial guess for the root\n    :param tolerance: Tolerance for convergence\n    :param max_iterations: Maximum number of iterations to prevent infinite loops\n    :return: A root of the polynomial\n    :raises ValueError: If the input does not meet the requirements\n    \"\"\"\n    if len(xs) % 2 != 0 or all(coef == 0 for coef in xs):\n        raise ValueError(\"Input must have an even number of coefficients and at least one non-zero coefficient.\")\n    \n    x = initial_guess\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = derivative(xs, x)\n        \n        if abs(f_x) < tolerance:  # Found a root\n            return x\n        \n        if f_prime_x == 0:  # Avoid division by zero\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        # Newton-Raphson update\n        x -= f_x / f_prime_x\n    \n    raise ValueError(\"Maximum iterations reached. No solution found.\")\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1)(x - 2)(x - 3)", "result": "passed", "passed": true}
{"task_id": "auto/5", "completion": "from typing import List\n\ndef reverse_sublists(data: List[int], k: int) -> List[int]:\n    \"\"\"\n    Reverses sublists of length k in the given list.\n    \n    Parameters:\n    data (List[int]): The list of integers to process.\n    k (int): The length of the sublists to reverse.\n    \n    Returns:\n    List[int]: A new list with the specified sublists reversed.\n    \"\"\"\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    \n    result = []\n    for i in range(0, len(data), k):\n        # Get the sublist of length k\n        sublist = data[i:i + k]\n        # Reverse the sublist and add to the result\n        result.extend(reversed(sublist))\n    \n    return result\n\n# Example usage:\n# print(reverse_sublists([1, 2, 3, 4, 5, 6, 7, 8], 3))  # Output: [3, 2, 1, 6, 5, 4, 8, 7]", "result": "failed: reverse_sublists() missing 1 required positional argument: 'k'", "passed": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears two places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message to encode.\n    \n    Returns:\n    str: The encoded message.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowel_replacement:\n            # Replace vowel and swap case\n            encoded_message.append(vowel_replacement[char])\n        elif char.isalpha():\n            # Swap case for consonants\n            encoded_message.append(char.swapcase())\n        else:\n            # Keep non-alphabetic characters unchanged\n            encoded_message.append(char)\n    \n    return ''.join(encoded_message)\n\n# Test cases to validate the functionality of the encode function\nif __name__ == \"__main__\":\n    # Test cases\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n    assert encode('Hello World') == 'hGNNQ wQRLD'\n    assert encode('Python Programming') == 'pYTHON prOGrAMMING'\n    assert encode('AEIOU') == 'CGKQW'\n    assert encode('aeiou') == 'cgkqw'\n    assert encode('') == ''\n    assert encode('1234!@#$') == '1234!@#$'  # Non-alphabetic characters should remain unchanged\n    print(\"All test cases passed!\")", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n    \n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0  # Return 0 if no prime is found\n\n# Example usage\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3], 10),\n        ([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1], 25),\n        ([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3], 13),\n        ([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6], 11),\n        ([0, 81, 12, 3, 1, 21], 3),\n        ([0, 8, 1, 2, 1, 7], 7),\n    ]\n    \n    for lst, expected in test_cases:\n        result = largest_prime_digit_sum(lst)\n        print(f\"Input: {lst} | Expected: {expected} | Result: {result}\")", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Parameters:\n    n (int): The number of digits in the positive integers.\n    \n    Returns:\n    int: The count of n-digit integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Count of n-digit numbers starting with '1'\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit numbers ending with '1'\n    if n == 1:\n        count_ending_with_1 = 1  # Only the number '1'\n    else:\n        count_ending_with_1 = 9 * (10 ** (n - 2))\n    \n    # Count of n-digit numbers starting and ending with '1'\n    if n == 1:\n        count_both = 1  # Only the number '1'\n    else:\n        count_both = 10 ** (n - 2)\n    \n    # Total count using inclusion-exclusion principle\n    total_count = count_starting_with_1 + count_ending_with_1 - count_both\n    \n    return total_count\n\n# Test cases to validate the functionality\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1  # Only the number '1'\n    assert starts_one_ends(2) == 19  # 10-19 (10) + 11, 21 (9) - 11 (1) = 19\n    assert starts_one_ends(3) == 190  # 100-199 (100) + 101, 111, 121, ..., 191 (90) - 101 (10) = 190\n    assert starts_one_ends(4) == 1900  # 1000-1999 (1000) + 1001, 1011, ..., 1991 (900) - 1010 (100) = 1900\n    assert starts_one_ends(5) == 19000  # 10000-19999 (10000) + 10001, ..., 19991 (9000) - 10100 (1000) = 19000\n    print(\"All test cases passed.\")\n\n# Run the test cases\ntest_starts_one_ends()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Step 1: Convert N to string to iterate over each digit\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]  # [2:] to remove the '0b' prefix\n\n# Example usage\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "passed", "passed": true}
