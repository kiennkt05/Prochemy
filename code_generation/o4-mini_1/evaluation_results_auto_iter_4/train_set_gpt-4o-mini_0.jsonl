{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters (a-z) with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    \"\"\"\n    Test cases for the remove_lowercase function.\n    \"\"\"\n    # Test case 1: Mixed case with lowercase letters\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI', \"Test case 1 failed\"\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAHLO') == 'KDAHLO', \"Test case 2 failed\"\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == '', \"Test case 3 failed\"\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == '', \"Test case 4 failed\"\n    \n    # Test case 5: String with special characters and numbers\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ', \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_lowercase()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \n    Example:\n    >>> remove_splchar('python \u00c2\u00a0@#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute all non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    \"\"\"\n    Test cases for the remove_splchar function.\n    \"\"\"\n    # Test with special characters\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    \n    # Test with only alphanumeric characters\n    assert remove_splchar('python123') == 'python123'\n    \n    # Test with only special characters\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test with empty string\n    assert remove_splchar('') == ''\n    \n    # Test with spaces and special characters\n    assert remove_splchar('Hello World! 2023') == 'HelloWorld2023'\n    \n    # Test with mixed characters\n    assert remove_splchar('abc123!@#xyz456') == 'abc123xyz456'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_splchar()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 or 2)\n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    \"\"\"\n    Run a series of tests to validate the test_three_equal function.\n    \"\"\"\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if sale_amount is greater than actual_cost, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    \"\"\"\n    Test cases for the profit_amount function.\n    \"\"\"\n    # Test case 1: Sale amount is less than actual cost\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    \n    # Test case 2: Sale amount is equal to actual cost\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Sale amount is greater than actual cost\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 3 failed\"\n    \n    # Test case 4: Sale amount is significantly greater than actual cost\n    assert profit_amount(1000, 5000) == 4000.0, \"Test case 4 failed\"\n    \n    # Test case 5: Sale amount is a float\n    assert profit_amount(1500.50, 1800.75) == 300.25, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the elements at the K-th index in each tuple of the given list.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1  # Initialize product variable\n\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element to the product\n        product *= tup[K]\n\n    return product\n\n# Test cases to validate the functionality of the find_k_product function\ndef test_find_k_product():\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: All tuples have the same value at index 1\n    assert find_k_product([(2, 3, 4), (5, 3, 6), (7, 3, 8)], 1) == 27, \"Test case 2 failed\"\n    \n    # Test case 3: Single tuple\n    assert find_k_product([(1, 2, 3)], 1) == 2, \"Test case 3 failed\"\n    \n    # Test case 4: Empty list should raise ValueError\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 4 failed\"\n    \n    # Test case 5: Index out of bounds should raise IndexError\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"Index 2 is out of bounds for tuple (1, 2).\", \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the indices of the vowels in the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    \n    # Extract the vowels from the string\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of reverse_vowels\ndef test_reverse_vowels():\n    \"\"\"\n    Test the reverse_vowels function with various test cases.\n    \"\"\"\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Use the count method of the tuple to find the number of occurrences of the value\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    # Test case 1: Count occurrences of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count occurrences of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count occurrences of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count occurrences of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Count occurrences in an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing each element of 'nums' multiplied by 'n'.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test case to validate the function\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the provided list\n    for sublist in lst:\n        # Check if the sublist is not empty to avoid IndexError\n        if sublist:\n            first_elements.append(sublist[0])\n        else:\n            # If the sublist is empty, we can choose to append None or skip\n            first_elements.append(None)  # or you could choose to skip this sublist\n\n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    \"\"\"\n    Test cases for the Extract function to ensure it behaves as expected.\n    \"\"\"\n    # Test with normal input\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Test with empty sublists\n    assert Extract([[1, 2], [], [6, 7, 8, 9]]) == [1, None, 6]\n    \n    # Test with all empty sublists\n    assert Extract([[], [], []]) == [None, None, None]\n    \n    # Test with a single sublist\n    assert Extract([[42]]) == [42]\n    \n    # Test with mixed types\n    assert Extract([[1, 2], ['a', 'b'], [3.5, 4.5]]) == [1, 'a', 3.5]\n    \n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # If r is greater than n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p using the formula\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Calculate the modular inverse of the denominator\n    denominator_inv = mod_inverse(denominator, p)\n    \n    # Return the result\n    return (numerator * denominator_inv) % p\n\n# Test cases to validate the functionality\ndef test_ncr_modp():\n    \"\"\"Run test cases for ncr_modp function.\"\"\"\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 0, 13) == 1, \"Test case 3 failed\"  # nC0 = 1\n    assert ncr_modp(10, 10, 13) == 1, \"Test case 4 failed\"  # nCn = 1\n    assert ncr_modp(10, 5, 13) == 10, \"Test case 5 failed\"  # 10C5 % 13 = 10\n    assert ncr_modp(0, 0, 13) == 1, \"Test case 6 failed\"  # 0C0 = 1\n    assert ncr_modp(5, 6, 7) == 0, \"Test case 7 failed\"  # r > n should return 0\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ncr_modp()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given n x n matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): The input square matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    # Get the number of rows (or columns) in the square matrix\n    n = len(matrix)\n    \n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n    \n    # Fill the rotated matrix with the appropriate values\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n    \n    return rotated\n\n# Test case to validate the function\nassert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]], \"Test case failed!\"\n\n# If the assertion passes, the function works as expected.\nprint(\"Test case passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the prefix as the first string\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    \"\"\"\n    Test cases for the longest_common_prefix function.\n    \"\"\"\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'throne']) == 'throne', \"Test case 4 failed\"\n    assert longest_common_prefix(['a']) == 'a', \"Test case 5 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 6 failed\"\n    assert longest_common_prefix(['']) == '', \"Test case 7 failed\"\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate for common prefix\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    \"\"\"\n    Run a series of test cases to validate the longest_prefix function.\n    \"\"\"\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_prefix(['throne', 'throne']) == 'throne', \"Test case 5 failed\"\n    assert longest_prefix([]) == '', \"Test case 6 failed\"\n    assert longest_prefix(['a']) == 'a', \"Test case 7 failed\"\n    assert longest_prefix(['ab', 'a']) == 'a', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_longest_prefix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the entire first string is the common prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    \"\"\"\n    Test cases for the longest_common_prefix function.\n    \"\"\"\n    # Test case 1: Common prefix exists\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    \n    # Test case 2: No common prefix\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    \n    # Test case 3: All strings are the same\n    assert longest_common_prefix(['test', 'test', 'test']) == 'test'\n    \n    # Test case 4: One string is empty\n    assert longest_common_prefix(['', 'abc', 'ab']) == ''\n    \n    # Test case 5: Mixed case strings\n    assert longest_common_prefix(['Flower', 'flow', 'flight']) == ''\n    \n    # Test case 6: Single string in the list\n    assert longest_common_prefix(['single']) == 'single'\n    \n    # Test case 7: Long common prefix\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Replace a with b and b with the remainder of a divided by b\n    return a  # When b is 0, a contains the GCD\n\n# Test case to validate the function\nassert gcd(48, 18) == 6, \"Test case failed: gcd(48, 18) should return 6\""}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, there is no common prefix\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    \"\"\"\n    Test cases for the longest_common_prefix function.\n    \"\"\"\n    # Test case 1: Common prefix exists\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    \n    # Test case 2: No common prefix\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    \n    # Test case 3: All strings are the same\n    assert longest_common_prefix(['test', 'test', 'test']) == 'test'\n    \n    # Test case 4: One string is empty\n    assert longest_common_prefix(['', 'b', 'c']) == ''\n    \n    # Test case 5: Mixed case strings\n    assert longest_common_prefix(['Flower', 'flow', 'flight']) == 'fl'\n    \n    # Test case 6: Single string in the list\n    assert longest_common_prefix(['single']) == 'single'\n    \n    # Test case 7: Long strings with common prefix\n    assert longest_common_prefix(['abcdefghij', 'abcde', 'abcxyz']) == 'abc'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize a (len1+1) x (len2+1) matrix with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, increment the length of the common substring\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return max_length\n\n# Test cases to validate the functionality of the longest_common_substring function\ndef test_longest_common_substring():\n    \"\"\"\n    Test cases for the longest_common_substring function.\n    \"\"\"\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yelloh') == 4, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n\n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    \"\"\"\n    Run a series of tests to validate the fibonacci function.\n    \"\"\"\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_fibonacci()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases to validate the functionality of the max_value function\ndef test_max_value():\n    \"\"\"\n    Test cases for the max_value function.\n    \"\"\"\n    # Test with a normal case\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    \n    # Test with negative numbers\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    \n    # Test with a mix of positive and negative numbers\n    assert max_value([-1, 2, -3, 4, -5]) == 4, \"Test case 3 failed\"\n    \n    # Test with a single element\n    assert max_value([42]) == 42, \"Test case 4 failed\"\n    \n    # Test with all elements being the same\n    assert max_value([7, 7, 7, 7]) == 7, \"Test case 5 failed\"\n    \n    # Test with an empty list (should raise ValueError)\n    try:\n        max_value([])\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case 6 failed: ValueError not raised\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Build the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Characters do not match\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Test cases to validate the function\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
