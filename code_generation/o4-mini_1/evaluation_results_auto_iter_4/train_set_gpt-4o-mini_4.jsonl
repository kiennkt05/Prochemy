{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by a given integer n using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing each element of nums multiplied by n.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test case 1: Standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2: Multiplying by 0\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test case 4: Empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test case 5: Single element list\n    assert ntimes_list([10], 4) == [40]\n    \n    # Test case 6: Large numbers\n    assert ntimes_list([1000, 2000, 3000], 2) == [2000, 4000, 6000]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters (a-z) with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    # Test case 1: Mixed case with lowercase letters\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test case 2: String with no lowercase letters\n    assert remove_lowercase('KDAHJSI') == 'KDAHJSI'\n    \n    # Test case 3: String with only lowercase letters\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test case 4: Empty string\n    assert remove_lowercase('') == ''\n    \n    # Test case 5: String with special characters and numbers\n    assert remove_lowercase('123abc!@#XYZ') == '123!@#XYZ'\n    \n    # Test case 6: String with mixed characters\n    assert remove_lowercase('HelloWorld123') == 'HW123'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Validate input types\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Count occurrences of the value in the tuple\n    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n            \n    return count\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    # Test case 1: Basic functionality\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Value not present\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Value appears once\n    assert count_tuplex((1, 2, 3, 4, 5), 1) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Value appears multiple times\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test case 4 failed\"\n    \n    # Test case 5: Empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    # Test case 6: Mixed types\n    assert count_tuplex((1, 'a', 2, 'a', 3), 'a') == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Use a list comprehension to iterate through each sublist and extract the first element\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    \"\"\"\n    Run a series of test cases to validate the Extract function.\n    \"\"\"\n    # Test case 1: Standard case with multiple sublists\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n\n    # Test case 2: Sublist with a single element\n    assert Extract([[10], [20, 21], [30, 31, 32]]) == [10, 20, 30], \"Test case 2 failed\"\n\n    # Test case 3: Empty sublists\n    assert Extract([[], [1, 2], [], [3]]) == [1, 3], \"Test case 3 failed\"\n\n    # Test case 4: All sublists are empty\n    assert Extract([[], [], []]) == [], \"Test case 4 failed\"\n\n    # Test case 5: Mixed empty and non-empty sublists\n    assert Extract([[1, 2], [], [3, 4], [], [5]]) == [1, 3, 5], \"Test case 5 failed\"\n\n    # Test case 6: Single sublist\n    assert Extract([[42]]) == [42], \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs\n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 2 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 9 failed\"\n    assert test_three_equal(5, 5, 6) == 2, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    \"\"\"\n    Test cases for the profit_amount function.\n    \"\"\"\n    # Test case 1: Sale amount is less than actual cost (no profit)\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    \n    # Test case 2: Sale amount is equal to actual cost (no profit)\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Sale amount is greater than actual cost (profit exists)\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 3 failed\"\n    \n    # Test case 4: Sale amount is significantly greater than actual cost\n    assert profit_amount(1000, 5000) == 4000.0, \"Test case 4 failed\"\n    \n    # Test case 5: Sale amount is slightly greater than actual cost\n    assert profit_amount(2000, 2100) == 100.0, \"Test case 5 failed\"\n    \n    # Test case 6: Sale amount is a negative value (invalid case)\n    assert profit_amount(1500, -100) is None, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which special characters will be removed.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \n    Example:\n    >>> remove_splchar('python \u00c2\u00a0@#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    \"\"\"\n    Run a series of test cases to validate the remove_splchar function.\n    \"\"\"\n    # Test case 1: Basic input with special characters\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    \n    # Test case 2: Input with only alphanumeric characters\n    assert remove_splchar('python123') == 'python123'\n    \n    # Test case 3: Input with only special characters\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test case 4: Input with spaces and special characters\n    assert remove_splchar('Hello World! 2023') == 'HelloWorld2023'\n    \n    # Test case 5: Empty string input\n    assert remove_splchar('') == ''\n    \n    # Test case 6: Input with mixed characters\n    assert remove_splchar('abc123!@#xyz456') == 'abc123xyz456'\n    \n    # Test case 7: Input with unicode characters\n    assert remove_splchar('Caf\u00e9123') == 'Caf123'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/402", "completion": "def power_mod(base, exp, mod):\n    \"\"\"Computes (base^exp) % mod using iterative exponentiation by squaring.\"\"\"\n    result = 1\n    base = base % mod\n    while exp > 0:\n        if (exp % 2) == 1:  # If exp is odd\n            result = (result * base) % mod\n        exp = exp >> 1  # Divide exp by 2\n        base = (base * base) % mod\n    return result\n\ndef factorial_mod(n, p):\n    \"\"\"Computes n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Computes the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Calculate n!, r!, and (n-r)!\n    n_fact = factorial_mod(n, p)\n    r_fact = factorial_mod(r, p)\n    n_r_fact = factorial_mod(n - r, p)\n    \n    # Calculate the modular inverses\n    r_fact_inv = power_mod(r_fact, p - 2, p)\n    n_r_fact_inv = power_mod(n_r_fact, p - 2, p)\n    \n    # Calculate nCr % p\n    nCr = (n_fact * r_fact_inv % p) * n_r_fact_inv % p\n    return nCr\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(s):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    s (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\" \")\n    ' '\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(s)\n    \n    # Initialize two pointers for the start and end of the string\n    left, right = 0, len(str_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\" \") == \" \", \"Test case 5 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 6 failed\"\n    assert reverse_vowels(\"a quick brown fox\") == \"a qick brawn fox\", \"Test case 7 failed\"\n    assert reverse_vowels(\"aeiou\") == \"uoiea\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the elements at the K-th index in each tuple of the given list.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples of numbers.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the product by the K-th index element\n        product *= tup[K]\n    \n    return product\n\n# Example usage\nif __name__ == \"__main__\":\n    result = find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    print(result)  # Output: 665"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists.\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'throne']) == 'throne', \"Test case 4 failed\"\n    assert longest_common_prefix(['a']) == 'a', \"Test case 5 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 6 failed\"\n    assert longest_common_prefix(['']) == '', \"Test case 7 failed\"\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a contains the GCD\n\n# Test cases to validate the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can handle it as a special case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    \"\"\"\n    Run a series of tests to validate the fibonacci function.\n    \"\"\"\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Test edge case for negative input\n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case for negative input failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, update the dp table\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the functionality of the longest_common_substring function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('abcde', 'abfce') == 2, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the common prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the current prefix with the next string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_prefix(['a']) == 'a', \"Test case 6 failed\"\n    assert longest_prefix([]) == '', \"Test case 7 failed\"\n    assert longest_prefix(['']) == '', \"Test case 8 failed\"\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return it\n            if not prefix:\n                return \"\"\n\n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n\n# Run the test cases\ntest_longest_common_prefix()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given square matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the square matrix to be rotated.\n    \n    Returns:\n    list of list of int: A new 2D list representing the rotated matrix.\n    \n    Raises:\n    ValueError: If the input matrix is not square.\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or len(matrix) != len(matrix[0]):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n    \n    n = len(matrix)\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n    \n    # Fill the rotated matrix\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n    \n    return rotated\n\n# Test cases to validate the functionality of the rotate_matrix function\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: 4x4 matrix\n    assert rotate_matrix([[1, 2, 3, 4], \n                          [5, 6, 7, 8], \n                          [9, 10, 11, 12], \n                          [13, 14, 15, 16]]) == [[13, 9, 5, 1], \n                                                  [14, 10, 6, 2], \n                                                  [15, 11, 7, 3], \n                                                  [16, 12, 8, 4]]\n    \n    # Test case 5: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n    \n    # Test case 6: Non-square matrix\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_common_prefix(['a']) == 'a', \"Test case 6 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 7 failed\"\n    assert longest_common_prefix(['']) == '', \"Test case 8 failed\"\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input list contains non-integer values.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list is empty. Please provide a list with integers.\")\n\n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise TypeError(f\"Invalid value: {num}. All elements must be integers.\")\n        \n        # Update max_val if the current number is greater\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases to validate the functionality of the max_value function\ndef test_max_value():\n    \"\"\"\n    Run a series of test cases to validate the max_value function.\n    \"\"\"\n    # Test case 1: Normal case with positive integers\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n\n    # Test case 2: Normal case with negative integers\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n\n    # Test case 3: Mixed positive and negative integers\n    assert max_value([-1, 0, 1, 2, -2]) == 2, \"Test case 3 failed\"\n\n    # Test case 4: Single element list\n    assert max_value([42]) == 42, \"Test case 4 failed\"\n\n    # Test case 5: List with duplicate maximum values\n    assert max_value([1, 2, 3, 3, 2, 1]) == 3, \"Test case 5 failed\"\n\n    # Test case 6: Empty list should raise ValueError\n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The input list is empty. Please provide a list with integers.\", \"Test case 6 failed\"\n\n    # Test case 7: List with non-integer values should raise TypeError\n    try:\n        max_value([1, 2, 'three', 4])\n    except TypeError as e:\n        assert str(e) == \"Invalid value: three. All elements must be integers.\", \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    # Build the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Characters do not match\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len(s1)][len(s2)]\n\n# Test case to validate the function\nassert longest_common_subsequence('abcde', 'ace') == 3"}
