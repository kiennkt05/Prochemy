{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Test the function with the provided assertion\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    print(\"Test passed!\")\n\n    # Additional test cases\n    test_cases = [\n        (\"HelloWorld\", \"HW\"),\n        (\"PythonIsFun\", \"PIF\"),\n        (\"123abcXYZ\", \"123XYZ\"),\n        (\"NoLowercaseHere\", \"NoLowercaseHere\"),\n        (\"\", \"\"),  # Edge case: empty string\n        (\"ALLUPPERCASE\", \"ALLUPPERCASE\"),  # Edge case: all uppercase\n        (\"mixedCASE123\", \"mC123\")  # Edge case: mixed case with numbers\n    ]\n\n    for input_str, expected_output in test_cases:\n        assert remove_lowercase(input_str) == expected_output, f\"Test failed for input: {input_str}\"\n\n    print(\"All tests passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 49)", "passed": false}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python \u00c2\u00a0@#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of remove_splchar\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('Special characters: !@#$%^&*()') == ''\n    assert remove_splchar('Mixed123!@#Text') == 'Mixed123Text'\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 39)", "passed": false}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    300.0\n    >>> profit_amount(1500, 1500)\n    None\n    >>> profit_amount(1500, 1600)\n    100.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Main program to test the function\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of profit_amount\n    assert profit_amount(1500, 1200) == None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1500) == None, \"Test Case 2 Failed\"\n    assert profit_amount(1500, 1600) == 100.0, \"Test Case 3 Failed\"\n    assert profit_amount(2000, 2500) == 500.0, \"Test Case 4 Failed\"\n    assert profit_amount(1000, 800) == None, \"Test Case 5 Failed\"\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 46)", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list 'nums' by the integer 'n'\n    using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the multiplied values.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of ntimes_list\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21], \"Test case 1 failed\"\n    assert ntimes_list([0, 1, 2], 5) == [0, 5, 10], \"Test case 2 failed\"\n    assert ntimes_list([-1, -2, -3], 4) == [-4, -8, -12], \"Test case 3 failed\"\n    assert ntimes_list([10], 10) == [100], \"Test case 4 failed\"\n    assert ntimes_list([], 3) == [], \"Test case 5 failed\"  # Edge case: empty list\n\n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 37)", "passed": false}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Using the count method of tuple to find the number of occurrences of value\n    return tuplex.count(value)\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Test case\n    result = count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    print(f\"The value 4 appears {result} times in the tuple.\")\n    \n    # Additional test cases\n    assert count_tuplex((1, 2, 3, 1, 1, 4), 1) == 3, \"Test case 1 failed\"\n    assert count_tuplex((5, 5, 5, 5, 5), 5) == 5, \"Test case 2 failed\"\n    assert count_tuplex((1, 2, 3), 4) == 0, \"Test case 3 failed\"\n    assert count_tuplex((), 1) == 0, \"Test case 4 failed\"  # Edge case: empty tuple\n    assert count_tuplex((None, None, 1), None) == 2, \"Test case 5 failed\"  # Edge case: counting None\n\n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 1)", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 1)\n    2\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    >>> test_three_equal(1, 1, 2)\n    2\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Compare the integers and count the equal ones\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 or 2)\n    return count\n\n# Main program to test the function\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of the test_three_equal function\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 63)", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Extract the vowels from the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Main program execution\nif __name__ == \"__main__\":\n    # Run the test cases\n    test_reverse_vowels()", "result": "failed: invalid non-printable character U+00A0 (<string>, line 63)", "passed": false}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the elements at the K-th index in each tuple of the given list.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    product = 1  # Initialize product variable\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element to the product\n        product *= tup[K]\n    \n    return product\n\n# Main program to test the function\nif __name__ == \"__main__\":\n    # Test cases\n    try:\n        assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n        assert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96  # 4 * 3 * 8\n        assert find_k_product([(1, 2), (3, 4)], 0) == 3  # 1 * 3\n        assert find_k_product([(10, 20), (30, 40), (50, 60)], 1) == 48000  # 20 * 40 * 60\n        assert find_k_product([], 0)  # Should raise ValueError\n    except AssertionError:\n        print(\"A test case failed.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 51)", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the provided list\n    for sublist in lst:\n        # Check if the sublist is empty\n        if not sublist:\n            raise ValueError(\"All sublists must contain at least one element.\")\n        # Append the first element of the sublist to the result list\n        first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Example usage\n    example_input = [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n    result = Extract(example_input)\n    print(\"Extracted first elements:\", result)  # Expected output: [1, 3, 6]\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40]\n    \n    # Edge case: testing with empty sublists\n    try:\n        Extract([[], [1, 2]])\n    except ValueError as e:\n        assert str(e) == \"All sublists must contain at least one element.\"\n    \n    # Edge case: testing with all empty sublists\n    try:\n        Extract([[], []])\n    except ValueError as e:\n        assert str(e) == \"All sublists must contain at least one element.\"\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_Extract()\n    print(\"All tests passed successfully.\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 63)", "passed": false}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p using iterative approach.\"\"\"\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Calculate n!, r!, and (n-r)!\n    num = factorial_mod(n, p)\n    denom_r = factorial_mod(r, p)\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n    \n    return (num * denom_inv) % p\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6\n\n# Main program starts here\nif __name__ == \"__main__\":\n    # Example usage\n    n = 10\n    r = 2\n    p = 13\n    print(f\"The value of {n}C{r} % {p} is: {ncr_modp(n, r, p)}\")", "result": "failed: invalid non-printable character U+00A0 (<string>, line 55)", "passed": false}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a contains the GCD\n\n# Test cases to validate the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can handle it as a special case\n\n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, return it\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Main program execution\nif __name__ == \"__main__\":\n    test_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Using an iterative approach to calculate the Fibonacci number\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Main program to test the fibonacci function\nif __name__ == \"__main__\":\n    # Test cases\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not arr:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Main program to demonstrate the function\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality of max_value function\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([10]) == 10, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    # Edge case: testing with an empty list\n    try:\n        max_value([])\n    except ValueError as e:\n        print(e)  # Expected output: The input list cannot be empty.\n\n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Main program execution\nif __name__ == \"__main__\":\n    test_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Main program execution\nif __name__ == \"__main__\":\n    # Run the test cases\n    test_longest_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Main program execution\nif __name__ == \"__main__\":\n    test_longest_common_prefix()", "result": "failed: invalid syntax (<string>, line 6)", "passed": false}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize a 2D list with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, increment the length of the common substring\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return max_length\n\n# Test cases to validate the functionality of the longest_common_substring function\nif __name__ == \"__main__\":\n    # Test case 1: Example from the prompt\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"  # 'ell'\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"    # 'abc'\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"    # No common substring\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"       # Empty string\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"       # Empty string\n    assert longest_common_substring('a', 'a') == 1, \"Test case 7 failed\"        # Single character match\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 8 failed\"  # 'abcd'\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given square matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the square matrix to be rotated.\n    \n    Returns:\n    list of list of int: A new 2D list representing the rotated matrix.\n    \n    Raises:\n    ValueError: If the input matrix is not square.\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or len(matrix) != len(matrix[0]):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n    \n    n = len(matrix)\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n    \n    # Fill the rotated matrix\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n    \n    return rotated\n\n# Main program to test the rotate_matrix function\nif __name__ == \"__main__\":\n    # Test case: 3x3 matrix\n    original_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected_output = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix(original_matrix) == expected_output, \"Test case 1 failed\"\n\n    # Additional test case: 2x2 matrix\n    original_matrix_2x2 = [[1, 2], [3, 4]]\n    expected_output_2x2 = [[3, 1], [4, 2]]\n    assert rotate_matrix(original_matrix_2x2) == expected_output_2x2, \"Test case 2 failed\"\n\n    # Additional test case: 1x1 matrix\n    original_matrix_1x1 = [[1]]\n    expected_output_1x1 = [[1]]\n    assert rotate_matrix(original_matrix_1x1) == expected_output_1x1, \"Test case 3 failed\"\n\n    # Additional test case: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty square matrix.\", \"Test case 4 failed\"\n\n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    # Build the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in dp[len(s1)][len(s2)]\n    return dp[len(s1)][len(s2)]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Provided test case\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case failed!\"\n    \n    # Additional test cases\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case failed!\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case failed!\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case failed!\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case failed!\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case failed!\"\n    assert longest_common_subsequence('', '') == 0, \"Test case failed!\"\n    \n    print(\"All test cases passed!\")", "result": "failed: invalid syntax (<string>, line 5)", "passed": false}
