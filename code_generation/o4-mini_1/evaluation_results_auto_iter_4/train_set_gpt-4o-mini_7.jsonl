{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Use list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    # Test with normal cases\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Test with empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]  # Should skip the empty sublist\n    \n    # Test with all empty sublists\n    assert Extract([[], [], []]) == []  # Should return an empty list\n    \n    # Test with a single sublist\n    assert Extract([[42]]) == [42]  # Should return the first element of the single sublist\n    \n    # Test with mixed types\n    assert Extract([[1.1, 2], ['hello', 'world'], [True, False]]) == [1.1, 'hello', True]\n\n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute all non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    # Test with a string containing special characters\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    \n    # Test with a string that has only alphanumeric characters\n    assert remove_splchar('HelloWorld123') == 'HelloWorld123'\n    \n    # Test with a string that has only special characters\n    assert remove_splchar('!@#$%^&*()') == ''\n    \n    # Test with an empty string\n    assert remove_splchar('') == ''\n    \n    # Test with a string that has spaces and punctuation\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    \n    # Test with a string that has mixed characters\n    assert remove_splchar('Python3.8 is great!') == 'Python38isgreat'\n    \n    # Test with unicode characters\n    assert remove_splchar('Caf\u00e9123') == 'Caf123'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Use the count method of the tuple to count occurrences of the value\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of the count_tuplex function\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of 4 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Count occurrences of 2 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2, \"Test case 2 failed\"\n    \n    # Test case 3: Count occurrences of 7 in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 7) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: Count occurrences of a value not in the tuple\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 10) == 0, \"Test case 4 failed\"\n    \n    # Test case 5: Count occurrences in an empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test Case 1 Failed\"\n    assert profit_amount(1500, 1800) == 300.0, \"Test Case 2 Failed\"\n    assert profit_amount(1000, 1000) is None, \"Test Case 3 Failed\"\n    assert profit_amount(2000, 2500) == 500.0, \"Test Case 4 Failed\"\n    assert profit_amount(500, 600) == 100.0, \"Test Case 5 Failed\"\n    assert profit_amount(100, 50) is None, \"Test Case 6 Failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    # Test with mixed case string\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    \n    # Test with all uppercase string\n    assert remove_lowercase('KDA') == 'KDA'\n    \n    # Test with all lowercase string\n    assert remove_lowercase('abcdefg') == ''\n    \n    # Test with empty string\n    assert remove_lowercase('') == ''\n    \n    # Test with string containing no lowercase letters\n    assert remove_lowercase('1234!@#$%^&*()') == '1234!@#$%^&*()'\n    \n    # Test with string containing only lowercase letters and special characters\n    assert remove_lowercase('!@#$%^&*()abcdefg') == '!@#$%^&*()'\n    \n    # Test with string containing a mix of characters\n    assert remove_lowercase('HelloWorld123') == 'HW123'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list 'nums' by the integer 'n'\n    and returns a new list containing the results.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list with each element multiplied by 'n'.\n    \n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use map to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test with a standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with n = 0 (should return a list of zeros)\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with n = 1 (should return the same list)\n    assert ntimes_list([1, 2, 3], 1) == [1, 2, 3]\n    \n    # Test with negative n (should return negative values)\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with an empty list (should return an empty list)\n    assert ntimes_list([], 5) == []\n    \n    # Test with a single element list\n    assert ntimes_list([10], 4) == [40]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a count variable to keep track of equal numbers\n    count = 0\n    \n    # Check if the first number is equal to the second\n    if x == y:\n        count += 1\n    \n    # Check if the first number is equal to the third\n    if x == z:\n        count += 1\n    \n    # Check if the second number is equal to the third\n    if y == z:\n        count += 1\n    \n    # If all three numbers are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 for each pair of equal numbers)\n    return count\n\n# Test cases to validate the functionality of the test_three_equal function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in the given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the indices of the vowels in the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    \n    # Extract the vowels from the string\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 7 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from a list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Extract the K-th index elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if len(tup) <= K:\n            raise IndexError(f\"Tuple {tup} does not have an index {K}.\")\n        k_elements.append(tup[K])\n    \n    # Calculate the product of the extracted elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Test cases to validate the functionality of the find_k_product function\ndef test_find_k_product():\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: All elements are 1\n    assert find_k_product([(1, 1, 1), (1, 1, 1), (1, 1, 1)], 2) == 1, \"Test case 2 failed\"\n    \n    # Test case 3: Single tuple\n    assert find_k_product([(10, 20, 30)], 1) == 20, \"Test case 3 failed\"\n    \n    # Test case 4: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 4 failed\"\n    \n    # Test case 5: Tuple with insufficient elements\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"Tuple (1, 2) does not have an index 2.\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/402", "completion": "def power_mod(base, exp, mod):\n    \"\"\"\n    Computes (base^exp) % mod using iterative exponentiation by squaring.\n    This is efficient and works well for large numbers.\n    \"\"\"\n    result = 1\n    base = base % mod  # Handle base larger than mod\n    while exp > 0:\n        # If exp is odd, multiply base with result\n        if (exp % 2) == 1:\n            result = (result * base) % mod\n        # Now exp must be even\n        exp = exp >> 1  # Divide exp by 2\n        base = (base * base) % mod  # Square the base\n    return result\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Computes nCr % p using the formula nCr = n! / (r! * (n - r)!)\n    and Fermat's Little Theorem for modular inverse.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # If r is greater than n, nCr is 0\n    if r > n:\n        return 0\n    \n    # Precompute all factorials and their modular inverses\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use Fermat's Little Theorem to find the modular inverse of denominator\n    denominator_inv = power_mod(denominator, p - 2, p)\n    \n    # Final result\n    return (numerator * denominator_inv) % p\n\n# Test cases to validate the functionality of ncr_modp\ndef test_ncr_modp():\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 3, 5) == 0, \"Test case 3 failed\"  # 120 % 5 = 0\n    assert ncr_modp(0, 0, 7) == 1, \"Test case 4 failed\"  # 0C0 = 1\n    assert ncr_modp(10, 10, 11) == 1, \"Test case 5 failed\"  # 10C10 = 1\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 6 failed\"  # 10C5 = 252\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ncr_modp()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Compute Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b  # b is now the n-th Fibonacci number\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    # Edge case: testing a negative input\n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case for negative input failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    >>> gcd(56, 98)\n    14\n    >>> gcd(101, 10)\n    1\n    >>> gcd(0, 5)\n    5\n    >>> gcd(5, 0)\n    5\n    >>> gcd(0, 0)\n    Raises ValueError: GCD is not defined for both numbers being zero.\n    \"\"\"\n    if a == 0 and b == 0:\n        raise ValueError(\"GCD is not defined for both numbers being zero.\")\n    \n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # Return the absolute value of GCD\n\n# Test cases to validate the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    \n    try:\n        gcd(0, 0)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_gcd()"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n    TypeError: If the list contains non-integer elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"List cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of max_value\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 2, 3, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value([])  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"List cannot be empty.\", \"Test case 6 failed\"\n    \n    try:\n        max_value(\"not a list\")  # Should raise ValueError\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\", \"Test case 7 failed\"\n    \n    try:\n        max_value([1, 2, 'three'])  # Should raise TypeError\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be integers.\", \"Test case 8 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Get the number of rows and columns\n    n = len(matrix)\n    m = len(matrix[0])\n\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(m)]\n\n    # Fill the rotated matrix with the appropriate values\n    for i in range(n):\n        for j in range(m):\n            rotated[j][n - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases to validate the functionality of the rotate_matrix function\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Rectangular matrix (more rows than columns)\n    assert rotate_matrix([[1, 2], [3, 4], [5, 6]]) == [[5, 3, 1], [6, 4, 2]]\n    \n    # Test case 6: Rectangular matrix (more columns than rows)\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, update the dp value\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length if needed\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Test cases to validate the functionality of the longest_common_substring function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_prefix(['a']) == 'a', \"Test case 6 failed\"\n    assert longest_prefix([]) == '', \"Test case 7 failed\"\n    assert longest_prefix(['']) == '', \"Test case 8 failed\"\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a', \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, there is no common prefix\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_common_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_common_prefix([]) == '', \"Test case 6 failed\"  # Edge case: empty list\n    assert longest_common_prefix(['single']) == 'single', \"Test case 7 failed\"  # Edge case: single string\n    assert longest_common_prefix(['a']) == 'a', \"Test case 8 failed\"  # Edge case: single character string\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[m][n]\n    return dp[m][n]\n\n# Test cases to validate the functionality of the longest_common_subsequence function\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 4 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 6 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('abcdef', 'acf') == 3, \"Test case 8 failed\"\n    assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_subsequence()"}
