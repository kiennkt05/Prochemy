{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1200, 1500)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\ndef test_profit_amount():\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    assert profit_amount(1200, 1500) == 300, \"Test case 2 failed\"\n    assert profit_amount(1000, 1000) is None, \"Test case 3 failed\"\n    assert profit_amount(500, 700) == 200, \"Test case 4 failed\"\n    assert profit_amount(100, 150) == 50, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_profit_amount()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string containing only uppercase letters.\n    \n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = 'KDeoALOklOOHserfLoAJSIskdsf'\n    print(remove_lowercase(test_string))  # Output: 'KDALOOOHLAJSI'"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with the provided assertion\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    print(\"Function works correctly for the provided test case.\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the specified value in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Using the count method of tuple to find the number of occurrences of value\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    # Test case 1: Basic test with multiple occurrences\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test case 1 failed\"\n    \n    # Test case 2: Value not present in the tuple\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test case 2 failed\"\n    \n    # Test case 3: Value appears once\n    assert count_tuplex((1, 2, 3, 4, 5), 3) == 1, \"Test case 3 failed\"\n    \n    # Test case 4: All elements are the same\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test case 4 failed\"\n    \n    # Test case 5: Empty tuple\n    assert count_tuplex((), 1) == 0, \"Test case 5 failed\"\n    \n    # Test case 6: Tuple with mixed types\n    assert count_tuplex((1, 'a', 2, 'a', 3), 'a') == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check if the first and second numbers are equal\n    if x == y:\n        count += 1\n    \n    # Check if the first and third numbers are equal\n    if x == z:\n        count += 1\n    \n    # Check if the second and third numbers are equal\n    if y == z:\n        count += 1\n    \n    # If all three numbers are equal, we count them as three equal numbers\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs (1 for each pair of equal numbers)\n    return count\n\n# Test cases to validate the functionality of the test_three_equal function\ndef run_tests():\n    \"\"\"\n    Run a series of tests to validate the test_three_equal function.\n    \"\"\"\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 5 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 6 failed\"\n    assert test_three_equal(5, 5, 10) == 2, \"Test case 7 failed\"\n    assert test_three_equal(10, 20, 30) == 0, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list 'nums' by the integer 'n' using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing the results of the multiplication.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use the map function to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test case 1: Standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test case 2: Multiplying by zero\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test case 4: Empty list\n    assert ntimes_list([], 5) == []\n    \n    # Test case 5: Single element list\n    assert ntimes_list([10], 4) == [40]\n    \n    # Test case 6: Large numbers\n    assert ntimes_list([1000, 2000, 3000], 2) == [2000, 4000, 6000]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n\n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty to avoid IndexError\n        if sublist:\n            # Append the first element of the sublist to the result list\n            first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    # Test with normal cases\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Test with empty sublists\n    assert Extract([[1, 2], [], [3, 4]]) == [1, 3]\n    \n    # Test with all empty sublists\n    assert Extract([[], [], []]) == []\n    \n    # Test with a single sublist\n    assert Extract([[42]]) == [42]\n    \n    # Test with a single empty sublist\n    assert Extract([[]]) == []\n    \n    # Test with mixed types\n    assert Extract([[1.1, 2], ['hello', 'world'], [True, False]]) == [1.1, 'hello', True]\n\n    print(\"All tests passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses only the vowels in the given string while keeping the consonants in their original positions.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modification\n    str_list = list(str1)\n    \n    # Initialize two pointers for the start and end of the string\n    left, right = 0, len(str_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example usage\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"hello\") == \"holle\"\nassert reverse_vowels(\"leetcode\") == \"leotcede\"\nassert reverse_vowels(\"aA\") == \"Aa\"\nassert reverse_vowels(\" \") == \" \""}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from a list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Extract the K-th index elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        # Check if the current tuple has enough elements\n        if len(tup) <= K:\n            raise IndexError(f\"Tuple {tup} does not have an index {K}.\")\n        k_elements.append(tup[K])\n    \n    # Calculate the product of the extracted elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Test cases to validate the functionality of the find_k_product function\ndef test_find_k_product():\n    # Test case 1: Standard case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Test case 2: All elements are 1\n    assert find_k_product([(1, 1, 1), (1, 1, 1), (1, 1, 1)], 2) == 1, \"Test case 2 failed\"\n    \n    # Test case 3: Single tuple\n    assert find_k_product([(10, 20, 30)], 1) == 20, \"Test case 3 failed\"\n    \n    # Test case 4: Empty list\n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 4 failed\"\n    \n    # Test case 5: Tuple with insufficient elements\n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"Tuple (1, 2) does not have an index 2.\", \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/402", "completion": "def power_mod(base, exp, mod):\n    \"\"\"Computes (base^exp) % mod using iterative exponentiation by squaring.\"\"\"\n    result = 1\n    base = base % mod\n    while exp > 0:\n        if (exp % 2) == 1:  # If exp is odd, multiply base with result\n            result = (result * base) % mod\n        exp = exp >> 1  # Divide exp by 2\n        base = (base * base) % mod  # Square the base\n    return result\n\ndef factorial_mod(n, p):\n    \"\"\"Computes n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Computes the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Calculate n!, r!, and (n-r)!\n    num = factorial_mod(n, p)\n    denom_r = factorial_mod(r, p)\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate the modular inverse of the denominator\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = power_mod(denom, p - 2, p)  # Using Fermat's Little Theorem\n    \n    # Calculate nCr % p\n    result = (num * denom_inv) % p\n    return result\n\n# Test case\nassert ncr_modp(10, 2, 13) == 6"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list starting from the second string\n    for s in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while not s.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, update the dp value\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                # Update max_length if we found a longer common substring\n                max_length = max(max_length, dp[i][j])\n            else:\n                # If characters do not match, reset the dp value\n                dp[i][j] = 0\n    \n    return max_length\n\n# Example assertion to test the function\nassert longest_common_substring('abcdef', 'zcdemf') == 2"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a is the GCD\n\n# Test case to validate the function\nassert gcd(48, 18) == 6, \"Test case failed!\"\nprint(\"Test case passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n\n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"List must not be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of max_value\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\", \"Test case 6 failed\"\n    \n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"List must not be empty.\", \"Test case 7 failed\"\n    \n    try:\n        max_value([1, 2, 'three'])\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers.\", \"Test case 8 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Iterate through the strings in the list starting from the second string\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n\n    return prefix\n\n# Example usage\nassert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return matrix  # Return the same empty matrix\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Test cases to validate the functionality of the rotate_matrix function\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Rectangular matrix (3x2)\n    assert rotate_matrix([[1, 2], [3, 4], [5, 6]]) == [[5, 3, 1], [6, 4, 2]]\n    \n    # Test case 6: Rectangular matrix (2x3)\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists.\n    \"\"\"\n    # Edge case: If the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the common prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the current prefix with the next string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If at any point the prefix becomes empty, return it\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl', \"Test case 1 failed\"\n    assert longest_prefix(['dog', 'racecar', 'car']) == '', \"Test case 2 failed\"\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters', \"Test case 3 failed\"\n    assert longest_prefix(['throne', 'dungeon']) == '', \"Test case 4 failed\"\n    assert longest_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch', \"Test case 5 failed\"\n    assert longest_prefix([]) == '', \"Test case 6 failed\"  # Edge case: empty list\n    assert longest_prefix(['single']) == 'single', \"Test case 7 failed\"  # Edge case: single string\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[m][n]\n    return dp[m][n]\n\n# Test case to validate the function\nassert longest_common_subsequence('abcde', 'ace') == 3"}
