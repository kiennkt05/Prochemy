{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Use the count method of the tuple to count occurrences of the value\n    return tuplex.count(value)\n\n# Testing the function with the provided test case\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n\n# Additional test cases\nassert count_tuplex((1, 2, 3, 4, 5), 6) == 0  # Value not in tuple\nassert count_tuplex((1, 1, 1, 1, 1), 1) == 5  # All elements are the same\nassert count_tuplex((), 1) == 0  # Empty tuple\nassert count_tuplex((1, 2, 3, 1, 2, 1), 1) == 3  # Multiple occurrences\n\nprint(\"All tests passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \n    Example:\n    >>> remove_splchar('python \u00c2\u00a0@#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute all non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\ndef test_remove_splchar():\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('') == ''\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('abc123!@#xyz') == 'abc123xyz'\n    assert remove_splchar('Python3.8') == 'Python38'\n    assert remove_splchar('Spaces   and   tabs\\t') == 'Spacesandtabs'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_splchar()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Use regex to substitute all lowercase letters with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    \n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('abcDEFghiJKL') == 'DEFJKL'\n    assert remove_lowercase('123abcXYZ') == '123XYZ'\n    assert remove_lowercase('') == ''  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # Edge case: all uppercase\n    assert remove_lowercase('lowercase') == ''  # Edge case: all lowercase\n    assert remove_lowercase('MixedCASE123') == 'MC123'  # Mixed case with numbers\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_remove_lowercase()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist from a list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist.\n\n    Raises:\n    ValueError: If any sublist is empty.\n    \n    Example:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    # Initialize an empty list to store the first elements\n    first_elements = []\n    \n    # Iterate through each sublist in the provided list\n    for sublist in lst:\n        # Check if the sublist is empty\n        if not sublist:\n            raise ValueError(\"One of the sublists is empty.\")\n        # Append the first element of the sublist to the result list\n        first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Valid test case\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \n    # Additional test cases\n    assert Extract([[10, 20], [30], [40, 50, 60]]) == [10, 30, 40]\n    assert Extract([['a', 'b'], ['c', 'd', 'e'], ['f']]) == ['a', 'c', 'f']\n    \n    # Test case with an empty sublist (should raise ValueError)\n    try:\n        Extract([[1, 2], [], [3, 4]])\n    except ValueError as e:\n        print(e)  # Expected output: One of the sublists is empty."}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # If profit is positive, return the profit amount; otherwise, return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\nif __name__ == \"__main__\":\n    # Test case 1: Sale amount is less than actual cost\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    \n    # Test case 2: Sale amount is greater than actual cost\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 2 failed\"\n    \n    # Test case 3: Sale amount is equal to actual cost\n    assert profit_amount(1500, 1500) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Sale amount is significantly higher than actual cost\n    assert profit_amount(1000, 5000) == 4000.0, \"Test case 4 failed\"\n    \n    # Test case 5: Sale amount is a negative value\n    assert profit_amount(1500, -200) is None, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by n using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be multiplied.\n    n (int): The multiplier.\n\n    Returns:\n    list: A new list containing each element of nums multiplied by n.\n\n    Example:\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"The second argument must be an integer or float.\")\n    \n    # Use map to multiply each element in the list by n\n    result = list(map(lambda x: x * n, nums))\n    \n    return result\n\n# Test cases to validate the functionality of the ntimes_list function\ndef test_ntimes_list():\n    # Test with a standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    \n    # Test with n = 0 (should return a list of zeros)\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0]\n    \n    # Test with negative n (should return negative values)\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6]\n    \n    # Test with an empty list (should return an empty list)\n    assert ntimes_list([], 5) == []\n    \n    # Test with float values\n    assert ntimes_list([1.5, 2.5, 3.5], 2) == [3.0, 5.0, 7.0]\n    \n    # Test with large numbers\n    assert ntimes_list([1000000, 2000000], 3) == [3000000, 6000000]\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_ntimes_list()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(1, 2, 2)\n    2\n    \"\"\"\n    # Create a set to find unique values\n    unique_values = {x, y, z}\n    \n    # Count how many times each unique value appears\n    count = 0\n    if x == y == z:\n        count = 3  # All three are equal\n    elif x == y or y == z or x == z:\n        count = 2  # Two are equal\n    else:\n        count = 0  # None are equal\n    \n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 2 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 2) == 2, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 7 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 8 failed\"\n    assert test_three_equal(5, 5, 6) == 2, \"Test case 9 failed\"\n    assert test_three_equal(5, 6, 7) == 0, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements in a list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    # Check if the input list is empty\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        \n        # Multiply the K-th index element to the product\n        product *= tup[K]\n    \n    return product\n\n# Test cases to validate the functionality of the find_k_product function\ndef test_find_k_product():\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    assert find_k_product([(2, 4, 6), (1, 3, 5), (7, 8, 9)], 1) == 96, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 15, \"Test case 3 failed\"\n    assert find_k_product([(10, 20), (30, 40)], 1) == 800, \"Test case 4 failed\"\n    \n    try:\n        find_k_product([], 0)\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty.\", \"Test case 5 failed\"\n    \n    try:\n        find_k_product([(1, 2)], 2)\n    except IndexError as e:\n        assert str(e) == \"K=2 is out of bounds for tuple (1, 2).\", \"Test case 6 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_find_k_product()"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverses the vowels in the given string while keeping the other characters in their original positions.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the input string to a list to allow modification\n    str_list = list(str1)\n    \n    # Initialize two pointers for the start and end of the list\n    left, right = 0, len(str_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\"\") == \"\", \"Test case 5 failed\"\n    assert reverse_vowels(\"bcd\") == \"bcd\", \"Test case 6 failed\"\n    assert reverse_vowels(\"UOIEA\") == \"AEIOU\", \"Test case 7 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \n    Raises:\n    ValueError: If r > n, since nCr is not defined in that case.\n    \n    Example:\n    >>> ncr_modp(10, 2, 13)\n    6\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n.\")\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    # Additional test cases\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(6, 3, 5) == 4, \"Test case 3 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 4 failed\"\n    assert ncr_modp(0, 0, 7) == 1, \"Test case 5 failed\"  # 0C0 is 1\n    try:\n        ncr_modp(5, 6, 7)  # This should raise an error\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: A new 2D list representing the rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n\n    return transposed\n\n# Test cases to validate the functionality of the rotate_matrix function\ndef test_rotate_matrix():\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x2 matrix\n    assert rotate_matrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\n    \n    # Test case 3: 1x1 matrix\n    assert rotate_matrix([[1]]) == [[1]]\n    \n    # Test case 4: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 5: Non-square matrix should raise ValueError\n    try:\n        rotate_matrix([[1, 2], [3, 4], [5, 6]])\n    except ValueError as e:\n        assert str(e) == \"Input must be a square matrix.\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_rotate_matrix()"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        assert False, \"Test case for negative input failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_fibonacci()"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    \"\"\"\n    # Ensure that the inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a to b and b to a % b\n    return abs(a)  # Return the absolute value of GCD\n\n# Testing the function with the provided test case\nassert gcd(48, 18) == 6, \"Test case failed!\"\nprint(\"Test case passed!\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the common prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\ndef test_longest_prefix():\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'throne']) == 'throne'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    assert longest_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n    \n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Initialize max_value with the first element of the list\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Test cases to validate the functionality of the max_value function\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list.\", \"Test case 6 failed\"\n    \n    try:\n        max_value([1, 2, '3'])\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers.\", \"Test case 7 failed\"\n    \n    try:\n        max_value([])\n    except ValueError as e:\n        assert str(e) == \"The list cannot be empty.\", \"Test case 8 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['single']) == 'single'\n    assert longest_common_prefix(['same', 'same', 'same']) == 'same'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n\n    Example:\n    >>> longest_common_substring('abcdef', 'zcdemf')\n    2\n    \"\"\"\n    # Handle edge cases where either string is empty\n    if not s1 or not s2:\n        return 0\n\n    # Initialize a 2D array to store lengths of common substrings\n    m, n = len(s1), len(s2)\n    # Create a 2D list initialized to 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    longest_length = 0  # Variable to keep track of the longest length found\n\n    # Fill the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length of common substring\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring at this position\n\n    return longest_length  # Return the length of the longest common substring\n\n\n# Test cases to validate the functionality of the longest_common_substring function\ndef test_longest_common_substring():\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yell') == 3, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    assert longest_common_substring('abcdxyz', 'xyzabcd') == 4, \"Test case 10 failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_substring()"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the table in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return table[m][n]\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_subsequence('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_subsequence('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")"}
