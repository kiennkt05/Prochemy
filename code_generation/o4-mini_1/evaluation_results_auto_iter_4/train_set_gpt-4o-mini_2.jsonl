{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase letters from the input string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase letters will be removed.\n\n    Returns:\n    str: A new string with all lowercase letters removed.\n\n    Example:\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    \"\"\"\n    # Use regex to substitute all lowercase letters (a-z) with an empty string\n    result = re.sub(r'[a-z]', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\ndef test_remove_lowercase():\n    assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert remove_lowercase('abcDEFghiJKL') == 'DEFJKL'\n    assert remove_lowercase('123abcXYZ') == '123XYZ'\n    assert remove_lowercase('') == ''  # Edge case: empty string\n    assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'  # Edge case: all uppercase\n    assert remove_lowercase('lowercase') == ''  # Edge case: all lowercase\n    assert remove_lowercase('MixedCASE123') == 'MC123'  # Mixed case with numbers\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_lowercase()\n    print(\"All tests passed!\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list of lists.\n\n    Args:\n        lst (list of list): A list containing sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Example:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6], \"Test case 1 failed\"\n    assert Extract([[10], [20, 30], [40, 50, 60]]) == [10, 20, 40], \"Test case 2 failed\"\n    assert Extract([[], [1, 2], [3]]) == [1, 3], \"Test case 3 failed\"  # Handling empty sublist\n    assert Extract([[], [], []]) == [], \"Test case 4 failed\"  # All sublists are empty\n    assert Extract([[1], [], [2], [3, 4]]) == [1, 2, 3], \"Test case 5 failed\"  # Mixed empty and non-empty\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_Extract()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Multiplies each element in the input list by a given integer n.\n\n    Args:\n        nums (list): A list of numbers to be multiplied.\n        n (int): The multiplier.\n\n    Returns:\n        list: A new list containing the results of multiplying each element in nums by n.\n\n    Example:\n        >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n        [3, 6, 9, 12, 15, 18, 21]\n    \"\"\"\n    # Use the map function to apply the multiplication to each element in the list\n    return list(map(lambda x: x * n, nums))\n\n# Test cases to validate the functionality of the ntimes_list function\nif __name__ == \"__main__\":\n    # Test case 1: Standard case\n    assert ntimes_list([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21], \"Test case 1 failed\"\n    \n    # Test case 2: Multiplying by zero\n    assert ntimes_list([1, 2, 3], 0) == [0, 0, 0], \"Test case 2 failed\"\n    \n    # Test case 3: Multiplying by a negative number\n    assert ntimes_list([1, 2, 3], -2) == [-2, -4, -6], \"Test case 3 failed\"\n    \n    # Test case 4: Empty list\n    assert ntimes_list([], 5) == [], \"Test case 4 failed\"\n    \n    # Test case 5: Single element list\n    assert ntimes_list([10], 4) == [40], \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n\n    Example:\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    \"\"\"\n    # Use the count method of the tuple to find the number of occurrences of the value\n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\ndef test_count_tuplex():\n    assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3, \"Test Case 1 Failed\"\n    assert count_tuplex((1, 1, 1, 1, 1), 1) == 5, \"Test Case 2 Failed\"\n    assert count_tuplex((1, 2, 3, 4, 5), 6) == 0, \"Test Case 3 Failed\"\n    assert count_tuplex((), 1) == 0, \"Test Case 4 Failed\"  # Edge case: empty tuple\n    assert count_tuplex((1, 2, 3, 4, 5), 5) == 1, \"Test Case 5 Failed\"\n    assert count_tuplex((1, 2, 2, 2, 3, 4, 2), 2) == 4, \"Test Case 6 Failed\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_count_tuplex()"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the K-th index elements from each tuple in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the K-th index elements.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    \n    Example:\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    \"\"\"\n    product = 1\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"K index {K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test case\n    assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665, \"Test case 1 failed\"\n    \n    # Additional test cases\n    assert find_k_product([(2, 3, 4), (5, 6, 7), (8, 9, 10)], 1) == 3 * 6 * 9, \"Test case 2 failed\"\n    assert find_k_product([(1, 2), (3, 4), (5, 6)], 0) == 1 * 3 * 5, \"Test case 3 failed\"\n    \n    # Edge case: K is out of bounds\n    try:\n        find_k_product([(1, 2), (3, 4)], 2)\n    except IndexError as e:\n        print(e)  # Expected output: K index 2 is out of bounds for tuple (1, 2).\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove all non-alphanumeric characters from the input string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A new string containing only alphanumeric characters.\n\n    Example:\n    >>> remove_splchar('python \u00c2\u00a0@#&^%$*program123')\n    'pythonprogram123'\n    \"\"\"\n    # Use regular expression to substitute all non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of remove_splchar\ndef test_remove_splchar():\n    assert remove_splchar('python \u00c2\u00a0@#&^%$*program123') == 'pythonprogram123'\n    assert remove_splchar('Hello, World! 2023') == 'HelloWorld2023'\n    assert remove_splchar('1234567890') == '1234567890'\n    assert remove_splchar('!@#$%^&*()') == ''\n    assert remove_splchar('') == ''\n    assert remove_splchar('abc123!@#') == 'abc123'\n    assert remove_splchar('Python3.8') == 'Python38'\n    assert remove_splchar('Spaces   and   tabs\\t') == 'Spacesandtabs'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_remove_splchar()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n\n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n\n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Example:\n    >>> profit_amount(1500, 1200)\n    None\n    >>> profit_amount(1500, 1800)\n    300.0\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Test cases to validate the functionality of the profit_amount function\nif __name__ == \"__main__\":\n    # Test case 1: Sale amount is less than actual cost (no profit)\n    assert profit_amount(1500, 1200) is None, \"Test case 1 failed\"\n    \n    # Test case 2: Sale amount is equal to actual cost (no profit)\n    assert profit_amount(1500, 1500) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Sale amount is greater than actual cost (profit)\n    assert profit_amount(1500, 1800) == 300.0, \"Test case 3 failed\"\n    \n    # Test case 4: Sale amount is significantly greater than actual cost (profit)\n    assert profit_amount(1000, 2000) == 1000.0, \"Test case 4 failed\"\n    \n    # Test case 5: Sale amount is less than actual cost (loss)\n    assert profit_amount(2000, 1500) is None, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(s):\n    \"\"\"\n    Reverse only the vowels in a given string.\n\n    Parameters:\n    s (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n\n    Example:\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"hello\")\n    'holle'\n    >>> reverse_vowels(\"leetcode\")\n    'leotcede'\n    >>> reverse_vowels(\"aA\")\n    'Aa'\n    >>> reverse_vowels(\" \")\n    ' '\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Convert the string to a list to allow modification\n    str_list = list(s)\n    \n    # Initialize two pointers\n    left, right = 0, len(str_list) - 1\n    \n    # Use two pointers to find vowels from both ends of the string\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality of the reverse_vowels function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"Python\") == \"Python\", \"Test case 1 failed\"\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 2 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 3 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 4 failed\"\n    assert reverse_vowels(\" \") == \" \", \"Test case 5 failed\"\n    assert reverse_vowels(\"racecar\") == \"racecar\", \"Test case 6 failed\"\n    assert reverse_vowels(\"a quick brown fox jumps over the lazy dog\") == \"e qick brawn fox jomps uver thi lazy dag\", \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal integers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers (0, 1, 2, or 3).\n    \n    Example:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    2\n    >>> test_three_equal(2, 2, 2)\n    3\n    >>> test_three_equal(2, 2, 3)\n    2\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    # If two are equal, we return 2\n    elif count == 2:\n        return 2\n    # If none are equal, we return 0\n    else:\n        return 0\n\n# Test cases to validate the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 2 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 2, 2) == 3, \"Test case 4 failed\"\n    assert test_three_equal(2, 2, 3) == 2, \"Test case 5 failed\"\n    assert test_three_equal(3, 3, 3) == 3, \"Test case 6 failed\"\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 7 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 8 failed\"\n    assert test_three_equal(-1, -1, -1) == 3, \"Test case 9 failed\"\n    assert test_three_equal(1, 1, 0) == 2, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"\n    Computes the factorial of n modulo p.\n    \n    Parameters:\n    n (int): The number to compute the factorial for.\n    p (int): The modulus.\n    \n    Returns:\n    int: n! % p\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"\n    Computes the modular inverse of a under modulo p using Fermat's Little Theorem.\n    \n    Parameters:\n    a (int): The number to find the inverse for.\n    p (int): The modulus (should be prime).\n    \n    Returns:\n    int: The modular inverse of a under modulo p.\n    \"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Computes the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: nCr % p\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Calculate n!, r!, and (n-r)!\n    n_fact = factorial_mod(n, p)\n    r_fact = factorial_mod(r, p)\n    n_r_fact = factorial_mod(n - r, p)\n\n    # Calculate nCr % p using the formula\n    nCr = (n_fact * mod_inverse(r_fact, p) % p * mod_inverse(n_r_fact, p) % p) % p\n    return nCr\n\n# Test cases\nif __name__ == \"__main__\":\n    assert ncr_modp(10, 2, 13) == 6, \"Test case 1 failed\"\n    assert ncr_modp(5, 2, 7) == 3, \"Test case 2 failed\"\n    assert ncr_modp(10, 5, 100) == 252, \"Test case 3 failed\"\n    assert ncr_modp(0, 0, 10) == 1, \"Test case 4 failed\"  # 0C0 is 1\n    assert ncr_modp(5, 0, 10) == 1, \"Test case 5 failed\"  # 5C0 is 1\n    assert ncr_modp(5, 5, 10) == 1, \"Test case 6 failed\"  # 5C5 is 1\n    assert ncr_modp(10, 3, 11) == 4, \"Test case 7 failed\"  # 10C3 % 11\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Example:\n    >>> gcd(48, 18)\n    6\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a contains the GCD\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    # Additional test cases\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string. If there is no common prefix, return an empty string.\n    \n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the common prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, there is no common prefix\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheddar', 'chocolate']) == 'ch'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    \n    :param strs: List of strings to evaluate\n    :return: The longest common prefix as a string. If there is no common prefix, return an empty string.\n    \n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the common prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, there is no common prefix\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'throne']) == 'throne'\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['']) == ''\n    assert longest_common_prefix(['abc', 'ab', 'a']) == 'a'\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string, or an empty string if none exists\n    \n    Example:\n    >>> longest_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start by assuming the first string is the longest common prefix\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Compare the current prefix with the next string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix\n\n# Test cases to validate the functionality of the longest_prefix function\nif __name__ == \"__main__\":\n    assert longest_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\n    assert longest_prefix(['throne', 'dungeon']) == ''\n    assert longest_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_prefix(['a']) == 'a'\n    assert longest_prefix([]) == ''\n    assert longest_prefix(['']) == ''\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \n    Example:\n    >>> fibonacci(5)\n    5\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Using an iterative approach to calculate the Fibonacci number\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\ndef test_fibonacci():\n    \"\"\"\n    Run a series of tests to validate the fibonacci function.\n    \"\"\"\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nif __name__ == \"__main__\":\n    test_fibonacci()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n\n    return prefix\n\n# Test cases to validate the functionality\ndef test_longest_common_prefix():\n    assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\n    assert longest_common_prefix(['dog', 'racecar', 'car']) == ''\n    assert longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\n    assert longest_common_prefix(['throne', 'dungeon']) == ''\n    assert longest_common_prefix(['cheese', 'cheese', 'cheese']) == 'cheese'\n    assert longest_common_prefix([]) == ''\n    assert longest_common_prefix(['a']) == 'a'\n    assert longest_common_prefix(['ab', 'a']) == 'a'\n    assert longest_common_prefix(['abc', 'abcd', 'ab']) == 'ab'\n\n# Run the test cases\nif __name__ == \"__main__\":\n    test_longest_common_prefix()\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Args:\n    matrix (list of list of int): The input matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Example:\n    >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n\n    # Get the number of rows and columns\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Create a new matrix with swapped dimensions\n    rotated = [[0] * rows for _ in range(cols)]\n\n    # Fill the new matrix with rotated values\n    for i in range(rows):\n        for j in range(cols):\n            rotated[j][rows - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Standard 3x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    \n    # Test case 2: 2x3 matrix\n    assert rotate_matrix([[1, 2, 3], [4, 5, 6]]) == [[4, 1], [5, 2], [6, 3]]\n    \n    # Test case 3: 1x3 matrix\n    assert rotate_matrix([[1, 2, 3]]) == [[1], [2], [3]]\n    \n    # Test case 4: 3x1 matrix\n    assert rotate_matrix([[1], [2], [3]]) == [[3, 2, 1]]\n    \n    # Test case 5: Empty matrix\n    assert rotate_matrix([]) == []\n    \n    # Test case 6: Single element matrix\n    assert rotate_matrix([[1]]) == [[1]]\n\n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or contains non-integer elements.\n\n    Example:\n    >>> max_value([1, 2, 3, 4, 5])\n    5\n    >>> max_value([-1, -2, -3, -4])\n    -1\n    >>> max_value([10])\n    10\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value with the first element of the list\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases\nif __name__ == \"__main__\":\n    # Valid test cases\n    assert max_value([1, 2, 3, 4, 5]) == 5\n    assert max_value([-1, -2, -3, -4]) == -1\n    assert max_value([10]) == 10\n    assert max_value([1, 3, 2, 5, 4]) == 5\n    assert max_value([0, 0, 0]) == 0\n    assert max_value([-5, -1, -10]) == -1\n\n    # Edge case: empty list\n    try:\n        max_value([])\n    except ValueError as e:\n        print(e)  # Expected output: \"The list cannot be empty.\"\n\n    # Edge case: non-integer elements\n    try:\n        max_value([1, 2, '3', 4])\n    except ValueError as e:\n        print(e)  # Expected output: \"All elements in the list must be integers.\"\n\n    # Edge case: not a list\n    try:\n        max_value(\"not a list\")\n    except ValueError as e:\n        print(e)  # Expected output: \"Input must be a list.\""}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    A substring is a contiguous sequence of characters within a string.\n    This function uses dynamic programming to build a table that keeps track\n    of the lengths of common substrings found so far.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \n    Example:\n    >>> longest_common_substring('abcdef', 'zcdemf')\n    2\n    \"\"\"\n    # Get the lengths of both strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    longest_length = 0  # Variable to keep track of the longest length found\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length of common substring\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    assert longest_common_substring('abcdef', 'zcdemf') == 2, \"Test case 1 failed\"\n    assert longest_common_substring('hello', 'yelloh') == 4, \"Test case 2 failed\"\n    assert longest_common_substring('abc', 'abc') == 3, \"Test case 3 failed\"\n    assert longest_common_substring('abc', 'def') == 0, \"Test case 4 failed\"\n    assert longest_common_substring('', 'abc') == 0, \"Test case 5 failed\"\n    assert longest_common_substring('abc', '') == 0, \"Test case 6 failed\"\n    assert longest_common_substring('', '') == 0, \"Test case 7 failed\"\n    assert longest_common_substring('a', 'a') == 1, \"Test case 8 failed\"\n    assert longest_common_substring('a', 'b') == 0, \"Test case 9 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_10", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Calculate the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    m, n = len(s1), len(s2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the table in a bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return table[m][n]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1\n    assert longest_common_subsequence('abcde', 'ace') == 3, \"Test case 1 failed\"\n    # Test case 2\n    assert longest_common_subsequence('abc', 'abc') == 3, \"Test case 2 failed\"\n    # Test case 3\n    assert longest_common_subsequence('abc', 'def') == 0, \"Test case 3 failed\"\n    # Test case 4\n    assert longest_common_subsequence('abcde', 'abc') == 3, \"Test case 4 failed\"\n    # Test case 5\n    assert longest_common_subsequence('', 'abc') == 0, \"Test case 5 failed\"\n    # Test case 6\n    assert longest_common_subsequence('abc', '') == 0, \"Test case 6 failed\"\n    # Test case 7\n    assert longest_common_subsequence('', '') == 0, \"Test case 7 failed\"\n\n    print(\"All test cases passed!\")"}
