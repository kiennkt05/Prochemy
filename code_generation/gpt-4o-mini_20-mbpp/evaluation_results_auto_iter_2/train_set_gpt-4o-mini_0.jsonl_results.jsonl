{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):  \n    \"\"\"\n    Write a function to count repeated items of a tuple.\n    \n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n    \n    Returns:\n    int: The count of occurrences of the specified value in the tuple.\n    \"\"\"\n    return tuplex.count(value)\n\n# Example usage:\nexample_tuplex = (1, 2, 3, 1, 4, 1, 5)\nvalue_to_count = 1\ncount = count_tuplex(example_tuplex, value_to_count)\nprint(f\"The value {value_to_count} appears {count} times in the tuple.\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount): \n    \"\"\"\n    Calculate the profit amount if the sale amount is greater than the actual cost.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None", "result": "failed: ", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in vowel_indices][::-1]\n    \n    str_list = list(str1)\n    \n    for index, vowel in zip(vowel_indices, reversed_vowels):\n        str_list[index] = vowel\n    \n    return ''.join(str_list)\n\n# Example usage:\ninput_string = \"hello world\"\noutput_string = reverse_vowels(input_string)\nprint(output_string)  # Output: \"holle werld\"", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \n    Parameters:\n    lst (list of lists): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5], [6], []]\nresult = Extract(example_list)\nprint(result)  # Output: [1, 4, 6]", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Write a function to print n-times a list using map function.\n    \"\"\"\n    # Use map to repeat each element in the list n times\n    repeated_list = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in repeated_list for item in sublist]\n    \n    return flattened_list\n\n# Example usage\nnums = [1, 2, 3]\nn = 3\nresult = ntimes_list(nums, n)\nprint(result)  # Output: [1, 1, 1, 2, 2, 2, 3, 3, 3]", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal numbers among the three integers\n    \"\"\"\n    equal_count = 0\n    \n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    \n    # If all three are equal, we counted them twice, so we need to adjust\n    if equal_count == 3:\n        return 3  # All three are equal\n    return equal_count\n\n# Example usage:\nprint(test_three_equal(1, 1, 1))  # Output: 3\nprint(test_three_equal(1, 2, 1))  # Output: 2\nprint(test_three_equal(1, 2, 3))  # Output: 0", "result": "failed: ", "passed": false}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text): \n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n\n# Example usage:\ninput_text = \"Hello, World! 123 @#\"\ncleaned_text = remove_splchar(input_text)\nprint(cleaned_text)  # Output: HelloWorld123", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Write a function to find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the array\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # Return empty string if no common prefix\n\n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    :param matrix: List of lists representing the matrix to be rotated\n    :return: New matrix that is the original matrix rotated by 90 degrees clockwise\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty\n\n    # Get the number of rows and columns\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Create a new matrix to hold the rotated values\n    rotated_matrix = [[0] * rows for _ in range(cols)]\n\n    for i in range(rows):\n        for j in range(cols):\n            rotated_matrix[j][rows - 1 - i] = matrix[i][j]\n\n    return rotated_matrix\n\n# Example usage:\noriginal_matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nrotated = rotate_matrix(original_matrix)\nfor row in rotated:\n    print(row)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with lowercase substrings removed.\n    \"\"\"\n    # Use regex to replace all lowercase substrings with an empty string\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello World! This is a Test String.\"\n    modified_string = remove_lowercase(test_string)\n    print(modified_string)  # Output: \"H W! T T S.\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Write a function to find the maximum value in a list of integers.\n    \n    Parameters:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The maximum integer in the list. If the list is empty, returns None.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return None\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Calculate n!, r!, and (n-r)!\n    num = factorial_mod(n, p)\n    denom_r = factorial_mod(r, p)\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n    \n    return (num * denom_inv) % p\n\n# Example usage:\nn = 5\nr = 2\np = 13\nprint(ncr_modp(n, r, p))  # Output: 10", "result": "failed: ", "passed": false}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): The list containing tuples from which to extract the K-th index.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int or float: The product of the elements at the K-th index.\n    \"\"\"\n    product = 1\n    for tup in test_list:\n        if K < len(tup):  # Ensure the K-th index exists in the tuple\n            product *= tup[K]\n        else:\n            raise IndexError(f\"Index {K} is out of range for tuple {tup}\")\n    return product\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 1\nresult = find_k_product(test_list, K)\nprint(f\"The product of elements at index {K} is: {result}\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Write a function to find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strs))  # Output: \"fl\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Write a function to find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the array\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # Return empty string if no common prefix\n\n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    m, n = len(s1), len(s2)\n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    longest_length = 0  # To keep track of the longest length found\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length\n\n# Example usage:\ns1 = \"abcde\"\ns2 = \"abfce\"\nprint(longest_common_substring(s1, s2))  # Output: 2 (the common substring is \"ab\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    m = len(s1)\n    n = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array from the bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence will be in dp[m][n]\n    return dp[m][n]\n\n# Example usage:\ns1 = \"AGGTAB\"\ns2 = \"GXTXAYB\"\nprint(longest_common_subsequence(s1, s2))  # Output: 4 (LCS is \"GTAB\")", "result": "passed", "passed": true}
