{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_tuplex = (1, 2, 3, 2, 4, 2)\n    value_to_count = 2\n    result = count_tuplex(example_tuplex, value_to_count)\n    print(f\"The value {value_to_count} appears {result} times in the tuple.\")", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist. If a sublist is empty, None is added.\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] if sublist else None for sublist in lst]\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [[1, 2, 3], [4, 5], [], [6]]\n    result = Extract(example_list)\n    print(result)  # Output: [1, 4, None, 6]", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Find all the vowels in the string\n    vowel_positions = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_values = [str_list[i] for i in vowel_positions]\n    \n    # Reverse the list of vowels\n    vowel_values.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for pos, value in zip(vowel_positions, vowel_values):\n        str_list[pos] = value\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"hello\"\n    result = reverse_vowels(test_string)\n    print(result)  # Output: \"holle\"", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    \n    # Substitute all lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"Hello there, this is a Test String!\"\n    print(remove_lowercase(test_string))  # Output: \"H T S!\"", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the k-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract values.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the k-th index elements from each tuple.\n\n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    product = 1\n    for tup in test_list:\n        if K < 0 or K >= len(tup):\n            raise IndexError(f\"K={K} is out of bounds for tuple {tup}.\")\n        product *= tup[K]\n    \n    return product\n\n# Example usage:\n# test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# K = 1\n# result = find_k_product(test_list, K)\n# print(result)  # Output: 80 (2 * 5 * 8)", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale of an item.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's greater than zero, otherwise return None\n    return profit if profit > 0 else None\n\n# Example usage:\n# profit = profit_amount(100, 150)  # Should return 50\n# profit = profit_amount(100, 100)   # Should return None\n# profit = profit_amount(150, 100)   # Should return None", "result": "failed: ", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Returns a list where each element in the input list 'nums' is repeated 'n' times.\n    \n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \n    Returns:\n    list: A new list with each element from 'nums' repeated 'n' times.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The second argument must be a non-negative integer.\")\n    \n    # Use map to repeat each element n times and flatten the result\n    result = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    flattened_result = [item for sublist in result for item in sublist]\n    \n    return flattened_result\n\n# Example usage:\nprint(ntimes_list([1, 2, 3], 2))  # Output: [1, 1, 2, 2, 3, 3]\nprint(ntimes_list(['a', 'b'], 3))  # Output: ['a', 'a', 'a', 'b', 'b', 'b']", "result": "failed: ", "passed": false}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"Hello, World! 123.\"\n    result = remove_splchar(test_string)\n    print(result)  # Output: HelloWorld123", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Calculate n!, r!, and (n-r)!\n    n_fact = factorial_mod(n, p)\n    r_fact = factorial_mod(r, p)\n    n_r_fact = factorial_mod(n - r, p)\n\n    # Calculate nCr % p\n    nCr = (n_fact * mod_inverse(r_fact, p) % p * mod_inverse(n_r_fact, p) % p) % p\n    return nCr\n\n# Example usage\nprint(ncr_modp(5, 2, 13))  # Output: 10\nprint(ncr_modp(10, 3, 7))  # Output: 5", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers (0, 2, or 3).\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y and y == z:\n        count = 3  # All three numbers are equal\n    elif x == y or y == z or x == z:\n        count = 2  # Two numbers are equal\n    else:\n        count = 0  # All numbers are different\n    \n    return count\n\n# Example test cases\nprint(test_three_equal(1, 1, 1))  # Output: 3\nprint(test_three_equal(1, 2, 1))  # Output: 2\nprint(test_three_equal(1, 2, 3))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix becomes empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Example usage:\n# print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n# print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Output: \"\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(fibonacci(10))  # Output: 55", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    \n    Returns:\n    int: The GCD of the two numbers.\n    \n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14\n    print(gcd(101, 10)) # Output: 1", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or not valid\n\n    # Step 1: Transpose the matrix\n    transposed = []\n    for i in range(len(matrix[0])):\n        new_row = []\n        for j in range(len(matrix)):\n            new_row.append(matrix[j][i])\n        transposed.append(new_row)\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = []\n    for row in transposed:\n        rotated.append(row[::-1])  # Reverse the row\n\n    return rotated\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    rotated_matrix = rotate_matrix(original_matrix)\n    for row in rotated_matrix:\n        print(row)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n    TypeError: If the list contains non-integer elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Check if all elements are integers\n    for item in arr:\n        if not isinstance(item, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    # Find and return the maximum value\n    return max(arr)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(max_value([1, 2, 3, 4, 5]))  # Output: 5\n        print(max_value([-1, -2, -3, -4]))  # Output: -1\n        print(max_value([]))  # Should raise ValueError\n    except Exception as e:\n        print(e)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\n# print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n# print(longest_prefix([\"dog\", \"racecar\", \"car\"]))     # Output: \"\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Example usage:\n# print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n# print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Output: \"\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    table = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the table in bottom-up fashion\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                table[i][j] = table[i - 1][j - 1] + 1\n                max_length = max(max_length, table[i][j])  # Update max_length\n            else:\n                table[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Example usage:\n# print(longest_common_substring(\"abcde\", \"abfce\"))  # Output: 2 (\"ab\")\n# print(longest_common_substring(\"abcdef\", \"zcdemf\"))  # Output: 2 (\"cd\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\n# print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n# print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))     # Output: \"\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Example usage:\n# print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3\n# print(longest_common_subsequence(\"abc\", \"abc\"))    # Output: 3\n# print(longest_common_subsequence(\"abc\", \"def\"))    # Output: 0", "result": "passed", "passed": true}
