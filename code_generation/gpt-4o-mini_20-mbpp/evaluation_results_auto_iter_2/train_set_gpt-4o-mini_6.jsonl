{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Check if there is a profit\n    if profit > 0:\n        return profit\n    else:\n        return None\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Profit exists\n    print(profit_amount(100, 150))  # Expected output: 50\n\n    # Test case 2: No profit\n    print(profit_amount(200, 150))  # Expected output: None\n\n    # Test case 3: Break-even\n    print(profit_amount(100, 100))  # Expected output: None\n\n    # Test case 4: Large profit\n    print(profit_amount(50, 200))    # Expected output: 150\n\n    # Test case 5: Negative values (cost is higher than sale)\n    print(profit_amount(300, 250))  # Expected output: None\n\n    # Test case 6: Zero sale amount\n    print(profit_amount(100, 0))    # Expected output: None"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Sample test cases to validate the functionality of the remove_splchar function\nif __name__ == \"__main__\":\n    test_cases = [\n        \"Hello, World!\",          # Expected: \"HelloWorld\"\n        \"Python3.8 is great!\",   # Expected: \"Python38isgreat\"\n        \"Special@#Characters!!\",  # Expected: \"SpecialCharacters\"\n        \"12345\",                  # Expected: \"12345\"\n        \"No special chars here\",  # Expected: \"Nospecialcharshere\"\n        \"\",                       # Expected: \"\" (empty string)\n        \"Spaces   and   tabs\\t\",  # Expected: \"Spacesandtabs\"\n    ]\n    \n    for i, test in enumerate(test_cases):\n        result = remove_splchar(test)\n        print(f\"Test case {i + 1}: Input: '{test}' | Output: '{result}'\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list.\n\n    Parameters:\n    lst (list): A list of sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    # Use a list comprehension to iterate through each sublist and get the first element\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Sample test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    test_case_1 = [[1, 2, 3], [4, 5], [6]]\n    print(Extract(test_case_1))  # Expected output: [1, 4, 6]\n\n    # Test case 2: Some empty sublists\n    test_case_2 = [[1, 2], [], [3, 4], []]\n    print(Extract(test_case_2))  # Expected output: [1, 3]\n\n    # Test case 3: All empty sublists\n    test_case_3 = [[], [], []]\n    print(Extract(test_case_3))  # Expected output: []\n\n    # Test case 4: Single sublist\n    test_case_4 = [[10]]\n    print(Extract(test_case_4))  # Expected output: [10]\n\n    # Test case 5: Mixed types in sublists\n    test_case_5 = [['a', 'b'], [1, 2], [True, False]]\n    print(Extract(test_case_5))  # Expected output: ['a', 1, True]"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    # Use the count method of the tuple to find the number of occurrences of value\n    return tuplex.count(value)\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of an integer\n    test_tuple1 = (1, 2, 3, 1, 4, 1)\n    print(count_tuplex(test_tuple1, 1))  # Expected output: 3\n\n    # Test case 2: Count occurrences of a string\n    test_tuple2 = ('apple', 'banana', 'apple', 'orange')\n    print(count_tuplex(test_tuple2, 'apple'))  # Expected output: 2\n\n    # Test case 3: Count occurrences of a float\n    test_tuple3 = (1.1, 2.2, 1.1, 3.3)\n    print(count_tuplex(test_tuple3, 1.1))  # Expected output: 2\n\n    # Test case 4: Count occurrences of a value not in the tuple\n    test_tuple4 = (1, 2, 3)\n    print(count_tuplex(test_tuple4, 4))  # Expected output: 0\n\n    # Test case 5: Count occurrences in an empty tuple\n    test_tuple5 = ()\n    print(count_tuplex(test_tuple5, 1))  # Expected output: 0"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n    \n    Returns:\n    int: The count of equal integers among the three.\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check if x is equal to y\n    if x == y:\n        count += 1\n    \n    # Check if y is equal to z\n    if y == z:\n        count += 1\n    \n    # Check if x is equal to z\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we counted them twice, so we need to adjust\n    if count == 3:\n        return 3  # All three are equal\n    return count  # Return the count of equal pairs\n\n# Sample test cases\ndef run_tests():\n    print(test_three_equal(1, 1, 1))  # Expected output: 3 (all are equal)\n    print(test_three_equal(1, 2, 1))  # Expected output: 2 (1 and 1 are equal)\n    print(test_three_equal(2, 2, 3))  # Expected output: 2 (2 and 2 are equal)\n    print(test_three_equal(1, 2, 3))  # Expected output: 0 (none are equal)\n    print(test_three_equal(5, 5, 5))  # Expected output: 3 (all are equal)\n    print(test_three_equal(4, 4, 4))  # Expected output: 3 (all are equal)\n    print(test_three_equal(7, 8, 7))  # Expected output: 2 (7 and 7 are equal)\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find all lowercase substrings and replace them with an empty string\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed case string\n    print(remove_lowercase(\"Hello World!\"))  # Expected output: \"H W!\"\n    \n    # Test case 2: String with only lowercase letters\n    print(remove_lowercase(\"abcdef\"))  # Expected output: \"\"\n    \n    # Test case 3: String with no lowercase letters\n    print(remove_lowercase(\"HELLO123\"))  # Expected output: \"HELLO123\"\n    \n    # Test case 4: String with special characters and numbers\n    print(remove_lowercase(\"123abc!@#DEF\"))  # Expected output: \"123!@#DEF\"\n    \n    # Test case 5: Empty string\n    print(remove_lowercase(\"\"))  # Expected output: \"\""}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list 'nums' repeated 'n' times using the map function.\n    \n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \"\"\"\n    # Use map to apply a lambda function that repeats each element n times\n    repeated_elements = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in repeated_elements for item in sublist]\n    \n    # Print the resulting list\n    print(flattened_list)\n\n# Sample test cases\nif __name__ == \"__main__\":\n    # Test case 1: Repeating numbers\n    ntimes_list([1, 2, 3], 2)  # Expected output: [1, 1, 2, 2, 3, 3]\n    \n    # Test case 2: Repeating characters\n    ntimes_list(['a', 'b', 'c'], 3)  # Expected output: ['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c']\n    \n    # Test case 3: Repeating mixed types\n    ntimes_list([True, False], 1)  # Expected output: [True, False]\n    \n    # Test case 4: Repeating an empty list\n    ntimes_list([], 5)  # Expected output: []\n    \n    # Test case 5: Repeating with n = 0\n    ntimes_list([1, 2, 3], 0)  # Expected output: []"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the indices of the vowels in the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    \n    # Extract the vowels from the string using the collected indices\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic example\n    print(reverse_vowels(\"hello\"))  # Expected output: \"holle\"\n    \n    # Test case 2: Mixed case\n    print(reverse_vowels(\"LeetCode\"))  # Expected output: \"Leotcede\"\n    \n    # Test case 3: No vowels\n    print(reverse_vowels(\"bcdfg\"))  # Expected output: \"bcdfg\"\n    \n    # Test case 4: All vowels\n    print(reverse_vowels(\"aeiou\"))  # Expected output: \"uoiea\"\n    \n    # Test case 5: Empty string\n    print(reverse_vowels(\"\"))  # Expected output: \"\"\n    \n    # Test case 6: String with special characters\n    print(reverse_vowels(\"h@ll0 w0rld!\"))  # Expected output: \"h@ll0 w0rld!\""}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n    \"\"\"\n    # Extract the K-th index elements from each tuple in the list\n    k_elements = [t[K] for t in test_list if K < len(t)]\n    \n    # Calculate the product of the extracted elements\n    if not k_elements:  # If there are no elements to multiply, return 0\n        return 0\n    \n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Sample test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with valid tuples and K\n    test_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K1 = 1\n    print(find_k_product(test_list1, K1))  # Output: 2 * 5 * 8 = 80\n\n    # Test case 2: K is out of range for some tuples\n    test_list2 = [(1, 2), (3, 4, 5), (6,)]\n    K2 = 2\n    print(find_k_product(test_list2, K2))  # Output: 0 (no valid K-th index)\n\n    # Test case 3: K is valid for all tuples\n    test_list3 = [(2, 3, 4), (5, 6, 7), (8, 9, 10)]\n    K3 = 0\n    print(find_k_product(test_list3, K3))  # Output: 2 * 5 * 8 = 80\n\n    # Test case 4: Empty list\n    test_list4 = []\n    K4 = 0\n    print(find_k_product(test_list4, K4))  # Output: 0 (no tuples)\n\n    # Test case 5: K is negative\n    test_list5 = [(1, 2, 3), (4, 5, 6)]\n    K5 = -1\n    print(find_k_product(test_list5, K5))  # Output: 0 (no valid K-th index)"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Step 1: Compute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Step 2: Compute the modular inverses of r! and (n - r)!\n    inv_r_fact = mod_inverse(fact[r], p)\n    inv_n_r_fact = mod_inverse(fact[n - r], p)\n    \n    # Step 3: Calculate nCr % p\n    nCr = (fact[n] * inv_r_fact % p) * inv_n_r_fact % p\n    return nCr\n\n# Sample test cases\nif __name__ == \"__main__\":\n    # Test cases\n    print(ncr_modp(5, 2, 13))  # Expected output: 10\n    print(ncr_modp(10, 2, 1000))  # Expected output: 45\n    print(ncr_modp(10, 5, 1000))  # Expected output: 252\n    print(ncr_modp(7, 3, 11))  # Expected output: 35\n    print(ncr_modp(0, 0, 7))  # Expected output: 1 (0C0 is 1)"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n    \"\"\"\n    # Ensure that a and b are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a to b and b to the remainder of a divided by b\n    \n    return a  # When b is 0, a contains the GCD\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Expected output: 6\n    print(gcd(56, 98))  # Expected output: 14\n    print(gcd(101, 10)) # Expected output: 1\n    print(gcd(0, 5))    # Expected output: 5 (GCD of any number and 0 is the number itself)\n    print(gcd(5, 0))    # Expected output: 5 (GCD of any number and 0 is the number itself)\n    print(gcd(-48, 18)) # Expected output: 6 (GCD should be positive)\n    print(gcd(-48, -18))# Expected output: 6 (GCD should be positive)"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list. If the list is empty, returns None.\n    \"\"\"\n    # Check if the list is empty\n    if not arr:\n        return None  # Return None if the list is empty\n\n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num  # Update max_val if a larger number is found\n\n    return max_val  # Return the maximum value found\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    print(max_value([1, 2, 3, 4, 5]))  # Expected output: 5\n    print(max_value([-1, -2, -3, -4, -5]))  # Expected output: -1\n    print(max_value([10, 20, 30, 40, 50]))  # Expected output: 50\n    print(max_value([5]))  # Expected output: 5\n    print(max_value([]))  # Expected output: None"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:\n                return \"\"  # Return empty string if no common prefix\n    \n    return prefix\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Output: \"single\"\n    \n    # Test case 6: Mixed case strings\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))  # Output: \"fl\""}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as follows:\n    - F(0) = 0\n    - F(1) = 1\n    - F(n) = F(n-1) + F(n-2) for n > 1\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b  # b now holds the n-th Fibonacci number\n\n# Sample test cases\nif __name__ == \"__main__\":\n    print(fibonacci(0))  # Output: 0\n    print(fibonacci(1))  # Output: 1\n    print(fibonacci(2))  # Output: 1\n    print(fibonacci(3))  # Output: 2\n    print(fibonacci(4))  # Output: 3\n    print(fibonacci(5))  # Output: 5\n    print(fibonacci(6))  # Output: 8\n    print(fibonacci(7))  # Output: 13\n    print(fibonacci(8))  # Output: 21\n    print(fibonacci(9))  # Output: 34\n    print(fibonacci(10)) # Output: 55"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or not valid\n\n    # Step 1: Transpose the matrix\n    transposed = []\n    for i in range(len(matrix)):\n        new_row = []\n        for j in range(len(matrix[0])):\n            new_row.append(matrix[j][i])\n        transposed.append(new_row)\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = []\n    for row in transposed:\n        rotated.append(row[::-1])  # Reverse the row\n\n    return rotated\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], \n                [3, 4]]\n    print(rotate_matrix(matrix1))  # Expected output: [[3, 1], [4, 2]]\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], \n                [4, 5, 6], \n                [7, 8, 9]]\n    print(rotate_matrix(matrix2))  # Expected output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n    # Test case 3: 4x4 matrix\n    matrix3 = [[1, 2, 3, 4], \n                [5, 6, 7, 8], \n                [9, 10, 11, 12], \n                [13, 14, 15, 16]]\n    print(rotate_matrix(matrix3))  # Expected output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n    # Test case 4: Empty matrix\n    matrix4 = []\n    print(rotate_matrix(matrix4))  # Expected output: []\n\n    # Test case 5: Single element matrix\n    matrix5 = [[1]]\n    print(rotate_matrix(matrix5))  # Expected output: [[1]]"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list starting from the second string\n    for s in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while not s.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))     # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))                            # Expected output: \"\"\n    \n    # Test case 5: One string in the list\n    print(longest_common_prefix([\"single\"]))                   # Expected output: \"single\""}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length found\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            # If characters match, increment the length of the common substring\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                # Update max_length if we found a longer substring\n                max_length = max(max_length, dp[i][j])\n            else:\n                # If characters do not match, reset the length to 0\n                dp[i][j] = 0\n    \n    return max_length\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common substring \"abc\" of length 3\n    print(longest_common_substring(\"abcde\", \"abfabc\"))  # Output: 3\n    \n    # Test case 2: Common substring \"xyz\" of length 3\n    print(longest_common_substring(\"xyzabc\", \"abcxyz\"))  # Output: 3\n    \n    # Test case 3: No common substring\n    print(longest_common_substring(\"hello\", \"world\"))  # Output: 0\n    \n    # Test case 4: Entire string is common\n    print(longest_common_substring(\"test\", \"test\"))  # Output: 4\n    \n    # Test case 5: Common substring \"a\" of length 1\n    print(longest_common_substring(\"a\", \"a\"))  # Output: 1\n    \n    # Test case 6: Empty string\n    print(longest_common_substring(\"\", \"abc\"))  # Output: 0"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: Empty string in the list\n    print(longest_prefix([\"\", \"b\"]))  # Expected output: \"\"\n    \n    # Test case 5: Mixed strings\n    print(longest_prefix([\"interspecies\", \"interstellar\", \"interstate\"]))  # Expected output: \"inter\"\n    \n    # Test case 6: Single string in the list\n    print(longest_prefix([\"single\"]))  # Expected output: \"single\""}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list starting from the second string\n    for s in strs[1:]:\n        # Update the prefix by comparing it with the current string\n        while not s.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))      # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))                             # Expected output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))                     # Expected output: \"single\"\n    \n    # Test case 6: Mixed case strings\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))   # Expected output: \"fl\""}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Get the lengths of both strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence will be in the bottom-right cell\n    return dp[m][n]\n\n# Sample test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Simple case with common subsequence\n    print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3 (ace)\n    \n    # Test case 2: No common subsequence\n    print(longest_common_subsequence(\"abc\", \"def\"))    # Output: 0\n    \n    # Test case 3: Identical strings\n    print(longest_common_subsequence(\"abc\", \"abc\"))    # Output: 3 (abc)\n    \n    # Test case 4: One string is empty\n    print(longest_common_subsequence(\"\", \"abc\"))        # Output: 0\n    \n    # Test case 5: Both strings are empty\n    print(longest_common_subsequence(\"\", \"\"))           # Output: 0\n    \n    # Test case 6: Longer strings with common subsequence\n    print(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\"))  # Output: 4 (GTAB)"}
