{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to replace all lowercase substrings with an empty string\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed case and lowercase\n    print(remove_lowercase(\"Hello World!\"))  # Expected output: \"H W!\"\n    \n    # Test case 2: Only lowercase letters\n    print(remove_lowercase(\"abcdef\"))  # Expected output: \"\"\n    \n    # Test case 3: No lowercase letters\n    print(remove_lowercase(\"HELLO123\"))  # Expected output: \"HELLO123\"\n    \n    # Test case 4: Special characters and numbers\n    print(remove_lowercase(\"123abc!@#DEF\"))  # Expected output: \"123!@#DEF\"\n    \n    # Test case 5: Empty string\n    print(remove_lowercase(\"\"))  # Expected output: \"\"", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of lists): A list containing sublists.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    test_case_1 = [[1, 2, 3], [4, 5], [6]]\n    print(Extract(test_case_1))  # Expected output: [1, 4, 6]\n\n    # Test case 2: Some empty sublists\n    test_case_2 = [[1, 2], [], [3, 4, 5], []]\n    print(Extract(test_case_2))  # Expected output: [1, 3]\n\n    # Test case 3: All empty sublists\n    test_case_3 = [[], [], []]\n    print(Extract(test_case_3))  # Expected output: []\n\n    # Test case 4: Single sublist\n    test_case_4 = [[10]]\n    print(Extract(test_case_4))  # Expected output: [10]\n\n    # Test case 5: Mixed types in sublists\n    test_case_5 = [['a', 'b'], [1, 2], [True, False]]\n    print(Extract(test_case_5))  # Expected output: ['a', 1, True]", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic input with special characters\n    assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n    \n    # Test case 2: Input with numbers and special characters\n    assert remove_splchar(\"123@abc#456!\") == \"123abc456\"\n    \n    # Test case 3: Input with spaces and punctuation\n    assert remove_splchar(\"Python is great!!!\") == \"Pythonisgreat\"\n    \n    # Test case 4: Input with only special characters\n    assert remove_splchar(\"!!!@@@###\") == \"\"\n    \n    # Test case 5: Input with mixed characters\n    assert remove_splchar(\"Test123!@#\") == \"Test123\"\n    \n    # Test case 6: Empty string\n    assert remove_splchar(\"\") == \"\"\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        # Calculate profit\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        # No profit\n        return None\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    assert profit_amount(100, 150) == 50, \"Test case 1 failed\"\n    \n    # Test case 2: No profit scenario\n    assert profit_amount(100, 100) is None, \"Test case 2 failed\"\n    \n    # Test case 3: Loss scenario\n    assert profit_amount(100, 50) is None, \"Test case 3 failed\"\n    \n    # Test case 4: Profit with decimal values\n    assert profit_amount(99.99, 150.00) == 50.01, \"Test case 4 failed\"\n    \n    # Test case 5: Large numbers\n    assert profit_amount(1000000, 1500000) == 500000, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    return tuplex.count(value)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of an integer\n    test_tuple1 = (1, 2, 3, 1, 4, 1)\n    print(count_tuplex(test_tuple1, 1))  # Expected output: 3\n\n    # Test case 2: Count occurrences of a string\n    test_tuple2 = ('apple', 'banana', 'apple', 'orange')\n    print(count_tuplex(test_tuple2, 'apple'))  # Expected output: 2\n\n    # Test case 3: Count occurrences of a value not in the tuple\n    test_tuple3 = (1, 2, 3, 4)\n    print(count_tuplex(test_tuple3, 5))  # Expected output: 0\n\n    # Test case 4: Count occurrences of a float\n    test_tuple4 = (1.1, 2.2, 1.1, 3.3)\n    print(count_tuplex(test_tuple4, 1.1))  # Expected output: 2\n\n    # Test case 5: Count occurrences of a tuple within a tuple\n    test_tuple5 = ((1, 2), (3, 4), (1, 2))\n    print(count_tuplex(test_tuple5, (1, 2)))  # Expected output: 2", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Returns a list where each element from the input list `nums` is repeated `n` times.\n    \n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \n    Returns:\n    list: A new list with each element repeated `n` times.\n    \"\"\"\n    # Use map to repeat each element n times and convert the result to a list\n    return list(map(lambda x: [x] * n, nums))\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Repeating numbers\n    print(ntimes_list([1, 2, 3], 2))  # Expected output: [1, 1, 2, 2, 3, 3]\n    \n    # Test case 2: Repeating strings\n    print(ntimes_list(['a', 'b'], 3))  # Expected output: ['a', 'a', 'a', 'b', 'b', 'b']\n    \n    # Test case 3: Repeating mixed types\n    print(ntimes_list([True, False], 1))  # Expected output: [True, False]\n    \n    # Test case 4: Repeating with n = 0\n    print(ntimes_list([1, 2, 3], 0))  # Expected output: []\n    \n    # Test case 5: Empty list\n    print(ntimes_list([], 5))  # Expected output: []", "result": "failed: ", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = []\n    for char in str1:\n        if char in vowels:\n            # Replace with the next vowel from the reversed list\n            result.append(next(vowel_iter))\n        else:\n            # Keep the consonant or non-vowel character\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases to validate the function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"hello\") == \"holle\", \"Test case 1 failed\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\", \"Test case 2 failed\"\n    assert reverse_vowels(\"aA\") == \"Aa\", \"Test case 3 failed\"\n    assert reverse_vowels(\" \") == \" \", \"Test case 4 failed\"\n    assert reverse_vowels(\"1234\") == \"1234\", \"Test case 5 failed\"\n    assert reverse_vowels(\"racecar\") == \"recacar\", \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()", "result": "failed: Test case 6 failed", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal numbers (0, 2, or 3)\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3\n    if count == 3:\n        return 3\n    \n    # If two are equal, we should return 2\n    if count == 1:\n        return 2\n    \n    # If none are equal, we return 0\n    return 0\n\n# Test cases to validate the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(2, 1, 1) == 2, \"Test case 4 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, 0) == 2, \"Test case 7 failed\"\n    assert test_three_equal(-1, 0, 1) == 0, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef power_mod(a, b, p):\n    \"\"\"Compute a^b % p using iterative method.\"\"\"\n    result = 1\n    a = a % p\n    while b > 0:\n        if (b & 1):  # If b is odd\n            result = (result * a) % p\n        b >>= 1  # Divide b by 2\n        a = (a * a) % p  # Square a\n    return result\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using the formula:\n    nCr = n! / (r! * (n - r)!)\n    We use Fermat's Little Theorem to compute the modular inverse.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Compute n!, r!, and (n - r)!\n    num = factorial_mod(n, p)\n    denom = (factorial_mod(r, p) * factorial_mod(n - r, p)) % p\n    \n    # Compute the modular inverse of denom\n    denom_inv = power_mod(denom, p - 2, p)\n    \n    # nCr % p\n    return (num * denom_inv) % p\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(ncr_modp(5, 2, 13))  # Expected output: 10\n    print(ncr_modp(10, 2, 1000))  # Expected output: 45\n    print(ncr_modp(10, 5, 1000))  # Expected output: 252\n    print(ncr_modp(100, 50, 1000000007))  # Expected output: 538992043\n    print(ncr_modp(0, 0, 13))  # Expected output: 1 (0C0 is 1)\n    print(ncr_modp(5, 0, 13))  # Expected output: 1 (nC0 is 1)\n    print(ncr_modp(5, 5, 13))  # Expected output: 1 (nCn is 1)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/645", "completion": "import math\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the kth index in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract elements.\n    K (int): The index of the elements to be multiplied.\n    \n    Returns:\n    int: The product of the elements at the kth index, or None if K is out of bounds.\n    \"\"\"\n    # Check if the list is empty\n    if not test_list:\n        return 1  # Product of an empty list is conventionally 1\n    \n    # Initialize a list to hold the elements at the kth index\n    k_elements = []\n    \n    for tup in test_list:\n        # Check if the tuple has enough elements\n        if K < len(tup):\n            k_elements.append(tup[K])\n        else:\n            return None  # Return None if K is out of bounds for any tuple\n    \n    # Calculate the product of the k_elements\n    return math.prod(k_elements)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    test_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K1 = 1\n    print(find_k_product(test_list1, K1))  # Output: 2 * 5 * 8 = 80\n\n    # Test case 2: K out of bounds\n    test_list2 = [(1, 2), (3, 4), (5, 6)]\n    K2 = 2\n    print(find_k_product(test_list2, K2))  # Output: None\n\n    # Test case 3: Empty list\n    test_list3 = []\n    K3 = 0\n    print(find_k_product(test_list3, K3))  # Output: 1\n\n    # Test case 4: K is 0\n    test_list4 = [(1, 2), (3, 4), (5, 6)]\n    K4 = 0\n    print(find_k_product(test_list4, K4))  # Output: 1 * 3 * 5 = 15\n\n    # Test case 5: Mixed lengths\n    test_list5 = [(1, 2, 3), (4, 5), (6, 7, 8)]\n    K5 = 1\n    print(find_k_product(test_list5, K5))  # Output: 2 * 5 * 7 = 70", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First number\n    b (int): Second number\n    \n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return abs(a)  # Return the absolute value of GCD\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    # Test cases\n    print(gcd(48, 18))  # Expected output: 6\n    print(gcd(56, 98))  # Expected output: 14\n    print(gcd(101, 10)) # Expected output: 1\n    print(gcd(0, 5))    # Expected output: 5\n    print(gcd(5, 0))    # Expected output: 5\n    print(gcd(0, 0))    # Expected output: 0 (GCD is undefined, but we return 0 for this case)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or not valid\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], [3, 4]]\n    print(rotate_matrix(matrix1))  # Expected output: [[3, 1], [4, 2]]\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(rotate_matrix(matrix2))  # Expected output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n    # Test case 3: 4x4 matrix\n    matrix3 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(rotate_matrix(matrix3))  # Expected output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n    # Test case 4: Empty matrix\n    matrix4 = []\n    print(rotate_matrix(matrix4))  # Expected output: []\n\n    # Test case 5: Single element matrix\n    matrix5 = [[1]]\n    print(rotate_matrix(matrix5))  # Expected output: [[1]]", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The position in the Fibonacci sequence (0-indexed).\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    print(fibonacci(0))  # Expected output: 0\n    print(fibonacci(1))  # Expected output: 1\n    print(fibonacci(2))  # Expected output: 1\n    print(fibonacci(3))  # Expected output: 2\n    print(fibonacci(4))  # Expected output: 3\n    print(fibonacci(5))  # Expected output: 5\n    print(fibonacci(6))  # Expected output: 8\n    print(fibonacci(7))  # Expected output: 13\n    print(fibonacci(8))  # Expected output: 21\n    print(fibonacci(9))  # Expected output: 34\n    print(fibonacci(10)) # Expected output: 55", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list. If the list is empty, returns None.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return None\n\n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found\n\n# Test cases\nif __name__ == \"__main__\":\n    print(max_value([1, 2, 3, 4, 5]))  # Expected output: 5\n    print(max_value([-1, -2, -3, -4, -5]))  # Expected output: -1\n    print(max_value([5, 5, 5, 5]))  # Expected output: 5\n    print(max_value([]))  # Expected output: None\n    print(max_value([10]))  # Expected output: 10\n    print(max_value([1, 3, 2, 5, 4]))  # Expected output: 5", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inters\"\n    assert longest_common_prefix([\"throne\", \"dungeon\"]) == \"\"\n    assert longest_common_prefix([\"cheese\"]) == \"cheese\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"\"]) == \"\"\n    assert longest_common_prefix([\"a\"]) == \"a\"\n    assert longest_common_prefix([\"ab\", \"a\"]) == \"a\"\n\n# Run the test cases\ntest_longest_common_prefix()\n\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: One string is empty\n    print(longest_common_prefix([\"\", \"b\"]))  # Expected output: \"\"\n    \n    # Test case 5: Mixed case\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 6: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Expected output: \"single\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix becomes empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_prefix([]))  # Expected output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_prefix([\"single\"]))  # Expected output: \"single\"\n    \n    # Test case 6: Mixed case strings\n    print(longest_prefix([\"Flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to store the length of the longest common substring\n    longest_length = 0\n    \n    # Fill the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Not necessary to set to 0, as initialized to 0\n    \n    return longest_length\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with common substring\n    assert longest_common_substring(\"abcde\", \"abfce\") == 2  # \"ab\"\n    \n    # Test case 2: No common substring\n    assert longest_common_substring(\"abc\", \"def\") == 0  # No common substring\n    \n    # Test case 3: Entire string is a common substring\n    assert longest_common_substring(\"hello\", \"hello\") == 5  # \"hello\"\n    \n    # Test case 4: Multiple common substrings\n    assert longest_common_substring(\"abcdef\", \"zcdemf\") == 2  # \"cd\"\n    \n    # Test case 5: One string is empty\n    assert longest_common_substring(\"\", \"abc\") == 0  # No common substring\n    \n    # Test case 6: Both strings are empty\n    assert longest_common_substring(\"\", \"\") == 0  # No common substring\n    \n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): First string\n    s2 (str): Second string\n    \n    Returns:\n    int: Length of the longest common subsequence\n    \"\"\"\n    # Lengths of the input strings\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[m][n]\n    return dp[m][n]\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    # Test case 1\n    assert longest_common_subsequence(\"abcde\", \"ace\") == 3  # LCS is \"ace\"\n    # Test case 2\n    assert longest_common_subsequence(\"abc\", \"abc\") == 3  # LCS is \"abc\"\n    # Test case 3\n    assert longest_common_subsequence(\"abc\", \"def\") == 0  # No common subsequence\n    # Test case 4\n    assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == 4  # LCS is \"GTAB\"\n    # Test case 5\n    assert longest_common_subsequence(\"\", \"abc\") == 0  # One string is empty\n    # Test case 6\n    assert longest_common_subsequence(\"abc\", \"\") == 0  # One string is empty\n\n    print(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Output: \"single\"\n    \n    # Test case 6: Mixed case\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))  # Output: \"fl\"", "result": "passed", "passed": true}
