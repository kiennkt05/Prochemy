{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None", "result": "failed: ", "passed": false}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist.\n    \n    Parameters:\n    lst (list of lists): A list containing sublists.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # Check if sublist is not empty\n\n# Example usage:\n# result = Extract([[1, 2, 3], [4, 5], [6]])\n# print(result)  # Output: [1, 4, 6]", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal numbers (0, 1, 2, or 3)\n    \"\"\"\n    # Create a set from the three numbers to find unique values\n    unique_numbers = {x, y, z}\n    \n    # Count how many numbers are equal\n    if len(unique_numbers) == 1:\n        return 3  # All three numbers are equal\n    elif len(unique_numbers) == 2:\n        return 2  # Two numbers are equal\n    else:\n        return 0  # All numbers are different\n\n# Example usage\nprint(test_three_equal(1, 1, 1))  # Output: 3\nprint(test_three_equal(1, 2, 1))  # Output: 2\nprint(test_three_equal(1, 2, 3))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list nums, repeated n times.\n    \n    Args:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \"\"\"\n    # Use map to repeat each element n times and convert to list\n    repeated_list = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in repeated_list for item in sublist]\n    \n    # Print the resulting list\n    print(flattened_list)\n\n# Example usage\nntimes_list([1, 2, 3], 3)  # Output: [1, 1, 1, 2, 2, 2, 3, 3, 3]", "result": "failed: ", "passed": false}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specific value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    return tuplex.count(value)\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_tuplex = (1, 2, 3, 2, 4, 2, 5)\n    value_to_count = 2\n    print(count_tuplex(example_tuplex, value_to_count))  # Output: 3", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_text = \"Hello, World! 1234 @#$$%\"\n    cleaned_text = remove_splchar(sample_text)\n    print(cleaned_text)  # Output: HelloWorld1234", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Calculate n!, r!, and (n-r)!\n    num = factorial_mod(n, p)\n    denom_r = factorial_mod(r, p)\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n    \n    return (num * denom_inv) % p\n\n# Example usage\nprint(ncr_modp(5, 2, 13))  # Output: 10", "result": "failed: ", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Rebuild the string with reversed vowels\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(next(vowel_iter))  # Replace with the next reversed vowel\n        else:\n            result.append(char)  # Keep the consonant as is\n    \n    return ''.join(result)\n\n# Example usage:\nprint(reverse_vowels(\"hello\"))  # Output: \"holle\"\nprint(reverse_vowels(\"leetcode\"))  # Output: \"leotcede\"", "result": "passed", "passed": true}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to replace all lowercase substrings with an empty string\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"Hello World! this is a Test.\"\n    print(remove_lowercase(test_string))  # Output: \"H W! T.\"", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nfrom operator import mul\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): The list containing tuples.\n    K (int): The index of the elements to multiply.\n    \n    Returns:\n    int: The product of the K-th index elements, or 0 if K is out of bounds.\n    \"\"\"\n    # Extract the K-th index elements from each tuple\n    k_elements = [t[K] for t in test_list if len(t) > K]\n    \n    # If there are no valid K-th index elements, return 0\n    if not k_elements:\n        return 0\n    \n    # Calculate the product of the K-th index elements\n    product = reduce(mul, k_elements, 1)\n    \n    return product\n\n# Example usage:\n# test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# K = 1\n# print(find_k_product(test_list, K))  # Output: 2 * 5 * 8 = 80", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    \n    Returns:\n    int: The GCD of a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # Return the absolute value of GCD\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14\n    print(gcd(101, 10)) # Output: 1", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    m, n = len(s1), len(s2)\n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    longest = 0  # To keep track of the longest length found\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest = max(longest, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list. If the list is empty, returns None.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return None\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or not valid\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nrotated_matrix = rotate_matrix(matrix)\nprint(rotated_matrix)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common subsequence\n    \"\"\"\n    m, n = len(s1), len(s2)\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Example usage:\n# print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix becomes empty, return \"\"\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix", "result": "passed", "passed": true}
