{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the functionality of the profit_amount function\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    print(profit_amount(100, 150))  # Expected output: 50\n\n    # Test case 2: No profit scenario\n    print(profit_amount(200, 150))  # Expected output: None\n\n    # Test case 3: Break-even scenario\n    print(profit_amount(100, 100))  # Expected output: None\n\n    # Test case 4: Profit with decimal values\n    print(profit_amount(99.99, 150.00))  # Expected output: 50.01\n\n    # Test case 5: Large numbers\n    print(profit_amount(1_000_000, 1_500_000))  # Expected output: 500000"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list `nums` repeated `n` times using the map function.\n    \n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \"\"\"\n    # Use map to repeat each element in the list `n` times\n    repeated = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    flattened = [item for sublist in repeated for item in sublist]\n    \n    # Print the resulting list\n    print(flattened)\n\n# Test cases\nntimes_list([1, 2, 3], 2)  # Expected output: [1, 1, 2, 2, 3, 3]\nntimes_list(['a', 'b'], 3)  # Expected output: ['a', 'a', 'a', 'b', 'b', 'b']\nntimes_list([], 5)  # Expected output: []\nntimes_list([True, False], 1)  # Expected output: [True, False]"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\nif __name__ == \"__main__\":\n    # Test case 1: Input with special characters\n    assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n    # Test case 2: Input with numbers and special characters\n    assert remove_splchar(\"123@abc#456!\") == \"123abc456\"\n    # Test case 3: Input with only special characters\n    assert remove_splchar(\"!!!@@@###\") == \"\"\n    # Test case 4: Input with spaces and punctuation\n    assert remove_splchar(\"Python is fun! 2023.\") == \"Pythonisfun2023\"\n    # Test case 5: Input with mixed characters\n    assert remove_splchar(\"C0d3 & Pr0gr@mminG!\") == \"C0d3Pr0grmminG\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Extract the vowels from the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Place the reversed vowels back into their original positions\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(reverse_vowels(\"hello\"))  # Output: \"holle\"\n    print(reverse_vowels(\"leetcode\"))  # Output: \"leotcede\"\n    print(reverse_vowels(\"aA\"))  # Output: \"Aa\"\n    print(reverse_vowels(\" \"))  # Output: \" \"\n    print(reverse_vowels(\"bcd\"))  # Output: \"bcd\""}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among the three inputs\n    \"\"\"\n    # Initialize a counter for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3, not 1 for each pair\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs\n    return count\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 4 failed\"\n    assert test_three_equal(10, 10, 20) == 2, \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\nrun_tests()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list.\n    \n    Parameters:\n    lst (list): A list of sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if isinstance(sublist, list) and sublist:  # Check if sublist is a list and not empty\n            first_elements.append(sublist[0])\n        else:\n            first_elements.append(None)  # Append None if sublist is empty or not a list\n    \n    return first_elements\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with non-empty sublists\n    print(Extract([[1, 2, 3], [4, 5], [6]]))  # Output: [1, 4, 6]\n    \n    # Test case 2: Some empty sublists\n    print(Extract([[1, 2], [], [3, 4]]))  # Output: [1, None, 3]\n    \n    # Test case 3: Mixed types, including non-list elements\n    print(Extract([[1, 2], 'not a list', [3]]))  # Output: [1, None, 3]\n    \n    # Test case 4: All empty sublists\n    print(Extract([[], [], []]))  # Output: [None, None, None]"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    # Count the occurrences of the value in the tuple\n    count = tuplex.count(value)\n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of an integer\n    print(count_tuplex((1, 2, 3, 1, 4, 1), 1))  # Output: 3\n\n    # Test case 2: Count occurrences of a string\n    print(count_tuplex(('apple', 'banana', 'apple', 'orange'), 'apple'))  # Output: 2\n\n    # Test case 3: Count occurrences of a float\n    print(count_tuplex((1.1, 2.2, 1.1, 3.3), 1.1))  # Output: 2\n\n    # Test case 4: Count occurrences of a non-existing value\n    print(count_tuplex((1, 2, 3), 4))  # Output: 0\n\n    # Test case 5: Invalid input (not a tuple)\n    try:\n        print(count_tuplex([1, 2, 3], 1))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Output: The first argument must be a tuple."}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n    \"\"\"\n    # Check if the list is empty\n    if not test_list:\n        return 0  # Return 0 for empty list as there are no products to calculate\n\n    # Extract the K-th index elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        if K < len(tup):  # Ensure the K-th index exists in the tuple\n            k_elements.append(tup[K])\n        else:\n            raise IndexError(f\"Index {K} is out of range for tuple {tup}\")\n\n    # Calculate the product of the extracted elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    test_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K1 = 1\n    print(find_k_product(test_list1, K1))  # Expected output: 2 * 5 * 8 = 80\n\n    # Test case 2: K is out of range\n    test_list2 = [(1, 2), (3, 4)]\n    K2 = 2\n    try:\n        print(find_k_product(test_list2, K2))  # Expected to raise IndexError\n    except IndexError as e:\n        print(e)\n\n    # Test case 3: Empty list\n    test_list3 = []\n    K3 = 0\n    print(find_k_product(test_list3, K3))  # Expected output: 0\n\n    # Test case 4: K is valid but some tuples are shorter\n    test_list4 = [(1, 2), (3, 4, 5), (6,)]\n    K4 = 1\n    print(find_k_product(test_list4, K4))  # Expected output: 2 * 4 = 8"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find and remove all lowercase substrings\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Test cases to validate the functionality of the remove_lowercase function\nif __name__ == \"__main__\":\n    # Test case 1: Mixed case string\n    print(remove_lowercase(\"Hello World!\"))  # Expected output: \"H W!\"\n    \n    # Test case 2: String with only lowercase letters\n    print(remove_lowercase(\"abcdef\"))  # Expected output: \"\"\n    \n    # Test case 3: String with no lowercase letters\n    print(remove_lowercase(\"HELLO123\"))  # Expected output: \"HELLO123\"\n    \n    # Test case 4: String with special characters and numbers\n    print(remove_lowercase(\"123abc!@#DEF\"))  # Expected output: \"123!@#DEF\"\n    \n    # Test case 5: Empty string\n    print(remove_lowercase(\"\"))  # Expected output: \"\""}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    \n    Returns:\n    int: The GCD of the two numbers.\n    \"\"\"\n    # Ensure that a and b are non-negative integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases to validate the functionality of the gcd function\nif __name__ == \"__main__\":\n    # Test case 1: GCD of 48 and 18\n    print(gcd(48, 18))  # Expected output: 6\n\n    # Test case 2: GCD of 56 and 98\n    print(gcd(56, 98))  # Expected output: 14\n\n    # Test case 3: GCD of 101 and 10\n    print(gcd(101, 10))  # Expected output: 1\n\n    # Test case 4: GCD of 0 and 5\n    print(gcd(0, 5))  # Expected output: 5\n\n    # Test case 5: GCD of 0 and 0 (should raise an error)\n    try:\n        print(gcd(0, 0))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message\n\n    # Test case 6: GCD of negative numbers (should raise an error)\n    try:\n        print(gcd(-10, 5))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: n = 5, r = 2, p = 13\n    print(ncr_modp(5, 2, 13))  # Expected output: 10\n\n    # Test case 2: n = 10, r = 3, p = 17\n    print(ncr_modp(10, 3, 17))  # Expected output: 120\n\n    # Test case 3: n = 0, r = 0, p = 5\n    print(ncr_modp(0, 0, 5))  # Expected output: 1\n\n    # Test case 4: n = 7, r = 5, p = 11\n    print(ncr_modp(7, 5, 11))  # Expected output: 3\n\n    # Test case 5: n = 6, r = 7, p = 10\n    print(ncr_modp(6, 7, 10))  # Expected output: 0 (since r > n)"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the functionality of the fibonacci function\nif __name__ == \"__main__\":\n    # Test cases\n    print(fibonacci(0))  # Expected output: 0\n    print(fibonacci(1))  # Expected output: 1\n    print(fibonacci(2))  # Expected output: 1\n    print(fibonacci(3))  # Expected output: 2\n    print(fibonacci(4))  # Expected output: 3\n    print(fibonacci(5))  # Expected output: 5\n    print(fibonacci(10)) # Expected output: 55\n    print(fibonacci(20)) # Expected output: 6765\n\n    # Test for negative input\n    try:\n        print(fibonacci(-1))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a non-negative integer."}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    longest = 0  # Variable to store the length of the longest common substring\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest = max(longest, dp[i][j])  # Update longest if needed\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n    \n    return longest\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with common substring\n    print(longest_common_substring(\"abcde\", \"abfce\"))  # Expected output: 2 (\"ab\")\n    \n    # Test case 2: No common substring\n    print(longest_common_substring(\"abc\", \"def\"))      # Expected output: 0\n    \n    # Test case 3: Entire string is a common substring\n    print(longest_common_substring(\"hello\", \"hello\"))  # Expected output: 5 (\"hello\")\n    \n    # Test case 4: Multiple common substrings\n    print(longest_common_substring(\"abcdef\", \"zcdemf\")) # Expected output: 2 (\"cd\")\n    \n    # Test case 5: One string is empty\n    print(longest_common_substring(\"\", \"abc\"))          # Expected output: 0"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list. If the list is empty, raises a ValueError.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The list is empty. Cannot determine the maximum value.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element of the list\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with a normal list of integers\n    print(max_value([1, 2, 3, 4, 5]))  # Expected output: 5\n    print(max_value([-1, -2, -3, -4, -5]))  # Expected output: -1\n    print(max_value([5, 5, 5, 5]))  # Expected output: 5\n    print(max_value([10, 20, 30, 40, 50]))  # Expected output: 50\n\n    # Test with a single element\n    print(max_value([42]))  # Expected output: 42\n\n    # Test with an empty list (should raise ValueError)\n    try:\n        print(max_value([]))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Output: \"single\"\n    \n    # Test case 6: Common prefix is a single character\n    print(longest_common_prefix([\"a\", \"ab\", \"abc\"]))  # Output: \"a\""}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    print(longest_prefix([\"dog\", \"racecar\", \"car\"]))     # Output: \"\"\n    print(longest_prefix([\"\"]))                            # Output: \"\"\n    print(longest_prefix([\"a\"]))                           # Output: \"a\"\n    print(longest_prefix([\"ab\", \"a\"]))                    # Output: \"a\""}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): 2D list representing the matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or invalid\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], [3, 4]]\n    print(rotate_matrix(matrix1))  # Expected output: [[3, 1], [4, 2]]\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(rotate_matrix(matrix2))  # Expected output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n    # Test case 3: 4x4 matrix\n    matrix3 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(rotate_matrix(matrix3))  # Expected output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n    # Test case 4: Empty matrix\n    matrix4 = []\n    print(rotate_matrix(matrix4))  # Expected output: []\n\n    # Test case 5: Single element matrix\n    matrix5 = [[1]]\n    print(rotate_matrix(matrix5))  # Expected output: [[1]]"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Output: \"single\""}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))     # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))                            # Output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))                    # Output: \"single\""}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Take the max from left or above\n\n    return dp[m][n]  # The length of LCS is in the bottom-right cell\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test\n    print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3 (LCS is \"ace\")\n    \n    # Test case 2: No common subsequence\n    print(longest_common_subsequence(\"abc\", \"def\"))    # Output: 0 (No common subsequence)\n    \n    # Test case 3: Identical strings\n    print(longest_common_subsequence(\"abc\", \"abc\"))    # Output: 3 (LCS is \"abc\")\n    \n    # Test case 4: One string is empty\n    print(longest_common_subsequence(\"\", \"abc\"))        # Output: 0 (No common subsequence)\n    \n    # Test case 5: Both strings are empty\n    print(longest_common_subsequence(\"\", \"\"))           # Output: 0 (No common subsequence)\n    \n    # Test case 6: Complex case\n    print(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\"))  # Output: 4 (LCS is \"GTAB\")"}
