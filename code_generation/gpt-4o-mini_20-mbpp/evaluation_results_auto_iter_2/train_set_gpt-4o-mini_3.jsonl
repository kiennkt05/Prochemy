{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find and remove all lowercase substrings\n    # The pattern '[a-z]+' matches one or more lowercase letters\n    modified_str = re.sub(r'[a-z]+', '', str1)\n    return modified_str\n\n# Test cases to validate the functionality of the remove_lowercase function\nif __name__ == \"__main__\":\n    test_strings = [\n        \"Hello World\",          # Expected: \"H W\"\n        \"Python is Fun\",        # Expected: \"P F\"\n        \"123abc456\",            # Expected: \"123456\"\n        \"NoLowercaseHere\",      # Expected: \"NoLowercaseHere\"\n        \"MixedCASE123\",         # Expected: \"MixedCASE123\"\n        \"lowerUPPERlower\",      # Expected: \"UPPER\"\n    ]\n\n    for test in test_strings:\n        result = remove_lowercase(test)\n        print(f\"Original: '{test}' => Modified: '{result}'\")"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Parameters:\n    str1 (str): The input string.\n\n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the vowels from the string\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowels\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"hello\", \"holle\"),\n        (\"leetcode\", \"leotcede\"),\n        (\"aA\", \"Aa\"),\n        (\"\", \"\"),\n        (\"\", \"bcd\"),  # No vowels to reverse\n        (\"\", \"bcde\"),  # No vowels to reverse\n    ]\n    \n    for input_str, expected_output in test_cases:\n        result = reverse_vowels(input_str)\n        assert result == expected_output, f\"Test failed for input '{input_str}': expected '{expected_output}', got '{result}'\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index.\n    \"\"\"\n    # Validate input\n    if not isinstance(test_list, list) or not all(isinstance(t, tuple) for t in test_list):\n        raise ValueError(\"test_list must be a list of tuples.\")\n    \n    if not isinstance(K, int) or K < 0:\n        raise ValueError(\"K must be a non-negative integer.\")\n    \n    # Extract the K-th index elements\n    k_elements = []\n    for tup in test_list:\n        if K < len(tup):\n            k_elements.append(tup[K])\n        else:\n            raise IndexError(f\"Index {K} is out of range for tuple {tup}.\")\n\n    # Calculate the product of the K-th index elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Example usage\nif __name__ == \"__main__\":\n    test_data = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K = 1\n    try:\n        result = find_k_product(test_data, K)\n        print(f\"The product of elements at index {K} is: {result}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n\n    # Count the occurrences of the specified value in the tuple\n    count = tuplex.count(value)\n    return count\n\n# Test cases to validate the functionality of count_tuplex\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of an integer\n    test_tuple1 = (1, 2, 3, 1, 4, 1)\n    print(count_tuplex(test_tuple1, 1))  # Output: 3\n\n    # Test case 2: Count occurrences of a string\n    test_tuple2 = ('apple', 'banana', 'apple', 'orange')\n    print(count_tuplex(test_tuple2, 'apple'))  # Output: 2\n\n    # Test case 3: Count occurrences of a non-existing value\n    test_tuple3 = (1, 2, 3)\n    print(count_tuplex(test_tuple3, 4))  # Output: 0\n\n    # Test case 4: Invalid input (not a tuple)\n    try:\n        print(count_tuplex([1, 2, 3], 1))  # Should raise TypeError\n    except TypeError as e:\n        print(e)  # Output: The first argument must be a tuple."}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\nif __name__ == \"__main__\":\n    test_strings = [\n        \"Hello, World!\",        # Expected: \"HelloWorld\"\n        \"Python3.8 is great!\",  # Expected: \"Python38isgreat\"\n        \"Special@#Characters!!\", # Expected: \"SpecialCharacters\"\n        \"12345\",                # Expected: \"12345\"\n        \"NoSpecialsHere\",       # Expected: \"NoSpecialsHere\"\n        \"\",                     # Expected: \"\"\n        \"Spaces   and tabs\\t\"   # Expected: \"Spacesandtabs\"\n    ]\n\n    for test in test_strings:\n        result = remove_splchar(test)\n        print(f\"Input: '{test}' => Output: '{result}'\")"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the provided list.\n\n    Parameters:\n    lst (list): A list of sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        # Check if the current item is a list and has at least one element\n        if isinstance(sublist, list) and len(sublist) > 0:\n            first_elements.append(sublist[0])\n        else:\n            # If the sublist is not valid, we can choose to append None or skip\n            first_elements.append(None)  # Append None for invalid sublists\n\n    return first_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [[1, 2, 3], ['a', 'b', 'c'], [True, False], [], 'not a list']\n    result = Extract(example_list)\n    print(result)  # Output: [1, 'a', True, None, None]"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return (non-negative integer).\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Using an iterative approach to calculate the n-th Fibonacci number\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the functionality of the fibonacci function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    print(\"All test cases passed!\")\n\nif __name__ == \"__main__\":\n    test_fibonacci()"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Test cases to validate the functionality of the profit_amount function\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    print(profit_amount(100, 150))  # Expected output: 50\n\n    # Test case 2: No profit scenario\n    print(profit_amount(200, 150))  # Expected output: None\n\n    # Test case 3: Break-even scenario\n    print(profit_amount(100, 100))  # Expected output: None\n\n    # Test case 4: Profit with decimal values\n    print(profit_amount(99.99, 150.00))  # Expected output: 50.01\n\n    # Test case 5: Invalid input scenario\n    try:\n        print(profit_amount(\"100\", 150))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers among the three.\n    \"\"\"\n    # Initialize a counter for equal numbers\n    equal_count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    \n    # If all three are equal, we should count it as one unique case\n    if equal_count == 3:\n        return 3  # All three are equal\n    return equal_count  # Return the count of equal pairs\n\n# Test cases to validate the functionality of the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 4 failed\"\n    assert test_three_equal(4, 4, 5) == 2, \"Test case 5 failed\"\n    assert test_three_equal(7, 8, 7) == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nif __name__ == \"__main__\":\n    run_tests()"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    longest_length = 0  # Variable to store the length of the longest common substring\n\n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length of common substring\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring at this position\n\n    return longest_length\n\n# Example usage\nif __name__ == \"__main__\":\n    str1 = \"abcdef\"\n    str2 = \"zcdemf\"\n    result = longest_common_substring(str1, str2)\n    print(f\"The length of the longest common substring is: {result}\")"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n\n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"interspecies\", \"interstellar\", \"interstate\"], \"inter\"),\n        ([\"throne\", \"dungeon\"], \"\"),\n        ([\"cheese\", \"cheese\", \"cheese\"], \"cheese\"),\n        ([], \"\"),  # Edge case: empty list\n        ([\"a\"], \"a\"),  # Edge case: single character\n        ([\"\", \"b\", \"c\"], \"\"),  # Edge case: empty string in list\n    ]\n\n    for i, (input_strs, expected) in enumerate(test_cases):\n        result = longest_common_prefix(input_strs)\n        assert result == expected, f\"Test case {i + 1} failed: expected '{expected}', got '{result}'\"\n        print(f\"Test case {i + 1} passed: '{result}'\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list `nums` n times using the map function.\n    \n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \n    Raises:\n    ValueError: If `n` is not a positive integer.\n    TypeError: If `nums` is not a list.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(nums, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"The second argument must be a positive integer.\")\n    \n    # Use map to repeat each element n times\n    repeated_elements = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists\n    flattened_list = [item for sublist in repeated_elements for item in sublist]\n    \n    # Print the result\n    print(flattened_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        ntimes_list([1, 2, 3], 3)  # Example call\n    except Exception as e:\n        print(f\"An error occurred: {e}\")"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n\n    return prefix\n\n# Test cases to validate the functionality\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"interspecies\", \"interstellar\", \"interstate\"], \"inter\"),\n        ([\"throne\", \"dungeon\"], \"\"),\n        ([\"cheese\", \"cheese\", \"cheese\"], \"cheese\"),\n        ([], \"\"),  # Edge case: empty list\n        ([\"a\"], \"a\"),  # Edge case: single character\n        ([\"\", \"b\"], \"\"),  # Edge case: empty string in list\n    ]\n\n    for i, (input_strs, expected) in enumerate(test_cases):\n        result = longest_common_prefix(input_strs)\n        assert result == expected, f\"Test case {i + 1} failed: expected {expected}, got {result}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # Return empty string if no common prefix\n\n    return prefix\n\n# Example usage\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"interspecies\", \"interstellar\", \"interstate\"], \"inter\"),\n        ([], \"\"),\n        ([\"a\"], \"a\"),\n        ([\"\", \"b\", \"c\"], \"\"),\n    ]\n\n    for strings, expected in test_cases:\n        result = longest_prefix(strings)\n        print(f\"longest_prefix({strings}) = '{result}' (expected: '{expected}')\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    denominator_inv = mod_inverse(denominator, p)\n    \n    return (numerator * denominator_inv) % p\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 5\n    r = 2\n    p = 13\n    result = ncr_modp(n, r, p)\n    print(f\"The value of {n}C{r} % {p} is: {result}\")\n\n# Test cases\ndef test_ncr_modp():\n    assert ncr_modp(5, 2, 13) == 10\n    assert ncr_modp(10, 2, 100) == 45\n    assert ncr_modp(10, 5, 100) == 252\n    assert ncr_modp(0, 0, 10) == 1\n    assert ncr_modp(5, 0, 10) == 1\n    assert ncr_modp(5, 5, 10) == 1\n    assert ncr_modp(5, 6, 10) == 0  # r > n case\n\ntest_ncr_modp()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer or if either is negative.\n    \"\"\"\n    # Validate input\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both a and b must be non-negative integers.\")\n\n    # Implementing the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases to validate the functionality of the gcd function\ndef test_gcd():\n    assert gcd(48, 18) == 6, \"Test case 1 failed\"\n    assert gcd(56, 98) == 14, \"Test case 2 failed\"\n    assert gcd(101, 10) == 1, \"Test case 3 failed\"\n    assert gcd(0, 5) == 5, \"Test case 4 failed\"\n    assert gcd(5, 0) == 5, \"Test case 5 failed\"\n    assert gcd(0, 0) == 0, \"Test case 6 failed\"  # GCD(0, 0) is undefined, but we can return 0 for this case\n\n    print(\"All test cases passed!\")\n\nif __name__ == \"__main__\":\n    # Run the test cases\n    test_gcd()"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        raise ValueError(\"The matrix must not be empty.\")\n\n    # Get the number of rows and columns\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Check if the matrix is rectangular\n    for row in matrix:\n        if len(row) != cols:\n            raise ValueError(\"All rows in the matrix must have the same number of columns.\")\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[rows - 1 - r][c] for r in range(rows)] for c in range(cols)]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Example usage\nif __name__ == \"__main__\":\n    original_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    rotated_matrix = rotate_matrix(original_matrix)\n    print(\"Original Matrix:\")\n    for row in original_matrix:\n        print(row)\n    \n    print(\"\\nRotated Matrix:\")\n    for row in rotated_matrix:\n        print(row)"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"The input list cannot be empty.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Test cases to validate the functionality of max_value function\nif __name__ == \"__main__\":\n    try:\n        print(max_value([1, 2, 3, 4, 5]))  # Expected output: 5\n        print(max_value([-1, -2, -3, -4, -5]))  # Expected output: -1\n        print(max_value([5, 5, 5, 5]))  # Expected output: 5\n        print(max_value([1]))  # Expected output: 1\n        print(max_value([]))  # Should raise ValueError\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    try:\n        print(max_value(\"not a list\"))  # Should raise TypeError\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    try:\n        print(max_value([1, 2, 'three']))  # Should raise TypeError\n    except Exception as e:\n        print(f\"Error: {e}\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix\n\n    return prefix\n\n# Test cases to validate the functionality of the longest_common_prefix function\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"flower\", \"flow\", \"flight\"], \"fl\"),\n        ([\"dog\", \"racecar\", \"car\"], \"\"),\n        ([\"interspecies\", \"interstellar\", \"interstate\"], \"inter\"),\n        ([\"throne\", \"dungeon\"], \"\"),\n        ([\"cheese\", \"cheese\", \"cheese\"], \"cheese\"),\n        ([], \"\"),  # Edge case: empty list\n        ([\"a\"], \"a\"),  # Edge case: single character\n        ([\"\", \"b\", \"c\"], \"\"),  # Edge case: empty string in the list\n    ]\n\n    for i, (input_strs, expected) in enumerate(test_cases):\n        result = longest_common_prefix(input_strs)\n        assert result == expected, f\"Test case {i + 1} failed: expected '{expected}', got '{result}'\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Function to find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Get the lengths of the two strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Example usage\nif __name__ == \"__main__\":\n    str1 = \"AGGTAB\"\n    str2 = \"GXTXAYB\"\n    print(f\"The length of the longest common subsequence is: {longest_common_subsequence(str1, str2)}\")"}
