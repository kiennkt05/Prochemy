{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_text = \"Hello, World! 1234 @#$%\"\n    result = remove_splchar(example_text)\n    print(result)  # Output: HelloWorld1234"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if isinstance(sublist, list) and sublist:  # Check if sublist is a list and not empty\n            first_elements.append(sublist[0])\n        else:\n            first_elements.append(None)  # Append None if sublist is empty or not a list\n\n    return first_elements\n\n# Example usage:\nexample_list = [[1, 2, 3], ['a', 'b', 'c'], [], [True, False]]\nresult = Extract(example_list)\nprint(result)  # Output: [1, 'a', None, True]"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the specified value in the tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n            \n    return count\n\n# Example usage:\nexample_tuplex = (1, 2, 3, 2, 4, 2, 5)\nvalue_to_count = 2\nresult = count_tuplex(example_tuplex, value_to_count)\nprint(f\"The value {value_to_count} occurs {result} times in the tuple.\")"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(profit_amount(100, 150))  # Output: 50\n    print(profit_amount(200, 150))  # Output: None\n    print(profit_amount(50, 75))    # Output: 25"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers among the three inputs.\n    \"\"\"\n    # Ensure all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n\n    # Count the number of equal integers\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n\n    # If all three are equal, we should return 3 instead of 1 for each pair\n    if equal_count == 3:\n        return 3\n    # If two are equal, return 2\n    elif equal_count == 2:\n        return 2\n    # If none are equal, return 0\n    else:\n        return 0\n\n# Example usage:\nprint(test_three_equal(1, 1, 2))  # Output: 2\nprint(test_three_equal(3, 3, 3))  # Output: 3\nprint(test_three_equal(1, 2, 3))  # Output: 0\nprint(test_three_equal(5, 5, 5))  # Output: 3"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find and remove all lowercase substrings\n    result = re.sub(r'[a-z]+', '', str1)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"Hello there, this is a Test String with Lowercase letters.\"\n    modified_string = remove_lowercase(test_string)\n    print(modified_string)  # Output: \"H T S \""}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Repeat each element in the list 'nums' n times using the map function.\n\n    Parameters:\n    nums (list): A list of numbers to be repeated.\n    n (int): The number of times to repeat each element.\n\n    Returns:\n    list: A new list with each element repeated n times.\n    \"\"\"\n    if not isinstance(nums, list) or not all(isinstance(x, (int, float)) for x in nums):\n        raise ValueError(\"Input 'nums' must be a list of numbers.\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input 'n' must be a non-negative integer.\")\n\n    # Use map to repeat each element n times\n    repeated_list = list(map(lambda x: [x] * n, nums))\n    \n    # Flatten the list of lists into a single list\n    return [item for sublist in repeated_list for item in sublist]\n\n# Example usage:\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    n = 3\n    result = ntimes_list(nums, n)\n    print(result)  # Output: [1, 1, 1, 2, 2, 2, 3, 3, 3]"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the Kth index.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index, or None if K is out of bounds for any tuple.\n    \"\"\"\n    product = 1\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K < len(tup):\n            product *= tup[K]\n        else:\n            print(f\"Index {K} is out of bounds for tuple {tup}.\")\n            return None  # Return None if K is out of bounds for any tuple\n\n    return product\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 1\nresult = find_k_product(test_list, K)\nprint(f\"The product of elements at index {K} is: {result}\")  # Output: 80 (2 * 5 * 8)\n\nK = 3\nresult = find_k_product(test_list, K)\nprint(f\"The product of elements at index {K} is: {result}\")  # Output: None (Index out of bounds)"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the string to a list to allow modification\n    str_list = list(str1)\n    \n    # Initialize two pointers\n    left, right = 0, len(str_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are at vowels, swap them\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example usage:\nresult = reverse_vowels(\"hello world\")\nprint(result)  # Output: \"holle werld\"\n\nresult = reverse_vowels(\"leetcode\")\nprint(result)  # Output: \"leotcede\""}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(fibonacci(0))  # Output: 0\n    print(fibonacci(1))  # Output: 1\n    print(fibonacci(2))  # Output: 1\n    print(fibonacci(3))  # Output: 2\n    print(fibonacci(4))  # Output: 3\n    print(fibonacci(5))  # Output: 5\n    print(fibonacci(10)) # Output: 55"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    # Create a new matrix to hold the rotated values\n    rotated = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            rotated[j][n - 1 - i] = matrix[i][j]\n\n    return rotated\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    rotated_matrix = rotate_matrix(original_matrix)\n    print(\"Original Matrix:\")\n    for row in original_matrix:\n        print(row)\n    \n    print(\"\\nRotated Matrix:\")\n    for row in rotated_matrix:\n        print(row)"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n\n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\"\n\n    strings = [\"dog\", \"racecar\", \"car\"]\n    print(longest_common_prefix(strings))  # Output: \"\""}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer or if either is negative.\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both a and b must be non-negative integers.\")\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14\n    print(gcd(101, 10)) # Output: 1"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Precompute all factorials % p\n    fact = factorial_mod(n, p)\n\n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n\n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Example usage:\nn = 5\nr = 2\np = 13\nprint(ncr_modp(n, r, p))  # Output: 10"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n    \n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n            \n    return max_val\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(max_value([3, 1, 4, 1, 5, 9, 2, 6, 5]))  # Output: 9\n        print(max_value([-10, -20, -5, -1]))            # Output: -1\n        print(max_value([]))                             # Raises ValueError\n    except ValueError as e:\n        print(e)"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n\n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\"\n\n    strings = [\"dog\", \"racecar\", \"car\"]\n    print(longest_common_prefix(strings))  # Output: \"\""}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize a 2D list with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    longest_length = 0  # Variable to store the length of the longest common substring\n\n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return longest_length\n\n# Example usage:\nif __name__ == \"__main__\":\n    str1 = \"abcdef\"\n    str2 = \"zcdemf\"\n    print(\"Length of Longest Common Substring:\", longest_common_substring(str1, str2))  # Output: 2 (\"cd\")"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n\n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_prefix(strings))  # Output: \"fl\"\n\n    strings = [\"dog\", \"racecar\", \"car\"]\n    print(longest_prefix(strings))  # Output: \"\""}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array from the bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Take the max from left or above\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[m][n]\n\n# Example usage:\nif __name__ == \"__main__\":\n    string1 = \"AGGTAB\"\n    string2 = \"GXTXAYB\"\n    result = longest_common_subsequence(string1, string2)\n    print(f\"The length of the longest common subsequence is: {result}\")"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n\n    :param strs: List of strings\n    :return: The longest common prefix string. If there is no common prefix, return an empty string.\n    \"\"\"\n    if not strs:\n        return \"\"\n\n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n\n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n\n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\"\n\n    strings = [\"dog\", \"racecar\", \"car\"]\n    print(longest_common_prefix(strings))  # Output: \"\"\n\n    strings = []\n    print(longest_common_prefix(strings))  # Output: \"\""}
