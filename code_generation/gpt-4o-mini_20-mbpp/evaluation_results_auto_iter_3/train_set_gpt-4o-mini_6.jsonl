{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list.\n\n    Parameters:\n    lst (list): A list of sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first element of each non-empty sublist.\n    \"\"\"\n    first_elements = []  # Initialize an empty list to store the first elements\n\n    for sublist in lst:\n        if isinstance(sublist, list) and sublist:  # Check if sublist is a list and not empty\n            first_elements.append(sublist[0])  # Append the first element to the result list\n\n    return first_elements  # Return the list of first elements\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5], [], [6], [7, 8, 9]]\nresult = Extract(example_list)\nprint(result)  # Output: [1, 4, 6, 7]"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n\n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n\n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n\n    # Calculate profit\n    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        return None\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(profit_amount(100, 150))  # Expected output: 50\n    print(profit_amount(200, 150))  # Expected output: None\n    print(profit_amount(50, 50))    # Expected output: None\n    print(profit_amount(75.5, 100)) # Expected output: 24.5"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find and remove all lowercase substrings\n    modified_str = re.sub(r'[a-z]+', '', str1)\n    return modified_str\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello World! this is a Test String.\"\n    result = remove_lowercase(test_string)\n    print(\"Original String:\", test_string)\n    print(\"Modified String:\", result)"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the indices and characters of the vowels\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowel characters\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original list with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    result = reverse_vowels(test_string)\n    print(result)  # Output: \"holle werld\""}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\nif __name__ == \"__main__\":\n    test_strings = [\n        \"Hello, World!\",        # Expected: \"HelloWorld\"\n        \"Python3.8 is great!\",  # Expected: \"Python38isgreat\"\n        \"Special@#Characters$\",  # Expected: \"SpecialCharacters\"\n        \"12345!@#$%^&*()abc\",    # Expected: \"12345abc\"\n        \"\",                      # Expected: \"\"\n        \"NoSpecialChars\"        # Expected: \"NoSpecialChars\"\n    ]\n\n    for test in test_strings:\n        result = remove_splchar(test)\n        print(f\"Input: '{test}' => Output: '{result}'\")"}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the K-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index elements.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the elements at the K-th index. Returns 1 if the list is empty or if K is out of bounds.\n    \"\"\"\n    # Check if the list is empty\n    if not test_list:\n        return 1  # Return 1 as the product of an empty list\n\n    # Extract the K-th index elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        if K < len(tup):  # Ensure K is within the bounds of the tuple\n            k_elements.append(tup[K])\n        else:\n            raise IndexError(f\"K index {K} is out of bounds for tuple {tup}\")\n\n    # Calculate the product of the extracted elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Example usage\nif __name__ == \"__main__\":\n    test_data = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K = 1\n    result = find_k_product(test_data, K)\n    print(f\"The product of elements at index {K} is: {result}\")"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal integers among the three inputs.\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3, not 1 for each pair\n    if count == 3:\n        return 3\n    \n    # Return the count of equal pairs\n    return count\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(test_three_equal(1, 1, 1))  # Output: 3 (all are equal)\n    print(test_three_equal(1, 2, 1))  # Output: 2 (1 and 1 are equal)\n    print(test_three_equal(1, 2, 3))  # Output: 0 (none are equal)\n    print(test_three_equal(2, 2, 3))  # Output: 2 (2 and 2 are equal)"}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    # Use the count method of the tuple to count occurrences of the value\n    count = tuplex.count(value)\n    \n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_tuplex = (1, 2, 3, 2, 4, 2)\n    value_to_count = 2\n    result = count_tuplex(example_tuplex, value_to_count)\n    print(f\"The value {value_to_count} appears {result} times in the tuple.\")"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Calculate n!, r!, and (n-r)!\n    n_fact = factorial_mod(n, p)\n    r_fact = factorial_mod(r, p)\n    n_r_fact = factorial_mod(n - r, p)\n\n    # Calculate nCr % p\n    nCr = (n_fact * mod_inverse(r_fact, p) % p * mod_inverse(n_r_fact, p) % p) % p\n    return nCr\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 5\n    r = 2\n    p = 13\n    print(f\"{n}C{r} % {p} = {ncr_modp(n, r, p)}\")"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list 'nums' repeated 'n' times.\n    \n    Parameters:\n    nums (list): A list of numbers to be printed.\n    n (int): The number of times to repeat each number.\n    \n    Returns:\n    None\n    \"\"\"\n    # Check if n is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Use map to repeat each number n times and print them\n    repeated_nums = map(lambda x: [x] * n, nums)\n    \n    # Flatten the list of lists and print each number\n    for sublist in repeated_nums:\n        for number in sublist:\n            print(number)\n\n# Example usage\nif __name__ == \"__main__\":\n    ntimes_list([1, 2, 3], 3)"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(fibonacci(10))  # Output: 55\n    except ValueError as e:\n        print(e)"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings to find the common prefix from\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Reduce the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return \"\"\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\""}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not arr:\n        raise ValueError(\"The input list is empty. Please provide a list with integers.\")\n\n    # Initialize max_value with the first element of the list\n    max_val = arr[0]\n\n    # Iterate through the list to find the maximum value\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(max_value([1, 2, 3, 4, 5]))  # Output: 5\n    print(max_value([-1, -2, -3, -4]))  # Output: -1\n    print(max_value([10]))  # Output: 10"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n    \n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Ensure that both inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return abs(a)  # Return the absolute value of GCD\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14\n    print(gcd(101, 10)) # Output: 1\n    print(gcd(0, 5))    # Output: 5\n    print(gcd(5, 0))    # Output: 5"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return matrix\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n\n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    rotated_matrix = rotate_matrix(original_matrix)\n    print(\"Original Matrix:\")\n    for row in original_matrix:\n        print(row)\n    \n    print(\"\\nRotated Matrix:\")\n    for row in rotated_matrix:\n        print(row)"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings to find the common prefix from\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\""}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix while it is not a prefix of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix becomes empty, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_common_prefix(strings))  # Output: \"fl\""}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n\n    # Fill the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Example usage\nif __name__ == \"__main__\":\n    s1 = \"AGGTAB\"\n    s2 = \"GXTXAYB\"\n    print(\"Length of LCS is\", longest_common_subsequence(s1, s2))  # Output: 4"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example usage:\nif __name__ == \"__main__\":\n    strings = [\"flower\", \"flow\", \"flight\"]\n    print(longest_prefix(strings))  # Output: \"fl\""}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to keep track of the maximum length of common substring\n    max_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment length\n                max_length = max(max_length, dp[i][j])  # Update max length\n            else:\n                dp[i][j] = 0  # No common substring\n    \n    return max_length\n\n# Example usage\nif __name__ == \"__main__\":\n    str1 = \"abcdef\"\n    str2 = \"zcdemf\"\n    print(\"Length of Longest Common Substring:\", longest_common_substring(str1, str2))  # Output: 2 (\"cd\")"}
