{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to replace all lowercase substrings with an empty string\n    modified_str = re.sub(r'[a-z]+', '', str1)\n    return modified_str\n\n# Test cases to validate the functionality of the remove_lowercase function\nif __name__ == \"__main__\":\n    test_cases = [\n        \"Hello World\",          # No lowercase substrings, should return \"Hello World\"\n        \"abcDEFghi\",            # Should return \"DE\"\n        \"123abc456\",            # Should return \"123456\"\n        \"NoLowercaseHere\",      # Should return \"NoLowercaseHere\"\n        \"MixedCASE123\",         # Should return \"MixedCASE123\"\n        \"lowerUPPERlower\",      # Should return \"UPPER\"\n        \"\",                      # Empty string, should return \"\"\n        \"ALLUPPER\",             # Should return \"ALLUPPER\"\n    ]\n    \n    for i, test in enumerate(test_cases):\n        result = remove_lowercase(test)\n        print(f\"Test case {i + 1}: '{test}' -> '{result}'\")", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Test cases to validate the functionality of the remove_splchar function\nif __name__ == \"__main__\":\n    test_cases = [\n        \"Hello, World!\",          # Expected: \"HelloWorld\"\n        \"Python3.8 is great!\",   # Expected: \"Python38isgreat\"\n        \"Special@#Characters!!\",  # Expected: \"SpecialCharacters\"\n        \"12345\",                  # Expected: \"12345\"\n        \"\",                       # Expected: \"\"\n        \"NoSpecialChars\",         # Expected: \"NoSpecialChars\"\n        \"Spaces   and tabs\\t\",    # Expected: \"Spacesandtabs\"\n    ]\n    \n    for i, test in enumerate(test_cases):\n        result = remove_splchar(test)\n        print(f\"Test case {i + 1}: Input: '{test}' | Output: '{result}'\")", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list.\n    \n    Parameters:\n    lst (list): A list of sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if isinstance(sublist, list) and sublist:  # Check if sublist is a list and not empty\n            first_elements.append(sublist[0])\n    \n    return first_elements\n\n# Test cases to validate the functionality of the Extract function\nif __name__ == \"__main__\":\n    # Test case 1: Normal case with multiple sublists\n    test_case_1 = [[1, 2, 3], [4, 5], [6]]\n    print(Extract(test_case_1))  # Expected output: [1, 4, 6]\n\n    # Test case 2: Some empty sublists\n    test_case_2 = [[1, 2], [], [3, 4, 5], []]\n    print(Extract(test_case_2))  # Expected output: [1, 3]\n\n    # Test case 3: All empty sublists\n    test_case_3 = [[], [], []]\n    print(Extract(test_case_3))  # Expected output: []\n\n    # Test case 4: Mixed types in the main list\n    test_case_4 = [[1, 2], \"not a list\", [3, 4]]\n    print(Extract(test_case_4))  # Expected output: [1, 3]\n\n    # Test case 5: No sublists\n    test_case_5 = []\n    print(Extract(test_case_5))  # Expected output: []", "result": "passed", "passed": true}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers (0, 2, or 3).\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y and y == z:\n        count = 3  # All three numbers are equal\n    elif x == y or y == z or x == z:\n        count = 2  # Two numbers are equal\n    else:\n        count = 0  # All numbers are different\n    \n    return count\n\n# Test cases to validate the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 3 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 4 failed\"\n    assert test_three_equal(10, 10, 20) == 2, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 0) == 3, \"Test case 6 failed\"\n    assert test_three_equal(-1, -1, 1) == 2, \"Test case 7 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Collect the indices and characters of the vowels\n    vowel_indices = [i for i, char in enumerate(str_list) if char in vowels]\n    vowel_chars = [str_list[i] for i in vowel_indices]\n    \n    # Reverse the list of vowel characters\n    vowel_chars.reverse()\n    \n    # Replace the vowels in the original list with the reversed vowels\n    for index, char in zip(vowel_indices, vowel_chars):\n        str_list[index] = char\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic example\n    print(reverse_vowels(\"hello\"))  # Output: \"holle\"\n    \n    # Test case 2: Mixed case\n    print(reverse_vowels(\"LeetCode\"))  # Output: \"LeotCede\"\n    \n    # Test case 3: No vowels\n    print(reverse_vowels(\"bcdf\"))  # Output: \"bcdf\"\n    \n    # Test case 4: All vowels\n    print(reverse_vowels(\"aeiou\"))  # Output: \"uoiea\"\n    \n    # Test case 5: Empty string\n    print(reverse_vowels(\"\"))  # Output: \"\"\n    \n    # Test case 6: String with special characters\n    print(reverse_vowels(\"h@ll0\"))  # Output: \"h@ll0\"", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    return tuplex.count(value)\n\n# Test cases to validate the functionality of count_tuplex\nif __name__ == \"__main__\":\n    # Test case 1: Basic test with repeated values\n    test_tuple1 = (1, 2, 3, 1, 2, 1)\n    print(count_tuplex(test_tuple1, 1))  # Expected output: 3\n\n    # Test case 2: Value not present in the tuple\n    test_tuple2 = (4, 5, 6)\n    print(count_tuplex(test_tuple2, 1))  # Expected output: 0\n\n    # Test case 3: Empty tuple\n    test_tuple3 = ()\n    print(count_tuplex(test_tuple3, 1))  # Expected output: 0\n\n    # Test case 4: Different data types\n    test_tuple4 = (1, 'a', 2, 'a', 3)\n    print(count_tuplex(test_tuple4, 'a'))  # Expected output: 2\n\n    # Test case 5: Count of a non-repeated value\n    test_tuple5 = (1, 2, 3)\n    print(count_tuplex(test_tuple5, 2))  # Expected output: 1\n\n    # Test case 6: Invalid input type\n    try:\n        print(count_tuplex([1, 2, 3], 1))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: The first argument must be a tuple.", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \n    Raises:\n    ValueError: If actual_cost or sale_amount is negative.\n    \"\"\"\n    # Validate inputs\n    if actual_cost < 0 or sale_amount < 0:\n        raise ValueError(\"Actual cost and sale amount must be non-negative.\")\n    \n    # Calculate profit\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    print(profit_amount(100, 150))  # Expected output: 50\n\n    # Test case 2: No profit scenario\n    print(profit_amount(100, 100))  # Expected output: None\n\n    # Test case 3: Loss scenario\n    print(profit_amount(150, 100))  # Expected output: None\n\n    # Test case 4: Negative input scenario (should raise ValueError)\n    try:\n        print(profit_amount(-100, 150))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message\n\n    # Test case 5: Another negative input scenario (should raise ValueError)\n    try:\n        print(profit_amount(100, -150))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message", "result": "failed: ", "passed": false}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Calculate n!, r!, and (n-r)!\n    num = factorial_mod(n, p)\n    denom_r = factorial_mod(r, p)\n    denom_n_r = factorial_mod(n - r, p)\n\n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n\n    return (num * denom_inv) % p\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(ncr_modp(5, 2, 13))  # Output: 10\n    print(ncr_modp(10, 2, 1000))  # Output: 45\n    print(ncr_modp(10, 5, 1000))  # Output: 252\n    print(ncr_modp(0, 0, 1000))  # Output: 1\n    print(ncr_modp(5, 6, 13))  # Output: 0 (since r > n)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list nums, n times.\n    \n    Parameters:\n    nums (list): A list of elements to be printed.\n    n (int): The number of times to print each element.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer or if nums is not a list.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The second argument must be a non-negative integer.\")\n    \n    # Use map to repeat each element n times and print them\n    repeated_elements = map(lambda x: (str(x) + ' ') * n, nums)\n    \n    # Print the results\n    for element in repeated_elements:\n        print(element, end='')\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    print(\"Test Case 1:\")\n    ntimes_list([1, 2, 3], 2)  # Expected output: \"1 1 2 2 3 3 \"\n    \n    # Test case 2: n is 0\n    print(\"\\nTest Case 2:\")\n    ntimes_list([1, 2, 3], 0)  # Expected output: \"\"\n    \n    # Test case 3: Single element\n    print(\"\\nTest Case 3:\")\n    ntimes_list([5], 3)  # Expected output: \"5 5 5 \"\n    \n    # Test case 4: Empty list\n    print(\"\\nTest Case 4:\")\n    ntimes_list([], 3)  # Expected output: \"\"\n    \n    # Test case 5: Invalid n\n    try:\n        print(\"\\nTest Case 5:\")\n        ntimes_list([1, 2, 3], -1)  # Should raise ValueError\n    except ValueError as e:\n        print(e)\n    \n    # Test case 6: Invalid nums\n    try:\n        print(\"\\nTest Case 6:\")\n        ntimes_list(\"not a list\", 2)  # Should raise ValueError\n    except ValueError as e:\n        print(e)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nimport operator\n\ndef find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the k-th index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the k-th index.\n    K (int): The index of the element in each tuple to be multiplied.\n\n    Returns:\n    int: The product of the k-th elements from each tuple in the list.\n    \n    Raises:\n    IndexError: If K is out of bounds for any tuple in the list.\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    # Extract the k-th elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        k_elements.append(tup[K])\n    \n    # Calculate the product of the k-th elements\n    product = reduce(operator.mul, k_elements, 1)\n    return product\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal case\n    test_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K1 = 1\n    print(find_k_product(test_list1, K1))  # Output: 2 * 5 * 8 = 80\n\n    # Test case 2: K is out of bounds\n    test_list2 = [(1, 2), (3, 4)]\n    K2 = 2\n    try:\n        print(find_k_product(test_list2, K2))\n    except IndexError as e:\n        print(e)  # Expected to raise an IndexError\n\n    # Test case 3: Empty list\n    test_list3 = []\n    K3 = 0\n    try:\n        print(find_k_product(test_list3, K3))\n    except ValueError as e:\n        print(e)  # Expected to raise a ValueError\n\n    # Test case 4: All elements are zero\n    test_list4 = [(0, 1), (0, 2), (0, 3)]\n    K4 = 0\n    print(find_k_product(test_list4, K4))  # Output: 0\n\n    # Test case 5: Mixed numbers\n    test_list5 = [(1, 2), (3, 4), (5, 6)]\n    K5 = 0\n    print(find_k_product(test_list5, K5))  # Output: 1 * 3 * 5 = 15", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test cases\n    print(gcd(48, 18))  # Expected output: 6\n    print(gcd(56, 98))  # Expected output: 14\n    print(gcd(101, 10)) # Expected output: 1\n    print(gcd(0, 5))    # Expected output: 5\n    print(gcd(5, 0))    # Expected output: 5\n    print(gcd(-48, 18)) # Expected output: 6\n    print(gcd(48, -18)) # Expected output: 6", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Expected output: \"single\"\n    \n    # Test case 4: All strings are the same\n    print(longest_common_prefix([\"same\", \"same\", \"same\"]))  # Expected output: \"same\"\n    \n    # Test case 5: Empty list\n    print(longest_common_prefix([]))  # Expected output: \"\"\n    \n    # Test case 6: Mixed case\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found\n\n# Test cases to validate the functionality of max_value function\ndef test_max_value():\n    assert max_value([1, 2, 3, 4, 5]) == 5, \"Test case 1 failed\"\n    assert max_value([-1, -2, -3, -4, -5]) == -1, \"Test case 2 failed\"\n    assert max_value([0, 0, 0]) == 0, \"Test case 3 failed\"\n    assert max_value([5]) == 5, \"Test case 4 failed\"\n    assert max_value([1, 3, 2, 5, 4]) == 5, \"Test case 5 failed\"\n    \n    try:\n        max_value([])  # This should raise a ValueError\n    except ValueError:\n        pass  # Expected behavior, do nothing\n    else:\n        raise AssertionError(\"Test case 6 failed: ValueError not raised for empty list\")\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_max_value()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases to validate the function\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for s in strs[1:]:\n        # Reduce the prefix until it matches the start of the string s\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return \"\"\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Expected output: \"single\"\n    \n    # Test case 4: All strings are the same\n    print(longest_common_prefix([\"same\", \"same\", \"same\"]))  # Expected output: \"same\"\n    \n    # Test case 5: Empty list\n    print(longest_common_prefix([]))  # Expected output: \"\"\n    \n    # Test case 6: Prefix is the entire first string\n    print(longest_common_prefix([\"abc\", \"abcde\", \"abcxyz\"]))  # Expected output: \"abc\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_prefix([]))  # Expected output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_prefix([\"single\"]))  # Expected output: \"single\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to store the length of the longest common substring\n    longest_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return longest_length\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Basic test\n    print(longest_common_substring(\"abcde\", \"abfce\"))  # Expected output: 2 (\"ab\")\n    \n    # Test case 2: No common substring\n    print(longest_common_substring(\"abc\", \"def\"))      # Expected output: 0\n    \n    # Test case 3: Entire string is a common substring\n    print(longest_common_substring(\"hello\", \"hello\"))   # Expected output: 5 (\"hello\")\n    \n    # Test case 4: Multiple common substrings\n    print(longest_common_substring(\"abcdef\", \"zcdemf\"))  # Expected output: 2 (\"cd\")\n    \n    # Test case 5: Edge case with empty strings\n    print(longest_common_substring(\"\", \"\"))              # Expected output: 0\n    print(longest_common_substring(\"abc\", \"\"))           # Expected output: 0\n    print(longest_common_substring(\"\", \"xyz\"))           # Expected output: 0", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a valid square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Transpose the matrix\n    transposed = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]\n\n    # Reverse each row to get the rotated matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], [3, 4]]\n    print(rotate_matrix(matrix1))  # Expected output: [[3, 1], [4, 2]]\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(rotate_matrix(matrix2))  # Expected output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n    # Test case 3: 4x4 matrix\n    matrix3 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(rotate_matrix(matrix3))  # Expected output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n    # Test case 4: Empty matrix\n    matrix4 = []\n    print(rotate_matrix(matrix4))  # Expected output: []\n\n    # Test case 5: Non-square matrix (should raise ValueError)\n    matrix5 = [[1, 2, 3], [4, 5, 6]]\n    try:\n        print(rotate_matrix(matrix5))\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a square matrix.", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character from the prefix\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Expected: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Expected: \"\"\n    \n    # Test case 5: One string\n    print(longest_common_prefix([\"single\"]))  # Expected: \"single\"\n    \n    # Test case 6: Mixed case\n    print(longest_common_prefix([\"Flower\", \"flow\", \"flight\"]))  # Expected: \"fl\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[len(s1)][len(s2)]\n    return dp[len(s1)][len(s2)]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test\n    print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3 (\"ace\")\n    \n    # Test case 2: No common subsequence\n    print(longest_common_subsequence(\"abc\", \"def\"))    # Output: 0\n    \n    # Test case 3: Identical strings\n    print(longest_common_subsequence(\"abc\", \"abc\"))    # Output: 3 (\"abc\")\n    \n    # Test case 4: One string is empty\n    print(longest_common_subsequence(\"\", \"abc\"))        # Output: 0\n    \n    # Test case 5: Both strings are empty\n    print(longest_common_subsequence(\"\", \"\"))           # Output: 0\n    \n    # Test case 6: Complex case\n    print(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\"))  # Output: 4 (\"GTAB\")", "result": "passed", "passed": true}
