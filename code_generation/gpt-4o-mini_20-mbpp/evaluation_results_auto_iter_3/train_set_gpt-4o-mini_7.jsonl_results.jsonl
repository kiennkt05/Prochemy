{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which special characters will be removed.\n\n    Returns:\n    str: A new string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to substitute non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello, World! 1234 @#$%\"\n    result = remove_splchar(test_string)\n    print(f\"Original: {test_string}\")\n    print(f\"Cleaned: {result}\")", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Validate input types\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numbers.\")\n    \n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Return profit if it's positive, otherwise return None\n    return profit if profit > 0 else None\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    print(profit_amount(100, 150))  # Expected output: 50\n    print(profit_amount(200, 150))  # Expected output: None\n    print(profit_amount(50, 50))    # Expected output: None\n    print(profit_amount(75.5, 100))  # Expected output: 24.5", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers among three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a counter for equal numbers\n    equal_count = 0\n\n    # Check for equality among the three integers\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n\n    # If all three are equal, we should return 3\n    if equal_count == 3:\n        return 3\n\n    # Return the count of equal pairs (0, 1, or 2)\n    return equal_count\n\n# Example test cases to validate the function\nif __name__ == \"__main__\":\n    print(test_three_equal(1, 1, 1))  # Output: 3 (all equal)\n    print(test_three_equal(1, 2, 1))  # Output: 2 (two equal)\n    print(test_three_equal(1, 2, 3))  # Output: 0 (none equal)\n    print(test_three_equal(2, 2, 3))  # Output: 1 (one pair equal)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: A new string with all lowercase substrings removed.\n    \"\"\"\n    # Regex pattern to match lowercase substrings\n    # This pattern matches any sequence of one or more lowercase letters\n    pattern = r'[a-z]+'\n    \n    # Substitute all lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello World! This is a Test String with Lowercase letters.\"\n    modified_string = remove_lowercase(test_string)\n    print(\"Original String:\", test_string)\n    print(\"Modified String:\", modified_string)", "result": "passed", "passed": true}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The number of times the value appears in the tuple.\n    \"\"\"\n    # Validate input types\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Use the count method of the tuple to count occurrences of the value\n    count = tuplex.count(value)\n    \n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_tuplex = (1, 2, 3, 2, 4, 2)\n    value_to_count = 2\n    result = count_tuplex(example_tuplex, value_to_count)\n    print(f\"The value {value_to_count} appears {result} times in the tuple.\")", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n\n    Returns:\n    list: A list containing the first elements of each sublist. If a sublist is empty, None is added to the result.\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist\n    first_elements = [sublist[0] if sublist else None for sublist in lst]\n    return first_elements\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    test_list = [[1, 2, 3], [4, 5], [], [6]]\n    result = Extract(test_list)\n    print(result)  # Output: [1, 4, None, 6]", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "from functools import reduce\nfrom typing import List, Tuple\n\ndef find_k_product(test_list: List[Tuple[int]], K: int) -> int:\n    \"\"\"\n    Calculate the product of the elements at the k-th index of each tuple in the given list.\n\n    Parameters:\n    test_list (List[Tuple[int]]): A list of tuples containing integers.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the k-th index elements from each tuple.\n    \n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the list is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not test_list:\n        raise ValueError(\"The input list is empty.\")\n    \n    # Extract the k-th index elements from each tuple\n    k_elements = []\n    for tup in test_list:\n        if K >= len(tup):\n            raise IndexError(f\"Index {K} is out of bounds for tuple {tup}.\")\n        k_elements.append(tup[K])\n    \n    # Calculate the product of the k-th index elements\n    product = reduce(lambda x, y: x * y, k_elements)\n    \n    return product\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_data = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K = 1\n    try:\n        result = find_k_product(test_data, K)\n        print(f\"The product of the elements at index {K} is: {result}\")\n    except (IndexError, ValueError) as e:\n        print(e)", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list 'nums' repeated 'n' times using the map function.\n\n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n\n    Returns:\n    None\n    \"\"\"\n    # Validate input types\n    if not isinstance(nums, list):\n        raise ValueError(\"The first argument must be a list.\")\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The second argument must be a non-negative integer.\")\n\n    # Use map to repeat each element n times\n    repeated_elements = map(lambda x: [x] * n, nums)\n\n    # Flatten the list of lists and print the result\n    result = [item for sublist in repeated_elements for item in sublist]\n    print(result)\n\n# Example usage\nntimes_list([1, 2, 3], 3)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels in a given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Convert the input string to a list to allow modifications\n    str_list = list(str1)\n    \n    # Initialize two pointers for the start and end of the string\n    left, right = 0, len(str_list) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Move the left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # If both pointers are valid, swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(str_list)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    result = reverse_vowels(test_string)\n    print(f\"Original: {test_string} -> Reversed Vowels: {result}\")", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute factorial % p for all numbers from 0 to n.\"\"\"\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n    return fact\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p using precomputed factorials and modular inverses.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    # Base cases\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Precompute factorials and their inverses\n    fact = factorial_mod(n, p)\n    \n    # Calculate nCr % p\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    \n    # Use modular inverse to compute the result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 5\n    r = 2\n    p = 13\n    print(f\"{n}C{r} % {p} = {ncr_modp(n, r, p)}\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate Fibonacci numbers iteratively\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b  # b now holds the n-th Fibonacci number\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    test_cases = [0, 1, 2, 3, 4, 5, 10, 20]\n    for n in test_cases:\n        print(f\"The {n}-th Fibonacci number is: {fibonacci(n)}\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Output: \"\"\n    print(longest_common_prefix([\"\"]))                          # Output: \"\"\n    print(longest_common_prefix([\"a\"]))                         # Output: \"a\"\n    print(longest_common_prefix([\"ab\", \"a\"]))                   # Output: \"a\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n\n    Raises:\n    ValueError: If the input is not a valid square matrix.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return []\n\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n\n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n\n    # Step 2: Reverse each row of the transposed matrix\n    rotated = [row[::-1] for row in transposed]\n\n    return rotated\n\n# Example usage:\nif __name__ == \"__main__\":\n    original_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    \n    rotated_matrix = rotate_matrix(original_matrix)\n    print(\"Original Matrix:\")\n    for row in original_matrix:\n        print(row)\n    \n    print(\"\\nRotated Matrix:\")\n    for row in rotated_matrix:\n        print(row)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The GCD of the two numbers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14\n    print(gcd(101, 10)) # Output: 1\n    print(gcd(-48, 18)) # Output: 6 (testing with negative input)", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings to find the common prefix from\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the functionality\n    print(longest_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    print(longest_prefix([\"dog\", \"racecar\", \"car\"]))     # Output: \"\"\n    print(longest_prefix([\"\"]))                            # Output: \"\"\n    print(longest_prefix([\"a\"]))                           # Output: \"a\"\n    print(longest_prefix([\"ab\", \"a\"]))                    # Output: \"a\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input is not a list or if the list is empty.\n    TypeError: If the list contains non-integer elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n\n    for num in arr:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n        # Update max_val if the current number is greater\n        if num > max_val:\n            max_val = num\n\n    return max_val\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(max_value([3, 1, 4, 1, 5, 9, 2, 6, 5]))  # Output: 9\n        print(max_value([-1, -5, -3]))  # Output: -1\n        print(max_value([]))  # This will raise a ValueError\n    except (ValueError, TypeError) as e:\n        print(f\"Error: {e}\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings to find the common prefix from\n    :return: Longest common prefix string\n    \"\"\"\n    # Edge case: if the list is empty, return an empty string\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is reduced to an empty string, return it\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))    # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))      # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))                             # Output: \"\"\n    \n    # Test case 5: Single string\n    print(longest_common_prefix([\"single\"]))                     # Output: \"single\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Get the lengths of both strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common suffixes\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    longest_length = 0  # Variable to keep track of the longest length found\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1  # Increment the length\n                longest_length = max(longest_length, dp[i][j])  # Update longest length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return longest_length  # Return the length of the longest common substring\n\n# Example usage:\nif __name__ == \"__main__\":\n    str1 = \"abcdef\"\n    str2 = \"zcdemf\"\n    print(\"Length of Longest Common Substring:\", longest_common_substring(str1, str2))  # Output: 2 (\"cd\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings to find the common prefix from\n    :return: The longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n            # If the prefix is empty, there is no common prefix\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Example test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))     # Output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))      # Output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))                             # Output: \"\"\n    \n    # Test case 5: Single string\n    print(longest_common_prefix([\"single\"]))                     # Output: \"single\"", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n\n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n\n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Get the lengths of both strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n\n    # Create a 2D array to store lengths of longest common subsequence\n    # Initialize with zeros\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n\n    # Build the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest common subsequence will be in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Example usage\nif __name__ == \"__main__\":\n    s1 = \"AGGTAB\"\n    s2 = \"GXTXAYB\"\n    print(\"Length of LCS is\", longest_common_subsequence(s1, s2))  # Output: 4", "result": "passed", "passed": true}
