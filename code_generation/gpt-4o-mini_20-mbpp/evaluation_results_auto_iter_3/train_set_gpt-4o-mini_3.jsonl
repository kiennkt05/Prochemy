{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from the sale.\n\n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n\n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        # Calculate profit\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        # No profit\n        return None\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Profit scenario\n    print(profit_amount(100, 150))  # Expected output: 50\n\n    # Test case 2: No profit scenario\n    print(profit_amount(200, 150))  # Expected output: None\n\n    # Test case 3: Break-even scenario\n    print(profit_amount(100, 100))  # Expected output: None\n\n    # Test case 4: Profit with decimal values\n    print(profit_amount(99.99, 150.00))  # Expected output: 50.01\n\n    # Test case 5: Negative profit scenario\n    print(profit_amount(150, 100))  # Expected output: None"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n\n    Parameters:\n    text (str): The input string from which to remove special characters.\n\n    Returns:\n    str: A new string containing only alphanumeric characters.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    \n    return cleaned_text\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal string with special characters\n    print(remove_splchar(\"Hello, World! 123\"))  # Expected output: \"HelloWorld123\"\n    \n    # Test case 2: String with only special characters\n    print(remove_splchar(\"!@#$%^&*()\"))  # Expected output: \"\"\n    \n    # Test case 3: String with spaces and punctuation\n    print(remove_splchar(\"Python is fun!\"))  # Expected output: \"Pythonisfun\"\n    \n    # Test case 4: Empty string\n    print(remove_splchar(\"\"))  # Expected output: \"\"\n    \n    # Test case 5: Non-string input\n    try:\n        print(remove_splchar(123))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: \"Input must be a string.\""}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n\n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Test cases to validate the function\ndef test_reverse_vowels():\n    assert reverse_vowels(\"hello\") == \"holle\"\n    assert reverse_vowels(\"leetcode\") == \"leotcede\"\n    assert reverse_vowels(\"aA\") == \"Aa\"\n    assert reverse_vowels(\" \") == \" \"\n    assert reverse_vowels(\"1234\") == \"1234\"\n    assert reverse_vowels(\"racecar\") == \"racecar\"\n    assert reverse_vowels(\"a quick brown fox\") == \"e qick brawn fix\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_reverse_vowels()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist. \n          If a sublist is empty, it will not be included in the result.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            first_elements.append(sublist[0])  # Append the first element of the sublist\n    \n    return first_elements\n\n# Example usage:\n# print(Extract([[1, 2, 3], [4, 5], [], [6]]))  # Output: [1, 4, 6]"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(str1, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Use regex to remove all lowercase substrings\n    # The regex pattern '[a-z]+' matches one or more lowercase letters\n    result = re.sub(r'[a-z]+', '', str1)\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Normal string with lowercase\n    print(remove_lowercase(\"Hello World!\"))  # Expected output: \"H W!\"\n    \n    # Test case 2: String with only lowercase\n    print(remove_lowercase(\"hello\"))  # Expected output: \"\"\n    \n    # Test case 3: String with mixed case\n    print(remove_lowercase(\"Python is Fun!\"))  # Expected output: \"P F!\"\n    \n    # Test case 4: String with no lowercase\n    print(remove_lowercase(\"1234!@#$%^&*()\"))  # Expected output: \"1234!@#$%^&*()\"\n    \n    # Test case 5: Empty string\n    print(remove_lowercase(\"\"))  # Expected output: \"\"\n    \n    # Test case 6: Non-string input\n    try:\n        print(remove_lowercase(123))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: \"Input must be a string.\""}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n\n    Raises:\n    TypeError: If the first argument is not a tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"The first argument must be a tuple.\")\n    \n    # Use the count method of the tuple to count occurrences of the value\n    return tuplex.count(value)\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Count occurrences of an integer\n    print(count_tuplex((1, 2, 3, 1, 4, 1), 1))  # Output: 3\n\n    # Test case 2: Count occurrences of a string\n    print(count_tuplex((\"apple\", \"banana\", \"apple\", \"orange\"), \"apple\"))  # Output: 2\n\n    # Test case 3: Count occurrences of a float\n    print(count_tuplex((1.1, 2.2, 1.1, 3.3), 1.1))  # Output: 2\n\n    # Test case 4: Count occurrences of a non-existing value\n    print(count_tuplex((1, 2, 3), 4))  # Output: 0\n\n    # Test case 5: Invalid input type\n    try:\n        print(count_tuplex([1, 2, 3], 1))  # Should raise TypeError\n    except TypeError as e:\n        print(e)  # Output: The first argument must be a tuple."}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the elements at the Kth index in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the Kth index.\n    K (int): The index of the elements to multiply.\n\n    Returns:\n    int: The product of the elements at the Kth index in the tuples.\n    \n    Raises:\n    IndexError: If K is out of bounds for the tuples in the list.\n    ValueError: If the list is empty.\n    \"\"\"\n    if not test_list:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check if K is a valid index for the tuples\n    if any(len(tup) <= K for tup in test_list):\n        raise IndexError(f\"K={K} is out of bounds for the tuples in the list.\")\n    \n    product = 1\n    for tup in test_list:\n        product *= tup[K]\n    \n    return product\n\n# Example usage:\n# test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# K = 1\n# print(find_k_product(test_list, K))  # Output: 80 (2 * 5 * 8)"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n    z (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers (0, 1, 2, or 3).\n    \"\"\"\n    # Initialize a count for equal numbers\n    count = 0\n    \n    # Check for equality and increment the count accordingly\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3, otherwise return the count\n    return count if count < 3 else 3\n\n# Test cases to validate the function\ndef run_tests():\n    assert test_three_equal(1, 1, 1) == 3, \"Test case 1 failed\"\n    assert test_three_equal(1, 1, 2) == 2, \"Test case 2 failed\"\n    assert test_three_equal(1, 2, 1) == 2, \"Test case 3 failed\"\n    assert test_three_equal(1, 2, 3) == 0, \"Test case 4 failed\"\n    assert test_three_equal(5, 5, 5) == 3, \"Test case 5 failed\"\n    assert test_three_equal(0, 0, 1) == 2, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the tests\nrun_tests()"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print a list n times using the map function.\n    \n    Parameters:\n    nums (list): The list to be printed.\n    n (int): The number of times to print the list.\n    \"\"\"\n    # Create a function that returns the list\n    def repeat_list(x):\n        return nums\n    \n    # Use map to apply the repeat_list function n times\n    repeated_lists = list(map(repeat_list, range(n)))\n    \n    # Print each repeated list\n    for lst in repeated_lists:\n        print(lst)\n\n# Example usage\nntimes_list([1, 2, 3], 3)"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Take the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"\"]) == \"\"\n    assert longest_common_prefix([\"a\"]) == \"a\"\n    assert longest_common_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inters\"\n\n# Run the test cases\ntest_longest_common_prefix()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update to the next Fibonacci numbers\n    \n    return b\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(fibonacci(0))  # Expected output: 0\n    print(fibonacci(1))  # Expected output: 1\n    print(fibonacci(2))  # Expected output: 1\n    print(fibonacci(3))  # Expected output: 2\n    print(fibonacci(4))  # Expected output: 3\n    print(fibonacci(5))  # Expected output: 5\n    print(fibonacci(10)) # Expected output: 55\n    print(fibonacci(20)) # Expected output: 6765"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n    \"\"\"\n    # Ensure that a and b are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    # Make sure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b  # Replace a with b and b with the remainder of a divided by b\n\n    return a  # When b is 0, a contains the GCD\n\n# Testing the gcd function with various test cases\nif __name__ == \"__main__\":\n    test_cases = [\n        (48, 18),  # GCD is 6\n        (56, 98),  # GCD is 14\n        (101, 10), # GCD is 1 (prime and non-prime)\n        (0, 5),    # GCD is 5 (GCD of any number and 0 is the number itself)\n        (5, 0),    # GCD is 5\n        (0, 0),    # GCD is undefined, but we can return 0 or raise an error\n    ]\n\n    for a, b in test_cases:\n        try:\n            print(f\"gcd({a}, {b}) = {gcd(a, b)}\")\n        except ValueError as e:\n            print(f\"Error for gcd({a}, {b}): {e}\")"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be rotated.\n\n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a square matrix.\n    \"\"\"\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input must be a non-empty square matrix.\")\n\n    n = len(matrix)\n    \n    # Step 1: Transpose the matrix\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    \n    # Step 2: Reverse each row\n    rotated = [row[::-1] for row in transposed]\n    \n    return rotated\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], [3, 4]]\n    print(rotate_matrix(matrix1))  # Expected output: [[3, 1], [4, 2]]\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(rotate_matrix(matrix2))  # Expected output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\n    # Test case 3: 4x4 matrix\n    matrix3 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    print(rotate_matrix(matrix3))  # Expected output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n    # Test case 4: Invalid input (not a square matrix)\n    try:\n        matrix4 = [[1, 2, 3], [4, 5, 6]]\n        print(rotate_matrix(matrix4))  # Should raise ValueError\n    except ValueError as e:\n        print(e)  # Expected output: Input must be a non-empty square matrix."}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the reference\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Expected output: \"\"\n    \n    # Test case 5: Single string in the list\n    print(longest_common_prefix([\"single\"]))  # Expected output: \"single\""}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len1, len2 = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    \n    # Variable to store the length of the longest common substring\n    longest_length = 0\n    \n    # Build the dp array\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return longest_length\n\n# Test cases to validate the function\ndef test_longest_common_substring():\n    assert longest_common_substring(\"abcde\", \"abfce\") == 2  # \"ab\"\n    assert longest_common_substring(\"abcdef\", \"zcdemf\") == 2  # \"cd\"\n    assert longest_common_substring(\"xyz\", \"xyz\") == 3  # \"xyz\"\n    assert longest_common_substring(\"hello\", \"world\") == 1  # \"o\"\n    assert longest_common_substring(\"\", \"abc\") == 0  # Empty string\n    assert longest_common_substring(\"abc\", \"\") == 0  # Empty string\n    assert longest_common_substring(\"\", \"\") == 0  # Both empty strings\n\n# Run the test cases\ntest_longest_common_substring()\nprint(\"All test cases passed!\")"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test with a normal list\n    print(max_value([1, 2, 3, 4, 5]))  # Expected output: 5\n    print(max_value([-1, -2, -3, -4, -5]))  # Expected output: -1\n    print(max_value([5, 5, 5, 5]))  # Expected output: 5\n    print(max_value([10]))  # Expected output: 10\n\n    # Test with an empty list (should raise ValueError)\n    try:\n        print(max_value([]))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)  # Output the error message"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_prefix():\n    assert longest_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_prefix([\"\"]) == \"\"\n    assert longest_prefix([\"a\"]) == \"a\"\n    assert longest_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_prefix([]) == \"\"\n    assert longest_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inter\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Common prefix exists\n    print(longest_common_prefix([\"flower\", \"flow\", \"flight\"]))  # Expected output: \"fl\"\n    \n    # Test case 2: No common prefix\n    print(longest_common_prefix([\"dog\", \"racecar\", \"car\"]))  # Expected output: \"\"\n    \n    # Test case 3: All strings are the same\n    print(longest_common_prefix([\"test\", \"test\", \"test\"]))  # Expected output: \"test\"\n    \n    # Test case 4: Empty list\n    print(longest_common_prefix([]))  # Expected output: \"\"\n    \n    # Test case 5: Single string\n    print(longest_common_prefix([\"single\"]))  # Expected output: \"single\""}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    if r == 0 or r == n:\n        return 1  # nC0 and nCn are both 1\n\n    # Calculate n!, r!, and (n-r)!\n    n_fact = factorial_mod(n, p)\n    r_fact = factorial_mod(r, p)\n    n_r_fact = factorial_mod(n - r, p)\n\n    # Calculate nCr % p\n    nCr = (n_fact * mod_inverse(r_fact, p) % p * mod_inverse(n_r_fact, p) % p) % p\n    return nCr\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(ncr_modp(5, 2, 13))  # Output: 10\n    print(ncr_modp(10, 2, 1000))  # Output: 45\n    print(ncr_modp(10, 5, 1000))  # Output: 252\n    print(ncr_modp(0, 0, 1000))  # Output: 1\n    print(ncr_modp(5, 6, 13))  # Output: 0 (since r > n)"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    \n    # Build the dp array\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in dp[len(s1)][len(s2)]\n    return dp[len(s1)][len(s2)]\n\n# Test cases\nif __name__ == \"__main__\":\n    # Test case 1: Basic test\n    print(longest_common_subsequence(\"abcde\", \"ace\"))  # Output: 3 (\"ace\")\n    \n    # Test case 2: No common subsequence\n    print(longest_common_subsequence(\"abc\", \"def\"))    # Output: 0\n    \n    # Test case 3: Identical strings\n    print(longest_common_subsequence(\"abc\", \"abc\"))    # Output: 3 (\"abc\")\n    \n    # Test case 4: One string is a subsequence of the other\n    print(longest_common_subsequence(\"abc\", \"abcbc\"))  # Output: 3 (\"abc\")\n    \n    # Test case 5: Empty strings\n    print(longest_common_subsequence(\"\", \"\"))           # Output: 0\n    print(longest_common_subsequence(\"abc\", \"\"))        # Output: 0\n    print(longest_common_subsequence(\"\", \"abc\"))        # Output: 0"}
