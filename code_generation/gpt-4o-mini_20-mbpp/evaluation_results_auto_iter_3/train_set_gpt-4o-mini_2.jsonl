{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    return tuplex.count(value)"}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regex to substitute non-alphanumeric characters with an empty string\n    return re.sub(r'[^a-zA-Z0-9]', '', text)"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Regex pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Substitute lowercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    # Return the modified string, stripping any leading/trailing whitespace\n    return result.strip()"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist. If a sublist is empty, None is added.\n    \"\"\"\n    return [sublist[0] if sublist else None for sublist in lst]"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: The string with vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Build the result string\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal integers (0, 2, or 3)\n    \"\"\"\n    # Initialize a count variable\n    count = 0\n    \n    # Check for equality among the three integers\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    \n    # If all three are equal, we should return 3 instead of 3 pairs\n    if count == 3:\n        return 3\n    # If two are equal, return 2\n    elif count == 1:\n        return 2\n    # If none are equal, return 0\n    else:\n        return 0"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list `nums` n times using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The number of times to print each element.\n    \"\"\"\n    if n <= 0:\n        return  # If n is zero or negative, do nothing\n\n    # Create a function that repeats an element n times\n    def repeat_element(x):\n        return [x] * n\n\n    # Use map to apply the repeat_element function to each item in nums\n    repeated_elements = map(repeat_element, nums)\n\n    # Flatten the list of lists and print each element\n    for element in repeated_elements:\n        for item in element:\n            print(item)\n\n# Example usage\nntimes_list([1, 2, 3], 2)"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the elements at the Kth index in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples.\n    K (int): The index of the elements to multiply.\n    \n    Returns:\n    int: The product of the elements at the Kth index, or 0 if K is out of bounds for all tuples.\n    \"\"\"\n    product = 1\n    found = False\n    \n    for tup in test_list:\n        if K < len(tup):  # Check if Kth index exists in the tuple\n            product *= tup[K]\n            found = True\n            \n    return product if found else 0  # Return 0 if no valid Kth index was found"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from a sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return profit\n    else:\n        return None"}
{"task_id": "MBPP/402", "completion": "def power(x, y, p):\n    \"\"\"Computes (x^y) % p using iterative method.\"\"\"\n    res = 1  # Initialize result\n    x = x % p  # Update x if it is more than or equal to p\n    while y > 0:\n        # If y is odd, multiply x with result\n        if (y & 1) == 1:\n            res = (res * x) % p\n        # y must be even now\n        y = y >> 1  # y = y // 2\n        x = (x * x) % p  # Change x to x^2\n    return res\n\ndef ncr_modp(n, r, p):\n    \"\"\"Computes nCr % p.\"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n\n    # Precompute factorials and their modular inverses\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    # Using Fermat's Little Theorem to find modular inverses\n    inv_fact_r = power(fact[r], p - 2, p)\n    inv_fact_n_r = power(fact[n - r], p - 2, p)\n\n    # Calculate nCr % p\n    return (fact[n] * inv_fact_r % p * inv_fact_n_r % p) % p"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return (n >= 0).\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The GCD of the two integers\n    \"\"\"\n    a, b = abs(a), abs(b)  # Ensure both numbers are non-negative\n    while b != 0:\n        a, b = b, a % b  # Update a and b\n    return a  # When b is 0, a contains the GCD"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while string[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:-1]  # Shorten the prefix\n            \n        if not prefix:  # If prefix is empty, no need to check further\n            break\n    \n    return prefix"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    :param matrix: List of lists representing the 2D matrix to be rotated\n    :return: New matrix that is the original matrix rotated by 90 degrees clockwise\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the original matrix if it's empty or has no columns\n\n    # Get the number of rows and columns\n    rows, cols = len(matrix), len(matrix[0])\n    \n    # Create a new matrix for the rotated version\n    rotated = [[0] * rows for _ in range(cols)]\n    \n    for r in range(rows):\n        for c in range(cols):\n            rotated[c][rows - 1 - r] = matrix[r][c]\n    \n    return rotated"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int or None: The maximum integer in the list, or None if the list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        return None\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    :param s1: First string\n    :param s2: Second string\n    :return: Length of the longest common substring\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    longest_length = 0\n    # Initialize a 2D array with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_length = max(longest_length, dp[i][j])\n            else:\n                dp[i][j] = 0  # Reset if characters do not match\n\n    return longest_length"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:\n                return \"\"  # No common prefix found\n    \n    return prefix"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence.\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the dp array from the bottom up\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence will be in dp[m][n]\n    return dp[m][n]"}
