{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n\n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n    str: The modified string with all lowercase letters removed.\n    \"\"\"\n    # Use regex to replace all lowercase letters with an empty string\n    modified_str = re.sub(r'[a-z]', '', str1)\n    return modified_str\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello World! This is a Test String.\"\n    result = remove_lowercase(test_string)\n    print(result)  # Output: \"H W! T T S.\"", "result": "passed", "passed": true}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount based on actual cost and sale amount.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float or None: The profit amount if sale_amount > actual_cost, otherwise None.\n    \n    Raises:\n    ValueError: If actual_cost or sale_amount are not numeric.\n    \"\"\"\n    # Input validation\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numeric values.\")\n    \n    # Calculate profit\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Test cases\ndef test_profit_amount():\n    assert profit_amount(100, 150) == 50  # Profit case\n    assert profit_amount(200, 150) is None  # No profit case\n    assert profit_amount(100, 100) is None  # No profit case\n    assert profit_amount(0, 100) == 100  # Profit case with zero cost\n    assert profit_amount(100, 0) is None  # No profit case with zero sale\n    try:\n        profit_amount(\"100\", 150)  # Invalid input case\n    except ValueError as e:\n        assert str(e) == \"Both actual_cost and sale_amount must be numeric values.\"\n    \n    print(\"All tests passed.\")\n\n# Run tests\ntest_profit_amount()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    int: The count of equal integers among the three inputs\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        raise ValueError(\"All inputs must be integers.\")\n    \n    # Count the number of equal integers\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    \n    # If all three are equal, we should return 3, not 2\n    if equal_count == 3:\n        return 3\n    \n    # Return the count of equal pairs (0, 1, or 2)\n    return equal_count\n\n# Test cases\ndef run_tests():\n    test_cases = [\n        (1, 1, 1),  # All equal\n        (1, 2, 1),  # Two equal\n        (1, 2, 3),  # None equal\n        (0, 0, 0),  # All equal (zero)\n        (-1, -1, -1),  # All equal (negative)\n        (5, 5, 6),  # Two equal\n        (7, 8, 9)   # None equal\n    ]\n    \n    for x, y, z in test_cases:\n        result = test_three_equal(x, y, z)\n        print(f\"test_three_equal({x}, {y}, {z}) = {result}\")\n\n# Run the tests\nrun_tests()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the number of times a specific value appears in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        raise ValueError(\"The first argument must be a tuple.\")\n    \n    # Count occurrences of the value in the tuple\n    count = tuplex.count(value)\n    \n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    example_tuplex = (1, 2, 3, 2, 4, 2)\n    value_to_count = 2\n    print(f\"The value {value_to_count} appears {count_tuplex(example_tuplex, value_to_count)} times in the tuple.\")", "result": "passed", "passed": true}
{"task_id": "MBPP/173", "completion": "import re\n\ndef remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"Hello, World! 123.\"\n    result = remove_splchar(test_string)\n    print(result)  # Output: HelloWorld123", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist. If a sublist is empty, None is added.\n    \"\"\"\n    first_elements = []\n    \n    for sublist in lst:\n        if sublist:  # Check if the sublist is not empty\n            first_elements.append(sublist[0])  # Append the first element\n        else:\n            first_elements.append(None)  # Append None for empty sublists\n    \n    return first_elements\n\n# Example usage:\n# result = Extract([[1, 2, 3], [4, 5], [], [6]])\n# print(result)  # Output: [1, 4, None, 6]", "result": "passed", "passed": true}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Find the product of the K-th index elements in the given list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the K-th index.\n    K (int): The index of the elements to be multiplied.\n\n    Returns:\n    int: The product of the K-th index elements, or None if the input is invalid.\n    \"\"\"\n    # Check if the list is empty\n    if not test_list:\n        print(\"The list is empty.\")\n        return None\n\n    # Initialize product\n    product = 1\n    valid_index = True\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if K is a valid index for the current tuple\n        if K < 0 or K >= len(tup):\n            print(f\"Index {K} is out of bounds for tuple {tup}.\")\n            valid_index = False\n            break\n        # Multiply the K-th element to the product\n        product *= tup[K]\n\n    # Return the product if all indices were valid\n    return product if valid_index else None\n\n# Test cases\ndef test_find_k_product():\n    assert find_k_product([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 2 * 5 * 8\n    assert find_k_product([(1, 2), (3, 4)], 0) == 1 * 3\n    assert find_k_product([(1, 2), (3, 4)], 2) is None  # Out of bounds\n    assert find_k_product([], 0) is None  # Empty list\n    assert find_k_product([(1, 2, 3)], 1) == 2  # Single tuple\n\n# Run tests\ntest_find_k_product()\nprint(\"All tests passed.\")", "result": "passed", "passed": true}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string from which vowels will be reversed.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Extract vowels from the string\n    vowel_list = [char for char in str1 if char in vowels]\n    \n    # Reverse the list of vowels\n    vowel_list.reverse()\n    \n    # Iterator for the reversed vowels\n    vowel_iter = iter(vowel_list)\n    \n    # Reconstruct the string with reversed vowels\n    result = ''.join(next(vowel_iter) if char in vowels else char for char in str1)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    test_string = \"hello world\"\n    print(reverse_vowels(test_string))  # Output: \"holle werld\"", "result": "passed", "passed": true}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list 'nums' repeated 'n' times using the map function.\n\n    Parameters:\n    nums (list): A list of elements to be repeated.\n    n (int): The number of times to repeat each element.\n    \"\"\"\n    # Define a function that repeats an element n times\n    def repeat_element(element):\n        return str(element) * n  # Convert to string and repeat\n\n    # Use map to apply the repeat_element function to each item in nums\n    repeated_elements = map(repeat_element, nums)\n\n    # Print each repeated element\n    for item in repeated_elements:\n        print(item)\n\n# Example usage\nntimes_list(['a', 'b', 'c'], 3)", "result": "failed: ", "passed": false}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p using iterative approach.\"\"\"\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute nCr % p.\n    \n    Parameters:\n    n (int): The total number of items.\n    r (int): The number of items to choose.\n    p (int): The modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0  # nCr is 0 if r > n\n    \n    # Calculate n! % p\n    num = factorial_mod(n, p)\n    \n    # Calculate r! % p\n    denom_r = factorial_mod(r, p)\n    \n    # Calculate (n-r)! % p\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n    \n    return (num * denom_inv) % p\n\n# Example usage\nif __name__ == \"__main__\":\n    n = 5\n    r = 2\n    p = 13\n    print(f\"{n}C{r} % {p} = {ncr_modp(n, r, p)}\")", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to return. Must be a non-negative integer.\n    \n    Returns:\n    int: The n-th Fibonacci number.\n    \n    Raises:\n    ValueError: If n is a negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Using an iterative approach to calculate the n-th Fibonacci number\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the implementation\ndef test_fibonacci():\n    assert fibonacci(0) == 0, \"Test case 0 failed\"\n    assert fibonacci(1) == 1, \"Test case 1 failed\"\n    assert fibonacci(2) == 1, \"Test case 2 failed\"\n    assert fibonacci(3) == 2, \"Test case 3 failed\"\n    assert fibonacci(4) == 3, \"Test case 4 failed\"\n    assert fibonacci(5) == 5, \"Test case 5 failed\"\n    assert fibonacci(6) == 8, \"Test case 6 failed\"\n    assert fibonacci(7) == 13, \"Test case 7 failed\"\n    assert fibonacci(8) == 21, \"Test case 8 failed\"\n    assert fibonacci(9) == 34, \"Test case 9 failed\"\n    assert fibonacci(10) == 55, \"Test case 10 failed\"\n    \n    try:\n        fibonacci(-1)\n    except ValueError:\n        pass  # Expected behavior\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_fibonacci()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the reference for comparison\n    prefix = strs[0]\n    \n    # Iterate through the characters of the prefix\n    for i in range(len(prefix)):\n        # Check the current character against all strings\n        for string in strs[1:]:\n            # If the current index is out of bounds or characters do not match\n            if i >= len(string) or string[i] != prefix[i]:\n                # Return the prefix found so far\n                return prefix[:i]\n    \n    # If we complete the loop, the entire prefix is common\n    return prefix\n\n# Test cases to validate the function\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"\"]) == \"\"\n    assert longest_common_prefix([\"a\"]) == \"a\"\n    assert longest_common_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inters\"\n\n# Run the test cases\ntest_longest_common_prefix()\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"\"]) == \"\"\n    assert longest_common_prefix([\"a\"]) == \"a\"\n    assert longest_common_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inters\"\n\n# Run the test cases\ntest_longest_common_prefix()\nprint(\"All test cases passed!\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of the two integers.\n\n    Raises:\n    ValueError: If either a or b is not an integer.\n    \"\"\"\n    # Input validation\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Ensure a and b are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    print(gcd(48, 18))  # Output: 6\n    print(gcd(56, 98))  # Output: 14", "result": "passed", "passed": true}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the reference\n    prefix = strs[0]\n    \n    # Iterate through the rest of the strings\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            # Shorten the prefix by one character\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_common_prefix():\n    assert longest_common_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_common_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_common_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inters\"\n    assert longest_common_prefix([\"throne\", \"dungeon\"]) == \"\"\n    assert longest_common_prefix([\"cheese\", \"cheddar\", \"chocolate\"]) == \"ch\"\n    assert longest_common_prefix([]) == \"\"\n    assert longest_common_prefix([\"single\"]) == \"single\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_common_prefix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    # Check if the input list is empty\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the longest common prefix\n    prefix = strs[0]\n    \n    # Iterate through the strings in the list\n    for string in strs[1:]:\n        # Update the prefix by comparing with each string\n        while string[:len(prefix)] != prefix and prefix:\n            # Shorten the prefix by one character from the end\n            prefix = prefix[:-1]\n        \n        # If the prefix becomes empty, return immediately\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases to validate the function\ndef test_longest_prefix():\n    assert longest_prefix([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n    assert longest_prefix([\"dog\", \"racecar\", \"car\"]) == \"\"\n    assert longest_prefix([\"\"]) == \"\"\n    assert longest_prefix([\"a\"]) == \"a\"\n    assert longest_prefix([\"ab\", \"a\"]) == \"a\"\n    assert longest_prefix([]) == \"\"\n    assert longest_prefix([\"interspecies\", \"interstellar\", \"interstate\"]) == \"inter\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_longest_prefix()", "result": "failed: ", "passed": false}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-integer values.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(arr) == 0:\n        raise ValueError(\"The list is empty.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the list must be integers.\")\n\n    # Finding the maximum value\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n\n    return max_val", "result": "passed", "passed": true}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): The input matrix to be rotated.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \n    Raises:\n    ValueError: If the input is not a valid matrix.\n    \"\"\"\n    if not matrix or not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list (matrix).\")\n    \n    # Check if all rows are of the same length\n    row_length = len(matrix[0])\n    if any(len(row) != row_length for row in matrix):\n        raise ValueError(\"All rows in the matrix must have the same length.\")\n    \n    # Get the dimensions of the original matrix\n    num_rows = len(matrix)\n    num_cols = row_length\n    \n    # Create a new matrix for the rotated version\n    rotated_matrix = [[0] * num_rows for _ in range(num_cols)]\n    \n    # Fill the rotated matrix\n    for i in range(num_rows):\n        for j in range(num_cols):\n            rotated_matrix[j][num_rows - 1 - i] = matrix[i][j]\n    \n    return rotated_matrix\n\n# Test cases\ndef test_rotate_matrix():\n    # Test case 1: 2x2 matrix\n    matrix1 = [[1, 2], [3, 4]]\n    expected1 = [[3, 1], [4, 2]]\n    assert rotate_matrix(matrix1) == expected1\n\n    # Test case 2: 3x3 matrix\n    matrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected2 = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    assert rotate_matrix(matrix2) == expected2\n\n    # Test case 3: 1x3 matrix\n    matrix3 = [[1, 2, 3]]\n    expected3 = [[1], [2], [3]]\n    assert rotate_matrix(matrix3) == expected3\n\n    # Test case 4: Empty matrix\n    try:\n        rotate_matrix([])\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-empty 2D list (matrix).\"\n\n    # Test case 5: Non-rectangular matrix\n    try:\n        rotate_matrix([[1, 2], [3]])\n    except ValueError as e:\n        assert str(e) == \"All rows in the matrix must have the same length.\"\n\n    print(\"All test cases passed!\")\n\n# Run the tests\ntest_rotate_matrix()", "result": "passed", "passed": true}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common suffixes\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Variable to store the length of the longest common substring\n    max_length = 0\n    \n    # Fill the dp table\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])  # Update max_length\n            else:\n                dp[i][j] = 0  # No common substring ends here\n    \n    return max_length\n\n# Example usage\nif __name__ == \"__main__\":\n    s1 = \"abcdef\"\n    s2 = \"zcdemf\"\n    print(\"Length of Longest Common Substring:\", longest_common_substring(s1, s2))  # Output: 2 (\"cd\")", "result": "passed", "passed": true}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    # Lengths of the input strings\n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]\n    \n    # Fill the dp array\n    for i in range(1, len_s1 + 1):\n        for j in range(1, len_s2 + 1):\n            if s1[i - 1] == s2[j - 1]:  # Characters match\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:  # Characters do not match\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of the longest common subsequence is in the bottom-right cell\n    return dp[len_s1][len_s2]\n\n# Example usage\nif __name__ == \"__main__\":\n    s1 = \"AGGTAB\"\n    s2 = \"GXTXAYB\"\n    print(\"Length of LCS is\", longest_common_subsequence(s1, s2))  # Output: 4", "result": "passed", "passed": true}
