{"task_id": "MBPP/929", "completion": "def count_tuplex(tuplex, value):\n    \"\"\"\n    Count the occurrences of a specified value in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple in which to count occurrences.\n    value: The value to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the value in the tuple.\n    \"\"\"\n    count = 0\n    for item in tuplex:\n        if item == value:\n            count += 1\n    return count"}
{"task_id": "MBPP/495", "completion": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove all lowercase substrings from the given string using regex.\n    \n    Parameters:\n    str1 (str): The input string from which lowercase substrings will be removed.\n    \n    Returns:\n    str: The modified string with all lowercase substrings removed.\n    \"\"\"\n    # Use regex to find and remove all lowercase substrings\n    modified_string = re.sub(r'\\b[a-z]+\\b', '', str1)\n    # Return the modified string, stripping any leading/trailing whitespace\n    return modified_string.strip()"}
{"task_id": "MBPP/173", "completion": "def remove_splchar(text):\n    \"\"\"\n    Remove everything except alphanumeric characters from a string.\n    \n    Parameters:\n    text (str): The input string from which to remove special characters.\n    \n    Returns:\n    str: A string containing only alphanumeric characters.\n    \"\"\"\n    # Using a list comprehension to filter out non-alphanumeric characters\n    return ''.join(char for char in text if char.isalnum())\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_splchar(\"Hello, World! 123\"))  # Output: HelloWorld123\n    print(remove_splchar(\"Special@#$%^&*()\"))    # Output: (empty string)\n    print(remove_splchar(\"\"))                      # Output: (empty string)"}
{"task_id": "MBPP/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in the given list of lists.\n    \n    Parameters:\n    lst (list of list): A list containing sublists from which to extract the first elements.\n    \n    Returns:\n    list: A list containing the first elements of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # List comprehension to extract first elements\n\n# Example usage:\n# result = Extract([[1, 2], [3, 4], [], [5]])\n# print(result)  # Output: [1, 3, 5]"}
{"task_id": "MBPP/865", "completion": "def ntimes_list(nums, n):\n    \"\"\"\n    Print each element of the list `nums` n times using the map function.\n    \n    Parameters:\n    nums (list): A list of numbers to be printed.\n    n (int): The number of times to print each element.\n    \"\"\"\n    if n <= 0:\n        return  # If n is 0 or negative, do not print anything\n    \n    # Create a function that repeats an element n times\n    def repeat_element(x):\n        return [x] * n\n    \n    # Use map to apply the repeat_element function to each item in nums\n    repeated_elements = map(repeat_element, nums)\n    \n    # Flatten the list of lists and print each element\n    for element in repeated_elements:\n        for item in element:\n            print(item)\n\n# Example usage:\n# ntimes_list([1, 2, 3], 2)"}
{"task_id": "MBPP/801", "completion": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    int: The count of equal numbers (0, 2, or 3)\n    \"\"\"\n    # Initialize a set to find unique numbers\n    unique_numbers = {x, y, z}\n    \n    # Count the number of unique numbers\n    unique_count = len(unique_numbers)\n    \n    # Determine the count of equal numbers based on unique count\n    if unique_count == 1:\n        return 3  # All three numbers are equal\n    elif unique_count == 2:\n        return 2  # Two numbers are equal\n    else:\n        return 0  # All numbers are different"}
{"task_id": "MBPP/131", "completion": "def reverse_vowels(str1):\n    \"\"\"\n    Reverse only the vowels of a given string.\n    \n    Parameters:\n    str1 (str): The input string to process.\n    \n    Returns:\n    str: A new string with the vowels reversed.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)  # Convert the string to a list for mutability\n    left, right = 0, len(str_list) - 1  # Two pointers\n\n    while left < right:\n        # Move left pointer to the next vowel\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        # Move right pointer to the previous vowel\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        \n        # Swap the vowels\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)  # Convert the list back to a string"}
{"task_id": "MBPP/402", "completion": "def factorial_mod(n, p):\n    \"\"\"Compute n! % p for n >= 0.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result\n\ndef mod_inverse(a, p):\n    \"\"\"Compute the modular inverse of a under modulo p using Fermat's Little Theorem.\"\"\"\n    return pow(a, p - 2, p)\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of nCr % p.\n    \n    Parameters:\n    n (int): Total number of items.\n    r (int): Number of items to choose.\n    p (int): Modulus.\n    \n    Returns:\n    int: The value of nCr % p.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Calculate n! % p\n    num = factorial_mod(n, p)\n    \n    # Calculate r! % p\n    denom_r = factorial_mod(r, p)\n    \n    # Calculate (n-r)! % p\n    denom_n_r = factorial_mod(n - r, p)\n    \n    # Calculate nCr % p\n    denom = (denom_r * denom_n_r) % p\n    denom_inv = mod_inverse(denom, p)\n    \n    return (num * denom_inv) % p"}
{"task_id": "MBPP/4_1", "completion": "def fibonacci(n):\n    \"\"\"\n    Return the n-th Fibonacci number.\n    \n    Parameters:\n    n (int): The position in the Fibonacci sequence (0-indexed).\n    \n    Returns:\n    int: The n-th Fibonacci number, or None for invalid input.\n    \"\"\"\n    if n < 0:\n        return None  # Handle negative input\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "MBPP/4_3", "completion": "def gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The GCD of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # Return the absolute value to ensure GCD is non-negative"}
{"task_id": "MBPP/954", "completion": "def profit_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculate the profit amount from a sale.\n    \n    Parameters:\n    actual_cost (float): The cost price of the item.\n    sale_amount (float): The selling price of the item.\n    \n    Returns:\n    float: The profit amount if there is a profit, otherwise None.\n    \"\"\"\n    if not isinstance(actual_cost, (int, float)) or not isinstance(sale_amount, (int, float)):\n        raise ValueError(\"Both actual_cost and sale_amount must be numeric values.\")\n    \n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None"}
{"task_id": "MBPP/645", "completion": "def find_k_product(test_list, K):\n    \"\"\"\n    Calculate the product of the Kth index elements in the given list of tuples.\n    \n    Parameters:\n    test_list (list of tuples): A list containing tuples from which to extract the Kth index.\n    K (int): The index of the elements to multiply.\n    \n    Returns:\n    int: The product of the Kth index elements, or 1 if no valid elements are found.\n    \"\"\"\n    product = 1\n    found_valid = False\n    \n    for tup in test_list:\n        if K < len(tup):  # Check if Kth index exists in the tuple\n            product *= tup[K]\n            found_valid = True\n            \n    return product if found_valid else 1\n\n# Example usage:\n# print(find_k_product([(1, 2, 3), (4, 5, 6), (7, 8)], 1))  # Output: 80 (2 * 5 * 8)"}
{"task_id": "MBPP/4_6", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string among an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the list\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix"}
{"task_id": "MBPP/4_5", "completion": "def longest_common_substring(s1, s2):\n    \"\"\"\n    Find the length of the longest common substring between two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common substring.\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    # Create a 2D array to store lengths of longest common suffixes\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    longest = 0\n\n    # Build the dp array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest = max(longest, dp[i][j])\n            else:\n                dp[i][j] = 0  # No common substring ends here\n\n    return longest"}
{"task_id": "MBPP/4_8", "completion": "def longest_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the array\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix becomes empty\n                return \"\"\n    \n    return prefix"}
{"task_id": "MBPP/4_2", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strs[0]\n    \n    # Compare the prefix with each string in the array\n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix"}
{"task_id": "MBPP/4_9", "completion": "def longest_common_prefix(strs):\n    \"\"\"\n    Find the longest common prefix string amongst an array of strings.\n    \n    :param strs: List of strings\n    :return: Longest common prefix string\n    \"\"\"\n    if not strs:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strs[0]\n    \n    for string in strs[1:]:\n        # Reduce the prefix until it matches the start of the current string\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]  # Remove the last character\n            if not prefix:  # If prefix is empty, return immediately\n                return \"\"\n    \n    return prefix"}
{"task_id": "MBPP/4_7", "completion": "def max_value(arr):\n    \"\"\"\n    Find the maximum value in a list of integers.\n\n    Parameters:\n    arr (list of int): A list of integers.\n\n    Returns:\n    int: The maximum integer in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not arr:  # Check if the list is empty\n        raise ValueError(\"The input list is empty.\")\n    \n    max_val = arr[0]  # Initialize max_val with the first element\n    for num in arr:  # Iterate through the list\n        if num > max_val:  # Update max_val if a larger number is found\n            max_val = num\n            \n    return max_val  # Return the maximum value found"}
{"task_id": "MBPP/4_4", "completion": "def rotate_matrix(matrix):\n    \"\"\"\n    Rotate a given matrix by 90 degrees clockwise.\n    \n    Args:\n    matrix (list of list of int): The matrix to rotate.\n    \n    Returns:\n    list of list of int: The rotated matrix.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return matrix  # Return the empty matrix if input is empty\n\n    # Get the number of rows and columns\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    # Create a new matrix for the rotated version\n    rotated = [[0] * n for _ in range(m)]\n    \n    for i in range(n):\n        for j in range(m):\n            rotated[j][n - 1 - i] = matrix[i][j]\n    \n    return rotated"}
{"task_id": "MBPP/4_0", "completion": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    Find the length of the longest common subsequence of two strings.\n    \n    Parameters:\n    s1 (str): The first string.\n    s2 (str): The second string.\n    \n    Returns:\n    int: The length of the longest common subsequence.\n    \"\"\"\n    m, n = len(s1), len(s2)\n    \n    # Create a 2D array to store lengths of longest common subsequence.\n    LCS = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Build the LCS table in a bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # The length of the longest common subsequence is in LCS[m][n]\n    return LCS[m][n]"}
